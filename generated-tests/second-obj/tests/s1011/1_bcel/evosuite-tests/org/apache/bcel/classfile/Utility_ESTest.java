/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:42:47 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Utility.getSignature("land");
      assertEquals("Lland;", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[0] = "iaload";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("iaload", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.convertString("");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".y*rt5|!K)", "", ".y*rt5|!K)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .y*rt5|!K)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("X([fgay?Z{Lj+e8I");
      assertEquals("X([fgay?Z{Lj+e8I", string1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName(" arg", true);
      assertEquals(" arg", string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `checkcast'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        constantPool0.getConstantString((byte) (-94), (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -94. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.methodSignatureReturnType("Z", true);
      int int0 = Pattern.UNICODE_CASE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((-1849));
      try { 
        Utility.typeOfMethodSignature("Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "The";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("-\"y!ef}Bsy'@pU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-\"y!ef}Bsy'@pU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("&_=4VCH~]nYLu~", true);
      assertEquals("&_=4VCH~]nYLu~", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("f8 00", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.signatureToString("Synthetic", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isSet(2247, 2247);
      String string0 = "s4";
      try { 
        Utility.typeOfMethodSignature("s4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.compactClassName("int");
      assertEquals("int", string0);
      
      String string1 = Utility.replace("int", "int", ", offset=");
      assertEquals(", offset=", string1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.format((-625), (-2330), false, 'W');
      assertEquals("-625", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface((-2995));
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(2934);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isSet((byte)33, (byte)124);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.convertString("B[zANfS\"p");
      boolean boolean0 = false;
      String string0 = Utility.methodSignatureReturnType("B[zANfS\"p", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[2];
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, constantPool1, boolean0);
      try { 
        Utility.methodSignatureReturnType(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.convertString("`.Zw>'1ir<n");
      assertEquals("`.Zw>\\'1ir<n", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.classOrInterface((-21));
      boolean boolean0 = Utility.isJavaIdentifierPart('\u001B');
      boolean boolean1 = Utility.isSet(9, (-21));
      assertTrue(boolean1 == boolean0);
      
      String string2 = Utility.replace("`.Zw>'1ir<n", "`.Zw>'1ir<n", "interface");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "F";
      Utility.compactClassName("F", "F", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("\"o2@Qj8<u8BN<QK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"o2@Qj8<u8BN<QK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[25];
      stringArray0[0] = "\t<";
      stringArray0[11] = "\t<";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[4] = "synchronized";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\t<", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.compactClassName("int");
      assertEquals("int", string0);
      
      String string1 = Utility.getSignature(", offset=");
      assertEquals("L,;", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface(226);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("\nAnnoBtation(s):\n");
      assertEquals("LAnnoBtation(s):;", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 29, 12, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.isJavaIdentifierPart('k');
      try { 
        Utility.methodSignatureReturnType("s4`l5l~P;\"Tb~R", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `s4`l5l~P;\"Tb~R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "invokevirtual";
      Utility.isJavaIdentifierPart('|');
      byte[] byteArray0 = new byte[5];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.replace("The", "The", "The");
      assertEquals("The", string0);
      
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        Utility.typeOfSignature("`D1xYZZx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `D1xYZZx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.accessToString((-1048), true);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.methodTypeToSignature("long", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("long", "long", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      int int0 = Pattern.LITERAL;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("(^VJq9s6|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^VJq9s6|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(70, (byte)41);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfSignature("fload\t\t%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload\t\t%0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("double");
      assertEquals("double", string0);
      
      String string1 = Utility.replace("", " (", "fIE$");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.signatureToString("Invalid signature: `");
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-53), 93);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(93, 39);
      Utility.isSet(512, 34);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.compactClassName("V", "3~UsI", true);
      Utility.convertString("V");
      int int0 = Pattern.UNICODE_CASE;
      Utility.signatureToString("V", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\"ayj4kDb0Fia2FW*");
      Constant[] constantArray0 = new Constant[10];
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      try { 
        Utility.decode("xTK4r$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode("]Q_?#(*MII$fSJ}q4K", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-80);
      Utility.encode(byteArray0, false);
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      try { 
        Utility.decode("$A$A$A$b0$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)64;
      Utility.classOrInterface(39);
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)64, (-232));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.getSignature("class");
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.compactClassName("RDEJR~", true);
      assertEquals("RDEJR~", string0);
      
      int int0 = Utility.clearBit(2431, 168);
      assertEquals(2175, int0);
      
      String string1 = Utility.getSignature("ZyXL6Z");
      assertEquals("LZyXL6Z;", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.searchOpcode("5;P+M3SDz^xq:rk}l:");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5;P+M3SDz^xq:rk}l:";
      stringArray0[1] = "5;P+M3SDz^xq:rk}l:";
      stringArray0[2] = "5;P+M3SDz^xq:rk}l:";
      stringArray0[3] = "5;P+M3SDz^xq:rk}l:";
      stringArray0[4] = "5;P+M3SDz^xq:rk}l:";
      stringArray0[5] = "-[E5i=BL";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("5;P+M3SDz^xq:rk}l:", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[E5i=BL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      try { 
        Utility.methodSignatureReturnType("Oxf~6[=jZ_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oxf~6[=jZ_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte) (-122));
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2", "byte", ".@T,v?.oM(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-94);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)1);
      ConstantClass constantClass0 = new ConstantClass((-2223));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)28;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-648), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, 86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1823), (-1823));
      Utility.codeToString(byteArray0, (ConstantPool) null, (-850), 65, false);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("Q^PIu6icZ2'$b", "Q^PIu6icZ2'$b", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[3] = (byte)7;
      String string1 = Utility.classOrInterface((byte)74);
      assertEquals("class", string1);
      
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dstore_3", string2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-94);
      byteArray0[2] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-864), 249);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      String string0 = Utility.convertString("freturn");
      assertEquals("freturn", string0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2857), (int) (byte)82, false);
      assertEquals("0:    dastore\n", string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0, false, true);
      assertEquals("\"CONSTANT_NameAndType[12](name_index = -864, signature_index = 249)\", null, null", string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("iflt\t\t#23", string0);
      
      String string1 = Utility.getSignature("9CUVd");
      assertEquals("L9CUVd;", string1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?W,G-g\"}");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "?W,G-g\"}";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "m~\\atMFM+ImOi}GJb$P";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-125), 79);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(59, 249);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(230, 666);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantNameAndType1;
      constantArray0[1] = (Constant) constantNameAndType1;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-32768), (-1599));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.replace("\"o2@Qj8<u8B<QKT", "\"o2@Qj8<u8B<QKT", "\"o2@Qj8<u8B<QKT");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y:X%!AMQG", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y:X%!AMQG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-990), 3);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)0, (byte)0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.getSignature("lxor");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lxor", "Llxor;", "lxor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lxor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.convertString("*-Mc");
      Utility.getSignature("$#v%");
      Utility.classOrInterface((byte) (-113));
      Utility.signatureToString("BU5*&Me");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$#v%", "interface", "java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $#v%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.isJavaIdentifierPart('p');
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(123, 2680);
      Utility.typeOfSignature("Total of ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantFloat0.clone();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      ConstantFloat constantFloat1 = new ConstantFloat((byte) (-74));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), (-994));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Methodref' at index 0 and got CONSTANT_Float[4](bytes = 0.0)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool3 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool3);
      assertEquals("f2d", string0);
      
      String string1 = Utility.getSignature("V");
      assertEquals("LV;", string1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.methodSignatureReturnType("Z", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        constantPool0.getConstantString((byte) (-82), (byte) (-82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -82. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Utility.format(219, 90, false, '#');
      assertEquals("#######################################################################################219", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)80;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte)80;
      byteArray1[5] = (byte)80;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Utility.signatureToString("Djz8Nquo-Xd?J");
      assertEquals("double", string0);
      
      String string1 = Utility.methodSignatureReturnType("C#@[b4+;", false);
      assertEquals("char", string1);
      
      String string2 = Utility.replace("C#@[b4+;", "C#@[b4+;", "Djz8Nquo-Xd?J");
      assertEquals("Djz8Nquo-Xd?J", string2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(80, (byte) (-8));
      ConstantFieldref constantFieldref0 = new ConstantFieldref(80, 156);
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.typeOfSignature("Invalid method signature: ");
      try { 
        Utility.methodSignatureReturnType("9L.rUA$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9L.rUA$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(12, 29);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(61, 12);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool1);
      assertEquals("dup_x2", string0);
      
      String string1 = Utility.getSignature("dup_x2");
      assertEquals("Ldup_x2;", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("5b 00 00", string2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-103), 181);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-274);
      Utility.setBit((-274), (-274));
      String string0 = "";
      Utility.searchOpcode("");
      Utility.classOrInterface(573);
      try { 
        Utility.methodSignatureReturnType("Kq}^_HC(5}(mK#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kq}^_HC(5}(mK#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7");
      objectArray0[1] = object0;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.getSignature("7");
      Utility.signatureToString("L7;");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(816, (-3387));
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q^PIu6icZ2'$b", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q^PIu6icZ2'$b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.methodSignatureReturnType("Z", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(367, (-32768));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      ConstantPool constantPool4 = constantPool2.copy();
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)95;
      byteArray1[5] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = Utility.getSignature("hu.060");
      assertEquals("Lhu/060;", string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool4, true);
      assertEquals("swap", string1);
      
      String string2 = Utility.format(48, (-1008), true, 'D');
      assertEquals("48", string2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.searchOpcode("lookupswitch");
      Utility.classOrInterface((short)171);
      // Undeclared exception!
      try { 
        Utility.signatureToString("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("Z^F]h");
      assertEquals((byte)4, byte0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-377), 10);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.getSignature("Z^F]h");
      assertEquals("LZ^F]h;", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("*-Mc");
      Utility.typeOfSignature("L*-Mc;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("*-Mc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*-Mc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)40;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-19), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)31;
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("<init>");
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      String string1 = "Invalid type: ";
      Utility.signatureToString("Invalid type: ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("00 00 1f 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00 1f 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2664), (-2664));
      assertTrue(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[3] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpge\t\t#-24064", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-32768), (-32768));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantNameAndType0;
      try { 
        Utility.typeOfSignature("\"o2@Qj8<u8B<QKT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"o2@Qj8<u8B<QKT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      short short0 = Constants.GETSTATIC2_QUICK;
      Utility.typeOfSignature("Double");
      MockFile mockFile0 = new MockFile("wZ", "Double");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("void", "void", "invokeinterface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((byte)48);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)48);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      constantPool0.copy();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool0.copy();
      constantPool2.toString();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      ConstantPool constantPool3 = null;
      try {
        constantPool3 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[2] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "VQ0f";
      Utility.convertString("VQ0f");
      Utility.typeOfSignature("VQ0f");
      try { 
        Utility.typeOfMethodSignature("lstore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedShort();
      Utility.codeToString(byteSequence1, constantPool1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aconst_null", "-w", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aconst_null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.signatureToString("Flod29J.;M", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "Flod29J.;M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.convertString("B[zANfS\"p");
      assertEquals("B[zANfS\\\"p", string0);
      
      String string1 = Utility.compactClassName("\\B[zANfS\"p", false);
      assertEquals("\\B[zANfS\"p", string1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("astore_2", string2);
      
      String string3 = Utility.signatureToString("B[zANfS\"p");
      assertEquals("byte", string3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("*-Mc");
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte) (-113);
      Utility.getSignature("$#v%");
      try { 
        Utility.typeOfSignature("*-Mc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -Mc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(185);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(188);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      constantPool1.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool4 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool4);
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte) (-118);
      byteArray1[4] = (byte) (-118);
      try { 
        constantPool4.getConstantString(185, (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 185. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((-2664), (-2664));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[12];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.equals(byteArray1, byteArray1);
      try { 
        Utility.typeOfMethodSignature("java.lang.lxor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.lxor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2489), 182);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = null;
      try {
        constantPool2 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.read();
      int int0 = (-2899);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1514), (-1909362784), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7SCvu$9_)TW");
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      String string0 = Utility.convertString("7SCvu$9_)TW");
      assertNotNull(string0);
      assertEquals("7SCvu$9_)TW", string0);
      
      try { 
        Utility.typeOfSignature("7SCvu$9_)TW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7SCvu$9_)TW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-32768);
      Constant[] constantArray0 = new Constant[3];
      try { 
        Utility.typeOfSignature("W}0TW5jZ>z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W}0TW5jZ>z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(245, 245);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(245, constantNameAndType0.getNameIndex());
      assertEquals(245, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[6];
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      Constant.setComparator(bCELComparator0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string0 = constantPool0.toString();
      assertEquals(6, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n", string0);
      
      String string1 = Utility.compactClassName("1)null\n2)null\n3)null\n4)null\n5)null\n", "1)null\n2)null\n3)null\n4)null\n5)null\n", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.convertString("1)null\n2)null\n3)null\n4)null\n5)null\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1)null\\n2)null\\n3)null\\n4)null\\n5)null\\n", string2);
      
      constantNameAndType0.setSignatureIndex(4710);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(4710, constantNameAndType0.getSignatureIndex());
      assertEquals(245, constantNameAndType0.getNameIndex());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Utility.getSignature("tzrVz|Sxg$\"&v^mn/Y");
      assertNotNull(string0);
      assertEquals("LtzrVz|Sxg$\"&v^mn/Y;", string0);
      
      String string1 = Utility.fillup(",NRqz_.Q{", 751, false, '3');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsqz_.Q{", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-33), (byte) (-8), (byte)12, (byte)64, (byte) (-39)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-33), (byte) (-8), (byte)12, (byte)64, (byte) (-39)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("f2i", string2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      String string0 = "$#v%";
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)82;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)96);
      assertEquals(96.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(96, int0);
      assertNotSame(byteSequence1, byteSequence0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("iadd", string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.getSignature("mpdep2");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Lmpdep2;", string1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2QDD q8m~W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2QDD q8m~W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Class ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      
      int int0 = Utility.clearBit(32, 176);
      assertEquals(32, int0);
      
      ConstantPool constantPool4 = constantPool2.copy();
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantPool4.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool0);
      
      byte byte0 = Utility.typeOfSignature("Class ");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 237, (int) (byte) (-32), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("{3T", false);
      assertArrayEquals(new byte[] {(byte)123, (byte)51, (byte)84}, byteArray0);
      assertNotNull(byteArray0);
      
      short short0 = Constants.INVOKEDYNAMIC;
      assertEquals((short)186, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((short)186);
      assertEquals(186, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 95, (int) (short)186, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      try { 
        Utility.methodSignatureReturnType("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte) (-122), (byte) (-122)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-122), (-3229));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-122), constantNameAndType0.getNameIndex());
      assertEquals((-3229), constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[5];
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte) (-122), (byte) (-122)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)7168, short0);
      
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(5, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte) (-122), (byte) (-122)}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertEquals("i2f", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      
      String string1 = Utility.getSignature("V5:j");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LV5:j;", string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?2V\":b.xq32n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-104);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals("dcmpg", string0);
      assertNotSame(constantPool0, constantPool1);
      
      boolean boolean2 = true;
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("<clinit>", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("dcmpg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dcmpg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)0, (byte)88, (byte)91}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)0, (byte)88, (byte)91}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantClass constantClass0 = new ConstantClass((byte)88);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(88, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      int int0 = byteSequence1.read();
      assertArrayEquals(new byte[] {(byte)88, (byte)0, (byte)88, (byte)91}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(88, int0);
      assertNotSame(byteSequence1, byteSequence0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)0, (byte)88, (byte)91}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      ConstantPool constantPool3 = constantPool1.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      
      constantPool2.setConstantPool(constantArray0);
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool1);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)0, (byte)88, (byte)91}, byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertNotNull(byteSequence3);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      
      String string0 = Utility.codeToString(byteSequence3, constantPool1);
      assertArrayEquals(new byte[] {(byte)88, (byte)0, (byte)88, (byte)91}, byteArray0);
      assertEquals(1, byteSequence3.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("pop2", string0);
      assertNotSame(byteSequence3, byteSequence0);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.compactClassName("pop2");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("pop2", string1);
      
      try { 
        Utility.methodSignatureReturnType("pop2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `pop2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)107, (byte)25, (byte)25, (byte)54, (byte)61, (byte) (-74), (byte) (-74)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(86);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(86, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)107, (byte)25, (byte)25, (byte)54, (byte)61, (byte) (-74), (byte) (-74)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(107, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)107, (byte)25, (byte)25, (byte)54, (byte)61, (byte) (-74), (byte) (-74)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool1);
      assertArrayEquals(new byte[] {(byte)107, (byte)25, (byte)25, (byte)54, (byte)61, (byte) (-74), (byte) (-74)}, byteArray0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("dmul", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)25, 86, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      ConstantInteger constantInteger0 = new ConstantInteger((-2302));
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-2302), constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)25);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(25, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(65);
      assertEquals(65, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(2, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("1)CONSTANT_Class[7](name_index = 25)\n", string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray1 = new Constant[2];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[0] = (Constant) constantClass0;
      constantArray1[1] = (Constant) constantClass0;
      constantPool1.setConstantPool(constantArray1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantArray0.equals((Object)constantArray1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantArray1, constantArray0);
      assertNotSame(constantArray0, constantArray1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Byte code error: ");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantArray0.equals((Object)constantArray1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("dmul", string1);
      assertNotSame(constantArray0, constantArray1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dload_3", "4$ /&Euw", "Byte code error: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantFloat constantFloat0 = new ConstantFloat(2598.3953F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(2598.3953F, constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-61), (byte) (-61));
      assertEquals((-61), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-61), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-61), constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CONSTANT_ClassZ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      constantArray0[5] = (Constant) constantFloat0;
      String string0 = Utility.getSignature("CONSTANT_ClassZ");
      assertNotNull(string0);
      assertEquals("LCONSTANT_ClassZ;", string0);
      
      byte byte0 = Utility.typeOfSignature("[=9!-G|6+=");
      assertEquals((byte)13, byte0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -61, name_and_type_index = -61), CONSTANT_Float[4](bytes = 2598.3953), null, CONSTANT_Float[4](bytes = 2598.3953), CONSTANT_Float[4](bytes = 2598.3953), CONSTANT_Float[4](bytes = 2598.3953), null}", string1);
      
      String string2 = Utility.signatureToString("CONSTANT_ClassZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("char", string2);
      
      try { 
        Utility.typeOfMethodSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)28;
      byteArray0[3] = (byte)61;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 74, (int) (byte)61, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-69)}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y-joQ[p_)=");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1759), (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(10, 62);
      assertEquals(10, constantFieldref0.getClassIndex());
      assertEquals(62, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-100), (byte) (-51), (byte)76, (byte)117, (byte)65, (byte)67}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-100), (byte) (-51), (byte)76, (byte)117, (byte)65, (byte)67}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("arraylength", string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = "5rz6";
      try { 
        Utility.methodSignatureReturnType("5rz6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5rz6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)80, (byte) (-99), (byte) (-99), (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-99));
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-99.0F), constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)80);
      assertEquals(80, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte)2;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)2}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      
      try { 
        Utility.codeToString(byteSequence1, constantPool2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegal type: ");
      assertFalse(boolean0);
      
      String string0 = Utility.format(755, (byte)1, true, 'k');
      assertNotNull(string0);
      assertEquals("755", string0);
      
      try { 
        Utility.typeOfSignature("X3`$h+[I^m;hNw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X3`$h+[I^m;hNw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte byte0 = (byte)82;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      boolean boolean0 = false;
      ConstantPool constantPool3 = constantPool2.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      
      ConstantPool constantPool4 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool4.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool1));
      
      String string0 = Utility.getSignature("U|6F9=^%A7/-<Kw?");
      assertNotNull(string0);
      assertEquals("LU|6F9=^%A7/-<Kw?;", string0);
      
      try { 
        Utility.typeOfSignature("3.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZGF]");
      assertEquals((byte)4, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-3363.649F));
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-3363.649F), constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-61), (byte) (-61));
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-61), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-61), constantInvokeDynamic0.getClassIndex());
      assertEquals((-61), constantInvokeDynamic0.getNameAndTypeIndex());
      assertNotNull(constantInvokeDynamic0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y;7Pzl:1c");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.typeOfSignature("Y;7Pzl:1c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y;7Pzl:1c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z", false);
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0, (byte) (-119), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)106;
      byteArray1[2] = (byte)106;
      byteArray1[5] = (byte)0;
      byteArray1[7] = (byte) (-119);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-119), (byte)0}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence1.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-119), (byte)0}, byteArray1);
      assertEquals(2, byteSequence1.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(106, int0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool1);
      assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-119), (byte)0}, byteArray1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(3, byteSequence1.getIndex());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("fmul", string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("boolean", "boolean", "boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface((byte)76);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)76, (byte)124);
      assertEquals(124, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(76, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(76, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = null;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)124, (byte)124}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)124, (byte)124}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string2 = Utility.codeToString(byteSequence1, constantPool0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)124, (byte)124}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertNotNull(string2);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("astore_1", string2);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string3 = Utility.printArray((Object[]) constantArray0, true);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("{null, null}", string3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)95;
      ConstantPool constantPool4 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool4.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool2));
      
      ConstantPool constantPool5 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool5.getLength());
      assertNotNull(constantPool5);
      assertFalse(constantPool5.equals((Object)constantPool3));
      assertFalse(constantPool5.equals((Object)constantPool0));
      assertFalse(constantPool5.equals((Object)constantPool1));
      assertFalse(constantPool5.equals((Object)constantPool2));
      assertFalse(constantPool5.equals((Object)constantPool4));
      
      ConstantPool constantPool6 = constantPool1.copy();
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool6.getLength());
      assertNotNull(constantPool6);
      assertFalse(constantPool1.equals((Object)constantPool4));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool5));
      assertFalse(constantPool6.equals((Object)constantPool1));
      assertFalse(constantPool6.equals((Object)constantPool0));
      assertFalse(constantPool6.equals((Object)constantPool3));
      assertFalse(constantPool6.equals((Object)constantPool2));
      assertFalse(constantPool6.equals((Object)constantPool4));
      assertFalse(constantPool6.equals((Object)constantPool5));
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool6);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool5);
      assertNotSame(constantPool6, constantPool1);
      assertNotSame(constantPool6, constantPool0);
      assertNotSame(constantPool6, constantPool3);
      assertNotSame(constantPool6, constantPool2);
      assertNotSame(constantPool6, constantPool4);
      assertNotSame(constantPool6, constantPool5);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)95, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte) (-115), (byte)95, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(36191, int0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool3);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)95, (byte)0}, byteArray0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool3.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool5));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool6));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool6));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool5));
      assertFalse(constantPool3.equals((Object)constantPool4));
      assertEquals("nop", string0);
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool6);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool6);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool5);
      assertNotSame(constantPool3, constantPool4);
      
      String string1 = Utility.getSignature("invokestatic");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Linvokestatic;", string1);
      
      String string2 = Utility.getSignature("9c%DoP");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L9c%DoP;", string2);
      
      String string3 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)95, (byte)0}, byteArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("$8d_$A", string3);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool4, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)30;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 165, (int) (byte)30, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = ">09^0R:bz";
      try { 
        Utility.typeOfSignature(">09^0R:bz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >09^0R:bz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)9;
      try { 
        Utility.methodSignatureReturnType("G\"^u>{C/wA9ic,-&X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G\"^u>{C/wA9ic,-&X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(34, 34);
      assertEquals(34, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(34, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87)}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-87)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals((byte) (-87), byte0);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.codeToString(byteSequence2, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-113));
      assertEquals((-113), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(74, (-2365));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(74, constantNameAndType0.getNameIndex());
      assertEquals((-2365), constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte) (-113), (byte) (-123)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte) (-113), (byte) (-123)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte) (-113), (byte) (-123)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, int0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte) (-113), (byte) (-123)}, byteArray0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("d2l", string0);
      
      byte[] byteArray1 = new byte[28];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-123);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      String string1 = Utility.classOrInterface((-673));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      
      boolean boolean0 = byteSequence0.readBoolean();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte) (-113), (byte) (-123)}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      try { 
        Utility.typeOfMethodSignature("d2l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(42);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(42, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(72);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(72, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.constantToString(constantArray0[0]);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("42", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)74, (int) (byte)74, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#~xR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #~xR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      byteArray0[5] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0, (byte)82, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)82, (byte)82);
      assertEquals(82, constantNameAndType0.getNameIndex());
      assertEquals(82, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1860), (-592));
      assertEquals((-592), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1860), constantMethodref0.getClassIndex());
      assertNotNull(constantMethodref0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertEquals((-592), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1860), constantMethodref0.getClassIndex());
      assertEquals((-592), constantMethodref1.getNameAndTypeIndex());
      assertEquals((-1860), constantMethodref1.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertNotNull(constantMethodref1);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      try { 
        Utility.typeOfSignature("$#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfSignature(")S#K#.9WSPD|%~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )S#K#.9WSPD|%~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("!(Vg_W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Vg_W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "V";
      boolean boolean0 = false;
      String string1 = Utility.compactClassName("V", "V", false);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("V", string1);
      
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      String string2 = Utility.convertString("V");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("V", string2);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("([^VJ09G^!=", "java.lang.Integer", "V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^VJ09G^!='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte)65;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-77);
      byteArray0[3] = (byte) (-2);
      byteArray0[2] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)65, (byte) (-2), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte) (-77);
      byteArray1[3] = (byte) (-77);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte) (-77), (byte)0, (byte) (-77), (byte)0}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1803, (byte)1);
      assertEquals(1803, constantNameAndType0.getNameIndex());
      assertEquals(1, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantNameAndType constantNameAndType1 = (ConstantNameAndType)constantNameAndType0.copy();
      assertEquals(1803, constantNameAndType0.getNameIndex());
      assertEquals(1, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1803, constantNameAndType1.getNameIndex());
      assertEquals(1, constantNameAndType1.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertNotNull(constantNameAndType1);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      assertNotSame(constantNameAndType0, constantNameAndType1);
      assertNotSame(constantNameAndType1, constantNameAndType0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "PlR";
      try { 
        Utility.methodSignatureReturnType("PlR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PlR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-61));
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-61.0F), constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#19>_j}tOx");
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("H9=GPj^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H9=GPj^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantClass constantClass0 = new ConstantClass(202);
      assertEquals(202, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(39);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(39, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-78);
      String string0 = constantPool2.toString();
      assertEquals(0, constantPool2.getLength());
      assertNotNull(string0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals("", string0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      ConstantPool constantPool3 = constantPool1.copy();
      assertEquals(0, constantPool3.getLength());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)109;
      byteArray1[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)109, (byte)41}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ConstantPool constantPool4 = constantPool1.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool4.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool2);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool4);
      assertArrayEquals(new byte[] {(byte)109, (byte)41}, byteArray1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool4.getLength());
      assertNotNull(string1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool4));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ldiv", string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte)0, (byte)64, (byte)23, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-317), (byte)23);
      assertEquals((-317), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(23, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)87;
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte)124;
      byteArray1[5] = (byte)87;
      String string0 = Utility.codeToString(byteArray1, constantPool1, (-3485), (-3485), true);
      assertArrayEquals(new byte[] {(byte)23, (byte)64, (byte)87, (byte)28, (byte)124, (byte)87}, byteArray1);
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("0:    fload\t\t%64\n2:    pop\n3:    iload_2\n4:    iushr\n5:    pop\n", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("$A3$A", string0);
      
      String string1 = Utility.getSignature("$A3$A");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L$A3$A;", string1);
      
      String string2 = Utility.signatureToString("[LCONSTANT_NameAndType;V", false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("CONSTANT_NameAndType[]", string2);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "7SCvu$9_)TW";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2420, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)88;
      byteArray0[3] = (byte) (-77);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)88, (byte)0, (byte) (-77)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y-joQ[p_)=");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-77), (int) (byte) (-77));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_2
         // 1:    pop2
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte) (-92);
      byteArray1[3] = (byte) (-88);
      byteArray1[5] = (byte) (-92);
      byteArray1[6] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Od> -BI ~'Z0Ur/-GY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Od> -BI ~'Z0Ur/-GY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantClass constantClass0 = new ConstantClass(202);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(202, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(202);
      assertEquals(202, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      String string0 = constantPool2.toString();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals("", string0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      ConstantPool constantPool3 = constantPool1.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)97}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool4 = constantPool1.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool4.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool1);
      
      ConstantPool constantPool5 = constantPool4.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool4.getLength());
      assertEquals(0, constantPool5.getLength());
      assertNotNull(constantPool5);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool4));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool5.equals((Object)constantPool2));
      assertFalse(constantPool5.equals((Object)constantPool0));
      assertFalse(constantPool5.equals((Object)constantPool1));
      assertFalse(constantPool5.equals((Object)constantPool3));
      assertFalse(constantPool5.equals((Object)constantPool4));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool1, constantPool5);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool5);
      assertNotSame(constantPool5, constantPool2);
      assertNotSame(constantPool5, constantPool0);
      assertNotSame(constantPool5, constantPool1);
      assertNotSame(constantPool5, constantPool3);
      assertNotSame(constantPool5, constantPool4);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool5);
      assertArrayEquals(new byte[] {(byte)97, (byte)97}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool4.getLength());
      assertEquals(0, constantPool5.getLength());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool5));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool4));
      assertFalse(constantPool1.equals((Object)constantPool5));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool5));
      assertFalse(constantPool5.equals((Object)constantPool2));
      assertFalse(constantPool5.equals((Object)constantPool0));
      assertFalse(constantPool5.equals((Object)constantPool1));
      assertFalse(constantPool5.equals((Object)constantPool3));
      assertFalse(constantPool5.equals((Object)constantPool4));
      assertEquals("ladd", string1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool1, constantPool5);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool5);
      assertNotSame(constantPool5, constantPool2);
      assertNotSame(constantPool5, constantPool0);
      assertNotSame(constantPool5, constantPool1);
      assertNotSame(constantPool5, constantPool3);
      assertNotSame(constantPool5, constantPool4);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("W3e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W3e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[3] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[9];
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)21, byte0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray1, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((short)0, short0);
      assertNotSame(byteArray0, byteArray1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(9, constantPool0.getLength());
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("iload\t\t%0", string0);
      assertNotSame(byteArray0, byteArray1);
      
      String string1 = Utility.getSignature("iload\t\t%0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Liload;", string1);
      
      String string2 = Utility.fillup("iload\t\t%0", (byte)21, true, '4');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("iload\t\t%0444444444444", string2);
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S,CuAZJsQ|;pm");
      assertFalse(boolean0);
      
      String string0 = Utility.format('k', 74, true, 'k');
      assertNotNull(string0);
      assertEquals("107kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string0);
      
      try { 
        Utility.typeOfSignature("107kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 107kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-87);
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[6] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)47, (byte) (-87), (byte)0, (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)47, (byte) (-87), (byte)0, (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(92, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)47, (byte) (-87), (byte)0, (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean3 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)47, (byte) (-87), (byte)0, (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)92, (byte)47, (byte) (-87), (byte)0, (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertNotNull(string0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("dup2", string0);
      assertNotSame(byteSequence0, byteSequence1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-87);
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte)47;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-73), (byte)92, (byte) (-73), (byte)47}, byteArray1);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("8fy*h@$rJg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8fy*h@$rJg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(81);
      assertEquals(81, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = constantPool1.toString();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)101}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.skipBytes(81);
      assertArrayEquals(new byte[] {(byte)42, (byte)101}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 4633, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[8] = object3;
      objectArray0[4] = object1;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[5] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      
      objectArray0[8] = object5;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3569), (-2772));
      assertEquals((-3569), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2772), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertEquals((-2772), constantFieldref1.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-3569), constantFieldref1.getClassIndex());
      assertEquals((-3569), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-2772), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref1);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref0;
      boolean boolean0 = Utility.isSet(2642, 2642);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("\"");
      assertNotNull(string0);
      assertEquals("L\";", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("56", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2772), 2016);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0:    sastore\n", string2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126)}, byteArray0);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-126), (int) (byte) (-126));
      assertArrayEquals(new byte[] {(byte) (-126)}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("0:    ixor\n", string0);
      
      boolean boolean2 = false;
      try { 
        Utility.typeOfSignature("0:    ixor\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ixor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "BfpFBU Rc27w";
      byte byte0 = Utility.typeOfSignature("BfpFBU Rc27w");
      assertEquals((byte)8, byte0);
      
      // Undeclared exception!
      try { 
        Signature.translate(", lo] = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: , lo] =  read ,
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3386));
      assertEquals((-3386), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)122;
      ConstantPool constantPool3 = constantPool1.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)122, (int) (byte) (-98), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = Utility.decode("EFal", false);
      assertArrayEquals(new byte[] {(byte)69, (byte)70, (byte)97, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)70, (byte)97, (byte)108}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)70, (byte)97, (byte)108}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)69, (byte)70, (byte)97, (byte)108}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("fstore_2", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence0, byteSequence1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      
      ConstantPool constantPool4 = constantPool3.copy();
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantPool3.getLength());
      assertEquals(0, constantPool4.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool4);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      
      String string1 = constantPool4.toString();
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantPool3.getLength());
      assertEquals(0, constantPool4.getLength());
      assertNotNull(string1);
      assertFalse(constantPool2.equals((Object)constantPool4));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool4));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool4);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)70, (byte)97, (byte)108}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)70, (byte)97, (byte)108}, byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertNotNull(byteSequence3);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence2);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 4546616C
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)124;
      byteArray0[0] = (byte)38;
      String string0 = Utility.classOrInterface(39);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(39);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byteArray0[1] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(4, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("dload_0", string1);
      assertNotSame(constantPool0, constantPool1);
      
      try { 
        Utility.methodSignatureArgumentTypes("dload_0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface((byte)48);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)48);
      assertEquals(48, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)48}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)48}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)48}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence2, constantPool0);
      assertArrayEquals(new byte[] {(byte)119, (byte)48}, byteArray0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence2.getIndex());
      assertNotNull(string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("dneg", string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      
      String string2 = constantPool3.toString();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool3.getLength());
      assertNotNull(string2);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1)null\n", string2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)48}, byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertNotNull(byteSequence3);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      
      int int0 = byteSequence1.readUnsignedByte();
      assertArrayEquals(new byte[] {(byte)119, (byte)48}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence3));
      assertEquals(119, int0);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence3);
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)48}, byteArray0);
      assertEquals(0, byteSequence4.getIndex());
      assertNotNull(byteSequence4);
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      
      ConstantPool constantPool4 = null;
      try {
        constantPool4 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte byte0 = (byte)65;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.typeOfSignature("N/Zr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N/Zr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[3] = (byte)85;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)85, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[9];
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)85, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)85, byte0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)85, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)85, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((short)0, short0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)85, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(9, constantPool0.getLength());
      assertNotNull(string1);
      assertEquals("castore", string1);
      
      String string2 = Utility.getSignature("castore");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Lcastore;", string2);
      
      String string3 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("<illegal opcode>", string3);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(9, constantPool0.getLength());
      assertEquals(9, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Lcastore;");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = Utility.compactClassName("Lcastore;");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Lcastore;", string4);
      
      byte byte1 = Utility.typeOfSignature("Lcastore;");
      assertFalse(byte1 == byte0);
      assertEquals((byte)14, byte1);
      
      boolean boolean3 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)85, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      try { 
        byteSequence0.readUnsignedShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z", true);
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z");
      assertFalse(boolean0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-2341.732F));
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-2341.732F), constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(46, int0);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)14;
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertEquals(0, byteSequence3.getIndex());
      assertNotNull(byteSequence3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      
      ConstantPool constantPool2 = new ConstantPool(byteSequence0);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence3));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      String string1 = Utility.codeToString(byteSequence2, constantPool2, true);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(1, byteSequence2.getIndex());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence3));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence3));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals("iaload", string1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence3);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence2, byteSequence3);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString(" arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` arg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(42);
      assertEquals(42, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(72);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(72, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(1, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("", string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)109}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte byte0 = (byte)50;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface((byte)50);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)50);
      assertEquals(50, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-5015));
      assertEquals((-5015), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)50;
      byteArray0[0] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)119, 47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[8];
      String string0 = Utility.classOrInterface(232);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.convertString("anewarray");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("anewarray", string1);
      
      String string2 = Utility.convertString("line.separator");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("line.separator", string2);
      
      byte byte0 = Utility.typeOfSignature("Jss@~:\"%+%&");
      assertEquals((byte)11, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("anewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      boolean boolean2 = Utility.isJavaIdentifierPart('H');
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-18), 2);
      assertEquals((-18), constantNameAndType0.getNameIndex());
      assertEquals(2, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      try { 
        Utility.typeOfSignature("9.{PNc+t3U$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9.{PNc+t3U$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(80, (byte) (-8));
      assertEquals((-8), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(80, constantInterfaceMethodref0.getClassIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(80, 156);
      assertEquals(156, constantFieldref0.getNameAndTypeIndex());
      assertEquals(80, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte byte0 = Utility.typeOfSignature("S};k(<n{)S`<D.b");
      assertEquals((byte)9, byte0);
      
      try { 
        Utility.methodSignatureReturnType("9L.rUA$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9L.rUA$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short short0 = Utility.searchOpcode("java.lang.P7px<2pb_U7aD#SgV");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-120);
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)7, (byte)75, (byte)1, (byte)67, (byte) (-120)}, byteArray0);
      assertNotNull(string0);
      assertEquals("75 07 4b 01 43 88", string0);
      
      String string1 = Utility.compactClassName("java.lang.P7px<2pb_U7aD#SgV");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("P7px<2pb_U7aD#SgV", string1);
      
      boolean boolean0 = Utility.isSet(43, 3);
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("+ dWOd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  dWOd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 63, (-2563), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("{3T", false);
      assertArrayEquals(new byte[] {(byte)123, (byte)51, (byte)84}, byteArray0);
      assertNotNull(byteArray0);
      
      short short0 = Constants.INVOKEDYNAMIC;
      assertEquals((short)186, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((short)186);
      assertEquals(186, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      try { 
        Utility.typeOfSignature(".AtKG*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .AtKG*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short short0 = Utility.searchOpcode("java.lang.P7px<2pb_U7aD#SgV");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)117;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)7, (byte)7, (byte)7, (byte)117, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)117, (byte)7, (byte)7, (byte)7, (byte)117, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("lneg", string0);
      
      try { 
        Utility.methodSignatureReturnType("lneg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lneg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(10, constantPool0.getLength());
      assertEquals(10, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantClass constantClass0 = new ConstantClass(202);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(202, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      short short0 = Constants.INVOKEDYNAMIC;
      assertEquals((short)186, short0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(909);
      assertEquals(909, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 1136, 2523);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isSet(30, 30);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4438, 30, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49344. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("B[zANfS\"p");
      assertNotNull(string0);
      assertEquals("B[zANfS\\\"p", string0);
      
      String string1 = Utility.compactClassName("\\B[zANfS\"p", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\B[zANfS\"p", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ConstantInteger constantInteger0 = new ConstantInteger(123);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(123, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      ConstantClass constantClass0 = new ConstantClass(74);
      assertEquals(74, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(74);
      assertEquals(74, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)44}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray1 = new Constant[0];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)16, (byte)44}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(16, int0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)16, (byte)44}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(constantArray0.equals((Object)constantArray1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals("aload_2", string2);
      assertNotSame(constantArray0, constantArray1);
      assertNotSame(constantPool0, constantPool1);
      
      try { 
        constantPool1.getConstantString(74, (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 74. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_STRING;
      assertEquals((byte)116, byte0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.compactClassName(", lo] = ", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", lo] = ", string1);
      
      ConstantString constantString0 = new ConstantString((byte)75);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(75, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = constantPool0.toString();
      assertEquals(6, constantPool0.getLength());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1)CONSTANT_String[8](string_index = 75)\n2)CONSTANT_String[8](string_index = 75)\n3)CONSTANT_String[8](string_index = 75)\n4)CONSTANT_String[8](string_index = 75)\n5)CONSTANT_String[8](string_index = 75)\n", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)116;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)116, (-2502));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-94));
      assertEquals((-94.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      Constant[] constantArray0 = new Constant[15];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-94), (byte) (-94));
      assertEquals((-94), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-94), constantInvokeDynamic0.getClassIndex());
      assertEquals((-94), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator((BCELComparator) null);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-94)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(15, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-94)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-94)}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2434, 813, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      short short0 = Utility.searchOpcode("lreturn");
      assertEquals((short)173, short0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)46, (byte)126, (byte)68, (byte)123, (byte)57, (byte) (-52), (byte)73, (byte)99}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[7];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)46, (byte)126, (byte)68, (byte)123, (byte)57, (byte) (-52), (byte)73, (byte)99}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-30507452), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((-3177.4243272));
      assertEquals((-3177.4243272), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      constantArray0[1] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)46, 76);
      assertEquals(46, constantNameAndType0.getNameIndex());
      assertEquals(76, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)99, (byte)46);
      assertEquals(99, constantInvokeDynamic0.getClassIndex());
      assertEquals(99, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(46, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble1 = new ConstantDouble((byte)68);
      assertEquals(68.0, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertNotNull(constantDouble1);
      assertFalse(constantDouble1.equals((Object)constantDouble0));
      
      constantArray0[4] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)57);
      assertEquals(57, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)46, (byte)126, (byte)68, (byte)123, (byte)57, (byte) (-52), (byte)73, (byte)99}, byteArray0);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(52297, constantFieldref0.getNameAndTypeIndex());
      assertEquals(31545, constantFieldref0.getClassIndex());
      assertEquals(8, byteSequence0.getIndex());
      assertNotNull(constantFieldref0);
      
      constantArray0[6] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)46, (byte)126, (byte)68, (byte)123, (byte)57, (byte) (-52), (byte)73, (byte)99}, byteArray0);
      assertEquals(7, constantPool0.getLength());
      assertEquals(9, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)124;
      byteArray0[0] = (byte)39;
      String string0 = Utility.classOrInterface(39);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(39);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(39.0F, constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byteArray0[1] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(4, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("dload_1", string1);
      assertNotSame(constantPool0, constantPool1);
      
      int int0 = byteSequence0.read();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(124, int0);
      
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      assertNotNull(stringArray0);
      
      ConstantPool constantPool2 = new ConstantPool(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)121, (byte)61, (byte)52, (byte) (-80)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)52);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(52.0F, constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)121, (byte)61, (byte)52, (byte) (-80)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(121, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)121, (byte)61, (byte)52, (byte) (-80)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool2);
      assertArrayEquals(new byte[] {(byte)121, (byte)61, (byte)52, (byte) (-80)}, byteArray0);
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(string0);
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals("lshl", string0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      ConstantPool constantPool3 = null;
      try {
        constantPool3 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -80
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)17;
      String string0 = "D%21CvZ'>sOLgf7,t@f";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Member.PUBLIC;
      assertEquals(0, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      try { 
        Utility.typeOfSignature("R\" ^1d?A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R\" ^1d?A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FQ");
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      assertEquals(1.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(10, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)39}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(10, constantPool0.getLength());
      assertEquals(10, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 93, (int) (byte)68, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short short0 = Utility.searchOpcode("java.lang.P7px<2pb_U7aD#SgV");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-120);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Illegally nested brackets:";
      stringArray0[1] = "0E|#";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      stringArray0[2] = "java.lang.P7px<2pb_U7aD#SgV";
      String string0 = Utility.methodTypeToSignature("sh+5t", stringArray0);
      assertNotNull(string0);
      assertEquals("(LIllegally;L0E|#;Ljava/lang/P7px<2pb_U7aD#SgV;)Lsh+5t;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)7, (byte)75, (byte)7, (byte)67, (byte) (-120)}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6c 07 4b 07 43 88", string1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)7, (byte)75, (byte)7, (byte)67, (byte) (-120)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)108, (byte)7, (byte)75, (byte)7, (byte)67, (byte) (-120)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)7, (byte)75, (byte)7, (byte)67, (byte) (-120)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)108, (byte)7, (byte)75, (byte)7, (byte)67, (byte) (-120)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals("idiv", string2);
      assertNotSame(constantPool0, constantPool1);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)108, (byte)7, (byte)75, (byte)7, (byte)67, (byte) (-120)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals("iconst_4", string3);
      assertNotSame(constantPool0, constantPool1);
      
      // Undeclared exception!
      try { 
        Pattern.quote((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(245, 245);
      assertEquals(245, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(245, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[3] = (Constant) constantNameAndType0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-73);
      byteArray0[8] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-73), (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46864. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-113));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-113), constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getstatic");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2365), (byte) (-113));
      assertEquals((-113), constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-2365), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, (int) (byte) (-113), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.signatureToString("JPn^K:^%:7b6E", true);
      assertNotNull(string0);
      assertEquals("long", string0);
      
      String string1 = Utility.accessToString(43);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("public private static synchronized", string1);
      
      String string2 = "\t\t<";
      MockFile mockFile0 = new MockFile("\t\t<");
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("\t\t<", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("\t\t<", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "JPn^K:^%:7b6E");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // JPn^K:^%:7b6E
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte byte0 = (byte) (-83);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1803, (byte)1);
      assertEquals(1, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1803, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertEquals(1, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1803, constantNameAndType0.getNameIndex());
      assertEquals(1, constantNameAndType1.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals(1803, constantNameAndType1.getNameIndex());
      assertNotNull(constantNameAndType1);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      
      String string0 = "\\lR";
      String[] stringArray0 = new String[3];
      stringArray0[1] = "lR";
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      Constant[] constantArray0 = new Constant[3];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      constantArray0[0] = (Constant) constantNameAndType1;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = true;
      String string1 = Utility.printArray((Object[]) constantArray0, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{CONSTANT_NameAndType[12](name_index = 1803, signature_index = 1), CONSTANT_NameAndType[12](name_index = 1803, signature_index = 1), CONSTANT_NameAndType[12](name_index = 1803, signature_index = 1)}", string1);
      
      short short0 = Utility.searchOpcode("lR");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 77, 1446);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)11, (byte)92, (byte)19, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      
      ConstantFloat constantFloat1 = (ConstantFloat)constantFloat0.clone();
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(0.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertNotNull(constantFloat1);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotSame(constantFloat0, constantFloat1);
      assertNotSame(constantFloat1, constantFloat0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)11, (byte)92, (byte)19, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string1 = Utility.codeToString(byteSequence0, constantPool2, true);
      assertArrayEquals(new byte[] {(byte)32, (byte)11, (byte)92, (byte)19, (byte)0}, byteArray0);
      assertEquals(0, constantPool2.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("lload_2", string1);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(byteSequence0, byteSequence1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lload_2", "JM,h7&MCHD|=+_", "J_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-103);
      byte byte0 = (byte)0;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)28, (byte)28, (byte) (-103), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)49, (byte)28, (byte)28, (byte) (-103), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)49, (byte)28, (byte)28, (byte) (-103), (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(49, int0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)49, (byte)28, (byte)28, (byte) (-103), (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("iload_2", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = (byte)52;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)52, 11, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Class ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "):G;YA!|rY");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-69);
      boolean boolean3 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool3, (-1697), (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_3
         // 1:    iconst_4
         // 2:    saload
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-58);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(11, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(11, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.available();
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dou#l");
      assertFalse(boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int1 = byteSequence1.read();
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(int1 == int0);
      assertEquals(58, int1);
      assertNotSame(byteSequence1, byteSequence0);
      
      ConstantLong constantLong0 = new ConstantLong((-1328L));
      assertEquals((-1328L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte)58;
      byteArray1[4] = (byte)58;
      byteArray1[5] = (byte)58;
      byteArray1[6] = (byte)58;
      byteArray1[7] = (byte)58;
      byteArray1[8] = (byte)58;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte)58, (byte)58, (byte)58, (byte)58, (byte)58, (byte)58, (byte)58}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean2 = false;
      String string1 = Utility.printArray((Object[]) constantArray0, true, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{null, null, null, null, null, null, null, null, null, null, null}", string1);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 197, (int) (byte)58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(0, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantClass0.accept(emptyVisitor0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(0, constantClass0.getNameIndex());
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, int0);
      
      int int1 = Pattern.MULTILINE;
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      int int2 = new Integer((byte)100);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(100, int2);
      
      String string0 = constantClass0.toString();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)100, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(0, constantClass0.getNameIndex());
      assertNotNull(string0);
      assertEquals("CONSTANT_Class[7](name_index = 0)", string0);
      
      String string1 = Utility.getSignature("CONSTANT_Class[7](name_index = 0)");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[LCONSTANT_Class;", string1);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)100;
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)100, 21);
      assertEquals(100, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(21, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertEquals(100, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(21, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals(21, constantFieldref1.getNameAndTypeIndex());
      assertEquals(100, constantFieldref1.getClassIndex());
      assertNotNull(constantFieldref1);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("isub", string2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence1, byteSequence0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = Utility.decode("getstatic", false);
      assertArrayEquals(new byte[] {(byte)103, (byte)101, (byte)116, (byte)115, (byte)116, (byte)97, (byte)116, (byte)105, (byte)99}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-120), 12);
      assertArrayEquals(new byte[] {(byte)103, (byte)101, (byte)116, (byte)115, (byte)116, (byte)97, (byte)116, (byte)105, (byte)99}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("0:    dsub\n1:    lsub\n2:    ineg\n3:    drem\n4:    ineg\n5:    ladd\n6:    ineg\n7:    lmul\n8:    dadd\n", string0);
      
      try { 
        Utility.typeOfMethodSignature("0:    dsub\n1:    lsub\n2:    ineg\n3:    drem\n4:    ineg\n5:    ladd\n6:    ineg\n7:    lmul\n8:    dadd\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dsub
         // 1:    lsub
         // 2:    ineg
         // 3:    drem
         // 4:    ineg
         // 5:    ladd
         // 6:    ineg
         // 7:    lmul
         // 8:    dadd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Utility.decode("monitorexit", false);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = Utility.compactClassName("k/cy~B2", false);
      assertNotNull(string0);
      assertEquals("k.cy~B2", string0);
      
      String string1 = Utility.codeToString(byteArray1, constantPool0, (int) (byte)0, (int) (byte) (-58));
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    ldiv\n1:    ddiv\n2:    fdiv\n3:    lmul\n4:    ineg\n5:    ddiv\n6:    frem\n7:    lsub\n8:    ishl\n9:    lmul\n10:   ineg\n", string1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)91;
      int int0 = 245;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(245, 245);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(245, constantNameAndType0.getNameIndex());
      assertEquals(245, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1076, 1076);
      assertEquals(1076, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(1076, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      Constant.setComparator(bCELComparator0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(1076, (byte)91);
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals(1076, constantMethodref1.getClassIndex());
      assertEquals(91, constantMethodref1.getNameAndTypeIndex());
      assertNotNull(constantMethodref1);
      assertFalse(constantMethodref1.equals((Object)constantMethodref0));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string0 = constantPool0.toString();
      assertEquals(6, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("1)null\n2)null\n3)CONSTANT_NameAndType[12](name_index = 245, signature_index = 245)\n4)null\n5)null\n", string0);
      
      String string1 = Utility.compactClassName("1)null\n2)null\n3)CONSTANT_NameAndType[12](name_index = 245, signature_index = 245)\n4)null\n5)null\n", "1)null\n2)null\n3)CONSTANT_NameAndType[12](name_index = 245, signature_index = 245)\n4)null\n5)null\n", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.convertString("1)null\n2)null\n3)CONSTANT_NameAndType[12](name_index = 245, signature_index = 245)\n4)null\n5)null\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1)null\\n2)null\\n3)CONSTANT_NameAndType[12](name_index = 245, signature_index = 245)\\n4)null\\n5)null\\n", string2);
      
      byte[] byteArray1 = Utility.decode("if_acmpeq", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)97, (byte)99, (byte)109, (byte)112, (byte)101, (byte)113}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 1076, (int) (byte)91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.compactClassName("V", "3~UsI", true);
      assertNotNull(string0);
      assertEquals("V", string0);
      
      String string1 = Utility.convertString("V");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("V", string1);
      
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      String string2 = Utility.signatureToString("V", false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("void", string2);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = (-1849);
      String string3 = Utility.classOrInterface((-1849));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("class", string3);
      
      String string4 = Utility.format(61, (-3290), true, 'w');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("61", string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "V";
      stringArray0[3] = "3~UsI";
      stringArray0[4] = "9.4oD=:|GV}p`/t.ZP";
      stringArray0[5] = "wide";
      stringArray0[6] = "java.lang.Integer";
      try { 
        Utility.methodTypeToSignature("wide", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[2] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)64, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7SCvu$9_)TW");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      BCELComparator bCELComparator1 = Method.getComparator();
      assertNotNull(bCELComparator1);
      assertFalse(bCELComparator1.equals((Object)bCELComparator0));
      
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)64, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("40 00 40 00 00", string0);
      
      short short0 = Constants.MINOR;
      assertEquals((short)3, short0);
      
      try { 
        Utility.typeOfSignature("40 00 40 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 40 00 40 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)34, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-125), (byte)34, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)34, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence1.read();
      assertArrayEquals(new byte[] {(byte) (-125), (byte)34, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(131, int0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)34, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence1.getIndex());
      assertNotNull(string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals("fload_0", string0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cla ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = Utility.isSet((-698), (byte)70);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-33);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-54);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      assertNotNull(classLoaderRepository0);
      
      JavaClass javaClass0 = classLoaderRepository0.findClass("<init>");
      assertNull(javaClass0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      assertNotNull(descendingVisitor0);
      
      constantPool0.accept(descendingVisitor0);
      assertEquals(0, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 2462, 843, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(245, 245);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(245, constantNameAndType0.getSignatureIndex());
      assertEquals(245, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[3] = (Constant) constantNameAndType0;
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)98, (byte)98);
      assertEquals(98, constantMethodref0.getNameAndTypeIndex());
      assertEquals(98, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      Constant.setComparator(bCELComparator0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertEquals(98, constantMethodref0.getNameAndTypeIndex());
      assertEquals(98, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals(98, constantMethodref1.getClassIndex());
      assertEquals(98, constantMethodref1.getNameAndTypeIndex());
      assertNotNull(constantMethodref1);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = (-1910);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 96, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U KV");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.getSignature("U KV");
      assertNotNull(string0);
      assertEquals("LU;", string0);
      
      String string1 = Utility.classOrInterface(236);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      
      boolean boolean2 = false;
      byte[] byteArray0 = Utility.decode("LU;", false);
      assertArrayEquals(new byte[] {(byte)76, (byte)85, (byte)59}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 236, 477);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte) (-56), byte0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(6, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("goto_w\t\t#-939523895", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("goto_w\t\t#-939523895", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `goto_w\t\t#-939523895'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)82;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string0 = "if_icmple";
      short short0 = Utility.searchOpcode("if_icmple");
      assertEquals((short)164, short0);
      
      try { 
        Utility.typeOfSignature("A6r8DJ(p'$/!qAMt-n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A6r8DJ(p'$/!qAMt-n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.PrefixFileFilter");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      assertNotNull(descendingVisitor0);
      
      constantPool0.accept(descendingVisitor0);
      assertEquals(1, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      ConstantClass constantClass0 = new ConstantClass(228);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(228, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(39);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(39, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)101;
      ConstantPool constantPool4 = constantPool2.copy();
      assertEquals(1, constantPool4.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool2, constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool2);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(string0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool4));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals("nop", string0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool2, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3682, 39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(2598.395F);
      assertEquals(2598.395F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      String string0 = "athrow";
      String string1 = Utility.convertString(":q@2D?UIy{g");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature(":q@2D?UIy{g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :q@2D?UIy{g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)25, (byte) (-56), (byte) (-58)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)25, (byte) (-56), (byte) (-58)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = Utility.isSet((byte) (-58), 159);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)25, (byte) (-56), (byte) (-58)}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.methodSignatureReturnType("XBjC(`&?v#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XBjC(`&?v#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.decode("6nzBc;$hwF0^QOVh3&", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[3] = (byte)21;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[9];
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)21, byte0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((short)0, short0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean2 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = byteSequence0.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(5376, int0);
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0}, byteArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("NbR{Mek9#cKp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NbR{Mek9#cKp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-87);
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[6] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte)79, (byte)47, (byte) (-87), (byte)0, (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte)79, (byte)47, (byte) (-87), (byte)0, (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(79, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte)79, (byte)47, (byte) (-87), (byte)0, (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean3 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 813, (-1788), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)26;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)26;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-120));
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-120.0F), constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)26, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2396, (int) (byte) (-120), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)21;
      byteArray0[3] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)21, byte0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      short short0 = byteSequence0.readShort();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((short)0, short0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(21, int0);
      
      String string1 = Utility.compactClassName("@", "MH?b;&q[*6J0%ydx", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@", string1);
      
      boolean boolean1 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ret");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)34;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte) (-65), (byte)13, (byte)34}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte) (-65), (byte)13, (byte)34}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)45, (byte) (-65), (byte)13, (byte)34}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)45, (byte) (-65), (byte)13, (byte)34}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)45, (byte) (-65), (byte)13, (byte)34}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(45, int0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      byte[] byteArray1 = Utility.decode("3{dL>C!,", false);
      assertArrayEquals(new byte[] {(byte)51, (byte)123, (byte)100, (byte)76, (byte)62, (byte)67, (byte)33, (byte)44}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      String string2 = Utility.compactClassName("\",Rc._ExiZ \"~ms123@", false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\",Rc._ExiZ \"~ms123@", string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)28, (-1732));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(245, 245);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(245, constantNameAndType0.getSignatureIndex());
      assertEquals(245, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[3] = (Constant) constantNameAndType0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)16;
      byteArray0[1] = (byte)16;
      String string0 = Utility.printArray((Object[]) constantArray0, false);
      assertNotNull(string0);
      assertEquals("null, null, null, CONSTANT_NameAndType[12](name_index = 245, signature_index = 245)", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = (byte)93;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 1147, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-864), 249);
      assertEquals((-864), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(249, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = byteSequence1.readUnsignedByte();
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, int0);
      assertNotSame(byteSequence1, byteSequence0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = byteSequence1.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(int1 == int0);
      assertEquals(82, int1);
      assertNotSame(byteSequence1, byteSequence0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      
      int int2 = byteSequence1.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence3.getIndex());
      assertNotNull(byteSequence3);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      
      byte[] byteArray1 = Utility.decode("a1Evz{}?!s]u[", false);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      int int3 = 77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 77, 249, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[3] = object2;
      boolean boolean0 = false;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("java.lang.Object@36c8f459, java.lang.Object@36c8f459, java.lang.Object@7b2bcfd3, java.lang.Object@778a7476");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.Object@36c8f459, java.lang.Object@36c8f459, java.lang.Object@7b2bcfd3, java.lang.Object@778a7476", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@36c8f459, java.lang.Object@36c8f459, java.lang.Object@7b2bcfd3, java.lang.Object@778a7476'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-8);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (-1163), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)64;
      int int0 = Pattern.UNICODE_CASE;
      assertEquals(64, int0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)64, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("Q`zt'M=tYXt9:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q`zt'M=tYXt9:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y-joQ[p_)=");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 425, (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = (byte)93;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 1147, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-2);
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte) (-2), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[0];
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte) (-2), (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, int0);
      
      byte[] byteArray1 = Utility.decode("Z", false);
      assertArrayEquals(new byte[] {(byte)90}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      int int1 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte) (-2), (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(byteArray0, byteArray1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte) (-2), (byte)0}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("aconst_null", string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      try { 
        Utility.typeOfSignature(";h1y8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;h1y8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Class ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2365), 155);
      assertEquals((-2365), constantNameAndType0.getNameIndex());
      assertEquals(155, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      
      ConstantPool constantPool4 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool4.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      String string1 = Utility.codeToString(byteArray0, constantPool3, (-2365), 3009);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      assertEquals(0, constantPool3.getLength());
      assertNotNull(string1);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool4));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    i2l\n", string1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool4);
      assertNotSame(constantPool3, constantPool1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-58);
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-58), (byte)25, (byte) (-56), (byte) (-58)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-58), (byte)25, (byte) (-56), (byte) (-58)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(198, int0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-58), (byte)25, (byte) (-56), (byte) (-58)}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("ifnull\t\t#6601", string0);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 237, (int) (byte) (-32), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(81);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(81, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Pattern.quote(";ud?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\Q;ud?\\E", string1);
      
      short short0 = Constants.IF_ICMPEQ;
      assertEquals((short)159, short0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)90;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertEquals(1, constantPool3.getLength());
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)61, (byte)85, (byte) (-126), (byte)90}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool2);
      assertArrayEquals(new byte[] {(byte)0, (byte)61, (byte)85, (byte) (-126), (byte)90}, byteArray0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string2);
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("nop", string2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      try { 
        Utility.typeOfSignature("5Kel");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5Kel
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(232);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-70), (byte) (-1), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-70), (byte) (-1), (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("athrow", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-70), (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$bf$ba$ff$A", string2);
      
      boolean boolean1 = true;
      try { 
        Utility.typeOfMethodSignature("{(=aO,@Y1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {(=aO,@Y1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      String string0 = Utility.convertString("K,cD1CR");
      assertNotNull(string0);
      assertEquals("K,cD1CR", string0);
      
      try { 
        Utility.typeOfSignature("K,cD1CR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K,cD1CR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(232);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(49, int0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lload\t\t%164", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(^VJq9s6|";
      stringArray0[1] = "(^VJq9s6|";
      String string2 = Utility.methodTypeToSignature("(^VJq9s6|", stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(L(^VJq9s6|;L(^VJq9s6|;)L(^VJq9s6|;", string2);
      
      try { 
        Utility.typeOfMethodSignature("(^VJq9s6|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (^VJq9s6|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)117;
      byteArray0[4] = (byte)61;
      byte byte0 = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-120);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Illegally nested brackets:";
      stringArray0[1] = "0E|#";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant.setComparator((BCELComparator) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[3] = (byte)67;
      String string0 = "R";
      // Undeclared exception!
      try { 
        Utility.signatureToString("R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-67);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3349, (int) (byte)126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(11, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y-joQ[p_)=");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(11, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(11, constantPool0.getLength());
      assertEquals(11, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      String string0 = constantPool2.toString();
      assertEquals(11, constantPool0.getLength());
      assertEquals(11, constantPool2.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertEquals(11, constantPool0.getLength());
      assertEquals(11, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool3);
      assertEquals(11, constantPool0.getLength());
      assertEquals(3, byteSequence1.getIndex());
      assertEquals(11, constantPool3.getLength());
      assertNotNull(string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("if_icmpeq\t\t#0", string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      
      String string2 = Utility.compactClassName(";", false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";", string2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)2;
      byteArray0[1] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-88);
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte) (-56);
      byteArray1[5] = (byte) (-103);
      byteArray1[6] = (byte) (-62);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (int) (byte)2, (int) (byte) (-103));
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-88), (byte)2, (byte) (-103), (byte) (-56), (byte) (-103), (byte) (-62)}, byteArray1);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("6:    monitorenter\n", string0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-56);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-56), (byte) (-56));
      assertEquals((-56), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-56), constantInterfaceMethodref0.getClassIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(44, 62);
      assertEquals(62, constantFieldref0.getNameAndTypeIndex());
      assertEquals(44, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray1[0] = (byte)71;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte)71}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 62, (-1259));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = Member.DECLARED;
      assertEquals(1, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putfield");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1486, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)43, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-125), (byte)43, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)43, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("lxor", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-67), (int) (byte)43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-74), (byte)52, (byte) (-4), (byte) (-74), (byte)127}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-74), (byte)52, (byte) (-4), (byte) (-74), (byte)127}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-74), (byte)52, (byte) (-4), (byte) (-74), (byte)127}, byteArray0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("land", string0);
      assertNotSame(byteSequence0, byteSequence1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[[L1)CONSTANT_NameAndType;V");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)76);
      assertEquals(76, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      constantArray0[0] = (Constant) constantInteger0;
      String string0 = constantInteger0.toString();
      assertEquals(76, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(string0);
      assertEquals("CONSTANT_Integer[3](bytes = 76)", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantInteger0.accept(emptyVisitor0);
      assertEquals(76, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      ConstantInteger constantInteger1 = (ConstantInteger)constantInteger0.copy();
      assertEquals(76, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(76, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertNotNull(constantInteger1);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger1, constantInteger0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<init>", string1);
      
      String string2 = Utility.signatureToString("CONSTANT_Integer[3](bytes = 76)", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("char", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)76, (byte)76, (byte)76, (byte)76, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)76, (byte)76, (byte)76, (byte)76, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("dcmpg", string3);
      
      String string4 = Utility.convertString("[ytZ,RAt_orCnmAK");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("[ytZ,RAt_orCnmAK", string4);
      
      String string5 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)76, (byte)76, (byte)76, (byte)76, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("98 4c 4c 4c 4c 00 00", string5);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126)}, byteArray0);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte byte0 = (byte) (-80);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-126)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$82", string0);
      
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      assertNotNull(stringArray0);
      
      try { 
        Utility.decode("$82", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readInt();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-1431655936), int0);
      
      byte byte0 = byteSequence0.readByte();
      assertEquals(5, byteSequence0.getIndex());
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals(24, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("tableswitch\tdefault = 5, low = 0, high = 0(5)", string0);
      
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      assertNotNull(stringArray0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-1);
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-1));
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = (-1837);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1837), (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte) (-64)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = 88;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(78, 88);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(88, constantNameAndType0.getSignatureIndex());
      assertEquals(78, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(88, 36);
      assertEquals(88, constantMethodref0.getClassIndex());
      assertEquals(36, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertEquals(88, constantMethodref0.getClassIndex());
      assertEquals(36, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals(36, constantMethodref1.getNameAndTypeIndex());
      assertEquals(88, constantMethodref1.getClassIndex());
      assertNotNull(constantMethodref1);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.typeOfSignature("UM?R'kVTl9mp\"$\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UM?R'kVTl9mp\"$\"\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z", true);
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte)14, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte)14, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)38, (byte)14);
      assertEquals(14, constantNameAndType0.getSignatureIndex());
      assertEquals(38, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertEquals(14, constantNameAndType0.getSignatureIndex());
      assertEquals(38, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(14, constantNameAndType1.getSignatureIndex());
      assertEquals(38, constantNameAndType1.getNameIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertNotNull(constantNameAndType1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.compactClassName("Z", "boolean", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z", string1);
      
      short short0 = Utility.searchOpcode("boolean");
      assertEquals((short) (-1), short0);
      
      int int0 = byteSequence0.skipBytes(184);
      assertArrayEquals(new byte[] {(byte)38, (byte)14, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteSequence0.getIndex());
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(8, int0);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string2 = constantNameAndType0.toString();
      assertEquals(14, constantNameAndType0.getSignatureIndex());
      assertEquals(38, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("CONSTANT_NameAndType[12](name_index = 38, signature_index = 14)", string2);
      assertNotSame(constantNameAndType0, constantNameAndType1);
      
      byte[] byteArray1 = Utility.decode("CONSTANT_NameAndType[12](name_index = 38, signature_index = 14)", false);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      String string3 = constantPool0.toString();
      assertEquals(1, constantPool0.getLength());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      String string4 = Utility.classOrInterface((-4165));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("interface", string4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 460, (-4617), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)57;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)57;
      ConstantPool constantPool0 = null;
      String string0 = Utility.format(190, 18, true, 'O');
      assertNotNull(string0);
      assertEquals("190OOOOOOOOOOOOOOO", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, (int) (byte) (-60));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)82, (byte)82);
      assertEquals(82, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(82, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1860), (-592));
      assertEquals((-1860), constantMethodref0.getClassIndex());
      assertEquals((-592), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertEquals((-1860), constantMethodref0.getClassIndex());
      assertEquals((-592), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-592), constantMethodref1.getNameAndTypeIndex());
      assertEquals((-1860), constantMethodref1.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertNotNull(constantMethodref1);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = constantPool1.toString();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("1)CONSTANT_NameAndType[12](name_index = 82, signature_index = 82)\n2)null\n3)null\n", string0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      stringArray0[1] = "float";
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      
      byte[] byteArray1 = Utility.decode("bgJsEJ'9YF$(4B", false);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      String string2 = Utility.codeToString(byteArray1, constantPool1, (-1850), (int) (byte)82, false);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(string2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals("0:    fadd\n1:    dsub\n2:    dstore_3\n3:    drem\n4:    fstore_2\n5:    dstore_3\n6:    dload_1\n7:    dstore\t\t%89\n9:    fstore_3\n10:   nop\n11:   caload\n12:   lstore_3\n", string2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = null;
      try {
        constantPool2 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")))y8;[%?+0!2T,eM");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "float";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "float";
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      stringArray0[1] = "float";
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string1 = Utility.getSignature("float");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("F", string1);
      
      byte[] byteArray0 = Utility.decode("bgJsEJ'9YF$(4B", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantString constantString0 = new ConstantString(1135);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(1135, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(3, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("1)CONSTANT_String[8](string_index = 1135)\n2)CONSTANT_String[8](string_index = 1135)\n", string0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-122);
      int int0 = (-357);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1135, (-357));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)25, (byte)25, (byte)0, (byte)0, (byte)0, (byte)25}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)25, (byte)25, (byte)0, (byte)0, (byte)0, (byte)25}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 154, (-312));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      
      ConstantPool constantPool4 = constantPool1.copy();
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool4.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool5 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool5.getLength());
      assertNotNull(constantPool5);
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool5.equals((Object)constantPool3));
      assertFalse(constantPool5.equals((Object)constantPool4));
      assertFalse(constantPool5.equals((Object)constantPool2));
      assertFalse(constantPool5.equals((Object)constantPool0));
      assertFalse(constantPool5.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool5, constantPool3);
      assertNotSame(constantPool5, constantPool4);
      assertNotSame(constantPool5, constantPool2);
      assertNotSame(constantPool5, constantPool0);
      assertNotSame(constantPool5, constantPool1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      constantPool2.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertFalse(constantPool0.equals((Object)constantPool5));
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool4));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool5));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool5);
      assertNotSame(constantPool2, constantPool3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool5, (int) (byte) (-85), 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[4] = (byte)28;
      byteArray0[2] = (byte)28;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)28, (byte)0, (byte)28}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[3] = (byte) (-85);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte)28;
      String string0 = Utility.encode(byteArray1, false);
      assertArrayEquals(new byte[] {(byte)28, (byte)28}, byteArray1);
      assertNotNull(string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("$i$i", string0);
      assertNotSame(byteArray1, byteArray0);
      
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      assertNotNull(stringArray0);
      
      byte[] byteArray2 = Utility.decode("1", false);
      assertArrayEquals(new byte[] {(byte)49}, byteArray2);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, 87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/UzK#8d0a0T>f?");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[4];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      MockFile mockFile0 = new MockFile("UzK#8d0a0T>f?/jrFq");
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("UzK#8d0a0T>f?", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("jrFq", mockFile0.getName());
      assertEquals("UzK#8d0a0T>f?/jrFq", mockFile0.toString());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("UzK#8d0a0T>f?", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("jrFq", mockFile0.getName());
      assertEquals("UzK#8d0a0T>f?/jrFq", mockFile0.toString());
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("UzK#8d0a0T>f?", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("jrFq", mockFile0.getName());
      assertEquals("UzK#8d0a0T>f?/jrFq", mockFile0.toString());
      assertNotNull(dataOutputStream0);
      
      dataOutputStream0.write(byteArray0, 245, 158);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("UzK#8d0a0T>f?", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("jrFq", mockFile0.getName());
      assertEquals("UzK#8d0a0T>f?/jrFq", mockFile0.toString());
      
      byteArray0[1] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 245, 399);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)14;
      byteArray0[1] = (byte)14;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)14, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)0, (byte)14, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      byteArray1[0] = (byte)14;
      byteArray1[0] = (byte)14;
      byte byte1 = (byte) (-107);
      byteArray1[2] = (byte) (-107);
      byteArray1[3] = (byte)0;
      boolean boolean2 = false;
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)14, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("nop", string0);
      assertNotSame(byteArray0, byteArray1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte2 = Constants.T_FLOAT;
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertEquals((byte)6, byte2);
      
      try { 
        Utility.typeOfSignature("=;im{Aq]/DYN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =;im{Aq]/DYN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)93;
      byteArray0[1] = (byte) (-119);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte)0, (byte) (-56), (byte)46, (byte) (-119)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte)0, (byte) (-56), (byte)46, (byte) (-119)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      byteSequence1.reset();
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte)0, (byte) (-56), (byte)46, (byte) (-119)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotSame(byteSequence1, byteSequence0);
      
      int int0 = byteSequence1.read();
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte)0, (byte) (-56), (byte)46, (byte) (-119)}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(137, int0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte)0, (byte) (-56), (byte)46, (byte) (-119)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals("l2f", string0);
      assertNotSame(byteSequence0, byteSequence1);
      
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte)0, (byte) (-56), (byte)46, (byte) (-119)}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$89$89$A$c8$$$89", string1);
      
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureArgumentTypes(" ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)34, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-125), (byte)34, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)34, (byte) (-67), (byte) (-62), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotNull(string0);
      assertEquals("lxor", string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      
      String string2 = Pattern.quote("/%hY;'=\"fMmbT");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\Q/%hY;'=\"fMmbT\\E", string2);
      
      try { 
        Utility.typeOfSignature("/%hY;'=\"fMmbT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /%hY;'=\"fMmbT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-63));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-63), constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-63), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals((-63), constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = (byte) (-111);
      boolean boolean0 = false;
      String string2 = Utility.printArray((Object[]) null, false);
      assertNull(string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 165, (int) (byte) (-111));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "The";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-105), 90);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    dcmpl\n1:    nop\n", string1);
      
      int int0 = 7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 7, (-4243));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(130, int0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = byteSequence0.markSupported();
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      String string0 = Utility.accessToString(517);
      assertNotNull(string0);
      assertEquals("public protected interface", string0);
      
      try { 
        Utility.typeOfSignature("6F+]~7sp(g01Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6F+]~7sp(g01Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-80);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "class");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 425, (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-80);
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-80), (byte)25, (byte)28, (byte) (-57), (byte) (-80)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      assertNotNull(stringArray0);
      
      boolean boolean1 = false;
      byte[] byteArray1 = Utility.decode("1", false);
      assertArrayEquals(new byte[] {(byte)49}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-80), (byte)25, (byte)28, (byte) (-57), (byte) (-80)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(byteArray0, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload\t\t%176
         // 2:    aload\t\t%28
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = "&zz.?u&g,,ft";
      try { 
        Utility.typeOfSignature("&zz.?u&g,,ft");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &zz.?u&g,,ft
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      
      int int0 = (-9);
      int int1 = Utility.clearBit((-9), (-9));
      assertFalse(int1 == int0);
      assertEquals((-8388617), int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "8GkQHI@)C";
      try { 
        Utility.typeOfSignature("8GkQHI@)C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8GkQHI@)C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature("float");
      assertNotNull(string0);
      assertEquals("F", string0);
      
      byte byte0 = Utility.typeOfSignature("F");
      assertEquals((byte)6, byte0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)14;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2819), (int) (byte) (-93));
      assertNotNull(string0);
      assertEquals("0:    ireturn\n1:    if_icmpgt\t\t#-23388\n4:    dconst_0\n5:    if_icmple\t\t#3589\n8:    nop\n9:    nop\n10:   nop\n", string0);
      
      boolean boolean0 = false;
      String string1 = Utility.fillup("0:    ireturn\n1:    if_icmpgt\t\t#-23388\n4:    dconst_0\n5:    if_icmple\t\t#3589\n8:    nop\n9:    nop\n10:   nop\n", 1913, false, '&');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = Constants.ACCESS_NAMES;
      assertNotNull(stringArray0);
      
      String string2 = Utility.encode(byteArray0, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte) (-71);
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-71), 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-56);
      byteArray0[5] = (byte) (-80);
      byteArray0[2] = (byte) (-56);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      assertNotNull(syntheticRepository0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-56));
      assertEquals((-56), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Constant[] constantArray1 = new Constant[6];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[5] = (Constant) constantMethodType0;
      constantArray1[1] = (Constant) constantMethodType0;
      constantArray1[2] = (Constant) constantMethodType0;
      constantArray1[3] = (Constant) constantMethodType0;
      constantArray1[4] = (Constant) constantMethodType0;
      constantArray1[5] = (Constant) constantMethodType0;
      constantPool0.setConstantPool(constantArray1);
      assertEquals(6, constantPool0.getLength());
      assertFalse(constantArray0.equals((Object)constantArray1));
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertNotSame(constantArray0, constantArray1);
      assertNotSame(constantArray1, constantArray0);
      
      byteArray1[1] = (byte)80;
      byteArray1[3] = (byte) (-111);
      byteArray1[4] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 146, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Constant[] constantArray0 = new Constant[11];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-851), (-2986));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-851), constantNameAndType0.getNameIndex());
      assertEquals((-2986), constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(11, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)20}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, (int) (byte)20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      
      ConstantPool constantPool4 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool4.getLength());
      assertNotNull(constantPool4);
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool0));
      
      ConstantPool constantPool5 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool5.getLength());
      assertNotNull(constantPool5);
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool5.equals((Object)constantPool1));
      assertFalse(constantPool5.equals((Object)constantPool0));
      assertFalse(constantPool5.equals((Object)constantPool3));
      assertFalse(constantPool5.equals((Object)constantPool2));
      assertFalse(constantPool5.equals((Object)constantPool4));
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool5, constantPool1);
      assertNotSame(constantPool5, constantPool0);
      assertNotSame(constantPool5, constantPool3);
      assertNotSame(constantPool5, constantPool2);
      assertNotSame(constantPool5, constantPool4);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool6 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool6.getLength());
      assertNotNull(constantPool6);
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool5));
      assertFalse(constantPool6.equals((Object)constantPool5));
      assertFalse(constantPool6.equals((Object)constantPool4));
      assertFalse(constantPool6.equals((Object)constantPool2));
      assertFalse(constantPool6.equals((Object)constantPool0));
      assertFalse(constantPool6.equals((Object)constantPool3));
      assertFalse(constantPool6.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool0, constantPool6);
      assertNotSame(constantPool6, constantPool5);
      assertNotSame(constantPool6, constantPool4);
      assertNotSame(constantPool6, constantPool2);
      assertNotSame(constantPool6, constantPool0);
      assertNotSame(constantPool6, constantPool3);
      assertNotSame(constantPool6, constantPool1);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      constantPool3.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool3.getLength());
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool5));
      assertFalse(constantPool0.equals((Object)constantPool6));
      assertFalse(constantPool3.equals((Object)constantPool5));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool6));
      assertFalse(constantPool3.equals((Object)constantPool4));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool0, constantPool6);
      assertNotSame(constantPool3, constantPool5);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool6);
      assertNotSame(constantPool3, constantPool4);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      constantPool3.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool3.getLength());
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool5));
      assertFalse(constantPool0.equals((Object)constantPool6));
      assertFalse(constantPool3.equals((Object)constantPool5));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool6));
      assertFalse(constantPool3.equals((Object)constantPool4));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool0, constantPool6);
      assertNotSame(constantPool3, constantPool5);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool6);
      assertNotSame(constantPool3, constantPool4);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      
      String string2 = Utility.codeToString(byteArray0, constantPool6, (int) (byte) (-85), 197);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool6.getLength());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool5));
      assertFalse(constantPool0.equals((Object)constantPool6));
      assertFalse(constantPool6.equals((Object)constantPool5));
      assertFalse(constantPool6.equals((Object)constantPool4));
      assertFalse(constantPool6.equals((Object)constantPool2));
      assertFalse(constantPool6.equals((Object)constantPool0));
      assertFalse(constantPool6.equals((Object)constantPool3));
      assertFalse(constantPool6.equals((Object)constantPool1));
      assertEquals("0:    lookupswitch\tdefault = 0, npairs = 0 ()\n", string2);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool5);
      assertNotSame(constantPool0, constantPool6);
      assertNotSame(constantPool6, constantPool5);
      assertNotSame(constantPool6, constantPool4);
      assertNotSame(constantPool6, constantPool2);
      assertNotSame(constantPool6, constantPool0);
      assertNotSame(constantPool6, constantPool3);
      assertNotSame(constantPool6, constantPool1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("r-NH2^H4#DqQD;(s`", false);
      assertNotNull(byteArray0);
      
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      int int0 = byteSequence1.read();
      assertEquals(1, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(114, int0);
      assertNotSame(byteSequence1, byteSequence0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r-NH2^H4#DqQD;(s`");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = byteSequence1.readChar();
      assertEquals(3, byteSequence1.getIndex());
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals('\u2D4E', char0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string0 = Utility.compactClassName("r-NH2^H4#DqQD;(s`", true);
      assertNotNull(string0);
      assertEquals("r-NH2^H4#DqQD;(s`", string0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      
      int int1 = 101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 101, 234);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(245, 245);
      assertEquals(245, constantNameAndType0.getSignatureIndex());
      assertEquals(245, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[22];
      constantArray0[3] = (Constant) constantNameAndType0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(22, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(22, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(22, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-96);
      String string0 = constantPool0.toString();
      assertEquals(22, constantPool0.getLength());
      assertNotNull(string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals("1)null\n2)null\n3)CONSTANT_NameAndType[12](name_index = 245, signature_index = 245)\n4)null\n5)null\n6)null\n7)null\n8)null\n9)null\n10)null\n11)null\n12)null\n13)null\n14)null\n15)null\n16)null\n17)null\n18)null\n19)null\n20)null\n21)null\n", string0);
      assertNotSame(constantPool0, constantPool1);
      
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 191, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(245, 245);
      assertEquals(245, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(245, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 97;
      String string0 = Utility.format(245, 97, true, 'I');
      assertNotNull(string0);
      assertEquals("245IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string0);
      
      byte[] byteArray0 = Utility.decode("245IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", false);
      assertNotNull(byteArray0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int1 = 71;
      String string1 = constantPool0.toString();
      assertEquals(2, constantPool0.getLength());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1)null\n", string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, 71, (-1425), false);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("71:   dstore_2\n72:   dstore_2\n73:   dstore_2\n74:   dstore_2\n75:   dstore_2\n76:   dstore_2\n77:   dstore_2\n78:   dstore_2\n79:   dstore_2\n80:   dstore_2\n81:   dstore_2\n82:   dstore_2\n83:   dstore_2\n84:   dstore_2\n85:   dstore_2\n86:   dstore_2\n87:   dstore_2\n88:   dstore_2\n89:   dstore_2\n90:   dstore_2\n91:   dstore_2\n92:   dstore_2\n93:   dstore_2\n94:   dstore_2\n95:   dstore_2\n96:   dstore_2\n", string2);
      
      String string3 = Utility.compactClassName("245IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "71:   dstore_2\n72:   dstore_2\n73:   dstore_2\n74:   dstore_2\n75:   dstore_2\n76:   dstore_2\n77:   dstore_2\n78:   dstore_2\n79:   dstore_2\n80:   dstore_2\n81:   dstore_2\n82:   dstore_2\n83:   dstore_2\n84:   dstore_2\n85:   dstore_2\n86:   dstore_2\n87:   dstore_2\n88:   dstore_2\n89:   dstore_2\n90:   dstore_2\n91:   dstore_2\n92:   dstore_2\n93:   dstore_2\n94:   dstore_2\n95:   dstore_2\n96:   dstore_2\n", false);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("245IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string3);
      
      try { 
        constantPool0.getConstantString('I', (byte) (-58));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 73. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-56), (byte) (-56), (byte)0, (byte) (-58), (byte) (-56), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-56), (byte) (-56), (byte)0, (byte) (-58), (byte) (-56), (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte) (-56), byte0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.getSignature("<illegal type>");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L<illegal;", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<illegal;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte byte0 = (byte) (-70);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "%itY6D|QO+[}Fh";
      try { 
        Utility.typeOfSignature("%itY6D|QO+[}Fh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %itY6D|QO+[}Fh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(245, 245);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(245, constantNameAndType0.getSignatureIndex());
      assertEquals(245, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[3] = (Constant) constantNameAndType0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotSame(constantPool0, constantPool1);
      
      byte byte0 = (byte) (-89);
      ConstantPool constantPool2 = constantPool0.copy();
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      String string0 = Utility.accessToString((int) (byte) (-89));
      assertNotNull(string0);
      assertEquals("public private protected synchronized transient native interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<init>", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, (int) (byte) (-89));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = Utility.clearBit(93, 123);
      assertEquals(93, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-23);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-59), (byte) (-23)}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ": ";
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 50, 50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-95);
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(34, 34);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(34, constantNameAndType0.getNameIndex());
      assertEquals(34, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      
      byte byte1 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-95), byte1);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.codeToString(byteSequence2, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      int int0 = (-752);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-752), (int) (byte) (-56));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$A$A$A$A$A$A$A$A$A$A", string1);
      
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      assertNotNull(stringArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int1 = byteSequence0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = byteSequence0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteSequence0.getIndex());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(10, int2);
      
      int int3 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteSequence0.getIndex());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string2 = Utility.format(1162, 48, false, 'f');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ffffffffffffffffffffffffffffffffffffffffffff1162", string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
