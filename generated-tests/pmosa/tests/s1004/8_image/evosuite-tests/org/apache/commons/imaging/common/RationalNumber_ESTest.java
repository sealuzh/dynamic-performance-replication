/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 00:38:49 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.026666666666642413);
      long long0 = rationalNumber0.longValue();
      assertEquals(2, rationalNumber0.numerator);
      assertEquals(0.02666666666666667, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-217L), (-217L));
      String string0 = rationalNumber0.toDisplayString();
      rationalNumber0.floatValue();
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-139.401));
      RationalNumber.factoryMethod((-1214L), 2295L);
      rationalNumber0.toString();
      long long0 = rationalNumber1.longValue();
      assertEquals((-139L), long0);
      
      String string1 = rationalNumber0.toString();
      assertTrue(string1.equals((Object)string0));
      
      rationalNumber0.negate();
      assertEquals(1, rationalNumber0.divisor);
      
      rationalNumber1.negate();
      assertEquals((-139.401F), rationalNumber1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836222543411E9);
      float float0 = rationalNumber0.floatValue();
      assertEquals(2147483622, rationalNumber0.numerator);
      assertEquals(2.14748365E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(242.5);
      long long0 = rationalNumber0.longValue();
      assertEquals(242L, long0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(485, rationalNumber0.numerator);
      assertEquals(242, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(172.38);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.toDisplayString();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(50, 8619);
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(8619);
      rationalNumber4.toString();
      RationalNumber rationalNumber5 = RationalNumber.valueOf(50);
      rationalNumber5.toString();
      rationalNumber5.toString();
      RationalNumber.factoryMethod(393L, (-2337L));
      RationalNumber.factoryMethod(227L, 8619);
      rationalNumber4.toDisplayString();
      rationalNumber0.doubleValue();
      rationalNumber1.intValue();
      rationalNumber0.toString();
      RationalNumber rationalNumber6 = rationalNumber0.negate();
      rationalNumber1.longValue();
      rationalNumber0.longValue();
      float float0 = rationalNumber3.floatValue();
      assertEquals(172.38F, float0, 0.01F);
      
      String string0 = rationalNumber3.toString();
      assertEquals("8619/50 (172.38)", string0);
      
      rationalNumber0.toDisplayString();
      rationalNumber2.longValue();
      rationalNumber3.intValue();
      int int0 = rationalNumber6.intValue();
      assertEquals((-172), int0);
      
      RationalNumber rationalNumber7 = RationalNumber.valueOf(8619);
      RationalNumber.factoryMethod((-432L), 779);
      String string1 = rationalNumber7.toDisplayString();
      assertEquals("8619", string1);
      
      rationalNumber6.negate();
      String string2 = rationalNumber7.toString();
      assertEquals("8,619", string2);
      
      long long0 = rationalNumber3.longValue();
      assertEquals(172L, long0);
      
      rationalNumber2.toDisplayString();
      rationalNumber5.intValue();
      assertEquals(50L, rationalNumber5.longValue());
      
      String string3 = rationalNumber6.toDisplayString();
      assertEquals("-172.38", string3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(7.001082688073978E-5);
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      assertEquals(7.000840100812098E-5, rationalNumber0.doubleValue(), 0.01);
      assertEquals(14284, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1445.32151426345);
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(3298L, 3298L);
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1280.56865));
      String string0 = rationalNumber2.toString();
      assertEquals("-5421401/3751 (-1,445.322)", string0);
      
      String string1 = rationalNumber1.toString();
      String string2 = rationalNumber2.toDisplayString();
      assertEquals("-1,445.322", string2);
      
      RationalNumber.valueOf(1.0E-8);
      RationalNumber rationalNumber4 = RationalNumber.valueOf(5421401);
      rationalNumber1.toDisplayString();
      rationalNumber0.toString();
      RationalNumber rationalNumber5 = RationalNumber.valueOf(1660.319689);
      rationalNumber5.toDisplayString();
      float float0 = rationalNumber0.floatValue();
      assertEquals(1445.3215F, float0, 0.01F);
      
      String string3 = rationalNumber4.toString();
      assertEquals("5,421,401", string3);
      
      rationalNumber5.toDisplayString();
      rationalNumber0.toDisplayString();
      rationalNumber2.toString();
      RationalNumber rationalNumber6 = RationalNumber.valueOf((-1.0));
      assertEquals((-1.0F), rationalNumber6.floatValue(), 0.01F);
      
      String string4 = rationalNumber0.toDisplayString();
      assertEquals("1,445.322", string4);
      
      RationalNumber rationalNumber7 = RationalNumber.valueOf(4373);
      rationalNumber7.negate();
      rationalNumber7.toDisplayString();
      String string5 = rationalNumber1.toDisplayString();
      assertTrue(string5.equals((Object)string1));
      
      rationalNumber3.intValue();
      String string6 = rationalNumber4.toDisplayString();
      assertEquals("5421401", string6);
      
      RationalNumber rationalNumber8 = RationalNumber.factoryMethod((-1L), 1L);
      assertEquals((short) (-1), rationalNumber8.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 2147483647L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1192L, 1);
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1192, rationalNumber1.numerator);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1192);
      assertEquals(1192, rationalNumber2.numerator);
      assertEquals(1192L, rationalNumber2.longValue());
      
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      rationalNumber3.toDisplayString();
      String string0 = rationalNumber3.toString();
      assertEquals("-1", string0);
      
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      String string1 = rationalNumber3.toDisplayString();
      assertEquals("-1", string1);
      
      rationalNumber0.doubleValue();
      RationalNumber.valueOf(388.0001051392703);
      long long0 = rationalNumber4.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483668L, 2147483668L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1192L, 1);
      assertEquals(1192.0, rationalNumber1.doubleValue(), 0.01);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1192);
      String string0 = rationalNumber2.toDisplayString();
      assertEquals("1192", string0);
      
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      String string1 = rationalNumber3.toDisplayString();
      assertEquals(1, rationalNumber3.divisor);
      assertEquals("-1", string1);
      
      RationalNumber rationalNumber4 = new RationalNumber(1192, 1);
      rationalNumber4.longValue();
      long long0 = rationalNumber2.longValue();
      assertEquals(1192L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483668L, 2147483668L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1192L, 1);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1192);
      rationalNumber1.toString();
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-4313.5));
      double double0 = rationalNumber3.doubleValue();
      assertEquals((-4313.5), double0, 0.01);
      
      RationalNumber.factoryMethod(1192L, 0L);
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(2147483668L, (-1L));
      assertEquals(2147483628, rationalNumber4.numerator);
      
      String string1 = rationalNumber2.toDisplayString();
      assertEquals("1192", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483668L, 2147483668L);
      assertEquals((short)1, rationalNumber0.shortValue());
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(0L, 2147483668L);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0L);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1L, (-1L));
      RationalNumber rationalNumber4 = RationalNumber.valueOf((-1.0));
      RationalNumber rationalNumber5 = rationalNumber2.negate();
      String string0 = rationalNumber3.toString();
      assertEquals("-1", string0);
      
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(88L, 79L);
      rationalNumber6.intValue();
      RationalNumber.valueOf(1);
      rationalNumber4.intValue();
      RationalNumber.factoryMethod(0L, 88L);
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(79, 1);
      RationalNumber rationalNumber8 = RationalNumber.valueOf((-2269.978356810089));
      assertEquals((-2269.9783F), rationalNumber8.floatValue(), 0.01F);
      
      String string1 = rationalNumber5.toString();
      rationalNumber6.intValue();
      rationalNumber7.toString();
      RationalNumber rationalNumber9 = RationalNumber.valueOf(1);
      assertEquals(1, rationalNumber9.numerator);
      
      RationalNumber rationalNumber10 = RationalNumber.factoryMethod(1, 88L);
      rationalNumber10.negate();
      String string2 = rationalNumber1.toDisplayString();
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 2147483647L);
      rationalNumber0.toDisplayString();
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483657L), 1);
      assertEquals(2147483639, rationalNumber1.numerator);
  }
}
