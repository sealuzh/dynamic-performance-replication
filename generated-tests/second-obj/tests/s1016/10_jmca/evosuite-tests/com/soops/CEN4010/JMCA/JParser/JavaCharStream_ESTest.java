/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:57:15 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte) (-119));
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      javaCharStream0.ReInit((Reader) pipedReader0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 3347, 3347);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) null, (-1), 3347, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.ReInit((Reader) null, (-1), 4076);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 63, 63);
      boolean boolean0 = true;
      javaCharStream0.prevCharIsLF = true;
      javaCharStream0.prevCharIsCR = true;
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(317);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 1, 926);
      javaCharStream0.bufsize = 926;
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2467);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2467, 2467);
      javaCharStream0.ReInit((Reader) null, 2467, 2467, 0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 100, 100);
      javaCharStream0.ExpandBuff(false);
      javaCharStream0.getBeginColumn();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1), 13, 1);
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1652), (-1652));
      javaCharStream0.GetImage();
      try { 
        JavaCharStream.hexval('(');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileReader0, 0, 0, 0);
      javaCharStream0.ReInit((Reader) mockFileReader0, 0, 0, 0);
      javaCharStream0.GetSuffix(0);
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 4450, 4450, 324);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 63, 2661, 63);
      javaCharStream0.adjustBeginLineColumn(2661, 63);
      javaCharStream0.GetImage();
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      javaCharStream0.GetImage();
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      javaCharStream0.GetSuffix(4);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(mockFileInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0, 0, 0, 0);
      javaCharStream0.ReInit((Reader) inputStreamReader0, 0, 0, 0);
      javaCharStream0.GetSuffix(0);
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(0, 4096);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1433;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1433);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1433;
      char char0 = 'T';
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '\\';
      charArray0[3] = 'D';
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Reader reader0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedReader pipedReader0 = new PipedReader();
      int int1 = JavaCharStream.hexval('C');
      assertEquals(12, int1);
      
      int int2 = JavaCharStream.hexval('8');
      assertEquals(8, int2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream.hexval('9');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1433);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaCharStream.hexval('A');
      byte[] byteArray0 = new byte[2];
      JavaCharStream.hexval('A');
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.FillBuff();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)46;
      byteArray0[1] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)46, (byte)46);
      javaCharStream0.BeginToken();
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)46, 1331, 1831);
      javaCharStream0.GetImage();
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('1');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1652), (-1652));
      javaCharStream0.GetImage();
      javaCharStream0.tokenBegin = (-1652);
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'D';
      charArray0[3] = '\\';
      charArray0[3] = 'D';
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JavaCharStream.hexval('D');
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      charArray0[6] = 'D';
      charArray0[7] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 4084, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      
      charArrayReader0.skip(0L);
      javaCharStream0.BeginToken();
      javaCharStream0.getBeginLine();
      javaCharStream0.backup(0);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char char0 = 'P';
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1652), (-3025));
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1433);
      pipedInputStream0.mark(1433);
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 0, 1262);
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 0, 1262);
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray0 = new byte[4];
      JavaCharStream.hexval('F');
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream(stringReader0, (-459), 69, (-459));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1700), (-1700));
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'D';
      charArray0[2] = '\\';
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1652), (-3025));
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1652), 223);
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 95, 14, 76);
      javaCharStream0.BeginToken();
      javaCharStream0.adjustBeginLineColumn(66, 66);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      int int0 = JavaCharStream.hexval('f');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1403);
      PipedInputStream pipedInputStream1 = new PipedInputStream(10);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1871);
      bufferedInputStream0.mark(96);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 10, 1);
      javaCharStream0.available = (-698);
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-1652);
      JavaCharStream.hexval('6');
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1433);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1871);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JavaCharStream.hexval('7');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        JavaCharStream.hexval('m');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JavaCharStream.hexval('5');
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1700), (-1700));
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1403);
      pipedInputStream0.skip((-2472L));
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream.hexval('3');
      Charset charset0 = Charset.defaultCharset();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1);
      bufferedInputStream0.mark((-245));
      charset0.newDecoder();
      int int1 = JavaCharStream.hexval('3');
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1433);
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1403);
      PipedInputStream pipedInputStream1 = new PipedInputStream(1403);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1871);
      bufferedInputStream0.mark(96);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 1403, 1);
      javaCharStream0.available = (-698);
      JavaCharStream.hexval('b');
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        pipedWriter0.write(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-817);
      intArray0[4] = 92;
      intArray0[5] = 0;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      javaCharStream0.bufline = intArray0;
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(0, (-1588));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream.hexval('B');
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(enumeration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1403);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream.hexval('C');
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      Charset.defaultCharset();
      charset0.newDecoder();
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte) (-67));
      byteArrayInputStream0.mark((byte) (-67));
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-67), (byte) (-67));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.FillBuff();
      javaCharStream0.readChar();
      javaCharStream0.GetSuffix(3264);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)112;
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip((-2054));
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[2];
      sequenceInputStream0.skip(0L);
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-89);
      sequenceInputStream0.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-243), (-437), (-437));
      javaCharStream0.bufsize = 4231;
      javaCharStream0.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 83, 83);
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X");
      javaCharStream0.prevCharIsLF = true;
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      javaCharStream0.GetImage();
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('\"');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[19];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(17);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 80, 98);
      javaCharStream0.backup(17);
      javaCharStream0.ReInit((InputStream) dataInputStream0);
      javaCharStream0.GetImage();
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2, 55);
      javaCharStream0.backup(2);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      javaCharStream0.BeginToken();
      byteArrayInputStream0.skip(0L);
      javaCharStream0.readChar();
      byteArrayInputStream0.reset();
      byteArrayInputStream1.reset();
      byteArrayInputStream1.mark(2836);
      javaCharStream0.getLine();
      javaCharStream0.FillBuff();
      javaCharStream0.readChar();
      javaCharStream0.GetSuffix(2);
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JavaCharStream.hexval('A');
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JavaCharStream.hexval('2');
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 117);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1), 62);
      javaCharStream0.column = (-1);
      javaCharStream0.backup((-1));
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 1871;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1871);
      bufferedInputStream0.available();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      bufferedInputStream0.mark(1403);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 1403, 1403);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-2472L));
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedReader pipedReader0 = new PipedReader();
      char char0 = '@';
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.close();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.skip(3086L);
      byteArrayInputStream1.read(byteArray0);
      byteArrayInputStream0.mark(0);
      byteArrayInputStream2.mark(0);
      byteArrayInputStream0.read();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0, 0, (-1), 438);
      javaCharStream0.getBeginLine();
      javaCharStream0.Done();
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      javaCharStream0.ReInit((Reader) bufferedReader0, 0, 438, 801);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byteArray0[2] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-2278));
      byteArrayInputStream0.mark((byte)9);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-67), (byte)0);
      javaCharStream0.bufpos = 5;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.prevCharIsCR = true;
      javaCharStream0.maxNextCharInd = 3264;
      javaCharStream0.getLine();
      javaCharStream0.FillBuff();
      javaCharStream0.readChar();
      javaCharStream0.GetSuffix(0);
      assertEquals(6, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1315, (byte) (-1));
      javaCharStream0.backup(1);
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      javaCharStream0.GetImage();
      javaCharStream0.BeginToken();
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('\u0010');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1315, (byte) (-1));
      javaCharStream0.backup(1);
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      javaCharStream0.readChar();
      byteArrayInputStream0.read(byteArray0);
      int int1 = ObjectStreamConstants.baseWireHandle;
      PipedWriter pipedWriter0 = new PipedWriter();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        pipedWriter0.write((String) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1872);
      bufferedInputStream0.mark(1403);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 1403, 1403);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaCharStream0.available = 1872;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaCharStream0.ReInit((InputStream) bufferedInputStream0, 1176, 1403);
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.adjustBeginLineColumn(98, 5);
      javaCharStream0.GetImage();
      javaCharStream0.tokenBegin = 4082;
      javaCharStream0.getBeginColumn();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.backup(4);
      javaCharStream0.getLine();
      javaCharStream0.UpdateLineColumn('.');
      assertEquals(4091, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 8257536, (byte)10, (byte)10);
      javaCharStream0.BeginToken();
      byteArrayInputStream0.read();
      byteArrayInputStream0.mark(162);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      byte byte0 = (byte)12;
      byte[] byteArray0 = new byte[10];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 8257536, (byte)12, (byte)12);
      javaCharStream0.BeginToken();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(=txA`!>!YI8");
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      int int2 = (-2112);
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, 3330, (-2112));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
}
