/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:30:11 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      Utility.printArray((Object[]) null);
      String string0 = Utility.signatureToString("Illegal type: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("m;mV");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "m;mV";
      objectArray0[1] = (Object) "m;mV";
      objectArray0[2] = (Object) "m;mV";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.isJavaIdentifierPart('t');
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-71);
      byteArray0[6] = (byte) (-15);
      byteArray0[2] = (byte)58;
      byteArray0[6] = (byte) (-71);
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.convertString("6)6Ocm)17v&g]d'ZZH");
      assertEquals("6)6Ocm)17v&g]d\\'ZZH", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('>');
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("? super ");
      assertEquals("? super ", string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("NQ0 QU o.B", "m-VG<", "h ][n*~R<K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NQ0 QU o.B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfMethodSignature("\"4w,3bHPw^L0nGro]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"4w,3bHPw^L0nGro]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.accessToString(814, true);
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.compactClassName("monitorexit");
      assertEquals("monitorexit", string0);
      
      byte[] byteArray0 = new byte[5];
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = Utility.searchOpcode("INSENSITIVE");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)37;
      String string0 = Utility.getSignature("INSENSITIVE");
      assertEquals("LINSENSITIVE;", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("A$r", string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.format(0, 0, false, 'V');
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("<.VMWS],@(g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<.VMWS],@(g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      String string0 = Utility.format((-2102), (-2102), true, 'p');
      assertEquals("-2102", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("$f;+C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $f;+C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type annotation can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.format(6, (-29), true, ']');
      byte[] byteArray0 = Utility.decode("6", false);
      String string1 = Utility.encode(byteArray0, false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("java.lang.9>4");
      assertEquals("9>4", string2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      String string0 = Utility.fillup("T]=2fcXf", (-3914), true, 'p');
      assertEquals("T]=2fcXf", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("5b", string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-537), 16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[2] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pattern.quote("<clinit>");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Utility.isSet(57, (-83));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("<clinit>");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)86;
      byteArray0[0] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)34, (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.format(580, 580, false, '(');
      try { 
        Utility.methodSignatureArgumentTypes
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((580'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("ifnonnyll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnyll
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.replace("\"", "b/m29K", "\"");
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.classOrInterface(148);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isSet(177, 148);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = Utility.getSignature("{\"?`u;$");
      assertEquals("L{\"?`u;$;", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.getSignature(" arg");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "Ldload_2;V", " arg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.getSignature("Only element values of type annotation can be built with this ctor - type specified: ");
      String string1 = Utility.methodTypeToSignature(", npairs = ", (String[]) null);
      assertEquals("()L,;", string1);
      
      String string2 = Constants.ILLEGAL_TYPE;
      String string3 = Utility.convertString("LOnly;");
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "aload_2";
      String string0 = Utility.methodTypeToSignature("aload_2", stringArray0);
      assertEquals("(Laload_2;)Laload_2;", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) pipedOutputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.clearBit(162, 1605);
      boolean boolean0 = false;
      Utility.fillup("~An]", 130, false, 'b');
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb~An]";
      Utility.printArray(objectArray0, false, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("~An]", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-47);
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1089), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.setBit(774, 2);
      try { 
        Utility.decode(" ", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.decode("`kGhk", false);
      try { 
        Utility.methodSignatureArgumentTypes("`kGhk", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `kGhk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-88);
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte) (-88));
      assertEquals("0:    nop\n1:    jsr\t\t#1\n", string2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[4] = (byte)65;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      Utility.printArray((Object[]) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-209), 380);
      assertEquals("0:    sipush\t\t4369\n3:    nop\n4:    lstore_2\n", string0);
      
      String string1 = Utility.convertString("0:    sipush\t\t4369\n3:    nop\n4:    lstore_2\n");
      assertEquals("0:    sipush\t\t4369\\n3:    nop\\n4:    lstore_2\\n", string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.compactClassName("double");
      assertEquals("double", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream.readUTF((DataInput) byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string1);
      
      String string2 = Utility.replace("double", "double", "byte");
      assertEquals("byte", string2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.convertString("g3x@2y(:=arZ");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte)30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      String string1 = Constants.ILLEGAL_OPCODE;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(aoIu", "<clinit>", "<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aoIu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Utility.compactClassName("double", "double", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-96);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("97 6a 02 a0", string1);
      
      int int0 = Utility.setBit((byte) (-96), 147);
      assertEquals((-96), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Qc&W)idQ";
      objectArray0[1] = (Object) "Qc&W)idQ";
      objectArray0[2] = (Object) "Qc&W)idQ";
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)124, (int) (byte)124, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.isSet(162, 39);
      // Undeclared exception!
      try { 
        Utility.signatureToString("impdep1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.signatureToString("S5KBR0");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.classOrInterface(532);
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) "interface";
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte)20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.compactClassName("$X'v", "#]gU7Nb0;GLM6", false);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1957), 2580);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.isJavaIdentifierPart('Q');
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, 941);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.searchOpcode("INSENSITIVE");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)37;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) byteArray0;
      objectArray0[3] = (Object) "INSENSITIVE";
      Object object0 = new Object();
      objectArray0[7] = object0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, 1467);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-69);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, (int) (byte)60, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Utility.format((-15), (-15), true, '(');
      assertEquals("-15", string0);
      
      int int0 = Utility.setBit((-15), 3394);
      assertEquals((-11), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-11), 1074);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2759), (byte)83);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)83, 180);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1074);
      ConstantDouble constantDouble0 = new ConstantDouble((-11));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aastore", string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.searchOpcode("INSENSITIVE");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      Utility.getSignature("INSENSITIVE");
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.replace("<illegal opcode>", "qYc6Fp=QHN", "INSENSITIVE");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence1.getIndex());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "monitorexit";
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-307), (-307));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Character");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)42;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), 101, true);
      assertEquals("0:    ret\t\t%42\n", string0);
      
      String string1 = Utility.convertString("0:    ret\t\t%42\n");
      assertEquals("0:    ret\t\t%42\\n", string1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)40;
      byteArray0[0] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 117, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)56;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)31;
      Utility.equals(byteArray0, byteArray0);
      int int0 = 136;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-85);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (int) (byte) (-61));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2840, (int) (byte) (-100), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)20;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 247, 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<iml5gal;K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<iml5gal;K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null, true, true);
      String string0 = Utility.signatureToString("LX/;");
      assertEquals("X.", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)107;
      byteArray0[2] = (byte) (-96);
      String string0 = Constants.CONSTRUCTOR_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, 50, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.compactClassName("<illegal type>", "<illegal type>", false);
      String string1 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal type>");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 176, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte byte0 = (byte) (-58);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unreachable default case reached!");
      byteArray0[0] = (byte) (-87);
      byteArray0[0] = (byte) (-87);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)73;
      byteArray1[2] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)73, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      Utility.equals(byteArray0, byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.format((-207), (byte)123, true, 's');
      try { 
        Utility.typeOfSignature("&3Xalfj;WBxyz#5*gQ@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &3Xalfj;WBxyz#5*gQ@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)23;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte)77;
      byteArray1[5] = (byte)77;
      byteArray1[6] = (byte) (-90);
      byteArray1[7] = (byte)23;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)87, (byte)23, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)87, (byte)77, (byte)23, (byte)77, (byte)77, (byte) (-90), (byte)23}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("t:<'/&c1; :h+jHI<,$");
      assertNotNull(string0);
      assertEquals("Lt:<'/&c1;;", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-90), (byte)87, (byte)77, (byte)23, (byte)77, (byte)77, (byte) (-90), (byte)23}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-90), (byte)87, (byte)77, (byte)23, (byte)77, (byte)77, (byte) (-90), (byte)23}, byteArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string1);
      assertEquals("if_acmpne\t\t#22349", string1);
      
      String string2 = Utility.replace("t:<'/&c1; :h+jHI<,$", "Lt:<'/&c1;;", "Lt:<'/&c1;;");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("t:<'/&c1; :h+jHI<,$", string2);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)87, (byte)23, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)87, (byte)77, (byte)23, (byte)77, (byte)77, (byte) (-90), (byte)23}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)55;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-75), (byte)55, (byte)55, (byte) (-112), (byte)55}, byteArray0);
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-75), 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 14135. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-49);
      byteArray1[2] = (byte)24;
      byteArray1[6] = (byte) (-49);
      byteArray1[5] = (byte)44;
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[2] = (byte) (-49);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 3566, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)23;
      byteArray0[2] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)23, (byte)0, (byte)0, (byte)23, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = DataInputStream.readUTF((DataInput) byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)23, (byte)0, (byte)0, (byte)23, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(23, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(5888, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(5888, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)23, (byte)0, (byte)0, (byte)23, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(23, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(5888, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(5888, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(5888, constantInvokeDynamic1.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(5888, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals(23, constantInvokeDynamic1.getNameAndTypeIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)23, (byte)0, (byte)0, (byte)23, (byte)0, (byte)0}, byteArray0);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(84, 84);
      assertEquals(84, constantInvokeDynamic2.getBootstrapMethodAttrIndex());
      assertEquals(84, constantInvokeDynamic2.getClassIndex());
      assertEquals(84, constantInvokeDynamic2.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic2.getTag());
      assertFalse(constantInvokeDynamic2.equals((Object)constantInvokeDynamic1));
      assertFalse(constantInvokeDynamic2.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 825, 825, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 186, (-4198));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Utility.getSignature("=NGUQ,0f\"7A!J]1$a^");
      assertNotNull(string0);
      assertEquals("L=NGUQ,0f\"7A!J]1$a^;", string0);
      
      int int0 = Utility.setBit(4, 4);
      assertEquals(20, int0);
      
      String string1 = "INSENSITIVE";
      String string2 = Utility.methodSignatureReturnType("INSENSITIVE");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("int", string2);
      
      try { 
        Utility.methodSignatureToString("INSENSITIVE", "=NGUQ,0f\"7A!J]1$a^", "static", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: INSENSITIVE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte byte0 = (byte) (-99);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature("[LCONSTANT_Fieldref;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [LCONSTANT_Fieldref;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "astore_2";
      stringArray0[1] = "astore_2";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("%D[i''xl.?zOY3XZ", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[i''xl.?zOY3XZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[3] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 199, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byte byte0 = (byte)35;
      byteArray0[3] = (byte)69;
      String string0 = Utility.format(43, (byte)49, false, '.');
      assertNotNull(string0);
      assertEquals("...............................................43", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 155, 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)78;
      byteArray0[1] = (byte)78;
      byte byte1 = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 172, (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte)29;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)45, (byte)123, (byte)72, (byte) (-105), (byte)30}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, (int) (byte)29, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.compactClassName("d8ub<");
      assertNotNull(string0);
      assertEquals("d8ub<", string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)127);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(127, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      constantArray0[0] = (Constant) constantString0;
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)127, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("getstatic", false);
      assertArrayEquals(new byte[] {(byte)103, (byte)101, (byte)116, (byte)115, (byte)116, (byte)97, (byte)116, (byte)105, (byte)99}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, 63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("The array of prefixes must not be null");
      assertEquals((byte)14, byte0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1631, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Utility.format(532, 532, true, 'a');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("532aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)18;
      byte[] byteArray1 = Utility.decode("<clinit>", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(1013148777, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(constantInteger0);
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("fdiv", string2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte)85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[0] = (byte)108;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-537), (-1245), true);
      assertArrayEquals(new byte[] {(byte)108, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    idiv\n1:    nop\n", string0);
      
      short short0 = Utility.searchOpcode("0:    idiv\n1:    nop\n");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.decode("x[<Z)A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[0] = (byte)20;
      byte[] byteArray1 = Utility.decode("x[<Z)A", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)91, (byte)60, (byte)90, (byte)41, (byte)65}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)120, (byte)91, (byte)60, (byte)90, (byte)41, (byte)65}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)120, (byte)91, (byte)60, (byte)90, (byte)41, (byte)65}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte byte0 = (byte) (-71);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte1 = (byte)30;
      boolean boolean0 = true;
      String string1 = Utility.printArray((Object[]) null, true, true);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)30, (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Utility.compactClassName("Only element values of type annotation can be built with this ctor - type specified: ");
      assertNotNull(string0);
      assertEquals("Only element values of type annotation can be built with this ctor - type specified: ", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), 1959);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-61), (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    monitorexit\n1:    monitorexit\n2:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)20;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-307), (-307));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2f
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, 2013);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = Utility.classOrInterface(105);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.classOrInterface(105);
      assertNotNull(string1);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)114;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)114);
      assertArrayEquals(new byte[] {(byte)38, (byte)100, (byte)86, (byte)114}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0:    dload_0\n1:    isub\n2:    sastore\n3:    frem\n", string2);
      
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.classOrInterface(580);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "interface";
      String string1 = Utility.fillup("interface", 580, false, 'Y');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEqualsinterface", string1);
      
      String string2 = Utility.format(580, 580, false, 'e');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee580", string2);
      
      String string3 = Utility.convertString("java.lang.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("java.lang.", string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      String string4 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1876), 580);
      assertArrayEquals(new byte[] {(byte)42, (byte)42}, byteArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("0:    aload_0\n1:    aload_0\n", string4);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    aload_0\n1:    aload_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    aload_0
         // 1:    aload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[2] = object0;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{java.lang.Object@5ad25084, null, java.lang.Object@5ad25084, null, null}");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-27);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)100;
      String string1 = Utility.convertString("{java.lang.Object@5ad25084, null, java.lang.Object@5ad25084, null, null}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-502), (int) (byte)66);
      assertArrayEquals(new byte[] {(byte)0, (byte)100, (byte)42, (byte)66, (byte)42, (byte)100}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0:    nop\n1:    isub\n2:    aload_0\n3:    lstore_3\n4:    aload_0\n5:    isub\n", string2);
      
      String string3 = Utility.getSignature("Es-6fl.GpSDU0_CH");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("LEs-6fl/GpSDU0_CH;", string3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "newarray");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      int int0 = 112;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-69);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 233, 233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte) (-18);
      byteArray0[2] = (byte)58;
      byte byte0 = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[6] = (byte) (-67);
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)48;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " fields:\n";
      String string0 = Utility.methodTypeToSignature("double", stringArray0);
      assertNotNull(string0);
      assertEquals("(Lfields:;)D", string0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Utility.signatureToString("T]=cX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T]=cX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = "N(0>SHZcBh(^.S5l4";
      boolean boolean0 = true;
      try { 
        Utility.decode("$A$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.format((byte) (-18), 2, true, ']');
      assertNotNull(string0);
      assertEquals("-18", string0);
      
      try { 
        Utility.decode("2e7{Gjw$s4G#63r", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)84, (byte)50, (byte) (-18), (byte) (-18)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$cfT2$ee$ee", string0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)50;
      byte[] byteArray2 = Utility.decode("$cfT2$ee$ee", false);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)84, (byte)50, (byte) (-18), (byte) (-18)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("?>...", "fFk!y:}MTasOVsP", "zpeV/s(x!9sC4Y`vw", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)6;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)6, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)6, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      
      short short0 = Utility.searchOpcode("cSHpPD");
      assertEquals((short) (-1), short0);
      
      String string0 = "NEZwO";
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)6, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)6, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nop", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("NEZwO", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NEZwO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = Utility.classOrInterface(532);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      byte byte0 = (byte) (-96);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-769), 56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.convertString("INSENSITIVE");
      assertNotNull(string0);
      assertEquals("INSENSITIVE", string0);
      
      String string1 = Utility.accessToString(2097);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public final synchronized strictfp", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-13);
      byteArray0[6] = (byte) (-57);
      int int0 = 12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 12, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-18);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)107, (byte) (-18), (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("Exceptions: ");
      assertNotNull(string0);
      assertEquals("LExceptions:;", string0);
      
      String string1 = Utility.convertString("F8`8n3kc'K?\"y");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("F8`8n3kc\\'K?\\\"y", string1);
      
      try { 
        Utility.typeOfMethodSignature("LExceptions:;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LExceptions:;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-79);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1511), (-1511));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-79)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    nop\n1:    return\n", string1);
      
      try { 
        Utility.typeOfSignature("0:    nop\n1:    return\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)57, 139);
      assertEquals(57, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(139, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)57, 59);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(57, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(59, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(57, constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ClassPath classPath0 = new ClassPath("uQIe");
      assertNotNull(classPath0);
      
      ClassPath classPath1 = new ClassPath(classPath0, "-%|ZTv];gK&QSOu:");
      assertFalse(classPath1.equals((Object)classPath0));
      assertNotNull(classPath1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, 139);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.signatureToString("CONSTANT_Fieldref");
      assertNotNull(string0);
      assertEquals("char", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=:bpb3'3OIU";
      String string1 = Utility.methodTypeToSignature("char", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(L=:bpb3'3OIU;)C", string1);
      
      int int0 = Utility.clearBit(512, 512);
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "astore_2");
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("D[tAYWB9.[is7?kI.H", false);
      assertNotNull(string0);
      assertEquals("double", string0);
      
      String string1 = Utility.replace("double", "StackMapTable", "[]");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("double", string1);
      
      String string2 = Utility.compactClassName("StackMapTable");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("StackMapTable", string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      objectArray0[0] = object0;
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-27), (byte)70, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-27), (byte)70, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      
      String string2 = Utility.replace("java.lang.Object@6861ab8e, null, null, null, null", "S0>kTVwth", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-27), (byte)70, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-27), (byte)70, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("fstore_3", string3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("?r_1H5-2char");
      assertNotNull(string0);
      assertEquals("?r_1H5-2char", string0);
      
      byte byte0 = Utility.typeOfSignature("LTypes;V");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.signatureToString("I_", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("int", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "byte";
      stringArray0[1] = "byte";
      stringArray0[2] = "int";
      stringArray0[3] = "void";
      try { 
        Utility.methodTypeToSignature("byte", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Utility.classOrInterface(532);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = Utility.decode("@>yLeU", false);
      assertArrayEquals(new byte[] {(byte)64, (byte)62, (byte)121, (byte)76, (byte)101, (byte)85}, byteArray0);
      assertNotNull(byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)64, (byte)62, (byte)121, (byte)76, (byte)101, (byte)85}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.available();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)64, (byte)62, (byte)121, (byte)76, (byte)101, (byte)85}, byteArray0);
      assertEquals(6, int0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)64, (byte)62, (byte)121, (byte)76, (byte)101, (byte)85}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("lstore_1", string2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte) (-18);
      byteArray0[2] = (byte)40;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-67);
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[22];
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[20] = object0;
      objectArray0[4] = object0;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)45;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4085, (int) (byte)45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[20] = object0;
      objectArray0[4] = object0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)96;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)96}, byteArray0);
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 95, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantMethodHandle0.getReferenceKind());
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantMethodHandle0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantMethodHandle0.accept(emptyVisitor0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantMethodHandle0.getReferenceKind());
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantMethodHandle0.getReferenceKind());
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(0, constantMethodHandle1.getReferenceIndex());
      assertEquals(0, constantMethodHandle1.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(byteSequence0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(0, constantMethodHandle2.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle2.getTag());
      assertEquals(0, constantMethodHandle2.getReferenceIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle1));
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle2);
      
      ConstantMethodHandle constantMethodHandle3 = new ConstantMethodHandle(constantMethodHandle1);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(0, constantMethodHandle0.getReferenceKind());
      assertEquals(0, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(0, constantMethodHandle1.getReferenceIndex());
      assertEquals(0, constantMethodHandle1.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(0, constantMethodHandle3.getReferenceKind());
      assertEquals(0, constantMethodHandle3.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle3.getTag());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertTrue(constantMethodHandle0.equals((Object)constantMethodHandle2));
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle2));
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertTrue(constantMethodHandle3.equals((Object)constantMethodHandle0));
      assertTrue(constantMethodHandle3.equals((Object)constantMethodHandle1));
      assertTrue(constantMethodHandle3.equals((Object)constantMethodHandle2));
      assertNotNull(constantMethodHandle3);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      constantPool1.accept(emptyVisitor0);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte) (-100);
      byteArray1[2] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-100), 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = "3ex97m";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ireturn";
      stringArray0[1] = "ireturn";
      stringArray0[2] = "invkehStatic";
      stringArray0[3] = "h'lp[[{mhJ_+>5dL";
      stringArray0[4] = "invkehStatic";
      stringArray0[5] = "3ex97m";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("invkehStatic", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[{mhJ_+>5dL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short short0 = Utility.searchOpcode("monitorexit");
      assertEquals((short)195, short0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = Utility.signatureToString("TR.mTc(8]j9ReF)Mr;", true);
      assertNotNull(string0);
      assertEquals("R.mTc(8]j9ReF)Mr", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)21, (byte) (-94), (byte) (-60)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte)6;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)84;
      byteArray0[2] = (byte) (-104);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-67);
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.decode("C$+^ pZ$>I", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      ConstantPool constantPool0 = null;
      byte byte0 = (byte)54;
      byte byte1 = (byte) (-14);
      int int0 = 170;
      int int1 = (-394);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 176, (-394));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Ilegal type: ");
      assertEquals((byte)10, byte0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), (-2761));
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n", string0);
      
      String string1 = Utility.convertString("Ilegal type: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ilegal type: ", string1);
      
      String string2 = Utility.convertString("0:    <illegal opcode>\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0:    <illegal opcode>\\n", string2);
      
      String string3 = Utility.methodSignatureReturnType("J=7Wbk^h}[}Aw.");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("long", string3);
      
      String string4 = Utility.getSignature("<Td*r F%eu");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("L<Td*r;", string4);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.compactClassName("'", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-79), (byte)90}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(150, 150);
      assertEquals(150, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(150, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = true;
      int int0 = 266;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 266, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[2] = (byte)58;
      byteArray0[6] = (byte) (-70);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)120, (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)24;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)6, (byte)50, (byte)24}, byteArray0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 247, 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-40);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1202, 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (-1172), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-112);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-52));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-112), (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    d2f\n2:    nop\n", string0);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte) (-18);
      byteArray0[2] = (byte)94;
      byteArray0[4] = (byte)121;
      byteArray0[6] = (byte) (-67);
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 73;
      boolean boolean1 = false;
      String string0 = Utility.format((byte)123, 73, false, '3');
      assertNotNull(string0);
      assertEquals("3333333333333333333333333333333333333333333333333333333333333333333333123", string0);
      
      byte[] byteArray0 = Utility.decode("6)6Oc$17v&g]d'ZZH", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("short", "3333333333333333333333333333333333333333333333333333333333333333333333123", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2453), (-2453));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-2453), constantNameAndType0.getSignatureIndex());
      assertEquals((-2453), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2453), (-5341));
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)94}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    dup2_x2\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)94}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("5e", string1);
      
      String string2 = Utility.convertString("zK=@+Q$GMx7");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("zK=@+Q$GMx7", string2);
      
      // Undeclared exception!
      try { 
        Utility.replace("0:    dup2_x2\n", (String) null, "zJ,mP-S3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte) (-18);
      byteArray0[2] = (byte)94;
      byte byte0 = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byteArray0[6] = (byte) (-67);
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      assertEquals((byte)115, byte0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      int int0 = Utility.setBit(168, (byte)115);
      assertEquals(524456, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)115;
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)115, (-28));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-76)}, byteArray0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 188;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), 188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)59}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("R,{N*c3|]&v\"UX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R,{N*c3|]&v\"UX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B");
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("V", true);
      assertNotNull(string0);
      assertEquals("void", string0);
      
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Utility.classOrInterface(532);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      short short0 = Constants.IFNONNULL;
      assertEquals((short)199, short0);
      
      boolean boolean1 = false;
      byte[] byteArray0 = Utility.decode("_+Y)@BU33}E7", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 173, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)20;
      try { 
        Utility.typeOfSignature("5vc/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5vc/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Utility.convertString("UPQHL4wn=M3fV^cr4g");
      assertNotNull(string0);
      assertEquals("UPQHL4wn=M3fV^cr4g", string0);
      
      try { 
        Utility.typeOfSignature("UPQHL4wn=M3fV^cr4g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UPQHL4wn=M3fV^cr4g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte byte0 = (byte)19;
      byte byte1 = (byte) (-49);
      byte[] byteArray0 = new byte[17];
      byteArray0[9] = (byte) (-49);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("H9-%8M}]xP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H9-%8M}]xP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-79);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1511), (-1511));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-79)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    return\n", string0);
      
      byte byte0 = Constants.T_UNKNOWN;
      assertEquals((byte)15, byte0);
      
      String string1 = "invokeinterface";
      try { 
        Utility.methodSignatureArgumentTypes("invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeinterface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = Utility.classOrInterface(532);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byte byte0 = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1828), (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lastore
         // 1:    dmul
         // 2:    <illegal opcode>
         // 3:    dmul
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.replace("multianewarray", "multianewarray", "multianewarray");
      assertNotNull(string0);
      assertEquals("multianewarray", string0);
      
      boolean boolean0 = Utility.isSet((byte)10, (-956));
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong((byte)10);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(10L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureReturnType("MethodParameters[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MethodParameters[]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      int int0 = 20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
      
      String string0 = Utility.format('D', 'D', false, 'D');
      assertNotNull(string0);
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD68", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.convertString("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD68");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD68", string1);
      
      String string2 = Utility.format(81, 122, false, 'T');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT81", string2);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-112);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantLong constantLong0 = new ConstantLong((byte) (-82));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-82L), constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-82L), constantLong0.getBytes());
      assertEquals((-82L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      
      int int0 = Utility.setBit((byte) (-82), (byte)55);
      assertEquals((-82), int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, (int) (byte)55, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-84);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 34, 3540);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)125;
      byteArray0[3] = (byte) (-18);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("[LCONSTANT_Fieldref;V", true);
      assertNotNull(string0);
      assertEquals("CONSTANT_Fieldref[]", string0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = Utility.getSignature("CONSTANT_Fieldref[]");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[LCONSTANT_Fieldref;", string1);
      
      try { 
        Utility.typeOfMethodSignature("[LCONSTANT_Fieldref;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [LCONSTANT_Fieldref;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "goto";
      stringArray0[1] = "goto";
      String string0 = Utility.methodTypeToSignature("goto", stringArray0);
      assertNotNull(string0);
      assertEquals("(Lgoto;Lgoto;)Lgoto;", string0);
      
      String string1 = Utility.methodSignatureToString("(Lgoto;Lgoto;)Lgoto;", "\n", "void", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("void goto \n(goto arg1, goto arg2)", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("_$q78R!y<j.t=< <", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_$q78R!y<j.t=< <'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('P');
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Qc&W)idQ";
      objectArray0[1] = (Object) "Qc&W)idQ";
      objectArray0[2] = (Object) "Qc&W)idQ";
      byte byte0 = (byte)45;
      String string0 = Utility.convertString(" entries\n");
      assertNotNull(string0);
      assertEquals(" entries\\n", string0);
      
      try { 
        Utility.typeOfSignature("7X=Gu7X=Gu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7X=Gu7X=Gu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[3] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      char char0 = '*';
      String string2 = Utility.format(23, 23, false, '*');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("*********************23", string2);
      
      String string3 = "dastore";
      String string4 = Utility.convertString("dastore");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("dastore", string4);
      
      try { 
        Utility.typeOfSignature("*********************23");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 23
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-60);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.format(2933, (byte) (-82), false, 'r');
      assertNotNull(string0);
      assertEquals("2933", string0);
      
      String string1 = Utility.convertString("=3o");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("=3o", string1);
      
      try { 
        Utility.typeOfSignature("2933");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2933
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 14, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Utility.format((byte)123, (byte)123, true, '%');
      assertNotNull(string0);
      assertEquals("123%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string0);
      
      byte byte0 = Constants.ITEM_Bogus;
      assertEquals((byte)0, byte0);
      
      int int0 = Utility.clearBit((byte)123, (byte)0);
      assertEquals(122, int0);
      
      try { 
        Utility.typeOfSignature("123%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 123%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-103);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte) (-103), true);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)4, (byte) (-103), (byte) (-103), (byte)115, (byte) (-103)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    ifge\t\t#1177\n3:    ifeq\t\t#29596\n", string0);
      
      String string1 = Utility.getSignature("0:    ifge\t\t#1177\n3:    ifeq\t\t#29596\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L0:;", string1);
      
      try { 
        Utility.typeOfSignature("0:    ifge\t\t#1177\n3:    ifeq\t\t#29596\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ifge\t\t#1177
         // 3:    ifeq\t\t#29596
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Q');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)123}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = false;
      String string0 = Utility.format((byte)123, (byte)123, false, 'Q');
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ123", string0);
      
      int int0 = 136;
      // Undeclared exception!
      try { 
        Utility.signatureToString("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ123", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ123'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)123;
      String string0 = Utility.format((byte)123, (byte)123, false, 'Q');
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ123", string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = Utility.decode("short", false);
      assertArrayEquals(new byte[] {(byte)115, (byte)104, (byte)111, (byte)114, (byte)116}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2921, (-4011));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-537), (-2205), true);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n", string0);
      
      short short0 = Utility.searchOpcode("0:    nop\n1:    nop\n");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = Utility.decode("ret", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)101, (byte)116}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)101, (byte)116}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)114, (byte)101, (byte)116}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("frem", string1);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)81;
      boolean boolean0 = Utility.equals(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)114, (byte)101, (byte)116}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(239, 215);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)82, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.format((-658), 92, true, 'i');
      assertNotNull(string0);
      assertEquals("-658iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-658iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.convertString("T/");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("T/", string1);
      
      try { 
        Utility.typeOfSignature(">@3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >@3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-213), 164);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)93}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals("0:    dup2_x1\n", string0);
      
      // Undeclared exception!
      try { 
        constantPool1.constantToString(180, (byte)57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "<illegal type>";
      objectArray0[1] = (Object) "<illegal type>";
      objectArray0[2] = (Object) "<illegal type>";
      objectArray0[3] = (Object) "<illegal type>";
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      String string2 = Utility.format(2, 2, true, '*');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("2*", string2);
      
      String string3 = Utility.convertString("jsr");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("jsr", string3);
      
      try { 
        Utility.typeOfSignature("6LDB}GFj7Z.J(pe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6LDB}GFj7Z.J(pe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72)}, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.format((byte) (-72), 1344, false, 'i');
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "StackMap(");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.convertString("-75");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-75", string1);
      
      byte byte0 = Utility.typeOfSignature("B>3(_}K'%(4WaFU0~87");
      assertEquals((byte)8, byte0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitoreit", "monitoreit", "monitoreit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitoreit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/line.separator");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)0, (byte)0);
      assertEquals(0, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(0, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("java.lang.CONSTANT_Fieldref[9](class_index = 219, name_and_type_index = -1283), null, null, null, null", stringArray0);
      assertNotNull(string0);
      assertEquals("()[Ljava/lang/CONSTANT_Fieldref;", string0);
      
      boolean boolean1 = false;
      String string1 = "\\n";
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.", "java.lang.null, [B@291b4231, <illegal type>, <illegal type>", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "<illegal type>";
      objectArray0[1] = (Object) "<illegal type>";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectArray0[2] = (Object) "<illegal type>";
      objectArray0[3] = (Object) "<illegal type>";
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      String string2 = Utility.format(82, 532, true, 'a');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("82aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)61, (byte)18, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)61, (byte)18, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("istore_2", string3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = Utility.isSet(34, 46);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ";83I?$H>R";
      try { 
        Utility.typeOfSignature(";83I?$H>R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;83I?$H>R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "<illegal type>";
      objectArray0[1] = (Object) "<illegal type>";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectArray0[2] = (Object) "<illegal type>";
      objectArray0[3] = (Object) "<illegal type>";
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      String string2 = Utility.format(104, 532, false, 'a');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa104", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-72);
      byteArray0[4] = (byte) (-49);
      String string3 = Utility.convertString("<illegal type>");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("<illegal type>", string3);
      
      byte byte0 = Utility.typeOfSignature("F}*f/>Q,j 1I4W");
      assertEquals((byte)6, byte0);
      
      short short0 = Utility.searchOpcode("\tdefault = ");
      assertEquals((short) (-1), short0);
      
      String string4 = Utility.getSignature("<L&?&*xqkYR");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("L<L&?&*xqkYR;", string4);
      
      boolean boolean1 = Utility.isSet(2162, (byte)61);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)123}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Utility.format((byte)123, (byte)123, false, 'Q');
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ123", string0);
      
      String string1 = "sot";
      byte[] byteArray1 = Utility.decode("sot", false);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)111, (byte)116}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String string2 = Utility.convertString("^-q Xgk-}?-4o");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^-q Xgk-}?-4o", string2);
      
      try { 
        Utility.typeOfSignature("KP#gtf's'nN<}st");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KP#gtf's'nN<}st
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-49);
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-48);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-48)}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "M";
      String string1 = Utility.convertString("M");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("M", string1);
      
      try { 
        Utility.typeOfSignature("W:<cr<vMJYG.;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W:<cr<vMJYG.;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "9.>qzoZ|*J";
      try { 
        Utility.typeOfSignature("9.>qzoZ|*J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9.>qzoZ|*J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-40);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-627), 61);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)71, (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    dstore_0\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    <illegal opcode>\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-40), (byte)71, (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{null, null, null}", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)71, (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("d8 47 d8 d8 d8 d8", string2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "<illegal type>";
      objectArray0[1] = (Object) "<illegal type>";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-109);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte) (-14));
      assertArrayEquals(new byte[] {(byte)54, (byte) (-14), (byte) (-109)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    istore\t\t%242\n2:    i2s\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)54, (byte) (-14), (byte) (-109)}, byteArray0);
      assertNotNull(byteSequence0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".3/=?[Xf8(LiF9>lt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .3/=?[Xf8(LiF9>lt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)127;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l,?yp#,.H");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)45;
      String string0 = Utility.convertString("l,?yp#,.H");
      assertNotNull(string0);
      assertEquals("l,?yp#,.H", string0);
      
      String string1 = ",&J#\\)5JSC";
      try { 
        Utility.typeOfSignature(",&J#)5JSC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,&J#)5JSC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "[]";
      String string1 = Utility.compactClassName("[]", "ethodParqmeter&", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[]", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)53, 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, 89, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = true;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-60);
      int int0 = 121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 121, 2123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.compactClassName("d8ub<", "d8ub<", false);
      assertNotNull(string0);
      assertEquals("d8ub<", string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)127);
      assertEquals(127, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertNotNull(constantString0);
      
      constantArray0[0] = (Constant) constantString0;
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 62, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)121, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.convertString("M");
      assertNotNull(string0);
      assertEquals("M", string0);
      
      try { 
        Utility.typeOfSignature("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "#";
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("[]", "MethodParameters", false);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      String string1 = Utility.printArray((Object[]) null, false, false);
      assertNull(string1);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte)81;
      byteArray1[3] = (byte)46;
      byteArray1[4] = (byte) (-73);
      byteArray1[5] = (byte)0;
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[0] = (byte) (-73);
      byteArray1[7] = (byte) (-73);
      byteArray1[8] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 474, 2472);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KE8+-<A");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = Utility.isSet(171, (-2000));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string0 = Utility.convertString("short");
      assertNotNull(string0);
      assertEquals("short", string0);
      
      byte byte0 = Utility.typeOfSignature("VCjl]*SgmxT(,GHGV");
      assertEquals((byte)12, byte0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "short";
      objectArray0[3] = (Object) "short";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null, null, short, short", string1);
      
      String string2 = Utility.compactClassName("J");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("J", string2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "d8ub<";
      ConstantString constantString0 = new ConstantString(850);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(850, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(850);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = (byte) (-86);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), 850);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("C@0VHe4rv", true);
      assertNotNull(string0);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-47);
      String string1 = Utility.getSignature("{}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L{};", string1);
      
      byte byte0 = Utility.typeOfSignature("L{};");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.compactClassName("<illegal type>", "<illegal type>", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte) (-75), (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      String string2 = "-aRP1e8h'r";
      try { 
        Utility.typeOfSignature("-aRP1e8h'r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -aRP1e8h'r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.getSignature("7StB=|Z&M5uX;");
      assertNotNull(string0);
      assertEquals("L7StB=|Z&M5uX;;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)18;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-91), (byte) (-74), (byte)34, (byte)15, (byte)18}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte) (-77);
      byteArray1[2] = (byte)109;
      byteArray1[3] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-77), (byte)109, (byte) (-39)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      
      char char0 = byteSequence0.readChar();
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-77), (byte)109, (byte) (-39)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals('\uAEB3', char0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-77), (byte)109, (byte) (-39)}, byteArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string1);
      assertEquals("ldiv", string1);
      
      boolean boolean1 = Utility.equals(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-77), (byte)109, (byte) (-39)}, byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1);
      
      try { 
        Utility.typeOfMethodSignature("L7StB=|Z&M5uX;;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L7StB=|Z&M5uX;;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Ilegal type: ");
      assertEquals((byte)10, byte0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-43);
      byteArray1[2] = (byte) (-111);
      byteArray1[3] = (byte) (-102);
      byteArray1[0] = (byte)112;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-4815), (int) (byte)10);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)112, (byte) (-43), (byte) (-111), (byte) (-102), (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals("0:    irem\n1:    <illegal opcode>\n2:    i2b\n3:    ifne\t\t#3\n", string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-43), 206, true);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    lconst_1\n", string1);
      
      int int0 = Utility.setBit((byte)0, 1114);
      assertEquals(67108864, int0);
      
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-43), (byte) (-111), (byte) (-102), (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char char0 = 'P';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.format(9, 9, false, 'P');
      assertNotNull(string0);
      assertEquals("PPPPPPPP9", string0);
      
      try { 
        Utility.typeOfSignature("PPPPPPPP9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PPPPPPPP9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(47);
      assertEquals(47, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertNotNull(constantString0);
      
      String string0 = "CONSTANT_MethodHandle[15](reference_kind = -1687, reference_index = 191)CONSTANT_MethodHandle[15](reference_kind = -1687, reference_index = 191)";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CONSTANT_MethodHandle[15](reference_kind = -1687, reference_index = 191)CONSTANT_MethodHandle[15](reference_kind = -1687, reference_index = 191)");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)73;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = true;
      ConstantPool constantPool0 = null;
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      byte byte1 = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-10);
      byte byte2 = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 172, (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "multianewarray");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, (-1466));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("3U=i<UVb._$P&#@j/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3U=i<UVb._$P&#@j/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 115, (int) (byte) (-85), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      Constant[] constantArray0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<clinit>");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Constants.ILLEGAL_OPCODE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("<clinit>", string2);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)75, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.classOrInterface(532);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.compactClassName("interface", true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("interface", string1);
      
      String string2 = Constants.ILLEGAL_TYPE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("<illegal type>", string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1636, 1636);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "E,#NtC,w$'b";
      // Undeclared exception!
      try { 
        Utility.signatureToString("E,#NtC,w$'b", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E,#NtC,w$'b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("$A", string0);
      
      try { 
        Utility.typeOfSignature("$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)101}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = Utility.convertString("E;wAxm]23=(7");
      assertNotNull(string0);
      assertEquals("E;wAxm]23=(7", string0);
      
      try { 
        Utility.typeOfSignature("E;wAxm]23=(7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E;wAxm]23=(7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("[]", "MethodParameters", false);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      try { 
        Utility.methodSignatureReturnType("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature(":~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('P');
      assertTrue(boolean0);
      
      String string0 = Utility.format('P', 'P', false, 'P');
      assertNotNull(string0);
      assertEquals("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP80", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP80", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP80'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)82, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.format((-658), 92, true, 'i');
      assertNotNull(string0);
      assertEquals("-658iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-658iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.convertString("T/");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("T/", string1);
      
      String string2 = Utility.methodTypeToSignature("T/", (String[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("()LT/;", string2);
      
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()LT/;");
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte) (-63);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Constants.T_UNKNOWN;
      assertEquals((byte)15, byte0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "double";
      stringArray0[1] = "double";
      String string0 = Utility.methodTypeToSignature("double", stringArray0);
      assertNotNull(string0);
      assertEquals("(DD)D", string0);
      
      byte byte1 = Utility.typeOfMethodSignature("(DD)D");
      assertFalse(byte1 == byte0);
      assertEquals((byte)7, byte1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("multianewarray", "?G3n/", "double", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.compactClassName("oW'/M8!", "monitorexit", false);
      assertNotNull(string0);
      assertEquals("oW'.M8!", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-99);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2379), 3, true);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-99), (byte) (-99), (byte)16, (byte) (-99)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    jsr\t\t#-25187\n3:    bipush\t\t-99\n", string1);
      
      String string2 = Utility.compactClassName("oW'/M8!", true);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("oW'.M8!", string2);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("?r_1H5-2");
      assertNotNull(string0);
      assertEquals("?r_1H5-2", string0);
      
      try { 
        Utility.typeOfSignature("?r_1H5-2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?r_1H5-2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 3454, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[0] = (byte)103;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string0 = Utility.format((byte)0, (byte)103, false, 'Q');
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ0", string0);
      
      try { 
        Utility.typeOfSignature("O$XBRZ;{7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O$XBRZ;{7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-88);
      byteArray0[0] = (byte) (-88);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      byte byte1 = (byte) (-111);
      byteArray0[0] = (byte) (-111);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-111), (byte) (-111));
      assertEquals((-111), constantMethodref0.getClassIndex());
      assertEquals((-111), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-111), (byte) (-111));
      assertEquals((-111), constantInvokeDynamic0.getClassIndex());
      assertEquals((-111), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-111), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = ")\t";
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[6] = (byte) (-18);
      byteArray0[3] = (byte) (-70);
      byteArray0[6] = (byte) (-67);
      try { 
        Utility.typeOfSignature("4{SkLNJ3,4]M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4{SkLNJ3,4]M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)75;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte byte0 = (byte) (-107);
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      String string1 = Utility.compactClassName(":");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(":", string1);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-97);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (int) (byte) (-72));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "Y)e.md-kY^)";
      try { 
        Utility.typeOfSignature("Y)e.md-kY^)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y)e.md-kY^)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)17;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte) (-98), (byte)17, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("U", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-5);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-5), (int) (byte) (-5));
      assertArrayEquals(new byte[] {(byte)39, (byte) (-5)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    dload_1\n1:    <illegal opcode>\n", string1);
      
      String string2 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)127);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(127, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      constantArray0[0] = (Constant) constantString0;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, (-1963));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Q');
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean3 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Utility.format(105, 944, true, 's');
      Utility.convertString("CLASSPATH component ");
      Utility.typeOfSignature("CLASSPATH component ");
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)24;
      byteArray0[4] = (byte) (-32);
      String string0 = "'rO/nI";
      try { 
        Utility.typeOfSignature("'rO/nI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'rO/nI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (-3883));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), 194);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "[]";
      String string1 = Utility.compactClassName("[]", "MethodParameters", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[]", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      int int0 = (-652);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-652), 71);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0:    fload_0\n", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    fload_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = "%X9%+&R_.";
      try { 
        Utility.typeOfSignature("%X9%+&R_.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %X9%+&R_.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)88, (-3076));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[2] = (byte)0;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = Utility.typeOfSignature("StackMap(");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      Object[] objectArray0 = new Object[8];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      objectArray0[5] = (Object) (byte)113;
      byteArray0[3] = (byte) (-69);
      short short0 = Constants.IFNONNULL;
      assertEquals((short)199, short0);
      
      String string1 = "ireturn";
      ClassPath classPath0 = new ClassPath("<clinit>");
      assertNotNull(classPath0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 240, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i2UIv&XU'3P@byL");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)45;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-86), (byte)45, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NZP{!#r>{b");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature("NZP{!#r>{b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NZP{!#r>{b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/:");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)116;
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-97);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-97), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature("/:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 178, (-988));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = "?Fr_1H5=2char";
      String string2 = Utility.convertString("[");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[", string2);
      
      String string3 = "AnnotationDefault";
      try { 
        Utility.typeOfSignature("AnnotationDefault");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AnnotationDefault
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-94);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, (-4284));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1325), 7);
      assertEquals((-1325), constantMethodHandle0.getReferenceKind());
      assertEquals(7, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      String string0 = "K\"IGur:b:";
      try { 
        Utility.methodSignatureReturnType("K\"IGur:b:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K\"IGur:b:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, (int) (byte)60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "MethodParameters";
      String string1 = Utility.compactClassName("MethodParameters", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("MethodParameters", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-73);
      String string2 = Utility.printArray((Object[]) null, false, false);
      assertNull(string2);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)63;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte)46;
      byteArray1[4] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 357, (int) (byte) (-73), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-121);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-6), (-2402), true);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)60, (byte) (-121)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    istore_1\n2:    i2d\n", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1511), (-1511));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-57), (byte) (-58));
      assertEquals((-57), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-57), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-58), constantInvokeDynamic0.getNameAndTypeIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(75, (byte) (-119));
      assertEquals((-119), constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(75, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(75, constantInvokeDynamic1.getClassIndex());
      assertFalse(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, 1515);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)52;
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 190);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      try { 
        Utility.typeOfSignature("\"|f;NnVNJJ$'wU|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"|f;NnVNJJ$'wU|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.`U3{[lrxMe,)");
      assertNotNull(string0);
      assertEquals("`U3{[lrxMe,)", string0);
      
      try { 
        Utility.typeOfSignature("@ZqQ~pWl3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @ZqQ~pWl3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "=={*``TN\\e";
      try { 
        Utility.typeOfSignature("=={*``TNe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =={*``TNe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[22] = (byte)19;
      byteArray0[2] = (byte)19;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1929, (-1325));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-1325), constantMethodHandle0.getReferenceIndex());
      assertEquals(1929, constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-1325), constantMethodHandle0.getReferenceIndex());
      assertEquals(1929, constantMethodHandle0.getReferenceKind());
      assertEquals((-1325), constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(1929, constantMethodHandle1.getReferenceKind());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-1325), constantMethodHandle0.getReferenceIndex());
      assertEquals(1929, constantMethodHandle0.getReferenceKind());
      assertEquals((-1325), constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(1929, constantMethodHandle1.getReferenceKind());
      assertEquals(1929, constantMethodHandle2.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle2.getTag());
      assertEquals((-1325), constantMethodHandle2.getReferenceIndex());
      assertTrue(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle0));
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle1));
      assertNotNull(constantMethodHandle2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 121, (-282));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-49);
      byteArray1[2] = (byte)24;
      byteArray1[6] = (byte) (-49);
      byteArray1[5] = (byte)33;
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[2] = (byte) (-49);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 3566, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+QA)%7>SZF'TObTC~K");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("+QA)%7>SZF'TObTC~K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QA)%7>SZF'TObTC~K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "newarray");
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("newarray", ".)9/7-b", false);
      assertNotNull(string0);
      assertEquals("newarray", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 42, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = Utility.format(180, 9, false, 'O');
      assertNotNull(string0);
      assertEquals("OOOOOO180", string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OOOOOO180");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.convertString("8Uz^,>DCX-7(g\"p");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("8Uz^,>DCX-7(g\\\"p", string1);
      
      byte byte0 = Utility.typeOfSignature("ZGgG");
      assertEquals((byte)4, byte0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("I9?Sxb\"*Dp[C^# ", "I9?Sxb\"*Dp[C^# ", "^i}9]<kHQ(7RcD3!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I9?Sxb\"*Dp[C^# 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.compactClassName("oW'/M8!", "monitoreit", false);
      assertNotNull(string0);
      assertEquals("oW'.M8!", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode(">2$B2bWNsvh9", false);
      assertNotNull(byteArray0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$3e2$B2bWNsvh9", string1);
      
      MockFile mockFile0 = new MockFile("oW'/M8!", "impdep2");
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/oW'/M8!", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/oW'/M8!/impdep2", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("impdep2", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fdIX1%u/B}J+r");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("iYq0\" `", (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('R');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = Utility.clearBit((-1614), (-1614));
      assertEquals((-263758), int0);
      
      String string2 = Utility.printArray((Object[]) null, false);
      assertNull(string2);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("monitoreit");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 163, 163, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XmAF&|z@xpd3b*nt");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2457, (-1038));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)40;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "\"|f;NnVN\\JJ$'wU|";
      byte byte0 = Utility.typeOfSignature("J>'K;9?");
      assertEquals((byte)11, byte0);
      
      boolean boolean1 = Utility.isSet(162, (byte)40);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = null;
      try { 
        Utility.methodSignatureArgumentTypes("J>'K;9?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J>'K;9?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "LX/;";
      String string1 = Utility.signatureToString("LX/;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("X.", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("X.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[8];
      MockFile mockFile0 = new MockFile("&\"");
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("&\"", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("&\"", mockFile0.toString());
      assertNotNull(mockFile0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(77, (byte) (-83));
      assertEquals(77, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-83), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertEquals(77, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-83), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals((-83), constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(77, constantInterfaceMethodref1.getClassIndex());
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-83), (-2113));
      assertEquals((-83), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-2113), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)58);
      assertEquals(58, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      constantArray0[4] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertEquals(77, constantInterfaceMethodref0.getClassIndex());
      assertEquals((-83), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((byte)11, constantInterfaceMethodref2.getTag());
      assertEquals(77, constantInterfaceMethodref2.getClassIndex());
      assertEquals((-83), constantInterfaceMethodref2.getNameAndTypeIndex());
      assertTrue(constantInterfaceMethodref0.equals((Object)constantInterfaceMethodref1));
      assertTrue(constantInterfaceMethodref2.equals((Object)constantInterfaceMethodref1));
      assertTrue(constantInterfaceMethodref2.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref2);
      
      constantArray0[7] = (Constant) constantInterfaceMethodref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)58, (-117));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, 512, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)68, (byte)77, (byte)101, (byte)122, (byte) (-72), (byte)81, (byte)67}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)68, (byte)77, (byte)101, (byte)122, (byte) (-72), (byte)81, (byte)67}, byteArray0);
      assertNotNull(string0);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte)102;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-628), true);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)102}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    fsub\n1:    fsub\n2:    fsub\n3:    fsub\n4:    fsub\n5:    fsub\n6:    fsub\n7:    fsub\n8:    fsub\n", string0);
      
      String string1 = Utility.signatureToString("CMUAATf");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("char", string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      String string2 = Utility.printArray(objectArray0, true, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.replace("char", "A!](bz>n", "[kz@:fHc");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("char", string3);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte byte0 = (byte) (-83);
      byte byte1 = (byte) (-88);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1511), (int) (byte) (-88));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      try { 
        Utility.typeOfSignature("8.,#Sf6.KPXF,@o!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8.,#Sf6.KPXF,@o!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.convertString("BmhXCFS2K!,}");
      assertNotNull(string0);
      assertEquals("BmhXCFS2K!,}", string0);
      
      String string1 = Utility.methodSignatureReturnType("BmhXCFS2K!,}", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("byte", string1);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lsb|AfP8PN8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lsb|AfP8PN8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-78);
      byteArray0[0] = (byte) (-78);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 88, (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      int int0 = (-2249);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 171, (-2249));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YWsC//tMo#[0lii|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YWsC//tMo#[0lii|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-110);
      byteArray0[0] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte)85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 34, (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("!&ViffOP{uvjC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &ViffOP{uvjC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byte byte1 = (byte)25;
      byteArray0[1] = (byte)25;
      byte byte2 = (byte)127;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XmAF&|z@xpd3b*nt");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = 2226;
      int int1 = 16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, 2226);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 195, 15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = "double";
      String string1 = Utility.compactClassName("double", "double", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)106;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, (-1935176629), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)73;
      byteArray0[4] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3111, 13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-77);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-120), (-120));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-120), constantNameAndType0.getSignatureIndex());
      assertEquals((-120), constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Ab1");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("Ab1", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)127, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)22;
      byteArray0[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)90, (byte)22, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(150, 150);
      assertEquals(150, constantNameAndType0.getSignatureIndex());
      assertEquals(150, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      int int0 = 266;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 266, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      int int0 = (-1046);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (-1046));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte) (-64);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-64)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-64)}, byteArray0);
      assertNotNull(dataInputStream0);
      
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-64)}, byteArray0);
      assertNotNull(constantPool0);
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-64)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-64)}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-64)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nop", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1151, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "XPNa'u@6}{g";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "XPNa'u@6}{g";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "XPNa'u@6}{g";
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("XPNa'u@6}{g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XPNa'u@6}{g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L<init>;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte byte0 = (byte) (-58);
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte) (-58);
      byteArray0[4] = (byte)27;
      byteArray0[6] = (byte)27;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XmAF&|z@xpd3b*nt");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2226, (int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)48;
      byteArray0[0] = (byte) (-128);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)48, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("$800$A$A$A", string0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = Utility.decode("mW0z1B+5Kzf1>$\"?3H", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String string1 = Utility.getSignature("fqoaQt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("LfqoaQt;", string1);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-41), 104);
      assertEquals((-41), constantMethodHandle0.getReferenceKind());
      assertEquals(104, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals((-41), constantMethodHandle0.getReferenceKind());
      assertEquals(104, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(104, constantMethodHandle1.getReferenceIndex());
      assertEquals((-41), constantMethodHandle1.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      constantMethodHandle1.setReferenceIndex((byte) (-128));
      assertNotSame(constantMethodHandle0, constantMethodHandle1);
      assertNotSame(constantMethodHandle1, constantMethodHandle0);
      assertEquals((-41), constantMethodHandle0.getReferenceKind());
      assertEquals(104, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-41), constantMethodHandle1.getReferenceKind());
      assertEquals((-128), constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertFalse(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertFalse(constantMethodHandle1.equals((Object)constantMethodHandle0));
      
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      assertEquals((-41), constantMethodHandle0.getReferenceKind());
      assertEquals(104, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-41), constantMethodHandle1.getReferenceKind());
      assertEquals((-128), constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals((-128), constantMethodHandle2.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle2.getTag());
      assertEquals((-41), constantMethodHandle2.getReferenceKind());
      assertFalse(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertFalse(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertTrue(constantMethodHandle2.equals((Object)constantMethodHandle1));
      assertFalse(constantMethodHandle2.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle2);
      
      String string2 = Utility.replace("LfqoaQt;", "w$%u#nf&\"VTZv", "w$%u#nf&\"VTZv");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("LfqoaQt;", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte)48, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[16];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(16, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(16, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte)48, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("ior", string3);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-98);
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), 2033);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, 4092, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.compactClassName("d8ub<", "d8ub<", false);
      assertNotNull(string0);
      assertEquals("d8ub<", string0);
      
      ConstantString constantString0 = new ConstantString((byte)127);
      assertEquals(127, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertNotNull(constantString0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantString constantString1 = (ConstantString)constantString0.clone();
      assertNotSame(constantString0, constantString1);
      assertNotSame(constantString1, constantString0);
      assertEquals(127, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals(127, constantString1.getStringIndex());
      assertTrue(constantString1.equals((Object)constantString0));
      assertNotNull(constantString1);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-122);
      int int0 = (-660);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-660), (int) (byte)127);
      assertEquals(3, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)127, (byte) (-122)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0:    land\n1:    i2f\n", string2);
      
      String string3 = Utility.classOrInterface((byte) (-122));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("interface", string3);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantPool2.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      
      try { 
        constantPool2.constantToString((int) (byte) (-122), (byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -122. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)127);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(127, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      constantPool0.setConstantPool(constantArray0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      
      byteArray0[3] = (byte) (-86);
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool2.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    land
         // 1:    land
         // 2:    land
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = true;
      ConstantPool constantPool0 = null;
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)58;
      String string1 = "long";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "long");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-89);
      int int0 = 159;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, (int) (byte)58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("FYP.Z>");
      assertNotNull(string0);
      assertEquals("float", string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(32);
      assertEquals(32, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertEquals(32, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(32, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = Utility.decode("FYP.Z>", false);
      assertArrayEquals(new byte[] {(byte)70, (byte)89, (byte)80, (byte)46, (byte)90, (byte)62}, byteArray0);
      assertNotNull(byteArray0);
      
      int int0 = Utility.clearBit(16, (-1822));
      assertEquals(16, int0);
      
      String string1 = Utility.methodSignatureReturnType("Z4", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("boolean", string1);
      
      String string2 = Utility.signatureToString("FYP.Z>");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("float", string2);
      
      String string3 = Utility.compactClassName("BP'524a`zT):f;*]k");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("BP'524a`zT):f;*]k", string3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1210, 1033, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ConstantPool constantPool0 = null;
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)58;
      String string1 = "long";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-124);
      byte byte0 = (byte) (-89);
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, (int) (byte) (-89), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
