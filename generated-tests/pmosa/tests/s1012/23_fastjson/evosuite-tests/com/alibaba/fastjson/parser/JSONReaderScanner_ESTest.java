/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:29:56 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '8';
      charArray0[0] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      int int0 = 0;
      bufferedReader0.mark(0);
      bufferedReader0.lines();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(bufferedReader0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.isEOF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      boolean boolean1 = jSONReaderScanner0.isEOF();
      assertFalse(boolean1 == boolean0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSON.DEFAULT_PARSER_FEATURE = 4011;
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.close();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">T+-`xMt0Z,.5U|qG)");
      int int0 = 0;
      jSONReaderScanner0.charAt(0);
      int int1 = (-2673);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-2673), (-2673));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2673
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = 4871;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4871, 4871);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      String string0 = jSONReaderScanner0.subString(3655, 0);
      assertEquals("", string0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3655, 3655, 0);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONReaderScanner0.bytesValue();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      String string0 = jSONReaderScanner0.subString(3655, 27);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      jSONReaderScanner0.bytesValue();
      char char0 = jSONReaderScanner0.next();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1269);
      jSONReaderScanner0.subString(1269, 1269);
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      boolean boolean1 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 3655);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[9];
      jSONReaderScanner0.scanFieldInt(charArray0);
      charArray0[0] = '2';
      jSONReaderScanner0.np = 100;
      charArray0[1] = '6';
      jSONReaderScanner0.isBlankInput();
      charArray0[2] = 'y';
      charArray0[3] = '$';
      Locale locale0 = Locale.KOREAN;
      jSONReaderScanner0.setLocale(locale0);
      charArray0[4] = 'k';
      charArray0[5] = '';
      charArray0[6] = 'b';
      charArray0[7] = '<';
      char char0 = '|';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      int int0 = 0;
      int int1 = 0;
      int int2 = 0;
      SymbolTable symbolTable0 = new SymbolTable(1852);
      symbolTable0.addSymbol("", (-1166), 0, (-1));
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("", 0, 1161, 1121);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("z9]/uRZ^9{bMnR+`");
      jSONReaderScanner0.sub_chars(1413, 1413);
      assertEquals('z', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = 'U';
      charArray0[2] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2365);
      char[] charArray1 = jSONReaderScanner0.sub_chars(33, 2365);
      jSONReaderScanner0.arrayCopy(2365, charArray1, 0, 1005);
      jSONReaderScanner0.bytesValue();
      assertEquals('?', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'k';
      charArray0[0] = 'k';
      char char1 = 'V';
      charArray0[1] = 'V';
      int int0 = 244;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 244);
      jSONReaderScanner0.scanIdent();
      char char2 = 'g';
      jSONReaderScanner0.scanDate('g');
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 431, 431);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PY]32iA'MT.kzJ7]");
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      char[] charArray1 = new char[8];
      charArray1[0] = 'e';
      charArray1[1] = 'X';
      charArray1[2] = 'e';
      charArray1[3] = 'M';
      charArray1[4] = 'X';
      charArray1[5] = 'X';
      charArray1[6] = 'e';
      charArray1[7] = 'X';
      jSONReaderScanner0.charArrayCompare(charArray1);
      charArray0[1] = 'e';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(2187, 2187, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      char char0 = 'T';
      charArray0[1] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 74, 74);
      jSONReaderScanner0.putChar('T');
      int int0 = (-3016);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      int int1 = 431;
      SymbolTable symbolTable0 = new SymbolTable(431);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, (-1), 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D", (-103));
      char char0 = jSONReaderScanner0.charAt(81);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', char0);
      assertEquals('D', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "f34m0U*S3fxdcVZ97r\"";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f34m0U*S3fxdcVZ97r\"");
      int int0 = 2794;
      Locale locale0 = Locale.FRENCH;
      locale0.stripExtensions();
      locale0.stripExtensions();
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      locale0.stripExtensions();
      jSONReaderScanner0.setLocale(locale0);
      int int1 = 4142;
      jSONReaderScanner0.sub_chars(2794, 4142);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.bytesValue();
      int int2 = 0;
      jSONReaderScanner0.charAt(0);
      int int3 = 0;
      int int4 = 0;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '&';
      charArray0[2] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("~");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      charArrayReader0.read(charBuffer0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.bp = (-70);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('&', 785);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'x';
      charArray0[2] = ' ';
      charArray0[3] = 'm';
      charArray0[4] = 'W';
      charArray0[5] = 's';
      charArray0[6] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1138);
      SymbolTable symbolTable0 = new SymbolTable(121);
      String string0 = jSONReaderScanner0.addSymbol(0, 51, 103, symbolTable0);
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals("Yx mWsy\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 431, 431);
      jSONReaderScanner0.matchField(charArray0);
      char[] charArray1 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray1, (-680));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1638);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.stringVal();
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals(20, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 3218;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 3218);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('P');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.indexOf('_', 65536);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4871, 4871);
      jSONReaderScanner0.scanIdent();
      String string0 = jSONReaderScanner0.stringVal();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 4871, 0);
      String string1 = jSONReaderScanner0.numberString();
      assertFalse(jSONReaderScanner0.isEOF());
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1532);
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 3218;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 3218);
      char[] charArray0 = new char[3];
      char char0 = '\'';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1638);
      jSONReaderScanner0.tokenName();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" gQy4)gh?v{-Hf|s_p");
      boolean boolean0 = jSONReaderScanner1.isBlankInput();
      assertEquals(' ', jSONReaderScanner1.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 244);
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.indexOf('9', 244);
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.close();
      jSONReaderScanner0.charAt(244);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'L');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanDate('L');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zRJ,d)LizS1e", (-3348));
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TODO", (-1));
      jSONReaderScanner1.stringDefaultValue = "";
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = ';';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-1), charArray0, (-970), (-3348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a3Y89mO)B");
      jSONReaderScanner0.nextIdent();
      Locale locale0 = Locale.PRC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'S');
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      assertTrue(jSONReaderScanner0.isEOF());
  }
}
