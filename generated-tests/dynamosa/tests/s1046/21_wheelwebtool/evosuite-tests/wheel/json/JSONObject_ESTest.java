/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:03:48 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.optJSONObject("tT1Xt sQ 3?5ML%@d");
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-1.0));
      hashMap0.put("", double0);
      JSONObject jSONObject1 = jSONObject0.put("tT1Xt sQ 3?5ML%@d", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("tT1Xt sQ 3?5ML%@d");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", "{}");
      assertSame(jSONObject0, jSONObject1);
      
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("'=/RU-g`jGvs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'=/RU-g`jGvs\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 0.0F);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "aMCMD:ND?J-)m= $JXV";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      float float1 = (-1.0F);
      Float.min((-1.0F), (-1598.7F));
      Boolean boolean0 = new Boolean((String) null);
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Boolean.valueOf("getgetBytes");
      HashMap<Byte, Boolean> hashMap1 = new HashMap<Byte, Boolean>();
      Byte byte0 = new Byte((byte)92);
      Boolean boolean1 = new Boolean("aMCMD:ND?J-)m= $JXV");
      hashMap1.put(byte0, boolean1);
      Object object0 = JSONObject.NULL;
      jSONObject0.optString("");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("getpu)t", (Object) null);
      try { 
        jSONObject1.getJSONObject("getpu)t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getpu)t\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("getaddFirst", (Collection) linkedList0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double double1 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("] not found.", double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      Boolean.getBoolean("+");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("W 3%,p.'Q2+qu");
      JSONObject jSONObject1 = jSONObject0.put("ha", (-1062.641579));
      JSONObject.getNames(jSONObject0);
      jSONObject1.optDouble("(0ULj#gx9s]xU7^", 0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "(0ULj#gx9s]xU7^");
      StringWriter stringWriter0 = new StringWriter(65);
      StringWriter stringWriter1 = stringWriter0.append('|');
      jSONObject2.write(stringWriter1);
      jSONObject0.length();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float(374.1F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "|goy@jUth`9'zuvZ@");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "$VfhCf&3q";
      int int0 = (-1154);
      Integer integer0 = new Integer((-1154));
      String string1 = "";
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertNull(jSONArray1);
      
      jSONObject0.toString((int) (byte) (-81), (-788));
      try { 
        jSONObject0.put((String) null, (-788));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.append("ZD<[k!'u", (Object) null);
      jSONObject2.optString("ZD<[k!'u", "ZD<[k!'u");
      jSONObject2.toJSONArray((JSONArray) null);
      jSONObject2.getJSONArray("ZD<[k!'u");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("wheel.json.JSONArray@0000000005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONArray@0000000005
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("getgetNames");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetNames\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      hashMap0.entrySet();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap1.clone();
      int int0 = 173;
      JSONObject.valueToString(hashMap1, 1076, 173);
      try { 
        jSONObject0.getString("y^*aKFt[pl0=P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y^*aKFt[pl0=P\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("{}", "{}");
      boolean boolean0 = jSONObject0.isNull("{}");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
      
      try { 
        jSONObject0.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Integer integer0 = new Integer(70);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getString("0Z&Cf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0Z&Cf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "xM";
      JSONObject jSONObject1 = jSONObject0.put("xM", 1L);
      jSONObject0.getLong("xM");
      jSONObject1.put("Unterminated string", true);
      String string1 = "CWhIwKs^!";
      try { 
        jSONObject1.getJSONArray("CWhIwKs^!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CWhIwKs^!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(784);
      Integer.remainderUnsigned(32, 69);
      BiFunction<Integer, String, String> biFunction0 = (BiFunction<Integer, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , anyString());
      hashMap0.compute(integer0, biFunction0);
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, "xP>=~PMa", biFunction1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.entrySet();
      jSONObject0.optInt("j+BoK");
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      hashMap0.put(integer0, "@(r0s#R8n2CmR#");
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = ": ";
      String string0 = ",\n";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.getNames(jSONObject0);
      Float.min(1186.3F, (-1534.796F));
      try { 
        jSONObject0.getLong(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[21];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = ",\n";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(4, 4);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{}");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("{}");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("getpu)t", "getpu)t");
      try { 
        jSONObject1.getJSONObject("getpu)t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getpu)t\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "OnrKBB8G[z[5De~:");
      jSONObject0.optBoolean("");
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.put(")cEMrNSbyQg~0i5?}", 125);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0, 63, 63);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = (byte)91;
      Byte byte1 = new Byte((byte)91);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Unclosed comment";
      stringArray0[1] = "#9SWmPi:J[E+?";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      try { 
        jSONObject0.getLong("#9SWmPi:J[E+?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#9SWmPi:J[E+?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      Integer integer0 = new Integer((byte) (-81));
      JSONObject jSONObject1 = new JSONObject(integer0);
      jSONObject1.toString((-1886), (-1886));
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"}", (-1L));
      jSONObject1.optInt((String) null, 1209);
      jSONObject1.optJSONArray("{\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"}");
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      jSONObject2.put("isparseByte", 4);
      Byte byte1 = new Byte((byte)24);
      JSONObject jSONObject3 = new JSONObject(byte1);
      Short short0 = new Short((byte) (-81));
      JSONObject.valueToString(short0);
      try { 
        jSONObject3.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "ATn:*nr9~aYzf";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ATn:*nr9~aYzf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ATn:*nr9~aYzf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float float1 = new Float(1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min((float) float1, (-1534.796F));
      Float.min((-1534.796F), 1186.3F);
      JSONObject jSONObject1 = new JSONObject((Object) ",\n");
      jSONObject1.toString((-390), 10);
      jSONObject1.put(",\n", (-2064L));
      int int0 = jSONObject0.optInt(",\n", (-390));
      JSONObject jSONObject2 = jSONObject0.put("{\n\"java.lang.String@0000000005\": [\njava.lang.Byte@0000000015,\njava.lang.Byte@0000000016\n],\n\"java.lang.String@0000000012\": \"java.lang.Class@0000000013\",\n\"java.lang.String@0000000003\": java.lang.Boolean@0000000004\n          }", 159.1405895172578);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject3);
      JSONTokener jSONTokener0 = new JSONTokener("do");
      jSONObject0.append("A JSONObject text must begin with '{'", "{\n\"java.lang.String@0000000005\": [\njava.lang.Byte@0000000015,\njava.lang.Byte@0000000016\n],\n\"java.lang.String@0000000012\": \"java.lang.Class@0000000013\",\n\"java.lang.String@0000000003\": java.lang.Boolean@0000000004\n          }");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int1 = jSONObject2.getInt("{\n\"java.lang.String@0000000005\": [\njava.lang.Byte@0000000015,\njava.lang.Byte@0000000016\n],\n\"java.lang.String@0000000012\": \"java.lang.Class@0000000013\",\n\"java.lang.String@0000000003\": java.lang.Boolean@0000000004\n          }");
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Float float0 = new Float(0.0F);
      JSONObject.doubleToString(0.0F);
      Float float1 = new Float(2694.03F);
      Float float2 = new Float(0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Byte byte0 = new Byte((byte)126);
      JSONObject.getNames((Object) byte0);
      JSONObject jSONObject0 = new JSONObject();
      Byte.compare((byte)126, (byte)55);
      Byte.toUnsignedInt((byte)55);
      byte byte1 = (byte)97;
      Byte.toUnsignedInt((byte)97);
      String string0 = ",A_de5$;";
      jSONObject0.optLong(",A_de5$;");
      JSONObject.valueToString(byte0);
      jSONObject0.has("Z/y_osR$F");
      try { 
        jSONObject0.getString(",A_de5$;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",A_de5$;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.toString(3210, 1793);
      jSONObject1.optBoolean("korkU");
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject2 = new JSONObject("{}");
      jSONObject1.optJSONArray("{}");
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-2091), (-2091));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("getpu)t", (Object) null);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      jSONObject1.put("getpu)t", (Map) hashMap0);
      jSONObject1.getJSONObject("getpu)t");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gCM", (-800.6489958781655));
      jSONObject1.optDouble("gCM");
      try { 
        jSONObject0.get("n{cwm=:BCSm~39");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n{cwm=:BCSm~39\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertEquals(5, stringArray0.length);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = hashMap0.clone();
      String string0 = JSONObject.valueToString(object0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      jSONObject0.put(" R1O*o4", (long) (short) (-3438));
      Object object1 = JSONObject.NULL;
      double double0 = jSONObject0.optDouble("] not found.", 384.61812);
      assertEquals(384.61812, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "";
      jSONObject0.optBoolean(".7G<NBK&;x9<yRPJD");
      String string1 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.get("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.accumulate("istoOctalString", jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer((-1578));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", "{}");
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.append("{}", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      float float0 = (-662.0882F);
      Float float1 = new Float((-662.0882F));
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(hashMap0, stringArray0);
      String string0 = " at character ";
      Byte byte0 = new Byte((byte)59);
      jSONObject1.putOpt("cfz}w*", (Object) null);
      jSONObject0.optBoolean("qu");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(507);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[507] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("+xZ>6qBHU[");
      JSONObject.quote("+xZ>6qBHU[");
      JSONObject.doubleToString((-2271.1904157866));
      jSONObject0.has("-2271.1904157866");
      int int0 = (-4583);
      Integer integer0 = new Integer((byte) (-81));
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "'=/Rtg6`jG7s");
      jSONObject0.accumulate("'=/Rtg6`jG7s", "'=/Rtg6`jG7s");
      // Undeclared exception!
      jSONObject0.toString(688, 4334);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("`e", object0);
      jSONObject0.optJSONArray("`e");
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.putIfAbsent((Double) null, boolean0);
      JSONObject jSONObject2 = jSONObject1.put("getput", (Map) hashMap0);
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ZsM6KeC,O}2u8j0b{]X", 39.65);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Double double0 = Double.valueOf(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.valueToString(jSONObject0);
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      Boolean.getBoolean("+");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("W 3%,p.'Q2+qu");
      JSONObject jSONObject1 = jSONObject0.put("ha", (-1062.641579));
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = new JSONObject((Object) "ha");
      StringWriter stringWriter0 = new StringWriter(65);
      jSONObject0.length();
      jSONObject0.keys();
      jSONObject0.toString(30);
      jSONObject2.put("*7L;awN(32E", (Object) null);
      JSONObject jSONObject3 = jSONObject1.accumulate("{", (Object) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("ZD<[k!'u", double0);
      jSONObject1.optString("is", "is");
      jSONObject1.optDouble("\r", 0.0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      Short short0 = new Short((short) (-2419));
      JSONObject.valueToString(jSONObject2);
      Short short1 = new Short((short) (-2419));
      Byte byte0 = new Byte((byte) (-112));
      jSONObject1.accumulate("ZD<[k!'u", byte0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      jSONObject0.put(",\n", 2088);
      jSONObject2.toJSONArray((JSONArray) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject2.put("JSONArray initial value should be a string or collection or array.", (Collection) linkedList0);
      try { 
        jSONObject3.append("", "{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("7f.0");
      JSONObject jSONObject1 = jSONObject0.putOpt("7f.0", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("7f.0");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-899.501832251006));
      assertEquals("-899.501832251006", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 34);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      double double0 = jSONObject1.getDouble("");
      assertEquals(34.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      jSONObject0.put(",\n", 2088);
      Byte byte0 = new Byte((byte)24);
      JSONObject jSONObject3 = new JSONObject(byte0);
      jSONObject3.optLong((String) null);
      JSONObject.valueToString("\"JSONArray initial value should be a string or collection or array.\"");
      JSONObject jSONObject4 = jSONObject2.accumulate("", (Object) null);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<J6N5g";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.remove("<@>*!>?)");
      JSONObject.quote("Id'i'4i#d1BVz0&c[");
      JSONObject.doubleToString(2687.838141);
      jSONObject0.has("Id'i'4i#d1BVz0&c[");
      Integer integer0 = new Integer((byte) (-81));
      Double double0 = new Double(1.0);
      JSONObject jSONObject1 = jSONObject0.put("o4U)s7ODr~wE)k", 1064);
      JSONObject.quote("isintern");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Id'i'4i#d1BVz0&c[";
      stringArray0[1] = "\"isintern\"";
      stringArray0[2] = "MDXk ~";
      stringArray0[4] = "isintern";
      stringArray0[5] = "\"isintern\"";
      stringArray0[6] = "\"isintern\"";
      stringArray0[7] = "<@>*!>?)";
      stringArray0[8] = "\"isintern\"";
      JSONObject jSONObject2 = new JSONObject(double0, stringArray0);
      jSONObject2.remove("\"isintern\"");
      String[] stringArray1 = JSONObject.getNames((Object) "\"isintern\"");
      jSONObject1.isNull("MDXk ~");
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray1);
      Object object0 = new Object();
      jSONObject3.accumulate("re", object0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-99));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.append("2,*;8", byte0);
      String string0 = "is";
      jSONObject0.optString("wheel.json.JSONArray", "wheel.json.JSONArray");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-9));
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(byte0, boolean0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      JSONObject.doubleToString(2687.838141);
      jSONObject0.has("aMCMD:ND?J-)m= $JXV");
      jSONObject0.length();
      int int0 = (-4773);
      Integer integer0 = new Integer((-4773));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(861, 50);
      JSONObject jSONObject1 = jSONObject0.put("@", 0L);
      JSONObject.getNames((Object) "{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      int int0 = new Integer(49);
      jSONObject0.getInt("@");
      Float float0 = new Float((float) 49);
      try { 
        jSONObject1.getDouble("63");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"63\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(": ", "P?&B<-");
      assertEquals("P?&B<-", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Expected a ':' after a key";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      try { 
        jSONObject2.getBoolean("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "{&/ybP>tqV=";
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{&/ybP>tqV=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {&/ybP>tqV=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
      
      JSONObject jSONObject2 = jSONObject0.put("get", true);
      boolean boolean0 = jSONObject2.optBoolean("get");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\b";
      hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("\b", (Map) hashMap0);
      jSONObject1.optInt("7em2>6", (-2075));
      Float float0 = new Float((float) (-2075));
      Byte byte0 = new Byte((byte) (-128));
      hashMap0.putIfAbsent(float0, byte0);
      jSONObject1.put("n7,X@", 4032L);
      jSONObject1.optDouble("l?8IVEh8OZ;c&PR;");
      JSONObject.quote("O${|F");
      jSONObject1.optDouble((String) null);
      try { 
        jSONObject0.getJSONArray("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = "o8y[2Z";
      JSONObject jSONObject1 = jSONObject0.putOpt("o8y[2Z", "o8y[2Z");
      try { 
        jSONObject1.getInt("o8y[2Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o8y[2Z\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("] not found.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("ZD<[k!'u", double0);
      jSONObject1.optString("is", "is");
      JSONObject jSONObject2 = jSONObject0.put("ZD<[k!'u", 125);
      JSONObject.quote((String) null);
      jSONObject0.remove("J");
      jSONObject2.put("&pvVYP5L:-r@>ey 2", false);
      assertEquals(5, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("{}");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      jSONObject0.optJSONObject("\f");
      Integer integer0 = new Integer(58);
      jSONObject0.put("\f", (Object) integer0);
      String string0 = "pA6*F";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\f";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(hashMap0, 18, 18);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(1186.3F, (-1534.796F));
      JSONObject jSONObject1 = new JSONObject((Map) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.clone();
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(2, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.put(2174, (double) 80);
      jSONArray1.put(80, (Collection) linkedList0);
      String string0 = jSONArray0.toString();
      assertNotNull(string0);
      
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(2175, jSONArray2.length());
      
      jSONObject0.length();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
      
      Short short0 = new Short((short)160);
      String string1 = JSONObject.valueToString(short0);
      Double double0 = new Double(2402.430675);
      JSONObject.valueToString(double0, 2, 80);
      jSONArray1.put(2174, false);
      JSONArray jSONArray3 = jSONObject0.names();
      assertNotNull(jSONArray3);
      
      String string2 = jSONObject0.optString("wheel.json.JSONObject");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      jSONObject0.put(")ifTG+a%u", (Collection) linkedList0);
      assertNotSame(jSONArray0, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("islength", "islength");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.append("] is not a number.", "] is not a number.");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      JSONObject jSONObject0 = new JSONObject(short0);
      Object object0 = new Object();
      jSONObject0.putOpt("m`BB:p<oNCI9;!4CgW", object0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 62098, 93);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      long long0 = (-3019L);
      jSONObject0.optLong(">III2YR:oz/T hk", (-3019L));
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(">N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of >N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.keys();
      String string0 = null;
      jSONObject0.optBoolean("1", false);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "btE2(L!~";
      jSONObject0.optInt("btE2(L!~", 64);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = new Object();
      jSONObject0.accumulate("0", (Object) null);
      jSONObject0.append("btE2(L!~", object0);
      jSONObject0.putOpt("] is not a number.", "] is not a number.");
      int int0 = 1955;
      try { 
        jSONObject0.getBoolean("tri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tri\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("wheel.json.JSONObject$Null");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      byte byte0 = (byte)27;
      Byte.valueOf((byte)27);
      Object object0 = new Object();
      jSONObject0.putOpt((String) null, object0);
      boolean boolean0 = new Boolean("getcompare");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{WSo>k");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {WSo>k
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 1296, 1296);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-85));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(byte0);
      Float float0 = new Float((float) (byte) (-85));
      jSONArray0.put(92, (long) 92);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(1186.3F, (-1534.796F));
      Float.min((-1534.796F), 1186.3F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      String string0 = null;
      try { 
        jSONObject1.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte byte0 = (byte) (-81);
      Byte byte1 = new Byte((byte) (-81));
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("");
      JSONObject.quote("");
      String string0 = "] is not a JSONObject.";
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      Boolean boolean1 = Boolean.valueOf("6");
      hashMap0.put((Byte) null, boolean1);
      Object object0 = JSONObject.NULL;
      jSONObject0.optString("QC19a(BbXN=");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONObject("dKV<nV`ns`(!c.R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dKV<nV`ns`(!c.R\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject.valueToString(float0, 2023, (-3665));
      JSONTokener jSONTokener0 = new JSONTokener("g..y(;.vG:vz\"Kz9");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of g..y(;.vG:vz\"Kz9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "oy[gZ";
      JSONObject jSONObject1 = jSONObject0.putOpt("oy[gZ", "oy[gZ");
      try { 
        jSONObject1.getLong("oy[gZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oy[gZ\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Missing value";
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      hashMap0.remove((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (Map) hashMap0);
      jSONObject1.names();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(jSONObject0, boolean0);
      Boolean boolean1 = Boolean.FALSE;
      hashMap0.put(jSONObject1, boolean1);
      jSONObject1.optDouble((String) null, 0.0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Missing value");
      stringWriter1.write((String) null);
      StringWriter stringWriter2 = stringWriter1.append('Y');
      Writer writer0 = jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.append("Missing value", writer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Missing value] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.putOpt("M", jSONArray0);
      boolean boolean0 = jSONObject0.optBoolean("M");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.remove(",:]}/\"[{;=#");
      Double.sum(0.0, 3425.1605492);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      Float float0 = new Float(1.0F);
      JSONObject.numberToString(double0);
      jSONObject0.toString();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Boolean.valueOf("000");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.numberToString(integer0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("jo");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      String string0 = "_QUdW(/t5VK0n!d=[";
      JSONObject jSONObject1 = jSONObject0.put("_QUdW(/t5VK0n!d=[", 0.0);
      int int0 = (-435);
      jSONObject1.optInt((String) null, (-435));
      jSONObject0.getDouble("_QUdW(/t5VK0n!d=[");
      jSONObject0.length();
      JSONObject.getNames(jSONObject0);
      String string1 = "Q^}[<B;rRAgC";
      int int1 = 128;
      jSONObject1.put("Q^}[<B;rRAgC", 128);
      JSONObject.quote((String) null);
      try { 
        jSONObject1.getJSONArray("vQozOJ*>'m9o8.-S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vQozOJ*>'m9o8.-S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Float.min((-2434.4246F), (-2434.4246F));
      Float float0 = new Float(1881.5F);
      JSONObject.numberToString(float0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Float@0000000001";
      stringArray0[1] = null;
      stringArray0[2] = "}2:,zPOeG9UHjB";
      stringArray0[3] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      jSONObject0.optBoolean("java.lang.Float@0000000001", true);
      jSONObject0.putOpt("dGA^KXG}K1~-", "java.lang.Float@0000000001");
      boolean boolean0 = jSONObject0.optBoolean("java.lang.Float@0000000001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float float0 = 1186.3F;
      Float float1 = new Float(1186.3F);
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      HashMap<Object, Byte> hashMap1 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.remove("*PivK%{NLjxhd9tSh");
      JSONObject.quote("3$[NNez^o+y");
      Boolean boolean0 = new Boolean("dKV<nV`ns`(!c.R");
      hashMap0.put((Byte) null, boolean0);
      Object object0 = JSONObject.NULL;
      jSONObject0.optString((String) null);
      String string0 = "j7N5J`Z%JPJ/o||J";
      try { 
        jSONObject0.getJSONObject("3$[NNez^o+y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3$[NNez^o+y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "OnrKBB8G[z[5De~:");
      String string0 = "";
      jSONObject0.optBoolean("");
      String string1 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.get("(q5zm^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(q5zm^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("\"{}\"");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("{}");
      jSONObject0.put("", (Object) "{}");
      jSONObject2.has("\"{}\"");
      try { 
        jSONObject2.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.parallelStream();
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("]JY;i3o+]YT_|*k<E", (Collection) linkedList0);
      linkedList0.add("]JY;i3o+]YT_|*k<E");
      jSONObject0.accumulate("' L!]g", hashMap0);
      jSONObject0.toString((-3299), (-1));
      jSONObject1.names();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("]JY;i3o+]YT_|*k<E");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer((-1578));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("Aj3KWC!6rur", (-1578));
      JSONObject.valueToString("Aj3KWC!6rur", (-1578), (-1035));
      jSONObject0.isNull("Aj3KWC!6rur");
      jSONObject1.names();
      assertEquals(2, jSONObject0.length());
      
      jSONObject1.optString("Aj3KWC!6rur", "");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "OrKBB8G[(sz[5De~:");
      jSONObject0.optBoolean("");
      jSONObject0.toJSONArray((JSONArray) null);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("(q5zm^", object0);
      jSONObject0.get("(q5zm^");
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject.quote("");
      jSONObject1.remove("CW|Uduo");
      jSONObject0.put("", false);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(1186.3F, (-1534.796F));
      Float.min((-1534.796F), 1186.3F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      String string0 = jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject2.getInt(",\n");
      jSONObject0.optInt(",\n", (-390));
      Float float1 = new Float(1.0F);
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      jSONObject0.append(">lv?Ab,:6k,_@", "dou");
      String string0 = jSONObject0.optString(">lv?Ab,:6k,_@");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 2347L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isreplace", 92);
      long long0 = jSONObject1.optLong("isreplace");
      assertEquals(92L, long0);
      
      JSONObject.valueToString(jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("isreplace");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(708);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("Aj3KWC!6rur", 708);
      Integer integer1 = new Integer(8);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, integer1, biFunction0);
      JSONObject.valueToString(hashMap0, (-1112), 2037);
      jSONObject0.isNull("{\"java.lang.Integer@0000000008\": java.lang.Integer@0000000009}");
      jSONObject0.names();
      jSONObject1.optBoolean("hHjI8");
      jSONObject0.optJSONObject("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      jSONObject0.optLong(">III2YR:oz/T hk", (-3019L));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>(62, 62);
      hashMap1.clone();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">III2YR:oz/T hk";
      stringArray0[1] = "aMCMD:ND?J-)m= $JXV";
      stringArray0[2] = "aMCMD:ND?J-)m= $JXV";
      stringArray0[3] = "\"aMCMD:ND?J-)m= $JXV\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("\"aMCMD:ND?J-)m= $JXV\"");
      String string0 = jSONObject1.optString((String) null, "pu");
      assertEquals("pu", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      int int0 = jSONObject0.optInt("TjQtu>x<3", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2687.838141);
      assertEquals("2687.838141", string0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|O@Xg4azTM7<MFS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |O@Xg4azTM7<MFS
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer((-1872));
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getJSONObject("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      Float float0 = new Float(0.0F);
      JSONArray jSONArray1 = jSONArray0.put(64, 0L);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(65, jSONArray2.length());
      
      int int0 = jSONObject0.optInt("\"java.lang.Object@0000000009\"", (-1602));
      assertEquals((-1602), int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      double double1 = jSONObject0.optDouble("\"java.lang.Object@0000000009\"");
      assertEquals(3, jSONObject0.length());
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.toString((-390), 10);
      Byte byte0 = new Byte((byte)59);
      jSONObject0.putOpt("", ",\n");
      jSONObject0.optBoolean("");
      jSONObject0.put("wheel.json.JSONObject$Null", (double) 10);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      String string0 = JSONObject.doubleToString((-26752489));
      assertEquals("-2.6752489E7", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("isforEach");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("70.0", "70.0");
      jSONObject0.accumulate("70.0", "70.0");
      String string0 = jSONObject1.toString((-26752530), (-1824));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer((-1578));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("Aj3KWC!6rur", (-1578));
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject0.putOpt("{}", "{}");
      Integer.getInteger("'qd,}O@64!x*U");
      JSONObject.valueToString(jSONObject0, 12, (-1578));
      jSONObject0.optBoolean("{}");
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      Long long0 = new Long(1L);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertEquals(5, stringArray0.length);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.sum(0.0, Double.NaN);
      Double.min(Double.NaN, 603.18);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      String string0 = "\"f|L N";
      JSONTokener jSONTokener0 = new JSONTokener("\"f|L N");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"f|L N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put(":0Vx", (Collection) linkedList0);
      JSONObject.getNames((Object) jSONObject0);
      Float float0 = new Float((-309.7382593541));
      JSONObject jSONObject2 = jSONObject1.append(":0Vx", float0);
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("W 3%,p.'Q2+qu");
      JSONObject jSONObject1 = jSONObject0.put("ha", (-1062.641579));
      JSONObject.getNames(jSONObject0);
      jSONObject1.optDouble("(0ULj#gxk9s]xU7^", 0.0);
      try { 
        jSONObject1.append("ha", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ha] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("f`/u7nNw^9a1`}fd", (-4413.217606625033));
      String string0 = JSONObject.quote("Missing value");
      assertEquals("\"Missing value\"", string0);
      
      double double0 = jSONObject0.getDouble("f`/u7nNw^9a1`}fd");
      assertEquals((-4413.217606625033), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1789), (-1789));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = hashMap0.clone();
      int int0 = 1402;
      JSONObject.valueToString(object0);
      jSONObject0.put(" R1O*o4", (long) (short) (-3438));
      try { 
        jSONObject0.getString("_[8m/]/56MdEy^5=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_[8m/]/56MdEy^5=k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1296, 1296);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short1 = new Short((short)59);
      JSONObject jSONObject1 = new JSONObject(short1, stringArray0);
      double double0 = jSONObject1.optDouble("nk<&jHDop=rKd\"z>R]", (double) (short) (-3438));
      assertEquals((-3438.0), double0, 0.01);
      
      Long long0 = new Long(228L);
      JSONObject.valueToString(long0, (short)59, (short) (-3438));
      boolean boolean0 = jSONObject1.isNull("in");
      assertEquals(5, jSONObject1.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", false);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("", "");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-85));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(byte0);
      Float float0 = new Float((float) (byte) (-85));
      JSONObject jSONObject1 = jSONObject0.put("_g!za", (long) (byte) (-85));
      JSONObject.quote(",\n");
      jSONObject0.optInt("_g!za");
      JSONObject.getNames(jSONObject1);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-85));
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Expected a ':' after a key";
      stringArray0[1] = "Expected a ':' after a key";
      stringArray0[2] = "is";
      stringArray0[3] = "Expected a ':' after a key";
      stringArray0[4] = "Expected a ':' after a key";
      stringArray0[5] = "Expected a ':' after a key";
      stringArray0[6] = "Expected a ':' after a key";
      stringArray0[7] = "Expected a ':' after a key";
      stringArray0[8] = "Expected a ':' after a key";
      JSONObject jSONObject2 = new JSONObject(object0, stringArray0);
      jSONObject2.put("Expected a ':' after a key", (Map) null);
      try { 
        jSONObject2.getBoolean("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(15);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[4];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put(";!Zpyrnx_/q\"yJo", 2775);
      jSONObject0.toString(0, 2775);
      jSONObject1.optInt(":**4{UX[o@E)", 2775);
      jSONObject0.optJSONArray("?*4P@");
      JSONObject.quote(",\n");
      JSONObject jSONObject2 = jSONObject1.put("do", 0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject0.put(",\n", (Collection) linkedList0);
      jSONObject3.append("", jSONObject1);
      Object object0 = jSONObject2.opt("\",\n\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      Byte.toUnsignedLong((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject();
      String string0 = jSONObject1.optString("D-G [$B]BBNso(:{AG", (String) null);
      assertNull(string0);
      
      jSONObject1.optDouble("D-G [$B]BBNso(:{AG", (double) 125);
      JSONObject.valueToString("D-G [$B]BBNso(:{AG", (byte) (-81), (-2));
      boolean boolean0 = jSONObject1.isNull("Y<5X\r=eDv3_eg");
      assertTrue(boolean0);
      
      String string1 = JSONObject.valueToString((Object) null);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("ZD<[k!'u", double0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.remove("ma");
      JSONObject.doubleToString(0.0);
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(double0);
      jSONObject1.toString();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("'Ja3P-", object0);
      jSONObject1.getString("'Ja3P-");
      boolean boolean0 = jSONObject0.isNull("'Ja3P-");
      assertTrue(boolean0);
      
      String string0 = JSONObject.doubleToString((-1826.919193));
      assertEquals("-1826.919193", string0);
      
      jSONObject0.keys();
      String string1 = jSONObject0.optString("-1826.919193");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("\"{}\"");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      jSONObject1.optJSONObject("{}");
      JSONObject jSONObject2 = jSONObject0.put("\"{}\"", (Object) "{}");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("+$n%'[cpu,+@&^boM]", 69);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray1);
      Object object0 = new Object();
      String string0 = "] is not a JSONArray.";
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", jSONArray0);
      JSONObject jSONObject2 = jSONObject1.append("+$n%'[cpu,+@&^boM]", "] is not a JSONArray.");
      jSONObject1.putOpt("7+", jSONArray0);
      try { 
        jSONObject2.getBoolean(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("{");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Float float0 = new Float(1928.88F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1928.88F);
      linkedList0.add(double0);
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",\n";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      Float.min(2849.0F, (-3672.9F));
      Float.min(2088, 4141.299F);
      JSONObject jSONObject2 = jSONObject1.put(",\n", 2334);
      jSONObject2.toString((-3357), (int) (byte) (-81));
      jSONObject0.optJSONArray(",\n");
      JSONObject.quote(").a!_!eS>~%X ~>69Sk");
      jSONObject1.toJSONArray((JSONArray) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("j).11[qj|~<1[Wh}K", (Collection) linkedList0);
      Short short0 = new Short((byte) (-81));
      Object object0 = jSONObject1.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = JSONObject.quote("SQ[8>@!r\u0002S4ID/dK!B");
      assertEquals("\"SQ[8>@!r\\u0002S4ID/dK!B\"", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.putOpt(" of ", boolean0);
      boolean boolean1 = jSONObject1.getBoolean(" of ");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean((String) null);
      Byte byte0 = new Byte((byte) (-117));
      hashMap0.put(byte0, boolean0);
      jSONObject0.remove("par");
      jSONObject0.optString("}");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Integer integer0 = new Integer((-1578));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("Aj3KWC!6rur", (-1578));
      jSONObject1.optBoolean("de");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Aj3KWC!6rur";
      stringArray0[1] = "Aj3KWC!6rur";
      stringArray0[2] = "Aj3KWC!6rur";
      stringArray0[3] = "Aj3KWC!6rur";
      jSONObject0.getLong("Aj3KWC!6rur");
      stringArray0[4] = "Aj3KWC!6rur";
      stringArray0[5] = "Aj3KWC!6rur";
      stringArray0[6] = "Aj3KWC!6rur";
      stringArray0[7] = "Aj3KWC!6rur";
      stringArray0[8] = ",\n";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      String string0 = "] is not a Boolean.";
      try { 
        Long.valueOf("] is not a number.", (-900));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -900 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "gF%,@.+";
      stringArray0[1] = "gF%,@.+";
      stringArray0[2] = "gF%,@.+";
      stringArray0[3] = "gF%,@.+";
      stringArray0[4] = "~SMs {$";
      stringArray0[5] = "gF%,@.+";
      stringArray0[6] = "gF%,@.+";
      stringArray0[7] = "gF%,@.+";
      stringArray0[8] = "gF%,@.+";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.putOpt("gF%,@.+", jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject2.write(writer0);
      String string0 = jSONObject0.toString(44, 59);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("ZD<[k!'u", double0);
      jSONObject1.optString("is", "is");
      jSONObject0.optDouble("]7", (-2150.9205828149));
      JSONObject.valueToString("ZD<[k!'u", 125, 125);
      jSONObject0.isNull("0");
      Object object0 = JSONObject.NULL;
      jSONObject0.put("]7", object0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      String string0 = JSONObject.doubleToString((-64089270));
      assertEquals("-6.408927E7", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 10);
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      String string0 = "JSONArray initial value should be a string or collection or array.";
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      JSONObject jSONObject2 = jSONObject0.put(",\n", 2088);
      jSONObject2.get("");
      jSONObject1.toJSONArray((JSONArray) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject1.put("JSONArray initial value should be a string or collection or array.", (Collection) linkedList0);
      try { 
        jSONObject3.append("", "{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.valueToString((Object) null);
      Boolean boolean0 = new Boolean("null");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("W 3%,p.'Q2+qu");
      JSONObject jSONObject1 = jSONObject0.put("ha", (-1062.641579));
      JSONObject.getNames(jSONObject0);
      jSONObject1.optDouble("(0ULj#gxk9s]xU7^", 0.0);
      try { 
        jSONObject1.append("ha", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ha] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xM", 1L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.getLong("xM");
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.put("Unterminated string", true);
      try { 
        jSONObject2.get("(q5zm^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(q5zm^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      jSONObject0.put("", (Map) hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("pv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of pv
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 875, 875);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("($a5", 92);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(120);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer integer0 = new Integer((-1578));
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "{}";
      JSONObject.quote("{}");
      Map<Object, String> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.clone();
      int int0 = 1402;
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 173, 62);
      JSONTokener jSONTokener0 = new JSONTokener("'pq7ya?w%");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 'pq7ya?w%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", 1L);
      double double0 = jSONObject0.optDouble("JSONArray initial value should be a string or collection or array.");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.accumulate("#W5g6d4'P", "#W5g6d4'P");
      JSONArray jSONArray0 = jSONObject1.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject1.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString((Object) null, 34, 2);
      jSONObject0.remove((String) null);
      JSONObject.quote("toH");
      long long0 = (-3019L);
      jSONObject0.optLong((String) null, (-3019L));
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("&HMe,OKa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of &HMe,OKa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      float float1 = new Float(1186.3F);
      stringArray0[0] = "";
      String string0 = ",\n";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(1186.3F, (-1517.0217F));
      Float.min((-1517.0217F), 1186.3F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 10);
      jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      JSONObject.quote("");
      jSONObject1.optDouble("");
      jSONObject0.optJSONArray("");
      try { 
        jSONObject0.getJSONObject("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": java.lang.Integer@0000000003}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "nam");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Long long0 = new Long(0L);
      JSONObject.getNames((Object) long0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(93, 93);
      jSONObject0.append("rep", jSONArray0);
      try { 
        jSONObject0.getInt("rep");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rep\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject.testValidity("getcompare");
      JSONObject jSONObject0 = new JSONObject((Object) "getcompare");
      double double0 = jSONObject0.optDouble("getcompare");
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject0.has("xl");
      jSONObject0.opt("xl");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      float float1 = new Float(1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(1186.3F, (-1534.796F));
      Float.min((-1534.796F), 1186.3F);
      JSONObject jSONObject1 = new JSONObject((Object) ",\n");
      jSONObject1.toString((-390), 10);
      jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      jSONObject0.put(",\n", 2088);
      Byte byte0 = new Byte((byte)15);
      boolean boolean0 = jSONObject0.has("gTgn8[X$9tj*ym");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Double double0 = new Double(4116.973167882982);
      Long long0 = new Long(17L);
      String string0 = "M";
      JSONObject jSONObject1 = jSONObject0.putOpt("M", jSONArray0);
      jSONObject1.names();
      jSONObject1.remove("M");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-54582745));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = hashMap0.clone();
      JSONObject.valueToString(object0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(128, (-664L));
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.names();
      Long long0 = new Long(0L);
      JSONObject.numberToString(long0);
      Double double0 = new Double((-982.9864368182909));
      Integer integer0 = new Integer(1402);
      JSONObject.getNames((Object) integer0);
      jSONObject0.optLong("java.lang.Long@0000000011", 1233L);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("ZD<[k!'u", double0);
      jSONObject1.optString("is", "is");
      int int0 = 2275;
      int int1 = 18;
      jSONObject1.toString(2275, 18);
      jSONObject0.put("/mr3l@*Wps8", 0L);
      String string0 = "z7o=(";
      String string1 = "Null pointer";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("-~Ni~i#6<;%r/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of -~Ni~i#6<;%r/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[5];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      JSONObject jSONObject3 = jSONObject0.put(",\n", 2088);
      jSONObject2.toJSONArray((JSONArray) null);
      Double double0 = new Double(Double.NaN);
      JSONObject.getNames((Object) "{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
      jSONObject3.optLong("", (-2064L));
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("par");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of par
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      jSONObject1.keys();
      String string0 = null;
      jSONObject0.names();
      jSONObject0.optBoolean("", false);
      String string1 = "30K!P";
      try { 
        jSONObject0.get("30K!P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"30K!P\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray1, (-1320), 1564);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Float float0 = new Float(374.1F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      jSONObject0.optJSONArray("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[18];
      stringArray0[17] = "Expected a ':' after a key";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      try { 
        jSONObject2.getBoolean(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      boolean boolean0 = jSONObject0.optBoolean(",\n");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("{VuJ>`(1cno;G]{D9", stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("{VuJ>`(1cno;G]{D9", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.accumulate("{VuJ>`(1cno;G]{D9", "{VuJ>`(1cno;G]{D9");
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(1186.3F, (-1534.796F));
      Float.min((-1534.796F), 1186.3F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.optLong("");
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      jSONObject0.put(",\n", 2088);
      Byte byte0 = new Byte((byte)24);
      JSONObject jSONObject3 = new JSONObject(byte0);
      JSONObject.valueToString("\"JSONArray initial value should be a string or collection or array.\"");
      JSONObject jSONObject4 = jSONObject2.accumulate("", (Object) null);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject.getNames((Object) boolean0);
      Boolean.getBoolean("");
      jSONObject0.optInt("] is not a JSONObject.", 0);
      String string0 = "5<3}3We'";
      try { 
        jSONObject0.getInt("5<3}3We'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5<3}3We'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optDouble("{\u0001](\"pRQ$Y");
      Object object0 = JSONObject.NULL;
      jSONObject0.append("{\u0001](\"pRQ$Y", object0);
      jSONObject0.has("{\u0001](\"pRQ$Y");
      String string0 = "l8rU%m";
      try { 
        Double.valueOf("l8rU%m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Integer integer0 = new Integer((-1578));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(1186.3F);
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject.getNames((Object) jSONObject0);
      long long0 = 0L;
      jSONObject0.optLong((String) null, 0L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W 3%,p.'Q2+qu";
      stringArray0[1] = "W 3%,p.'Q2+qu";
      stringArray0[3] = "aMCMD:ND?J-)m= $JXV";
      stringArray0[4] = "\"aMCMD:ND?J-)m= $JXV\"";
      stringArray0[5] = "\"aMCMD:ND?J-)m= $JXV\"";
      stringArray0[6] = "W 3%,p.'Q2+qu";
      JSONObject jSONObject1 = new JSONObject("aMCMD:ND?J-)m= $JXV", stringArray0);
      HashMap<Object, Double> hashMap1 = new HashMap<Object, Double>();
      JSONObject jSONObject2 = jSONObject1.put("\"aMCMD:ND?J-)m= $JXV\"", (Map) hashMap1);
      try { 
        jSONObject2.getBoolean("{4/_78Aii7?y*%rzK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{4/_78Aii7?y*%rzK\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      hashMap0.put((Byte) null, boolean0);
      jSONObject0.remove("W 3%,p.'Q2+qu");
      jSONObject0.optString("4.UhmzqyRCTXp");
      String string0 = "j7N5J`Z%JPJ/o||J";
      try { 
        jSONObject0.getJSONObject("j7N5J`Z%JPJ/o||J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j7N5J`Z%JPJ/o||J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "(\\$]md";
      JSONObject jSONObject1 = jSONObject0.append("($]md", "($]md");
      JSONObject.quote(",:]}/\"[{;=#");
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject1.getJSONArray("isreplace");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplace\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject.doubleToString(2687.838141);
      JSONObject jSONObject0 = new JSONObject((Object) "2687.838141");
      // Undeclared exception!
      jSONObject0.toString(2539);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((byte) (-81));
      JSONObject.getNames((Object) jSONArray0);
      jSONObject0.optLong("Q@jeD&L9K", 0L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,:]}/\"[{;=#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Double double0 = new Double(1085.654087);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("&9ERxRR ", 70);
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.isNull("");
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      Byte byte0 = new Byte((byte)59);
      JSONObject jSONObject1 = jSONObject0.putOpt("", ",\n");
      Integer.remainderUnsigned(34, 34);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-86));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((byte) (-86));
      Boolean boolean0 = new Boolean("=]?X-Kz1~A0DSRsmy7");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      hashMap0.put(byte0, boolean0);
      Byte byte1 = new Byte((byte)114);
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put(byte1, boolean1);
      jSONObject0.remove((String) null);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (double) (byte)114);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("Bad value from toJSONString: ", 0.0);
      jSONObject1.length();
      jSONObject1.keys();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString(128, 128);
      JSONObject jSONObject1 = jSONObject0.put("{}", 2168L);
      jSONObject1.accumulate("{}", jSONObject0);
      Float float0 = new Float(0.0F);
      try { 
        jSONObject1.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("getgetBytes", 64);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = new Object();
      jSONObject0.accumulate("0", (Object) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a number.", "] is not a number.");
      boolean boolean0 = new Boolean("getgetBytes");
      Integer integer0 = Integer.getInteger("getgetBytes", 1955);
      JSONObject jSONObject2 = jSONObject1.accumulate("getgetBytes", integer0);
      jSONObject2.remove("");
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ZD<[k!'u", (Collection) null);
      Double.max(0.0, 149.0);
      JSONObject jSONObject1 = jSONObject0.append("ZD<[k!'u", double0);
      try { 
        jSONObject1.getJSONObject("(&+Xv4kd+3;$-+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(&+Xv4kd+3;$-+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Short short0 = new Short((short)46);
      Short.toUnsignedLong((short)8192);
      Short.compare((short)46, (short)102);
      Short.toUnsignedInt((short)102);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject.quote("000");
      jSONObject0.optBoolean("Null pointer", true);
      jSONObject0.toString((int) (short)46);
      jSONObject0.toString(2387, 0);
      jSONObject0.optJSONArray("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Short short0 = new Short((short)32);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j_oJTBpk";
      stringArray0[1] = "u'so<US* Y=j&";
      stringArray0[2] = "isreplace";
      stringArray0[3] = "{xs";
      stringArray0[4] = "|pp'3Rp";
      stringArray0[5] = "A JSONArray text must start with '['";
      stringArray0[6] = "";
      stringArray0[7] = "|;l`g/S";
      String string0 = JSONObject.doubleToString(574.065);
      Float float0 = new Float((float) (short)32);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("k4a{mbCR?V", (-1L));
      jSONObject1.getString("k4a{mbCR?V");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("lo", 2394L);
      jSONObject0.optInt("lo", 3103);
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Float float0 = new Float(1186.7738F);
      String[] stringArray0 = new String[2];
      Float.max(1186.7738F, 1186.7738F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put(",\n", 16);
      jSONObject0.toString(16, 16);
      jSONObject1.optInt("5f8QVh@?2`aA", 2088);
      jSONObject1.optJSONArray("");
      JSONObject.quote(",\n");
      JSONObject jSONObject2 = jSONObject0.put("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}", (-1393));
      jSONObject2.toJSONArray((JSONArray) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject1.put("}*wMB4\u001D8c`r/", (Collection) linkedList0);
      jSONObject2.append("\t", ",\n");
      Object object0 = jSONObject3.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      String string0 = "Xe;R2JL";
      Boolean boolean0 = new Boolean("Xe;R2JL");
      Boolean boolean1 = Boolean.valueOf(false);
      hashMap0.put((Byte) null, boolean1);
      jSONObject0.remove("Xe;R2JL");
      jSONObject0.optString("\"aMCMD:ND?J-)m= $JXV\"");
      try { 
        jSONObject0.getJSONObject("\"aMCMD:ND?J-)m= $JXV\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"aMCMD:ND?J-)m= $JXV\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((byte) (-81));
      Boolean boolean0 = new Boolean("=]?X-Kz1~A0DSRsmy7");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Byte byte1 = new Byte((byte)92);
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put(byte1, boolean1);
      jSONObject0.remove((String) null);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (double) (byte)92);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("Bad value from toJSONString: ", 0.0);
      String string0 = "de";
      try { 
        Long.valueOf("de");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"de\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "OnrKBB8G[z[5De~:");
      jSONObject0.optBoolean("");
      jSONObject0.toString();
      jSONObject0.put("isN", false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of pa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("*h'SpL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*h'SpL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.toString((-2313), (-2313));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">uNn";
      String string0 = "A+Y";
      stringArray0[1] = "A+Y";
      stringArray0[2] = "";
      stringArray0[3] = "8G&FOl4~";
      stringArray0[4] = "N!DRaXiV1";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      jSONObject0.put("", (int) (byte)0);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONTokener");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONTokener
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Double double0 = new Double(2801.49);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(1186.3F, (-1534.796F));
      Float.min((-1534.796F), 1186.3F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      int int0 = jSONObject2.optInt("");
      assertEquals(2088, int0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = 0;
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("ZD<[k!'u", double0);
      jSONObject1.optString("is", "is");
      jSONObject1.toString(2275, 18);
      JSONObject jSONObject2 = jSONObject1.put("is", (-2064L));
      jSONObject2.optLong("Null pointer");
      jSONObject1.optInt("z7o=(", 18);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote("Expected a ',' or ']'");
      jSONObject2.put("ZD<[k!'u", 18);
      Byte byte0 = new Byte((byte)24);
      JSONObject jSONObject3 = new JSONObject(jSONArray0);
      Short short0 = new Short((short)4);
      JSONObject.valueToString(short0);
      Short short1 = new Short((short)4);
      jSONObject1.accumulate("z7o=(", short1);
      assertEquals(6, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("ZD<[k!'u", double0);
      jSONObject1.optString("is", "is");
      JSONObject jSONObject2 = new JSONObject((Object) "is");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "is");
      jSONObject0.write(stringWriter1);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject", "wheel.json.JSONObject");
      String string0 = "&Wjc<,K*5<1)";
      try { 
        jSONObject1.getDouble("&Wjc<,K*5<1)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&Wjc<,K*5<1)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".ba{u7xK/@~G)s$");
      jSONObject0.toString(58);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Double double0 = new Double(4977.965);
      JSONObject.numberToString(double0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Double@0000000001";
      stringArray0[1] = "java.lang.Double@0000000001";
      stringArray0[2] = "";
      stringArray0[3] = "java.lang.Double@0000000001";
      stringArray0[4] = "java.lang.Double@0000000001";
      stringArray0[5] = "pA6*F";
      stringArray0[6] = "java.lang.Double@0000000001";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("Be:b~-YjOH='FOne", (-969L));
      JSONObject.getNames((Object) jSONObject3);
      jSONObject3.opt("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      assertEquals(2, jSONObject0.length());
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.toString(1, 10);
      JSONObject jSONObject2 = jSONObject1.put("{}", (long) 1);
      jSONObject2.optInt("{}", 1);
      Float float0 = new Float((float) 10);
      jSONObject2.getDouble("{}");
      JSONObject jSONObject3 = jSONObject1.put("ag6ANhD,?t", false);
      assertSame(jSONObject1, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min(0.0, 1.0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("qu", (Collection) linkedList0);
      jSONObject1.getJSONArray("qu");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(1186.3F, (-1534.796F));
      Float.min((-1534.796F), 1186.3F);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toString((-390), 10);
      JSONObject jSONObject2 = jSONObject1.put(",\n", (-2064L));
      jSONObject0.optInt(",\n", (-390));
      jSONObject0.optJSONArray("");
      JSONObject.valueToString(",\n", (-390), (-390));
      jSONObject0.put(",\n", 2088);
      Byte byte0 = new Byte((byte)24);
      JSONObject jSONObject3 = new JSONObject(byte0);
      JSONObject.valueToString("\"java.lang.String@0000000003\"");
      JSONObject jSONObject4 = jSONObject2.accumulate("", (Object) null);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject0.optLong("true", 0L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("aMCMD:ND?J-)m= $JXV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of aMCMD:ND?J-)m= $JXV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      assertEquals(2, jSONObject1.length());
      
      jSONObject0.optJSONArray("T\"P@Q>ld;,@)\"$]}jaG");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "Id'i'4i#d1BVz0&c[";
      JSONObject jSONObject0 = new JSONObject((Object) "Id'i'4i#d1BVz0&c[");
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, boolean0);
      String string1 = "&Wjc<,K*5<1)";
      String string2 = "getjoin";
      try { 
        jSONObject1.getDouble("getjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      Short.toUnsignedInt((short) (-3438));
      JSONObject.getNames((Object) short0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      int int0 = 1402;
      JSONObject.valueToString(jSONObject0, 173, 1402);
      jSONObject0.put(" R1O*o4", (long) (short) (-3438));
      try { 
        jSONObject0.getString("_[8m/]/56MdEy^5=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_[8m/]/56MdEy^5=k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("getgetJSONArray");
      JSONObject.quote("kbMp5{w;Bc0:$xfu<B");
      Boolean boolean0 = new Boolean("\"kbMp5{w;Bc0:$xfu<B\"");
      Byte byte0 = new Byte((byte) (-1));
      hashMap0.put(byte0, boolean0);
      jSONObject0.remove((String) null);
      double double0 = 0.0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "kbMp5{w;Bc0:$xfu<B";
      stringArray0[1] = "ha";
      stringArray0[2] = "ha";
      stringArray0[3] = "getgetJSONArray";
      stringArray0[4] = "kbMp5{w;Bc0:$xfu<B";
      stringArray0[5] = "\"kbMp5{w;Bc0:$xfu<B\"";
      stringArray0[6] = "kbMp5{w;Bc0:$xfu<B";
      stringArray0[7] = "W 3%,p.'Q2+qu";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONObject.quote("m</'ErQykdiy$M6");
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONTokener");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONTokener
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("Eb", false);
      JSONObject.doubleToString(Double.NaN);
      JSONObject.quote(")jJA\"D");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-52));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      float float0 = 815.032F;
      try { 
        jSONObject0.put((String) null, 1180L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.doubleToString(0.0F);
      assertEquals("0", string0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.put("C", 13);
      JSONObject jSONObject1 = jSONObject0.put(",\n", (-2064L));
      String string1 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string1);
      
      int int0 = jSONObject0.optInt("getparseByte");
      assertEquals(0, int0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      long long0 = jSONObject1.optLong(",\n");
      assertEquals((-2064L), long0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Aj3KWC!6rur", (-4239));
      Long long0 = new Long((-1L));
      Long.getLong("TKk_");
      JSONObject jSONObject2 = jSONObject1.append("@{iN#4tJf`hk", long0);
      JSONObject.valueToString("Aj3KWC!6rur");
      jSONObject1.isNull("Aj3KWC!6rur");
      JSONArray jSONArray0 = jSONObject2.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("btE2(L!~", 64);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = new Object();
      JSONObject.getNames((Object) null);
      long long0 = new Integer(64);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("Q@jeD&L9K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Q@jeD&L9K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ZD<[k!'u";
      JSONObject jSONObject1 = new JSONObject(byte1, stringArray0);
      jSONObject0.names();
      jSONObject0.optBoolean((String) null, false);
      String string0 = "toU";
      try { 
        jSONObject1.get("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("wheel.json.JSONObject");
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(4, 4);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = JSONObject.quote("getwrite");
      assertEquals("\"getwrite\"", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      Object object0 = new Object();
      String string0 = "Missing value";
      jSONObject0.accumulate("Missing value", "Missing value");
      String string1 = null;
      try { 
        jSONObject0.append((String) null, "0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("] is not a Boolean.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONObject.quote("1t-O^swGVF?|qrse,C`");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"1t-O^swGVF?|qrse,C`\"", (Object) null);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Boolean boolean0 = Boolean.valueOf("isfloatToRawIntBits");
      JSONObject jSONObject2 = jSONObject1.putOpt("Expected '", boolean0);
      jSONObject2.getBoolean("Expected '");
      jSONObject2.put("isfloatToRawIntBits", 0L);
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "aMCMD:ND?J-)m= $JXV";
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("isopt");
      Boolean boolean0 = new Boolean("aMCMD:ND?J-)m= $JXV");
      Byte byte0 = Byte.valueOf((byte)8);
      hashMap0.put(byte0, boolean0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.remove("\"isopt\"");
      jSONObject1.put("$iEY>&NhH", 0.0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null pointer\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(10, 3572);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Integer integer0 = new Integer(125);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("~-XN", true);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Integer integer0 = new Integer((-1578));
      String string0 = JSONObject.doubleToString((-1578));
      assertEquals("-1578", string0);
      
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      String string1 = JSONObject.valueToString(hashMap0, 0, 0);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Integer integer0 = new Integer(2942);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Float float0 = new Float(374.1F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.append("getpu)t", float0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
      
      jSONObject0.getJSONArray("getpu)t");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Float float0 = new Float(0.0F);
      JSONObject.doubleToString(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.optBoolean("dGA^KXG}K1~-");
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$Null", (double) 0.0F);
      jSONObject0.optString("wheel.json.JSONObject$Null");
      jSONObject1.optBoolean(" at character ");
      try { 
        jSONObject1.getDouble("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.append("BOG?F#p*,No", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(56, 56);
      jSONObject0.put("{\n                                                                                                                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                        }", 0L);
      jSONObject0.getLong("{\n                                                                                                                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                        }");
      jSONObject0.optInt("{\n                                                                                                                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                        }", 56);
      Float float0 = new Float((float) 0L);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("IsMuqz3qBZF^Q(-gf]", (Map) hashMap0);
      jSONObject1.getJSONObject("IsMuqz3qBZF^Q(-gf]");
      boolean boolean0 = jSONObject0.optBoolean("CX0 )B$gkM:");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("ZD<[k!'u", double0);
      String string0 = "is";
      jSONObject1.optString("is", "is");
      int int0 = 125;
      String string1 = "\\r";
      double double1 = 0.0;
      try { 
        jSONObject1.getLong("ZD<[k!'u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZD<[k!'u\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(".kh8g,L\"Jj_F>SduW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".kh8g,L\\\"Jj_F>SduW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("p,^k5B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of p,^k5B
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(2849.0F, (-1534.796F));
      Float.min((-1534.796F), 2849.0F);
      JSONObject jSONObject1 = jSONObject0.put("", 2088);
      jSONObject1.toString((-390), 12);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(559, 0L);
      jSONObject0.toJSONArray(jSONArray1);
      JSONArray jSONArray2 = jSONObject1.names();
      Float float1 = new Float((-312.1391F));
      JSONObject.numberToString(float1);
      jSONObject0.toJSONArray(jSONArray2);
      StringWriter stringWriter0 = new StringWriter(13);
      StringWriter stringWriter1 = stringWriter0.append('U');
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertSame(stringWriter1, writer0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.keys();
      String string0 = null;
      jSONObject0.names();
      jSONObject0.optBoolean("1", false);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Double double0 = new Double((-1433.055));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "IGgs#~awo0G";
      stringArray0[2] = "";
      stringArray0[3] = "N*O4z\"+\\}A";
      stringArray0[4] = "yq8kY4@Iy1HW7F#=5t";
      stringArray0[5] = "k3td %'D$";
      stringArray0[6] = "Expected a ':' after a key";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("7&>=X%_");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a Boolean.");
      try { 
        jSONObject0.put("[", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Short short0 = new Short((short)32);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j_oJTBpk";
      stringArray0[1] = "u'so<US* Y=j&";
      stringArray0[2] = "Y}33aQ23H<l,";
      stringArray0[3] = "{xs";
      stringArray0[4] = "|pp'3Rp";
      stringArray0[5] = "A JSONArray text must start with '['";
      stringArray0[6] = "";
      stringArray0[7] = "|;l`g/S";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{VuJ(1cno;G]{D9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {VuJ(1cno;G]{D9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Double double0 = new Double(0.0);
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_Q(27.23VmM!";
      stringArray0[1] = "isputAll";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.valueToString("isclear");
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-3661.24));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Float float0 = new Float((-3661.24));
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONObject.quote("{}");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("\"{}\"");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("{}");
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      jSONObject3.put("R.#*QAA", (-1493));
      String string0 = JSONObject.quote("\"{}\"");
      jSONObject2.remove("\"\"{}\"\"");
      jSONObject2.put("] is not a number.", false);
      Float float0 = new Float((float) (-1493));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = "aMCMD:ND?J-)m= $JXV";
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = "";
      int int0 = 35;
      jSONObject0.optInt("", 35);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = new Object();
      String string2 = "0";
      try { 
        jSONObject0.accumulate((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optInt((String) null);
      int int1 = 4;
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = JSONObject.valueToString("Aj3KWC!6rur", (-1578), (-1578));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Double double1 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject(double1, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      Byte byte0 = new Byte((byte)59);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", ",\n");
      jSONObject1.putOpt("ma", ",\n");
      jSONObject1.optDouble("", 44.8333550339);
      try { 
        jSONObject0.append("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Short short0 = new Short((short) (-3438));
      int int0 = new Short((short) (-3438));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.toString((short) (-3438));
      assertEquals("{}", string0);
      
      jSONObject0.optInt("C% \"t~");
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray1);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must begin with '{'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.put("", object0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      String string0 = "";
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(1186.3F, (-1534.796F));
      Boolean boolean0 = new Boolean("[]");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject1.optDouble((String) null, (double) (-1534.796F));
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-85));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(32, (-1L));
      JSONArray jSONArray2 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.names();
      Long long0 = new Long(0L);
      JSONObject.numberToString(long0);
      Double double0 = new Double(0L);
      Short short0 = new Short((short) (-2617));
      JSONObject jSONObject1 = jSONObject0.accumulate("aMCMD:ND?J-)m= $JXV", boolean0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("pu", true);
      long long1 = jSONObject2.optLong(" of ");
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Float float0 = new Float(1186.3F);
      String[] stringArray0 = new String[2];
      Float.max(1186.3F, 1186.3F);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toJSONArray(jSONArray0);
      Object object0 = new Object();
      String string0 = "";
      Integer.getInteger("");
      JSONObject jSONObject2 = jSONObject1.accumulate("Csl", (Object) null);
      jSONObject2.append("0", jSONObject1);
      Object object1 = new Object();
      jSONObject2.putOpt("L)R`$:!m\"{", object1);
      int int0 = 1955;
      try { 
        jSONObject2.getBoolean("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONObject.testValidity("aMCMD:ND?J-)m= $JXV");
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("aMCMD:ND?J-)m= $JXV");
      JSONObject.quote("aMCMD:ND?J-)m= $JXV");
      Boolean boolean0 = new Boolean("dKV<nV_J`(!c.!");
      jSONObject0.optDouble("dKV<nV_J`(!c.!");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("i4", (Map) hashMap0);
      jSONObject1.optJSONObject((String) null);
      try { 
        jSONObject0.put((String) null, (Object) "i4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
