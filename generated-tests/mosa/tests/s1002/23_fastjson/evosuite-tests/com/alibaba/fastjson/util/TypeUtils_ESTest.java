/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:57:06 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.Format;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.Instant;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      TypeUtils.getParserFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      TypeUtils.isNumber("$");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig1 = new ParserConfig(aSMClassLoader0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, type0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : Mock for GenericArrayType, hashCode: 1567765311
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      Class<Double> class0 = Double.TYPE;
      java.util.IdentityHashMap<BatchUpdateException, SQLSyntaxErrorException> identityHashMap0 = new java.util.IdentityHashMap<BatchUpdateException, SQLSyntaxErrorException>();
      MockCalendar mockCalendar0 = TypeUtils.cast((Object) identityHashMap0, (Type) class0, (ParserConfig) null);
      assertNull(mockCalendar0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.entrySet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".o34X$");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<UUID> linkedHashSet0 = new LinkedHashSet<UUID>();
      linkedHashSet0.clear();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) parserConfig0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      TypeUtils.getParserFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("getgetFileName").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig.getGlobalInstance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeUtils.decapitalize("WriteClassNam>8e");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(weakHashMap0);
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      SecurityException securityException0 = new SecurityException();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<MockCalendar> class0 = MockCalendar.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.isProxy(class1);
      TypeUtils.getCollectionItemType(class1);
      TypeUtils.isNumber("5,4fE");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      ClassLoader.getSystemClassLoader();
      Dimension dimension0 = new Dimension();
      TypeUtils.unwrapOptional(type0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      TypeUtils.loadClass("L");
      OptionalCodec optionalCodec0 = new OptionalCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", classLoader0);
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = null;
      Class<SQLException> class1 = SQLException.class;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer((ParserConfig) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("Ljava.aw.Point");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "G{n8[qc/Ye^R";
      TypeUtils.decapitalize("G{n8[qc/Ye^R");
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(sqlDateDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.alib\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      TypeUtils.isNumber(";7.4JIQaO3 4");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters(class1, (Map<String, String>) linkedHashMap0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      SecurityException securityException0 = new SecurityException();
      Class<?> class2 = TypeUtils.loadClass("(I)");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      TypeUtils.isNumber("$");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Calendar> class0 = Calendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertEquals("class java.sql.SQLTransientConnectionException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class2.equals((Object)class1));
      assertEquals("class java.sql.SQLTransientConnectionException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertNotNull(class2);
      
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertEquals("class java.sql.SQLTransientConnectionException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertFalse(boolean0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class2);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertEquals("class java.sql.SQLTransientConnectionException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertNotNull(class3);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Class<NumberFormatException> class4 = NumberFormatException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class4);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertNotNull(throwableDeserializer0);
      
      Class<?> class5 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport");
      assertNull(class5);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      Class class6 = (Class)TypeUtils.unwrapOptional(class2);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertEquals("class java.sql.SQLTransientConnectionException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isPrimitive());
      assertEquals("class java.lang.Object", class6.toString());
      assertFalse(class6.isArray());
      assertFalse(class6.isInterface());
      assertEquals(1, class6.getModifiers());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isEnum());
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertSame(class6, class3);
      assertNotNull(class6);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = TypeUtils.decapitalize("java.awt.Point");
      assertEquals("java.awt.Point", string0);
      assertNotNull(string0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      SecurityException securityException0 = new SecurityException();
      assertNull(securityException0.getMessage());
      assertEquals("java.lang.SecurityException", securityException0.toString());
      assertNotNull(securityException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(securityException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = TypeUtils.isNumber("!SreCP%CrKch;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      int int0 = Opcodes.DCMPL;
      assertEquals(151, int0);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      Map<String, String> map0 = null;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      String string0 = TypeUtils.decapitalize("L");
      assertEquals("l", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      int int1 = TypeUtils.getSerializeFeatures(class0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      JSON.DEFAULT_GENERATE_FEATURE = 0;
      Format[] formatArray0 = new Format[9];
      boolean boolean1 = TypeUtils.isPath(class0);
      assertFalse(boolean1);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.math.BigDecimal
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.aw.Point");
      assertEquals((-8215963128706574997L), long0);
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Ljava.aw.Point", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("-!9ez*");
      assertEquals("-!9ez*", locale0.getLanguage());
      assertEquals("-!9ez*", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("-!9ez*");
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-20)}, byteArray0);
      assertNotNull(byteArray0);
      
      Class<Double> class0 = Double.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) locale0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : -!9ez*
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      Class<Double> class0 = Double.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertTrue(boolean0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      try { 
        Long.decode("ZA%QVKUVDLiHFOf{5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ZA%QVKUVDLiHFOf{5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<HttpCookie> class0 = HttpCookie.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("list");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : list
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<Currency> class0 = Currency.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Currency
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("-!9ez*");
      assertEquals("-!9ez*", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("-!9ez*", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("-!9ez*");
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-20)}, byteArray0);
      assertNotNull(byteArray0);
      
      Class<Double> class0 = Double.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      long long0 = TypeUtils.fnv1a_64_lower("-!9ez*");
      assertEquals((-6912308872474861774L), long0);
      
      long long1 = TypeUtils.fnv1a_64_lower("-!9ez*");
      assertTrue(long1 == long0);
      assertEquals((-6912308872474861774L), long1);
      
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("-!9ez*", "-!9ez*", (-1934914132));
      assertEquals((-1934914132), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("-!9ez*", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -!9ez*", sQLTransactionRollbackException0.toString());
      assertEquals("-!9ez*", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLTransactionRollbackException: -!9ez*
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("list");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : list
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNotNull(illegalThreadStateException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("e<C)b#Z$tGj!r\"IcXC");
      assertFalse(boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"WI8&=0q@].rS0", "e<C)b#Z$tGj!r\"IcXC");
      assertEquals("\"WI8&=0q@].rS0", sQLTimeoutException0.getMessage());
      assertEquals("e<C)b#Z$tGj!r\"IcXC", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: \"WI8&=0q@].rS0", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(sQLTimeoutException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("-!9ez*");
      assertEquals("", locale0.getISO3Country());
      assertEquals("-!9ez*", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("-!9ez*", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("-!9ez*");
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-20)}, byteArray0);
      assertNotNull(byteArray0);
      
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      LinkedHashMap<NoSuchMethodError, Calendar> linkedHashMap0 = new LinkedHashMap<NoSuchMethodError, Calendar>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      Class<SQLDataException> class2 = SQLDataException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      String string1 = TypeUtils.decapitalize("+");
      assertEquals("+", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<InternalError> class0 = InternalError.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.addAccept("");
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 1);
      parserConfig0.setAutoTypeSupport(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class1;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertNotNull(objectDeserializer0);
      
      InternalError internalError0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNull(internalError0);
      
      Class<?> class2 = TypeUtils.getClassFromMapping("fastjson.parser.autoTypeSupport");
      assertNull(class2);
      
      String string0 = TypeUtils.castToString(class1);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError();
      assertNull(instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNotNull(instantiationError0);
      
      String string0 = null;
      SQLWarning sQLWarning0 = new SQLWarning("\"q|oWI^G%3!,a~", "getgetMessagU");
      assertEquals("getgetMessagU", sQLWarning0.getSQLState());
      assertEquals("\"q|oWI^G%3!,a~", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%3!,a~", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLWarning sQLWarning1 = new SQLWarning("\"q|oWI^G%3!,a~");
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertNull(sQLWarning1.getSQLState());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%3!,a~", sQLWarning1.toString());
      assertEquals("\"q|oWI^G%3!,a~", sQLWarning1.getMessage());
      assertNotNull(sQLWarning1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("getgetMessagU", sQLWarning0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertEquals("getgetMessagU", sQLWarning0.getSQLState());
      assertEquals("\"q|oWI^G%3!,a~", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%3!,a~", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: getgetMessagU", sQLFeatureNotSupportedException0.toString());
      assertEquals("getgetMessagU", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string1 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertEquals("getgetMessagU", sQLWarning0.getSQLState());
      assertEquals("\"q|oWI^G%3!,a~", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%3!,a~", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: getgetMessagU", sQLFeatureNotSupportedException0.toString());
      assertEquals("getgetMessagU", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotSame(sQLWarning0, sQLWarning1);
      assertEquals("getgetMessagU", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("getgetMessagU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getgetMessagU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("-8%4LJU");
      assertEquals((-6044851824118425061L), long0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-49);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)7, (byte)64, (byte)98, (byte) (-49)}, byteArray0);
      assertEquals((byte) (-49), bigInteger0.byteValue());
      assertEquals((short)25295, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Long long1 = TypeUtils.castToLong(bigInteger0);
      assertArrayEquals(new byte[] {(byte)10, (byte)7, (byte)64, (byte)98, (byte) (-49)}, byteArray0);
      assertFalse(long1.equals((Object)long0));
      assertEquals((byte) (-49), bigInteger0.byteValue());
      assertEquals((short)25295, bigInteger0.shortValue());
      assertEquals(43071333071L, (long)long1);
      assertNotNull(long1);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = new Dimension();
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertTrue(dimension1.equals((Object)dimension0));
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertNotNull(dimension1);
      
      Dimension dimension2 = new Dimension(dimension1);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension2.height);
      assertEquals(0, dimension2.width);
      assertTrue(dimension1.equals((Object)dimension0));
      assertTrue(dimension2.equals((Object)dimension0));
      assertTrue(dimension2.equals((Object)dimension1));
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension2.getHeight(), 0.01);
      assertEquals(0.0, dimension2.getWidth(), 0.01);
      assertNotNull(dimension2);
      
      Character character0 = new Character('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      Character character1 = TypeUtils.castToChar(character0);
      assertEquals('7', (char)character1);
      assertNotNull(character1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertEquals("class java.sql.SQLIntegrityConstraintViolationException", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class2);
      assertEquals("class java.sql.SQLIntegrityConstraintViolationException", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(boolean0);
      
      Class<PropertyProcessableDeserializer> class3 = PropertyProcessableDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class3);
      assertEquals(0, int0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertNull(stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNotNull(stackOverflowError0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertNotNull(javaBeanSerializer0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      boolean boolean1 = TypeUtils.isNumber("Formats");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<MockHijrahDate> class4 = MockHijrahDate.class;
      boolean boolean2 = TypeUtils.isProxy(class4);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constructor<SQLTransientConnectionException>[] constructorArray0 = (Constructor<SQLTransientConnectionException>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      long long0 = TypeUtils.fnv1a_64_lower("8Br#2`l");
      assertEquals(1778646482742967926L, long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Class<Calendar> class0 = Calendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertNotNull(throwableDeserializer0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : [
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.sql.BatchUpdateException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Time time0 = TypeUtils.castToSqlTime("4");
      assertEquals("00:00:00", time0.toString());
      assertNotNull(time0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@19d2ef26
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      RenderingHints renderingHints0 = TypeUtils.cast((Object) null, (Type) parameterizedTypeImpl0, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNull(renderingHints0);
      
      int int1 = TypeUtils.getParserFeatures(class0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      
      RenderingHints renderingHints0 = TypeUtils.cast((Object) null, (Type) parameterizedTypeImpl0, parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(parserConfig1, parserConfig0);
      assertNull(renderingHints0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError();
      assertNull(instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNotNull(instantiationError0);
      
      SQLWarning sQLWarning0 = new SQLWarning("\"q|oWI^G%!,a~", "6AJ/+Zci");
      assertEquals("\"q|oWI^G%!,a~", sQLWarning0.getMessage());
      assertEquals("6AJ/+Zci", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLWarning sQLWarning1 = new SQLWarning((String) null, sQLWarning0);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertEquals("\"q|oWI^G%!,a~", sQLWarning0.getMessage());
      assertEquals("6AJ/+Zci", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLWarning0.toString());
      assertNull(sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertNotNull(sQLWarning1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLWarning0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertEquals("\"q|oWI^G%!,a~", sQLWarning0.getMessage());
      assertEquals("6AJ/+Zci", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLWarning0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, (String) null, 1734, sQLRecoverableException0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("\"q|oWI^G%!,a~", sQLWarning0.getMessage());
      assertEquals("6AJ/+Zci", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLWarning0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLRecoverableException0.getMessage());
      assertEquals(1734, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertNotNull(sQLRecoverableException1);
      
      Spliterator<Throwable> spliterator0 = sQLRecoverableException1.spliterator();
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("\"q|oWI^G%!,a~", sQLWarning0.getMessage());
      assertEquals("6AJ/+Zci", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLWarning0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLRecoverableException0.getMessage());
      assertEquals(1734, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotNull(spliterator0);
      
      String string0 = sQLWarning0.getLocalizedMessage();
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertEquals("\"q|oWI^G%!,a~", sQLWarning0.getMessage());
      assertEquals("6AJ/+Zci", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLWarning0.toString());
      assertNotSame(sQLWarning0, sQLWarning1);
      assertEquals("\"q|oWI^G%!,a~", string0);
      assertNotNull(string0);
      
      sQLWarning1.addSuppressed(sQLRecoverableException0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertEquals("\"q|oWI^G%!,a~", sQLWarning0.getMessage());
      assertEquals("6AJ/+Zci", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLWarning0.toString());
      assertNull(sQLWarning1.getMessage());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLRecoverableException0.getMessage());
      assertNotSame(sQLWarning0, sQLWarning1);
      assertNotSame(sQLWarning1, sQLWarning0);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("6AJ/+Zci", sQLWarning0);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertEquals("\"q|oWI^G%!,a~", sQLWarning0.getMessage());
      assertEquals("6AJ/+Zci", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLWarning0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 6AJ/+Zci", sQLFeatureNotSupportedException0.toString());
      assertEquals("6AJ/+Zci", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      String string1 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"q|oWI^G%!,a~", sQLWarning0.getMessage());
      assertEquals("6AJ/+Zci", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: \"q|oWI^G%!,a~", sQLWarning0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 6AJ/+Zci", sQLFeatureNotSupportedException0.toString());
      assertEquals("6AJ/+Zci", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotSame(sQLWarning0, sQLWarning1);
      assertEquals("6AJ/+Zci", string1);
      assertNotNull(string1);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
      
      String string2 = TypeUtils.decapitalize((String) null);
      assertNull(string2);
      
      Class<MapDeserializer> class0 = MapDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jSONType0).toString();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(jSONType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.SQLIntegrityConstraintViolationException", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.SQLIntegrityConstraintViolationException", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(boolean0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNull(stackOverflowError0.getMessage());
      assertNotNull(stackOverflowError0);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      Class<StackOverflowError> class3 = StackOverflowError.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class3, hashMap0, false, propertyNamingStrategy0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean1 = TypeUtils.isNumber("4");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEach((-1206L), biConsumer0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = identityHashMap0.put("java.util.concurrent.atomic.LongAdder", "java.util.concurrent.atomic.LongAdder");
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertNull(string0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      List<FieldInfo> list1 = TypeUtils.computeGettersWithFieldBase(class1, hashtable0, true, propertyNamingStrategy0);
      assertTrue(list1.equals((Object)list0));
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      boolean boolean0 = TypeUtils.isNumber("nfEYjb<");
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("nfEYjb<");
      assertEquals("nfEYjb<", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      assertNull(illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError", illegalAccessError0.toString());
      assertNotNull(illegalAccessError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(threadGroup0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.ThreadGroup[name=nfEYjb<,maxpri=10]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError("qeK7aoiHB4fl");
      assertEquals("qeK7aoiHB4fl", stackOverflowError0.getMessage());
      assertEquals("java.lang.StackOverflowError: qeK7aoiHB4fl", stackOverflowError0.toString());
      assertNotNull(stackOverflowError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("qeK7aoiHB4fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : qeK7aoiHB4fl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = TypeUtils.isNumber("$");
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("$");
      assertEquals("$", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "$", (-677L));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("$", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("$", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("$", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertEquals("$", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      ClassLoader classLoader3 = classLoader2.getParent();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertEquals("$", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader3, classLoader1);
      assertNotNull(classLoader3);
      
      Class<?> class0 = TypeUtils.loadClass("iterator", classLoader2, false);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader3));
      assertEquals("$", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertSame(classLoader2, classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = TypeUtils.isNumber("scanInt");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      InterruptedException interruptedException0 = new InterruptedException("~Lx");
      assertEquals("java.lang.InterruptedException: ~Lx", interruptedException0.toString());
      assertEquals("~Lx", interruptedException0.getMessage());
      assertNotNull(interruptedException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.InterruptedException: ~Lx
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      boolean boolean0 = TypeUtils.isNumber("~Lx");
      assertFalse(boolean0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<?> class2 = TypeUtils.loadClass((String) null);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("getlongValue");
      assertEquals("getlongValue", string0);
      assertNotNull(string0);
      
      Class<PageAttributes> class0 = PageAttributes.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isNumber("getlongValue");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedHashSet<UUID> linkedHashSet0 = new LinkedHashSet<UUID>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl1, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) parameterizedTypeImpl0, (PropertyNamingStrategy) null);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(javaBeanInfo0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("-!9ez*");
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-20)}, byteArray0);
      assertNotNull(byteArray0);
      
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      MockDate mockDate0 = new MockDate((-182), (-446), (-446), (-446), 3600);
      assertEquals("Wed Jul 26 22:00:00 GMT 1679", mockDate0.toString());
      assertNotNull(mockDate0);
      
      boolean boolean0 = TypeUtils.isNumber("-!9ez*");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : Wed Jul 26 22:00:00 GMT 1679
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(throwableDeserializer0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      MockDate mockDate0 = new MockDate((-182), 3130, (-446), (-446), (-1883255885));
      assertEquals("Fri Dec 13 19:55:00 GMT 1605", mockDate0.toString());
      assertNotNull(mockDate0);
      
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      assertFalse(boolean0);
      
      Class<?> class0 = TypeUtils.loadClass("double");
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<ClassLoader> class1 = ClassLoader.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) parserConfig0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.ClassLoader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      Class<Double> class0 = Double.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNull(stackOverflowError0.getMessage());
      assertNotNull(stackOverflowError0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.max((-736.22158), (-736.22158));
      assertEquals((-736.22158), double1, 0.01);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class<NumberFormat> class1 = NumberFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(11, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockGregorianCalendar0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      String string0 = TypeUtils.decapitalize("tD86&Zc(I#OvX9taH[");
      assertEquals("tD86&Zc(I#OvX9taH[", string0);
      assertNotNull(string0);
      
      String string1 = TypeUtils.decapitalize("tD86&Zc(I#OvX9taH[");
      assertTrue(string1.equals((Object)string0));
      assertEquals("tD86&Zc(I#OvX9taH[", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("tD86&Zc(I#OvX9taH[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Constructor<SQLTransientConnectionException>[] constructorArray0 = (Constructor<SQLTransientConnectionException>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) jSONType0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader1.setClassAssertionStatus("list", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      String string0 = TypeUtils.castToString(classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNotNull(string0);
      
      Class<Double> class0 = Double.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Point point0 = new Point(11, 11);
      assertEquals(11, point0.x);
      assertEquals(11, point0.y);
      assertEquals(11.0, point0.getY(), 0.01);
      assertEquals(11.0, point0.getX(), 0.01);
      assertNotNull(point0);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      VerifyError verifyError0 = new VerifyError();
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNotNull(verifyError0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(decimalFormat0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("org.apache.ibatis.javassist.util.proxy.ProxyObject");
      assertEquals((-5777252204467304798L), long0);
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("org.apache.ibatis.javassist.util.proxy.ProxyObject");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.ibatis.javassist.util.proxy.ProxyObject\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinkedHashSet<UUID> linkedHashSet0 = new LinkedHashSet<UUID>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLFeatureNotSupportedException0.getStackTrace();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(stackTraceElementArray0);
      
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(mockIllegalStateException0);
      
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      long long0 = TypeUtils.fnv1a_64_lower("kGr!v+a{4z$&");
      assertEquals((-6813767238666559079L), long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Float float0 = new Float((-1455.7F));
      assertEquals((-1455.7F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Byte byte0 = TypeUtils.castToByte(float0);
      assertEquals((byte)81, (byte)byte0);
      assertNotNull(byte0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("\"\"%%LD^ar6");
      assertEquals((-6301132592238647079L), long0);
      
      Timestamp timestamp0 = new Timestamp((-6301132592238647079L));
      assertEquals("199668874-01-20 20:49:12.921", timestamp0.toString());
      assertEquals(921000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      java.util.Date date0 = java.util.Date.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = TypeUtils.castToSqlDate(timestamp0);
      assertEquals("199668874-01-20 20:49:12.921", timestamp0.toString());
      assertEquals(921000000, timestamp0.getNanos());
      assertNotNull(date1);
      
      Class<Double> class0 = Double.TYPE;
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      java.util.IdentityHashMap<BatchUpdateException, SQLSyntaxErrorException> identityHashMap0 = new java.util.IdentityHashMap<BatchUpdateException, SQLSyntaxErrorException>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader1.setClassAssertionStatus("list", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setPackageAssertionStatus("list", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l$8O>t&SoWU");
      assertFalse(boolean0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      int int0 = (-3163);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("R\"I17B5C[fG", "fastjson.parser.autoTypeAccept", (-3163), sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("R\"I17B5C[fG", sQLRecoverableException0.getMessage());
      assertEquals("fastjson.parser.autoTypeAccept", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: R\"I17B5C[fG", sQLRecoverableException0.toString());
      assertEquals((-3163), sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLRecoverableException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@3c1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      String string0 = TypeUtils.decapitalize("tD86&Zc(I#OvX9taH[");
      assertEquals("tD86&Zc(I#OvX9taH[", string0);
      assertNotNull(string0);
      
      String string1 = TypeUtils.decapitalize("tD86&Zc(I#OvX9taH[");
      assertTrue(string1.equals((Object)string0));
      assertEquals("tD86&Zc(I#OvX9taH[", string1);
      assertNotNull(string1);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "tD86&Zc(I#OvX9taH[", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPAN;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = locale0.getDisplayCountry(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("\u53F0\u6E7E", string1);
      assertNotNull(string1);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp("");
      assertNull(timestamp0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string2 = treeMap0.floorKey("\u53F0\u6E7E");
      assertEquals(0, treeMap0.size());
      assertNull(string2);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      AtomicLong atomicLong0 = new AtomicLong((-1206L));
      assertEquals("-1206", atomicLong0.toString());
      assertEquals((-1206.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1206L), atomicLong0.get());
      assertEquals((-1206.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-1206L), atomicLong0.longValue());
      assertEquals((byte)74, atomicLong0.byteValue());
      assertEquals((short) (-1206), atomicLong0.shortValue());
      assertEquals((-1206), atomicLong0.intValue());
      assertNotNull(atomicLong0);
      
      InstantiationError instantiationError0 = new InstantiationError();
      assertNull(instantiationError0.getMessage());
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNotNull(instantiationError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale("java.awt.Point", "istoInstant", "java.awt.Point");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ISTOINSTANT", locale1.getCountry());
      assertEquals("java.awt.point", locale1.getLanguage());
      assertEquals("java.awt.point_ISTOINSTANT_java.awt.Point", locale1.toString());
      assertEquals("java.awt.Point", locale1.getVariant());
      assertNotNull(locale1);
      
      Locale.setDefault(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ISTOINSTANT", locale1.getCountry());
      assertEquals("java.awt.point", locale1.getLanguage());
      assertEquals("java.awt.point_ISTOINSTANT_java.awt.Point", locale1.toString());
      assertEquals("java.awt.Point", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ISTOINSTANT", locale1.getCountry());
      assertEquals("java.awt.point", locale1.getLanguage());
      assertEquals("java.awt.point_ISTOINSTANT_java.awt.Point", locale1.toString());
      assertEquals("java.awt.Point", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale2 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Short short0 = new Short((short)97);
      assertEquals((short)97, (short)short0);
      assertNotNull(short0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(short0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      AtomicLong atomicLong0 = new AtomicLong((-1073741823L));
      assertEquals((-1073741823L), atomicLong0.longValue());
      assertEquals("-1073741823", atomicLong0.toString());
      assertEquals((short)1, atomicLong0.shortValue());
      assertEquals((-1.07374182E9F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-1.073741823E9), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1073741823), atomicLong0.intValue());
      assertEquals((byte)1, atomicLong0.byteValue());
      assertEquals((-1073741823L), atomicLong0.get());
      assertNotNull(atomicLong0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : -1073741823
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = Opcodes.DCMPL;
      assertEquals(151, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      boolean boolean0 = TypeUtils.isNumber("5,4fE");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-535);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertArrayEquals(new int[] {(-535)}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      Class<ClassLoader> class0 = ClassLoader.class;
      ClassLoader classLoader2 = TypeUtils.castToJavaBean((Object) classLoader0, class0);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      int int1 = TypeUtils.getSerializeFeatures(class1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.sql.BatchUpdateException", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<Double> class3 = Double.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNotNull(illegalThreadStateException0);
      
      SecurityException securityException0 = new SecurityException();
      assertEquals("java.lang.SecurityException", securityException0.toString());
      assertNull(securityException0.getMessage());
      assertNotNull(securityException0);
      
      Class<?> class4 = TypeUtils.loadClass(":eCu_");
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = Opcodes.DCMPL;
      assertEquals(151, int0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      boolean boolean0 = TypeUtils.isNumber("5,4fE");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-535);
      String string0 = TypeUtils.decapitalize("5,4fE");
      assertEquals("5,4fE", string0);
      assertNotNull(string0);
      
      Class<SQLException> class0 = SQLException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("5,4fE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale("java.awt.Point", "java.awt.Point", "java.awt.Point");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("java.awt.point_JAVA.AWT.POINT_java.awt.Point", locale1.toString());
      assertEquals("java.awt.Point", locale1.getVariant());
      assertEquals("java.awt.point", locale1.getLanguage());
      assertEquals("JAVA.AWT.POINT", locale1.getCountry());
      assertNotNull(locale1);
      
      Locale.setDefault(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("java.awt.point_JAVA.AWT.POINT_java.awt.Point", locale1.toString());
      assertEquals("java.awt.Point", locale1.getVariant());
      assertEquals("java.awt.point", locale1.getLanguage());
      assertEquals("JAVA.AWT.POINT", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(locale0, locale1);
      assertNotNull(set0);
      
      String string0 = locale0.getDisplayCountry(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("java.awt.point_JAVA.AWT.POINT_java.awt.Point", locale1.toString());
      assertEquals("java.awt.Point", locale1.getVariant());
      assertEquals("java.awt.point", locale1.getLanguage());
      assertEquals("JAVA.AWT.POINT", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      ConcurrentHashMap<SqlDateDeserializer, SQLFeatureNotSupportedException> concurrentHashMap0 = new ConcurrentHashMap<SqlDateDeserializer, SQLFeatureNotSupportedException>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      boolean boolean0 = TypeUtils.isNumber("~Lx");
      assertFalse(boolean0);
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.text.DecimalFormatSymbols", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      boolean boolean1 = TypeUtils.isNumber("7(9Lv:");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class2);
      assertNull(annotation0);
      
      Class<?> class3 = TypeUtils.loadClass("ha");
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("~Lx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ~Lx
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("16_1");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("HB:q7e1Y");
      assertEquals("HB:q7e1Y", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "16_1", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) bigInteger0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.Boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader1.setPackageAssertionStatus("list", true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Short short0 = new Short((short)160);
      assertEquals((short)160, (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(bigDecimal0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertEquals((short)8, bigDecimal0.shortValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      AtomicLong atomicLong0 = new AtomicLong((short)160);
      assertEquals(160L, atomicLong0.longValue());
      assertEquals(160.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((short)160, atomicLong0.shortValue());
      assertEquals(160, atomicLong0.intValue());
      assertEquals(160L, atomicLong0.get());
      assertEquals((byte) (-96), atomicLong0.byteValue());
      assertEquals("160", atomicLong0.toString());
      assertEquals(160.0F, atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      Short short1 = new Short((short)849);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)849, (short)short1);
      assertNotNull(short1);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class1.isInterface());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.ParserConfig@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fileSystemHandling0, (Type) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("list", false);
      classLoader0.setPackageAssertionStatus("list", true);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      boolean boolean0 = TypeUtils.isNumber("~Lx");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-4904);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      ThreadGroup threadGroup0 = new ThreadGroup("e2m221?=6z[");
      assertEquals("e2m221?=6z[", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("interface java.util.List", class0.toString());
      assertTrue(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("\"\"%%LD^ar6");
      assertEquals((-6301132592238647079L), long0);
      
      Timestamp timestamp0 = new Timestamp((-6301132592238647079L));
      assertEquals(921000000, timestamp0.getNanos());
      assertEquals("199668874-01-20 20:49:12.921", timestamp0.toString());
      assertNotNull(timestamp0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      java.util.Date date0 = java.util.Date.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = TypeUtils.castToSqlDate(timestamp0);
      assertEquals(921000000, timestamp0.getNanos());
      assertEquals("199668874-01-20 20:49:12.921", timestamp0.toString());
      assertNotNull(date1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      assertNull(noSuchFieldException0.getMessage());
      assertNotNull(noSuchFieldException0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      String string0 = TypeUtils.decapitalize("\"\"%%LD^ar6");
      assertEquals("\"\"%%LD^ar6", string0);
      assertNotNull(string0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(14);
      assertEquals(14, atomicInteger0.intValue());
      assertEquals(14, atomicInteger0.get());
      assertEquals("14", atomicInteger0.toString());
      assertEquals((byte)14, atomicInteger0.byteValue());
      assertEquals((short)14, atomicInteger0.shortValue());
      assertEquals(14.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(14L, atomicInteger0.longValue());
      assertEquals(14.0F, atomicInteger0.floatValue(), 0.01F);
      assertNotNull(atomicInteger0);
      
      Float float0 = TypeUtils.castToFloat(atomicInteger0);
      assertEquals(14, atomicInteger0.intValue());
      assertEquals(14, atomicInteger0.get());
      assertEquals("14", atomicInteger0.toString());
      assertEquals((byte)14, atomicInteger0.byteValue());
      assertEquals((short)14, atomicInteger0.shortValue());
      assertEquals(14.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(14L, atomicInteger0.longValue());
      assertEquals(14.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(14.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.sql.SQLClientInfoException", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class4, "(Ljava/lang/reflect/Type;Ljava/lang/Object;)Z", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("c24*)Y", class1, class2, class3, (Field) null, (-1934914132), 21, 57);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(57, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(21, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.sql.SQLClientInfoException", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNull(fieldInfo0.getFormat());
      assertEquals("c24*)Y", fieldInfo0.toString());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(57, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(21, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.sql.SQLClientInfoException", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNull(fieldInfo0.getFormat());
      assertEquals("c24*)Y", fieldInfo0.toString());
      assertEquals("c24*)Y", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals(21, beanContext0.getFeatures());
      assertNotNull(beanContext0);
      
      Class<?> class5 = beanContext0.getFieldClass();
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(57, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(21, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.sql.SQLClientInfoException", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNull(fieldInfo0.getFormat());
      assertEquals("c24*)Y", fieldInfo0.toString());
      assertEquals("c24*)Y", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals(21, beanContext0.getFeatures());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isPrimitive());
      assertEquals(1, class5.getModifiers());
      assertEquals("class java.sql.SQLClientInfoException", class5.toString());
      assertNotNull(class5);
      
      Type type0 = TypeUtils.getGenericParamType(class5);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(57, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(21, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.sql.SQLClientInfoException", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNull(fieldInfo0.getFormat());
      assertEquals("c24*)Y", fieldInfo0.toString());
      assertEquals("c24*)Y", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals(21, beanContext0.getFeatures());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isPrimitive());
      assertEquals(1, class5.getModifiers());
      assertEquals("class java.sql.SQLClientInfoException", class5.toString());
      assertNull(type0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNotNull(mockThrowable0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("getMetaClass", mockThrowable0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: getMetaClass", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("getMetaClass", sQLTransientConnectionException0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException("c24*)Y");
      assertEquals("c24*)Y", numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException: c24*)Y", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NumberFormatException: c24*)Y
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<SQLWarning> class0 = SQLWarning.class;
          JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
          TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
          assertEquals(0, treeMap0.size());
          assertNotNull(treeMap0);
          
          java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
          assertEquals(0, identityHashMap0.size());
          assertTrue(identityHashMap0.isEmpty());
          assertNotNull(identityHashMap0);
          
          WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>(identityHashMap0);
          assertEquals(0, identityHashMap0.size());
          assertTrue(identityHashMap0.isEmpty());
          assertNotNull(weakHashMap0);
          
          String string0 = treeMap0.put("SRfk|@iz1Q", (String) null);
          assertEquals(1, treeMap0.size());
          assertNull(string0);
          
          String string1 = treeMap0.put("cause", "S$5EI2]ije2H^_I");
          assertEquals(2, treeMap0.size());
          assertNull(string1);
          
          String string2 = treeMap0.put("can not cast to Date, value : ", "can not cast to Date, value : ");
          assertEquals(3, treeMap0.size());
          assertNull(string2);
          
          Field field0 = ParserConfig.getFieldFromCache("cause", weakHashMap0);
          assertEquals(0, identityHashMap0.size());
          assertTrue(identityHashMap0.isEmpty());
          assertNull(field0);
          
          Field field1 = weakHashMap0.put("i", (Field) null);
          assertEquals(0, identityHashMap0.size());
          assertTrue(identityHashMap0.isEmpty());
          assertNull(field1);
          
          PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
          boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
          assertFalse(boolean0);
          
          List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
          assertEquals(3, treeMap0.size());
          assertEquals(0, identityHashMap0.size());
          assertTrue(identityHashMap0.isEmpty());
          assertEquals(1, list0.size());
          assertFalse(list0.isEmpty());
          assertNotNull(list0);
          
          MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
          assertNotNull(mockJapaneseDate0);
          
          SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("SRfk|@iz1Q", (String) null, 509);
          assertEquals(509, sQLTransientConnectionException0.getErrorCode());
          assertEquals("java.sql.SQLTransientConnectionException: SRfk|@iz1Q", sQLTransientConnectionException0.toString());
          assertNull(sQLTransientConnectionException0.getSQLState());
          assertEquals("SRfk|@iz1Q", sQLTransientConnectionException0.getMessage());
          assertNotNull(sQLTransientConnectionException0);
          
          // Undeclared exception!
          try { 
            TypeUtils.castToFloat(sQLTransientConnectionException0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // can not cast to float, value : java.sql.SQLTransientConnectionException: SRfk|@iz1Q
             //
             verifyException("com.alibaba.fastjson.util.TypeUtils", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          assertNotNull(classLoader0);
          
          ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
          assertNotNull(aSMDeserializerFactory0);
          
          String string0 = "+5.&";
          Locale locale0 = JSON.defaultLocale;
          assertEquals("en", locale0.toString());
          assertEquals("", locale0.getISO3Country());
          assertEquals("eng", locale0.getISO3Language());
          assertEquals("", locale0.getVariant());
          assertEquals("en", locale0.getLanguage());
          assertEquals("", locale0.getCountry());
          assertNotNull(locale0);
          
          Locale.setDefault(locale0);
          assertEquals("en", locale0.toString());
          assertEquals("", locale0.getISO3Country());
          assertEquals("eng", locale0.getISO3Language());
          assertEquals("", locale0.getVariant());
          assertEquals("en", locale0.getLanguage());
          assertEquals("", locale0.getCountry());
          
          Set<Character> set0 = locale0.getExtensionKeys();
          assertEquals("en", locale0.toString());
          assertEquals("", locale0.getISO3Country());
          assertEquals("eng", locale0.getISO3Language());
          assertEquals("", locale0.getVariant());
          assertEquals("en", locale0.getLanguage());
          assertEquals("", locale0.getCountry());
          assertEquals(0, set0.size());
          assertTrue(set0.isEmpty());
          assertNotNull(set0);
          
          ConcurrentHashMap<SqlDateDeserializer, SQLFeatureNotSupportedException> concurrentHashMap0 = new ConcurrentHashMap<SqlDateDeserializer, SQLFeatureNotSupportedException>();
          assertTrue(concurrentHashMap0.isEmpty());
          assertNotNull(concurrentHashMap0);
          
          Short short0 = new Short((short)31);
          assertEquals((short)31, (short)short0);
          assertNotNull(short0);
          
          Integer integer0 = TypeUtils.castToInt(short0);
          assertEquals(31, (int)integer0);
          assertNotNull(integer0);
          
          Class<Byte> class0 = Byte.TYPE;
          assertFalse(class0.isInterface());
          assertEquals("byte", class0.toString());
          assertEquals(1041, class0.getModifiers());
          assertFalse(class0.isArray());
          assertFalse(class0.isAnnotation());
          assertFalse(class0.isSynthetic());
          assertFalse(class0.isEnum());
          assertTrue(class0.isPrimitive());
          assertNotNull(class0);
          
          // Undeclared exception!
          try { 
            TypeUtils.createCollection(class0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // create instance error, class byte
             //
             verifyException("com.alibaba.fastjson.util.TypeUtils", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      assertFalse(boolean0);
      
      Dimension dimension0 = new Dimension();
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("class java.text.DecimalFormatSymbols", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = JavaBeanInfo.getBuilderClass((JSONType) null);
      assertNull(class0);
      
      Class<ClassLoader> class1 = ClassLoader.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      
      boolean boolean1 = TypeUtils.isNumber("5,4fE");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Class<MockCalendar> class0 = MockCalendar.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertSame(classLoader1, classLoader0);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      
      Class<?> class1 = TypeUtils.getClassFromMapping("fastjson.parser.autoTypeAccept");
      assertNull(class1);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMClassLoader0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      assertNull(interruptedException0.getMessage());
      assertNotNull(interruptedException0);
      
      StackTraceElement[] stackTraceElementArray0 = interruptedException0.getStackTrace();
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      assertNull(interruptedException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      ParserConfig parserConfig2 = ParserConfig.global;
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertNotSame(parserConfig2, parserConfig1);
      assertNotSame(parserConfig2, parserConfig0);
      assertNotNull(parserConfig2);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) interruptedException0, (Type) class0, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      aSMDeserializerFactory0.classLoader.setPackageAssertionStatus("Ljava.aw.Point", true);
      assertSame(classLoader0, classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      assertNotNull(classLoader2);
      
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader3, classLoader0);
      assertSame(classLoader3, classLoader2);
      assertSame(classLoader3, classLoader1);
      assertNotNull(classLoader3);
      
      Class<?> class0 = TypeUtils.loadClass("getgetComponentType", classLoader2, true);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader3);
      assertSame(classLoader2, classLoader1);
      assertNull(class0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Class<MapDeserializer> class1 = MapDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("Ljava.aw.Point");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.aw.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
