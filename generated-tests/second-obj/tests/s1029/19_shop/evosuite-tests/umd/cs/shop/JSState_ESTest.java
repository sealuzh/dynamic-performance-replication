/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:40:39 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSOperator;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTState;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState1 = jSState0.apply(jSPlan0);
      assertNotSame(jSState1, jSState0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSState jSState0 = null;
      try {
        jSState0 = new JSState((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSState0.add(0, (Object) jSSubstitution0);
      UnaryOperator.identity();
      jSState0.addElementsToState(jSState0);
      assertEquals("", jSState0.Name());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState0 = new JSState();
      jSPlan0.add((Object) "+nAy{1g,hujPWT");
      UnaryOperator.identity();
      jSState0.addElementsToState(jSPlan0);
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      jSState0.satisfiesAll(jSState0, jSSubstitution1, jSListAxioms0);
      jSPlanningDomain0.axioms();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeAllElements();
      JSOperator jSOperator0 = new JSOperator();
      jSSubstitution2.print();
      JSTState jSTState0 = new JSTState();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "J");
      jSState0.add((Object) jSTerm0);
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSState0.satisfiesTAm(jSPredicateForm0, jSSubstitution2);
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      JSListLogicalAtoms jSListLogicalAtoms0 = null;
      JSListAxioms jSListAxioms2 = jSPlanningDomain0.axioms();
      // Undeclared exception!
      try { 
        jSState0.satisfies((JSListLogicalAtoms) null, jSSubstitution0, jSListAxioms2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSListAxioms", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSTState jSTState0 = new JSTState();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      jSState0.add((Object) jSTerm0);
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesTAm(jSTerm0, jSSubstitution0);
      assertEquals(1, jSListSubstitution0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      JSListAxioms jSListAxioms0 = jSPlanningDomain0.axioms();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTState jSTState0 = new JSTState();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution1.add((Object) jSListAxioms0);
      JSSubstitution jSSubstitution2 = jSState0.satisfies(jSState0, jSSubstitution0, jSListAxioms0);
      jSSubstitution2.listIterator();
      jSTerm0.add((Object) "");
      jSState0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSPlanningDomain0);
      JSState jSState1 = new JSState();
      jSState1.satisfies(jSState0, jSSubstitution1, jSListAxioms0);
      // Undeclared exception!
      try { 
        jSState1.listIterator((-2773));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2773
         //
         verifyException("java.util.Vector", e);
      }
  }
}
