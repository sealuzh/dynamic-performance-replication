/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:21:51 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("a\tAA`b", (Map<Integer, String>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      Map<Object, Map<String, String>> map1 = doubleKeyMap1.newMap();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(map1, class1);
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap2.get((Object) integer0, "9|Db");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      doubleKeyMap0.newMap();
      doubleKeyMap0.remove((Object) class0);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(class1);
      Object object0 = new Object();
      Integer integer0 = new Integer(304);
      doubleKeyMap1.put("", object0, integer0);
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      Class<HashMap> class2 = HashMap.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Object>(hashMap0, class2);
      Integer integer1 = new Integer(304);
      Class<HashMap> class3 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>(class3);
      Map<String, Object> map0 = doubleKeyMap3.newMap();
      hashMap0.put(integer1, map0);
      Integer integer2 = new Integer(304);
      doubleKeyMap2.get(integer2, "");
      HashMap<Object, Map<Object, Object>> hashMap1 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap4 = new DoubleKeyMap<Object, Object, Object>(hashMap1, class0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = doubleKeyMap4.put(object1, object2, (Object) "G:>IL3RZRRffM");
      assertNull(object3);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      String string0 = "";
      doubleKeyMap0.remove("]\"'|l>:.6wRN?`X-Nt", "");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.put("", "", integer1);
      doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>();
      doubleKeyMap1.newMap();
      Integer integer2 = new Integer(0);
      doubleKeyMap0.put("", "", integer0);
      doubleKeyMap1.remove("");
      doubleKeyMap1.remove("=\"B|*");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      String string0 = "wrong proto type map ";
      hashMap0.put("wrong proto type map ", hashMap1);
      hashMap0.putIfAbsent("", hashMap1);
      HashMap<String, Map<Object, Integer>> hashMap2 = new HashMap<String, Map<Object, Integer>>();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(hashMap2, class1);
      doubleKeyMap0.remove("", (Object) "wrong proto type map ");
      doubleKeyMap1.get("", (Object) doubleKeyMap0);
      hashMap1.clone();
      Class<Map> class2 = Map.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Integer, String, Object>(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap1.put("", "#");
      hashMap0.put("wrong proto type map ", hashMap1);
      hashMap0.putIfAbsent("", hashMap1);
      HashMap<String, Map<Object, Integer>> hashMap2 = new HashMap<String, Map<Object, Integer>>();
      HashMap<Object, Integer> hashMap3 = new HashMap<Object, Integer>();
      hashMap2.put("|pR`$3Fu ", hashMap3);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(hashMap2, class1);
      doubleKeyMap0.remove("", (Object) "wrong proto type map ");
      doubleKeyMap1.get("", (Object) doubleKeyMap0);
      HashMap hashMap4 = new HashMap<Object, Integer>();
      Class<Map> class2 = Map.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Integer, String, Object>(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
