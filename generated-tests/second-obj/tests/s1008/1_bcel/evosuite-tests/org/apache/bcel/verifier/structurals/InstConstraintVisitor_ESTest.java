/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:57:45 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BASTORE;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionListObserver;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.PUTSTATIC;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.ReturnInstruction;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.StackInstruction;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-8));
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals(2, bIPUSH0.getLength());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(180, 1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackConsumer(dNEG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IINC iINC0 = new IINC(0, 0);
      POP2 pOP2_0 = new POP2();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      assertEquals("jsr_w", jSR_W0.getName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FLOAD fLOAD0 = new FLOAD(3011);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      SIPUSH sIPUSH0 = new SIPUSH((short)2);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      DUP dUP0 = (DUP)InstructionConstants.DUP;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(dUP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      int[] intArray0 = new int[11];
      intArray0[7] = 0;
      InstructionList instructionList0 = new InstructionList();
      instructionList0.copy();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      System.setCurrentTimeMillis((-1869L));
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(5);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(gETSTATIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE(46);
      iSTORE0.toString();
      instConstraintVisitor0.visitISTORE(iSTORE0);
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = instructionList0.copy();
      LNEG lNEG0 = (LNEG)InstructionConstants.LNEG;
      instructionList1.append((Instruction) lNEG0);
      SWAP sWAP0 = new SWAP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSWAP(sWAP0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      byte[] byteArray0 = new byte[2];
      instConstraintVisitor0.visitDCONST((DCONST) null);
      FLOAD fLOAD0 = null;
      try {
        fLOAD0 = new FLOAD((byte) (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -115
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      gOTO0.toString();
      gOTO0.copy();
      gOTO0.setTarget((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO(gOTO0);
      NEWARRAY nEWARRAY0 = new NEWARRAY((byte)121);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitFCONST((FCONST) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      POP2 pOP2_0 = new POP2();
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(1342);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKESPECIAL0);
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO_W((GOTO_W) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(3122);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")i1D2");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals("aconst_null", aCONST_NULL0.getName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      L2I l2I0 = new L2I();
      l2I0.toString(false);
      POP2 pOP2_0 = new POP2();
      IUSHR iUSHR0 = new IUSHR();
      IUSHR iUSHR1 = new IUSHR();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      CALOAD cALOAD0 = new CALOAD();
      LCONST lCONST0 = new LCONST((byte)0);
      instConstraintVisitor0.visitLCONST(lCONST0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      PUSH pUSH0 = new PUSH(constantPoolGen0, true);
      InstructionList instructionList0 = new InstructionList(pUSH0);
      // Undeclared exception!
      try { 
        instructionList0.findHandle((int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ALOAD aLOAD0 = (ALOAD)InstructionConstants.ALOAD_1;
      InstructionList instructionList0 = new InstructionList(aLOAD0);
      InstructionList instructionList1 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      JSR jSR0 = new JSR(instructionHandle0);
      instConstraintVisitor0.visitJSR(jSR0);
      assertEquals(0, jSR0.getIndex());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1398);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      ObjectType objectType0 = new ObjectType("U");
      OperandStack operandStack0 = new OperandStack(1398, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      L2I l2I0 = new L2I();
      FALOAD fALOAD0 = new FALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFALOAD(fALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FALOAD constraint violated: The 'index' is not of type int but of type U.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1404);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1404, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack1.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      BasicType basicType0 = Type.LONG;
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.CHAR);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      INEG iNEG0 = new INEG();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-18);
      FileSystemHandling.shouldAllThrowIOExceptions();
      D2L d2L0 = new D2L();
      BALOAD bALOAD0 = new BALOAD();
      FSTORE fSTORE0 = new FSTORE(2368);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        iUSHR0.accept(instConstraintVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1404);
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1404, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack1.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB((FSUB) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DLOAD dLOAD0 = new DLOAD(170);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      IINC iINC0 = new IINC(170, 170);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1411);
      ObjectType objectType0 = new ObjectType("A");
      OperandStack operandStack0 = new OperandStack(1411, objectType0.THROWABLE);
      LocalVariables localVariables1 = new LocalVariables(1411);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = new Boolean(true);
      operandStack0.push(objectType0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      operandStack0.push(objectType0);
      Character.getName(1411);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type 'A'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 403;
      ILOAD iLOAD0 = new ILOAD(403);
      ObjectType objectType0 = new ObjectType("pVl!@]W7\")");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      operandStack0.toString();
      LocalVariables localVariables0 = new LocalVariables(5);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      localVariables0.getClone();
      frame1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(683);
      INVOKEVIRTUAL iNVOKEVIRTUAL1 = new INVOKEVIRTUAL(3644);
      iNVOKEVIRTUAL1.setIndex(4239);
      InstructionHandle instructionHandle0 = null;
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPNE constraint violated: The value at the stack top is not of type 'int', but of type 'pVl!@]W7\")'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LocalVariables localVariables0 = new LocalVariables(1404);
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(2207, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LMUL lMUL0 = new LMUL();
      operandStack0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "') than the one referenced by the CONSTANT_Class '");
      LocalVariables localVariables0 = new LocalVariables(1404);
      ObjectType objectType0 = ObjectType.getInstance("nk@NU{JL?_@V");
      OperandStack operandStack0 = new OperandStack(122, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      frame0.getClone();
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB((DSUB) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1440);
      ObjectType objectType0 = new ObjectType("e_+ba4ZX+wu'");
      OperandStack operandStack0 = new OperandStack(1440);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      operandStack0.push(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      I2D i2D0 = new I2D();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(1083);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1386);
      ObjectType objectType0 = new ObjectType("w");
      OperandStack operandStack0 = new OperandStack(1386, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      localVariables0.getClone();
      operandStack1.push(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(objectType0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR((IOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LocalVariables localVariables0 = new LocalVariables(1404);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1404, objectType0);
      Frame frame0 = new Frame(1404, 1404);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LLOAD lLOAD0 = new LLOAD(85);
      instConstraintVisitor0.visitLocalVariableInstruction(lLOAD0);
      RET rET0 = new RET(1116);
      RET rET1 = new RET(155);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 155.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1367);
      ObjectType objectType0 = new ObjectType("w");
      OperandStack operandStack0 = new OperandStack(1367, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      localVariables0.getClone();
      LocalVariables localVariables1 = new LocalVariables(1367);
      localVariables1.clone();
      uninitializedObjectType0.isAssignmentCompatibleWith(objectType0);
      localVariables1.getClone();
      operandStack1.push(uninitializedObjectType0);
      operandStack0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      DNEG dNEG0 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'w'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LocalVariables localVariables0 = new LocalVariables(1404);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(2207, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack1.toString();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IADD iADD0 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1404);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("");
      OperandStack operandStack0 = new OperandStack(1462, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.toString();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      BasicType basicType0 = Type.LONG;
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.CHAR);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1404, (-270));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV((FDIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1411);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack1.clear();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack1.clear();
      operandStack1.push(objectType0);
      operandStack0.push(objectType0);
      frame0.toString();
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ILOAD iLOAD0 = new ILOAD(1);
      iLOAD0.toString(true);
      LSTORE lSTORE0 = new LSTORE(1411);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(lSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSTORE constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1358);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1358, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      operandStack0.toString();
      IUSHR iUSHR0 = new IUSHR();
      operandStack0.equals(iUSHR0);
      frame1.clone();
      Boolean boolean0 = new Boolean(false);
      operandStack0.push(objectType0);
      operandStack0.push(objectType0);
      instConstraintVisitor0.setFrame(frame1);
      RET rET0 = new RET(412);
      LSHR lSHR0 = new LSHR();
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1386);
      ObjectType objectType0 = new ObjectType("w");
      OperandStack operandStack0 = new OperandStack(1386, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      localVariables0.getClone();
      operandStack1.push(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      RET rET0 = new RET(412);
      LSHR lSHR0 = new LSHR();
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(32);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'w'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LocalVariables localVariables0 = new LocalVariables(1404);
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(1404, objectType0);
      OperandStack operandStack1 = new OperandStack(1404);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      Frame frame1 = frame0.getClone();
      frame1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      F2I f2I0 = new F2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1425);
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(1425, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      frame0.clone();
      frame0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LLOAD lLOAD0 = new LLOAD(1116);
      LALOAD lALOAD0 = new LALOAD();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR((IUSHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1411);
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      OperandStack operandStack0 = new OperandStack(1046, uninitializedObjectType0.THROWABLE);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      D2L d2L0 = new D2L();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|&3ub");
      D2L d2L1 = new D2L();
      d2L1.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'java.lang.Throwable'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LocalVariables localVariables0 = new LocalVariables(1404);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(2207, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack1.toString();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IADD iADD0 = new IADD();
      FMUL fMUL0 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1411);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      operandStack1.push(objectType0);
      frame0.clone();
      operandStack0.push(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables0.getClone();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ObjectType objectType0 = new ObjectType("");
      ObjectType objectType1 = new ObjectType("&.}IEtX?Q-k7W ;*5Q");
      OperandStack operandStack0 = new OperandStack(1054, objectType1);
      operandStack0.getClone();
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FALOAD fALOAD0 = new FALOAD();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pkUjxl1J+GFhw}");
      I2L i2L0 = new I2L();
      String string0 = Constants.ILLEGAL_OPCODE;
      instConstraintVisitor0.visitStackProducer(i2L0);
      assertEquals((short)133, i2L0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      POP2 pOP2_0 = new POP2();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "') than the one referenced by the CONSTANT_Class '");
      LocalVariables localVariables0 = new LocalVariables(1404);
      ObjectType objectType0 = ObjectType.getInstance("nk@NU{JL?_@V");
      OperandStack operandStack0 = new OperandStack(122, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Character.getName(1404);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type 'nk@NU{JL?_@V'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1411);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1411);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      operandStack0.push(objectType0);
      operandStack0.toString();
      instConstraintVisitor0.setFrame(frame0);
      Boolean.valueOf("Slots used: 1 MaxStack: 1411.\n (Size: 1)\n");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.visitLSTORE((LSTORE) null);
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1411);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      operandStack0.push(objectType0);
      operandStack0.toString();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.toString();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN((FRETURN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(1411);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.merge(localVariables1);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.toString();
      frame0.toString();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ISUB iSUB0 = new ISUB();
      assertEquals((short)100, iSUB0.getOpcode());
      assertEquals(1, iSUB0.getLength());
      assertEquals("isub", iSUB0.getName());
      assertNotNull(iSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1481);
      assertEquals(1481, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1481, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1481, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1481, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1481, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1481, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1481, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(1481);
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertEquals("invokevirtual", iNVOKEVIRTUAL0.getName());
      assertEquals(1481, iNVOKEVIRTUAL0.getIndex());
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertNotNull(iNVOKEVIRTUAL0);
      
      DUP dUP0 = new DUP();
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals("dup", dUP0.getName());
      assertEquals(1, dUP0.getLength());
      assertNotNull(dUP0);
      
      String string0 = File.separator;
      assertEquals("/", string0);
      assertNotNull(string0);
      
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals((short)89, dUP0.getOpcode());
      assertEquals("dup", dUP0.getName());
      assertEquals(1, dUP0.getLength());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DDIV dDIV0 = new DDIV();
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertNotNull(dDIV0);
      
      ARETURN aRETURN0 = new ARETURN();
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertNotNull(aRETURN0);
      
      instConstraintVisitor0.visitARETURN(aRETURN0);
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertEquals((short)176, aRETURN0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411);
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      LocalVariables localVariables1 = new LocalVariables(1411);
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(frame1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      DMUL dMUL0 = new DMUL();
      assertEquals(1, dMUL0.getLength());
      assertEquals((short)107, dMUL0.getOpcode());
      assertEquals("dmul", dMUL0.getName());
      assertNotNull(dMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      OperandStack operandStack0 = new OperandStack(1411);
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      operandStack0.clear();
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      String string0 = frame0.toString();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(string0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      
      LocalVariables localVariables3 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables3.maxLocals());
      assertNotNull(localVariables3);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1.0));
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string1 = pUSH0.toString();
      assertEquals("ldc2_w[20](3) 1 (PUSH)", string1);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      InstructionList instructionList0 = new InstructionList();
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      
      FMUL fMUL0 = new FMUL();
      assertEquals(1, fMUL0.getLength());
      assertEquals("fmul", fMUL0.getName());
      assertEquals((short)106, fMUL0.getOpcode());
      assertNotNull(fMUL0);
      
      SWAP sWAP0 = new SWAP();
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
      assertNotNull(sWAP0);
      
      instConstraintVisitor0.visitSWAP(sWAP0);
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertEquals("swap", sWAP0.getName());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ILOAD iLOAD0 = new ILOAD(403);
      assertEquals(4, iLOAD0.getLength());
      assertEquals(403, iLOAD0.getIndex());
      assertEquals((short)21, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload", iLOAD0.getName());
      assertNotNull(iLOAD0);
      
      ObjectType objectType0 = new ObjectType("p.Yk4!Z@kH/oI#");
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      ObjectType objectType1 = new ObjectType("p.Yk4!Z@kH/oI#");
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType1.getSignature());
      assertEquals(1, objectType1.getSize());
      assertEquals("p.Yk4!Z@kH.oI#", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertNotNull(objectType1);
      assertTrue(objectType1.equals((Object)objectType0));
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(5, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      LocalVariables localVariables0 = new LocalVariables(5);
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack1);
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(frame0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Frame frame1 = frame0.getClone();
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(frame1);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame1.equals((Object)frame0));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame2 = frame1.getClone();
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(frame2);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      
      Frame frame3 = frame0.getClone();
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(frame3);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame3);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame1);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(frame3.equals((Object)frame0));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LSHL lSHL0 = new LSHL();
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals("lshl", lSHL0.getName());
      assertEquals(1, lSHL0.getLength());
      assertNotNull(lSHL0);
      
      instConstraintVisitor0.setFrame(frame3);
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame3);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame1);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame0.equals((Object)frame3));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(frame3.equals((Object)frame0));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'p.Yk4!Z@kH.oI#'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1440);
      assertEquals(1440, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("e_+ba4ZX+wu'");
      assertEquals("Le_+ba4ZX+wu';", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("e_+ba4ZX+wu'", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1440);
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1440, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1440, localVariables0.maxLocals());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1440, operandStack0.maxStack());
      assertNotNull(frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1440, localVariables0.maxLocals());
      assertEquals(1440, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("Le_+ba4ZX+wu';", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("e_+ba4ZX+wu'", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1440, operandStack0.maxStack());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1440, localVariables0.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1440, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      L2F l2F0 = new L2F();
      assertEquals((short)137, l2F0.getOpcode());
      assertEquals("l2f", l2F0.getName());
      assertEquals(1, l2F0.getLength());
      assertNotNull(l2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'e_+ba4ZX+wu''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      
      LocalVariables localVariables1 = new LocalVariables(1411);
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      String string0 = frame0.toString();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotNull(string0);
      assertNotSame(localVariables0, localVariables1);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotNull(frame1);
      assertTrue(frame1.equals((Object)frame0));
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(3, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(3, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-0.35131309875596006));
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.size());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      
      InstructionList instructionList2 = pUSH0.getInstructionList();
      assertEquals(1, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList2);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      
      ISHR iSHR0 = new ISHR();
      assertEquals((short)122, iSHR0.getOpcode());
      assertEquals("ishr", iSHR0.getName());
      assertEquals(1, iSHR0.getLength());
      assertNotNull(iSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411);
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1411.\n (Size: 1)\n (Size: 1)\n", string0);
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      Boolean boolean0 = new Boolean("Slots used: 2 MaxStack: 1411.\n (Size: 1)\n (Size: 1)\n");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = constantPoolGen0.addInterfaceMethodref("Slots used: 2 MaxStack: 1411.\n (Size: 1)\n (Size: 1)\n", "", "");
      assertEquals(5, int0);
      assertEquals(6, constantPoolGen0.getSize());
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(7, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      F2L f2L0 = new F2L();
      assertEquals((short)140, f2L0.getOpcode());
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertNotNull(f2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1365);
      assertEquals(1365, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1365, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertFalse(frame0.equals((Object)frame1));
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertNotNull(dUP_X1_0);
      
      instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals((short)90, dUP_X1_0.getOpcode());
      
      Frame frame2 = new Frame(localVariables0, operandStack0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame2);
      assertFalse(frame2.equals((Object)frame1));
      
      IAND iAND0 = new IAND();
      assertEquals(1, iAND0.getLength());
      assertEquals((short)126, iAND0.getOpcode());
      assertEquals("iand", iAND0.getName());
      assertNotNull(iAND0);
      
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals("monitorexit", mONITOREXIT0.getName());
      assertNotNull(mONITOREXIT0);
      
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      assertEquals((short)195, mONITOREXIT0.getOpcode());
      assertEquals(1, mONITOREXIT0.getLength());
      assertEquals("monitorexit", mONITOREXIT0.getName());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1404);
      assertEquals(1404, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2207, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 2207.\n (Size: 1)\n", string0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(string0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame1 = frame0.getClone();
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      
      ATHROW aTHROW0 = new ATHROW();
      assertEquals("athrow", aTHROW0.getName());
      assertEquals((short)191, aTHROW0.getOpcode());
      assertEquals(1, aTHROW0.getLength());
      assertNotNull(aTHROW0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class name 
         //
         verifyException("org.apache.bcel.util.MemorySensitiveClassPathRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      
      LocalVariables localVariables1 = new LocalVariables(1411);
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      
      OperandStack operandStack1 = new OperandStack(1411);
      assertEquals(0, operandStack1.size());
      assertTrue(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(0, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      FASTORE fASTORE0 = new FASTORE();
      assertEquals((short)81, fASTORE0.getOpcode());
      assertEquals(1, fASTORE0.getLength());
      assertEquals("fastore", fASTORE0.getName());
      assertNotNull(fASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1406);
      assertEquals(1406, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1406, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1406, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1406, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1406, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack1);
      assertEquals(1406, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1406, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1406, operandStack1.maxStack());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      localVariables0.set(547, objectType0);
      assertEquals(1406, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, "");
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string0 = pUSH0.toString();
      assertEquals("ldc[18](2) 2 (PUSH)", string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(string0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1406, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1406, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1406, operandStack0.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1406, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen1.getSize());
      assertNotNull(constantPoolGen1);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      
      IAND iAND0 = new IAND();
      assertEquals("iand", iAND0.getName());
      assertEquals((short)126, iAND0.getOpcode());
      assertEquals(1, iAND0.getLength());
      assertNotNull(iAND0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackProducer(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: Cannot consume 2 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 1406.
         //  (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      LocalVariables localVariables1 = new LocalVariables(1411);
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Boolean boolean1 = new Boolean((String) null);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Frame frame1 = new Frame(1411, 1411);
      assertNotNull(frame1);
      assertFalse(frame1.equals((Object)frame0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertFalse(frame0.equals((Object)frame1));
      
      instConstraintVisitor0.visitGOTO((GOTO) null);
      F2D f2D0 = null;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D((F2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1458);
      assertEquals(1458, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1458, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      OperandStack operandStack1 = new OperandStack(1458, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1458, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1458.\n (Size: 1)\n (Size: 1)\n", string0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      Frame frame1 = new Frame(localVariables0, operandStack1);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1458, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotNull(frame1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame1.equals((Object)frame0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(frame0.equals((Object)frame1));
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals(1458, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava/lang/Throwable;");
      assertFalse(boolean0);
      
      FCMPG fCMPG0 = new FCMPG();
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals(1, fCMPG0.getLength());
      assertNotNull(fCMPG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1425);
      assertEquals(1425, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("'|6;q=S");
      assertEquals(1, objectType0.getSize());
      assertEquals("'|6;q=S", objectType0.getClassName());
      assertEquals("L'|6;q=S;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OperandStack operandStack0 = new OperandStack(1425, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("'|6;q=S", objectType0.getClassName());
      assertEquals("L'|6;q=S;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("'|6;q=S", objectType0.getClassName());
      assertEquals("L'|6;q=S;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      Object object0 = frame0.clone();
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("'|6;q=S", objectType0.getClassName());
      assertEquals("L'|6;q=S;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(object0);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertTrue(object0.equals((Object)frame0));
      
      Object object1 = frame0.clone();
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("'|6;q=S", objectType0.getClassName());
      assertEquals("L'|6;q=S;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(object1);
      assertNotSame(frame0, object1);
      assertNotSame(frame0, object0);
      assertNotSame(object1, object0);
      assertNotSame(object1, frame0);
      assertTrue(object1.equals((Object)frame0));
      assertTrue(object1.equals((Object)object0));
      
      Frame frame1 = frame0.getClone();
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("'|6;q=S", objectType0.getClassName());
      assertEquals("L'|6;q=S;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame1);
      assertNotSame(frame0, object1);
      assertNotSame(frame0, object0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, object0);
      assertNotSame(frame1, object1);
      assertTrue(frame0.equals((Object)object0));
      assertTrue(frame0.equals((Object)object1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)object0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("'|6;q=S", objectType0.getClassName());
      assertEquals("L'|6;q=S;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, object1);
      assertNotSame(frame0, object0);
      assertNotSame(frame0, frame1);
      assertTrue(frame0.equals((Object)object0));
      assertTrue(frame0.equals((Object)object1));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LLOAD lLOAD0 = new LLOAD(1116);
      assertEquals(4, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertEquals(1116, lLOAD0.getIndex());
      assertNotNull(lLOAD0);
      
      LALOAD lALOAD0 = new LALOAD();
      assertEquals("laload", lALOAD0.getName());
      assertEquals(1, lALOAD0.getLength());
      assertEquals((short)47, lALOAD0.getOpcode());
      assertNotNull(lALOAD0);
      
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
      assertNotNull(aCONST_NULL0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9un%W'm${uX");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      IRETURN iRETURN0 = new IRETURN();
      assertEquals((short)172, iRETURN0.getOpcode());
      assertEquals(1, iRETURN0.getLength());
      assertEquals("ireturn", iRETURN0.getName());
      assertNotNull(iRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type ''|6'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1458);
      assertEquals(1458, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1458, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL((FCMPL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      OperandStack operandStack2 = (OperandStack)operandStack0.clone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(1411, operandStack2.maxStack());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.size());
      assertNotNull(operandStack2);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      operandStack1.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.size());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack2);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack2));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      OperandStack operandStack3 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack3.isEmpty());
      assertEquals(1, operandStack3.slotsUsed());
      assertEquals(1411, operandStack3.maxStack());
      assertEquals(1, operandStack3.size());
      assertNotNull(operandStack3);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack3);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack3, operandStack1);
      assertNotSame(operandStack3, operandStack0);
      assertNotSame(operandStack3, operandStack2);
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack3.equals((Object)operandStack0));
      assertTrue(operandStack3.equals((Object)operandStack2));
      assertFalse(operandStack3.equals((Object)operandStack1));
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack3);
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack3));
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      instConstraintVisitor0.visitMONITORENTER((MONITORENTER) null);
      FREM fREM0 = new FREM();
      assertEquals("frem", fREM0.getName());
      assertEquals(1, fREM0.getLength());
      assertEquals((short)114, fREM0.getOpcode());
      assertNotNull(fREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1426);
      assertEquals(1426, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("{");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L{;", objectType0.getSignature());
      assertEquals("{", objectType0.getClassName());
      assertNotNull(objectType0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1426, localVariables0.maxLocals());
      assertEquals(1426, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      OperandStack operandStack0 = new OperandStack(1426);
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(1426, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1426, localVariables0.maxLocals());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(1426, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L{;", objectType0.getSignature());
      assertEquals("{", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1426, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertEquals(1426, localVariables0.maxLocals());
      assertEquals(1426, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1426, localVariables0.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1426, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen1.getSize());
      assertNotNull(constantPoolGen1);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      
      String string1 = frame0.toString();
      assertEquals(1426, localVariables0.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1426, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(string1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(string1.equals((Object)string0));
      
      BasicType basicType0 = Type.VOID;
      assertEquals("V", basicType0.getSignature());
      assertEquals((byte)12, basicType0.getType());
      assertEquals(0, basicType0.getSize());
      assertNotNull(basicType0);
      
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertNotNull(aRRAYLENGTH0);
      
      ARRAYLENGTH aRRAYLENGTH1 = new ARRAYLENGTH();
      assertEquals((short)190, aRRAYLENGTH1.getOpcode());
      assertEquals(1, aRRAYLENGTH1.getLength());
      assertEquals("arraylength", aRRAYLENGTH1.getName());
      assertNotNull(aRRAYLENGTH1);
      assertTrue(aRRAYLENGTH1.equals((Object)aRRAYLENGTH0));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type {.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("p.Yk4!Z@kH/oI#");
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      ObjectType objectType1 = new ObjectType("p.Yk4!Z@kH/oI#");
      assertEquals(1, objectType1.getSize());
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("p.Yk4!Z@kH.oI#", objectType1.getClassName());
      assertNotNull(objectType1);
      assertTrue(objectType1.equals((Object)objectType0));
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(5, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      LocalVariables localVariables0 = new LocalVariables(5);
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      Frame frame0 = new Frame(localVariables0, operandStack1);
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(frame0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Frame frame1 = frame0.getClone();
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(frame1);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame1.equals((Object)frame0));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame2 = frame1.getClone();
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(frame2);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame0));
      
      Frame frame3 = frame0.getClone();
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotNull(frame3);
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame3);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame1));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LSHL lSHL0 = new LSHL();
      assertEquals(1, lSHL0.getLength());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertNotNull(lSHL0);
      
      instConstraintVisitor0.setFrame(frame3);
      assertEquals("p.Yk4!Z@kH.oI#", objectType0.getClassName());
      assertEquals("Lp/Yk4!Z@kH/oI#;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(5, operandStack1.maxStack());
      assertEquals(5, localVariables0.maxLocals());
      assertNotSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame3);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      assertTrue(objectType0.equals((Object)objectType1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame3));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame1));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE((IFGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1386);
      assertEquals(1386, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " q$%3+b7xkXK/{");
      assertFalse(boolean0);
      
      ObjectType objectType0 = new ObjectType(" q$%3+b7xkXK/{");
      assertEquals(" q$%3+b7xkXK.{", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L q$%3+b7xkXK/{;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2256, objectType0);
      assertEquals(" q$%3+b7xkXK.{", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L q$%3+b7xkXK/{;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2256, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals(" q$%3+b7xkXK.{", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L q$%3+b7xkXK/{;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2256, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      OperandStack operandStack1 = new OperandStack(2256, objectType0);
      assertEquals(" q$%3+b7xkXK.{", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L q$%3+b7xkXK/{;", objectType0.getSignature());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2256, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      operandStack0.merge(operandStack1);
      assertEquals(" q$%3+b7xkXK.{", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L q$%3+b7xkXK/{;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2256, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2256, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals(1386, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals(" q$%3+b7xkXK.{", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L q$%3+b7xkXK/{;", objectType0.getSignature());
      assertEquals(2, operandStack0.size());
      assertEquals(2256, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals(" q$%3+b7xkXK.{", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L q$%3+b7xkXK/{;", objectType0.getSignature());
      assertEquals(2, operandStack0.size());
      assertEquals(2256, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      FSTORE fSTORE0 = new FSTORE(3);
      assertEquals(1, fSTORE0.getLength());
      assertEquals(3, fSTORE0.getIndex());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
      assertEquals((short)70, fSTORE0.getOpcode());
      assertEquals("fstore_3", fSTORE0.getName());
      assertNotNull(fSTORE0);
      
      instConstraintVisitor0.visitLocalVariableInstruction(fSTORE0);
      assertEquals(1, fSTORE0.getLength());
      assertEquals(3, fSTORE0.getIndex());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
      assertEquals((short)70, fSTORE0.getOpcode());
      assertEquals("fstore_3", fSTORE0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN((LRETURN) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("k");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k", objectType0.getClassName());
      assertEquals("Lk;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k", objectType0.getClassName());
      assertEquals("Lk;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k", objectType0.getClassName());
      assertEquals("Lk;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k", objectType0.getClassName());
      assertEquals("Lk;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k", objectType0.getClassName());
      assertEquals("Lk;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("k", objectType0.getClassName());
      assertEquals("Lk;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      
      I2F i2F0 = new I2F();
      assertEquals(1, i2F0.getLength());
      assertEquals("i2f", i2F0.getName());
      assertEquals((short)134, i2F0.getOpcode());
      assertNotNull(i2F0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      I2F i2F1 = new I2F();
      assertEquals(1, i2F1.getLength());
      assertEquals("i2f", i2F1.getName());
      assertEquals((short)134, i2F1.getOpcode());
      assertNotNull(i2F1);
      assertTrue(i2F1.equals((Object)i2F0));
      
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      assertEquals((short)93, dUP2_X1_0.getOpcode());
      assertEquals("dup2_x1", dUP2_X1_0.getName());
      assertEquals(1, dUP2_X1_0.getLength());
      assertNotNull(dUP2_X1_0);
      
      instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
      assertEquals((short)93, dUP2_X1_0.getOpcode());
      assertEquals("dup2_x1", dUP2_X1_0.getName());
      assertEquals(1, dUP2_X1_0.getLength());
      
      // Undeclared exception!
      try { 
        operandStack0.pop(1411);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1425);
      assertEquals(1425, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1425);
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1425, localVariables0.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1425, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1425.\n (Size: 1)\n (Size: 1)\n", string0);
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      
      int int0 = (-2885);
      I2F i2F0 = new I2F();
      assertEquals(1, i2F0.getLength());
      assertEquals((short)134, i2F0.getOpcode());
      assertEquals("i2f", i2F0.getName());
      assertNotNull(i2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1530);
      assertEquals(1530, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1530, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1530, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1530, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1530, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertNotNull(uninitializedObjectType0);
      
      operandStack0.clear();
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(1530, operandStack0.maxStack());
      
      operandStack0.push(uninitializedObjectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1530, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1530, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertEquals(1530, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Type type0 = operandStack1.pop();
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1530, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(1530, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", type0.getSignature());
      assertEquals((byte)15, type0.getType());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertSame(type0, uninitializedObjectType0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1530, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1530, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      OperandStack operandStack2 = (OperandStack)operandStack0.clone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1530, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(1530, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertNotNull(operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack2.equals((Object)operandStack1));
      
      boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      
      DREM dREM0 = new DREM();
      assertEquals(1, dREM0.getLength());
      assertEquals("drem", dREM0.getName());
      assertEquals((short)115, dREM0.getOpcode());
      assertNotNull(dREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type '<UNINITIALIZED OBJECT OF TYPE ''>'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1458);
      assertEquals(1458, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1458, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1458, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1458, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      
      OperandStack operandStack1 = new OperandStack(1458);
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(0, operandStack1.size());
      assertEquals(1458, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertNotNull(operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      Frame frame1 = frame0.getClone();
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotNull(frame1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      
      instConstraintVisitor0.setFrame(frame1);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      
      LocalVariables localVariables1 = new LocalVariables(1458);
      assertEquals(1458, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(83);
      assertEquals("invokevirtual", iNVOKEVIRTUAL0.getName());
      assertEquals(83, iNVOKEVIRTUAL0.getIndex());
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertNotNull(iNVOKEVIRTUAL0);
      
      Frame frame2 = new Frame(localVariables1, operandStack1);
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(0, operandStack1.size());
      assertEquals(1458, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertEquals(1458, localVariables1.maxLocals());
      assertNotNull(frame2);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(frame2.equals((Object)frame0));
      assertFalse(frame2.equals((Object)frame1));
      
      LocalVariables localVariables2 = new LocalVariables(46);
      assertEquals(46, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Frame frame3 = new Frame(22, 46);
      assertNotNull(frame3);
      assertFalse(frame3.equals((Object)frame0));
      assertFalse(frame3.equals((Object)frame1));
      assertFalse(frame3.equals((Object)frame2));
      
      I2L i2L0 = new I2L();
      assertEquals(1, i2L0.getLength());
      assertEquals("i2l", i2L0.getName());
      assertEquals((short)133, i2L0.getOpcode());
      assertNotNull(i2L0);
      
      LDIV lDIV0 = new LDIV();
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals("ldiv", lDIV0.getName());
      assertNotNull(lDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      POP2 pOP2_0 = new POP2();
      assertEquals("pop2", pOP2_0.getName());
      assertEquals((short)88, pOP2_0.getOpcode());
      assertEquals(1, pOP2_0.getLength());
      assertNotNull(pOP2_0);
      
      LocalVariables localVariables0 = new LocalVariables(1404);
      assertEquals(1404, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("nk@NU{JL?_@V");
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(122, objectType0);
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(122, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      Object object0 = frame0.clone();
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertNotNull(object0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(object0.equals((Object)frame0));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, object0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      I2D i2D0 = new I2D();
      assertEquals((short)135, i2D0.getOpcode());
      assertEquals(1, i2D0.getLength());
      assertEquals("i2d", i2D0.getName());
      assertNotNull(i2D0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type 'nk@NU{JL?_@V'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(uninitializedObjectType0);
      
      operandStack1.clear();
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(1411, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      operandStack1.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      String string0 = operandStack1.toString();
      assertEquals("Slots used: 1 MaxStack: 1411.\n (Size: 1)\n", string0);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2}, byteArray0);
      
      ICONST iCONST0 = new ICONST((byte)2);
      assertEquals((short)5, iCONST0.getOpcode());
      assertEquals("iconst_2", iCONST0.getName());
      assertEquals(1, iCONST0.getLength());
      assertNotNull(iCONST0);
      
      Frame frame1 = new Frame((byte)2, 1411);
      assertNotNull(frame1);
      assertFalse(frame1.equals((Object)frame0));
      
      CHECKCAST cHECKCAST0 = new CHECKCAST((byte)2);
      assertEquals(2, cHECKCAST0.getIndex());
      assertEquals(3, cHECKCAST0.getLength());
      assertEquals((short)192, cHECKCAST0.getOpcode());
      assertEquals("checkcast", cHECKCAST0.getName());
      assertNotNull(cHECKCAST0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1379);
      assertEquals(1379, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1379, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1379, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1379, localVariables0.maxLocals());
      assertEquals(1379, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1379, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1379, operandStack0.maxStack());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1379, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1379, operandStack0.maxStack());
      assertNotNull(frame1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertEquals(1379, localVariables0.maxLocals());
      assertEquals(1379, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1379, operandStack0.maxStack());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1379, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1379, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(frame0.equals((Object)frame1));
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(1379, operandStack0.maxStack());
      
      LAND lAND0 = new LAND();
      assertEquals(1, lAND0.getLength());
      assertEquals((short)127, lAND0.getOpcode());
      assertEquals("land", lAND0.getName());
      assertNotNull(lAND0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1404);
      assertEquals(1404, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1404, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1404, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      BasicType basicType0 = Type.LONG;
      assertEquals((byte)11, basicType0.getType());
      assertEquals("J", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertNotNull(basicType0);
      
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.CHAR);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, nEWARRAY0.getLength());
      assertEquals("newarray", nEWARRAY0.getName());
      assertEquals((short)188, nEWARRAY0.getOpcode());
      assertEquals((byte)5, nEWARRAY0.getTypecode());
      assertNotNull(nEWARRAY0);
      
      LUSHR lUSHR0 = new LUSHR();
      assertEquals("lushr", lUSHR0.getName());
      assertEquals(1, lUSHR0.getLength());
      assertEquals((short)125, lUSHR0.getOpcode());
      assertNotNull(lUSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1425);
      assertEquals(1425, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1425);
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1425, localVariables0.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertNotNull(frame0);
      
      Class<FDIV> class0 = FDIV.class;
      ObjectType objectType1 = (ObjectType)Type.getType(class0);
      assertEquals("org.apache.bcel.generic.FDIV", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("Lorg/apache/bcel/generic/FDIV;", objectType1.getSignature());
      assertNotNull(objectType1);
      assertNotSame(objectType1, objectType0);
      assertFalse(objectType1.equals((Object)objectType0));
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(objectType0, objectType1);
      assertFalse(objectType0.equals((Object)objectType1));
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1425, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(objectType0, objectType1);
      assertFalse(objectType0.equals((Object)objectType1));
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1425.\n (Size: 1)\n (Size: 1)\n", string0);
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      
      int int0 = 1418;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD((GETFIELD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Frame frame0 = new Frame(1411, (-355));
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      instConstraintVisitor0.setFrame(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      
      LLOAD lLOAD0 = new LLOAD(1411);
      assertEquals(4, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertEquals(1411, lLOAD0.getIndex());
      assertNotNull(lLOAD0);
      
      // Undeclared exception!
      try { 
        lLOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LLOAD constraint violated: Cannot produce 2 stack slots: only -355 free stack slot(s) left.
         // Stack:
         // Slots used: 0 MaxStack: -355.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1425);
      assertEquals(1425, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1425);
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1425, localVariables0.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1425, operandStack0.maxStack());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1425, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1425.\n (Size: 1)\n (Size: 1)\n", string0);
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      
      BasicType basicType0 = Type.LONG;
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)11, basicType0.getType());
      assertEquals("J", basicType0.getSignature());
      assertNotNull(basicType0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1218, (-2885));
      assertEquals((-2885), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(1218, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(1218, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      LLOAD lLOAD0 = new LLOAD(1418);
      assertEquals(1418, lLOAD0.getIndex());
      assertEquals(4, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertNotNull(lLOAD0);
      
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals(1418, lLOAD0.getIndex());
      assertEquals(4, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      
      I2C i2C0 = new I2C();
      assertEquals(1, i2C0.getLength());
      assertEquals((short)146, i2C0.getOpcode());
      assertEquals("i2c", i2C0.getName());
      assertNotNull(i2C0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      boolean boolean0 = operandStack0.equals(objectType0);
      assertFalse(boolean0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      
      LCMP lCMP0 = new LCMP();
      assertEquals(1, lCMP0.getLength());
      assertEquals("lcmp", lCMP0.getName());
      assertEquals((short)148, lCMP0.getOpcode());
      assertNotNull(lCMP0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1411, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      operandStack1.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(1411, operandStack1.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      Frame.setThis((UninitializedObjectType) null);
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ICONST iCONST0 = new ICONST((byte)2);
      assertEquals("iconst_2", iCONST0.getName());
      assertEquals((short)5, iCONST0.getOpcode());
      assertEquals(1, iCONST0.getLength());
      assertNotNull(iCONST0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY((byte)0);
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertEquals(0, aNEWARRAY0.getIndex());
      assertEquals(3, aNEWARRAY0.getLength());
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertNotNull(aNEWARRAY0);
      
      ISUB iSUB0 = new ISUB();
      assertEquals("isub", iSUB0.getName());
      assertEquals(1, iSUB0.getLength());
      assertEquals((short)100, iSUB0.getOpcode());
      assertNotNull(iSUB0);
      
      LNEG lNEG0 = new LNEG();
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      assertEquals((short)117, lNEG0.getOpcode());
      assertNotNull(lNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ICONST iCONST0 = new ICONST((-1));
      assertEquals(1, iCONST0.getLength());
      assertEquals((short)2, iCONST0.getOpcode());
      assertEquals("iconst_m1", iCONST0.getName());
      assertNotNull(iCONST0);
      
      instConstraintVisitor0.visitICONST(iCONST0);
      assertEquals(1, iCONST0.getLength());
      assertEquals((short)2, iCONST0.getOpcode());
      assertEquals("iconst_m1", iCONST0.getName());
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-125);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      assertEquals(12, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(12, instructionList0.getLength());
      assertNotNull(instructionList0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1425);
      assertEquals(1425, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1425);
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1425, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1425.\n (Size: 1)\n (Size: 1)\n", string0);
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1425, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      
      Boolean boolean0 = new Boolean("Slots used: 2 MaxStack: 1425.\n (Size: 1)\n (Size: 1)\n");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      F2L f2L0 = new F2L();
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertEquals((short)140, f2L0.getOpcode());
      assertNotNull(f2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT((IF_ICMPGT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1365);
      assertEquals(1365, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("<%W");
      assertEquals("L<%W;", objectType0.getSignature());
      assertEquals("<%W", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1365, objectType0);
      assertEquals("L<%W;", objectType0.getSignature());
      assertEquals("<%W", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1365, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L<%W;", objectType0.getSignature());
      assertEquals("<%W", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1365, operandStack0.maxStack());
      assertNotNull(frame0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L<%W;", objectType0.getSignature());
      assertEquals("<%W", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1365, operandStack0.maxStack());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1365, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L<%W;", objectType0.getSignature());
      assertEquals("<%W", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1365, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertTrue(frame0.equals((Object)frame1));
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertNotNull(dUP_X1_0);
      
      FASTORE fASTORE0 = new FASTORE();
      assertEquals((short)81, fASTORE0.getOpcode());
      assertEquals("fastore", fASTORE0.getName());
      assertEquals(1, fASTORE0.getLength());
      assertNotNull(fASTORE0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      D2F d2F0 = new D2F();
      assertEquals(1, d2F0.getLength());
      assertEquals("d2f", d2F0.getName());
      assertEquals((short)144, d2F0.getOpcode());
      assertNotNull(d2F0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<%W;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411);
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      
      Object object0 = frame0.clone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(object0);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertTrue(object0.equals((Object)frame0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object1 = frame0.clone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(object1);
      assertNotSame(frame0, object1);
      assertNotSame(frame0, object0);
      assertNotSame(object1, frame0);
      assertNotSame(object1, object0);
      assertTrue(object1.equals((Object)frame0));
      assertTrue(object1.equals((Object)object0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, object1);
      assertNotSame(frame0, object0);
      assertFalse(frame0.equals((Object)object1));
      assertFalse(frame0.equals((Object)object0));
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ARETURN aRETURN0 = new ARETURN();
      assertEquals("areturn", aRETURN0.getName());
      assertEquals(1, aRETURN0.getLength());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertNotNull(aRETURN0);
      
      ILOAD iLOAD0 = new ILOAD(1411);
      assertEquals(1411, iLOAD0.getIndex());
      assertEquals("iload", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((short)21, iLOAD0.getOpcode());
      assertEquals(4, iLOAD0.getLength());
      assertNotNull(iLOAD0);
      
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals(1411, iLOAD0.getIndex());
      assertEquals("iload", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals((short)21, iLOAD0.getOpcode());
      assertEquals(4, iLOAD0.getLength());
      
      LREM lREM0 = new LREM();
      assertEquals("lrem", lREM0.getName());
      assertEquals((short)113, lREM0.getOpcode());
      assertEquals(1, lREM0.getLength());
      assertNotNull(lREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      operandStack1.clear();
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertEquals(0, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      operandStack1.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame.setThis((UninitializedObjectType) null);
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      String string0 = operandStack1.toString();
      assertEquals("Slots used: 1 MaxStack: 1411.\n (Size: 1)\n", string0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      DASTORE dASTORE0 = new DASTORE();
      assertEquals((short)82, dASTORE0.getOpcode());
      assertEquals("dastore", dASTORE0.getName());
      assertEquals(1, dASTORE0.getLength());
      assertNotNull(dASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/<illegal type>");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("el7Ye/7c(gEU]");
      assertEquals(1, objectType0.getSize());
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1411.\nel7Ye.7c(gEU] (Size: 1)\nel7Ye.7c(gEU] (Size: 1)\n", string0);
      assertEquals(1, objectType0.getSize());
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(string0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      
      LSHL lSHL0 = new LSHL();
      assertEquals(1, lSHL0.getLength());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertNotNull(lSHL0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = lSHL0.consumeStack(constantPoolGen0);
      assertEquals(3, int0);
      assertEquals(1, lSHL0.getLength());
      assertEquals("lshl", lSHL0.getName());
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals(1, constantPoolGen0.getSize());
      
      FADD fADD0 = new FADD();
      assertEquals(1, fADD0.getLength());
      assertEquals((short)98, fADD0.getOpcode());
      assertEquals("fadd", fADD0.getName());
      assertNotNull(fADD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'el7Ye.7c(gEU]'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1425);
      assertEquals(1425, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1425);
      assertTrue(operandStack0.isEmpty());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1425, localVariables0.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1425, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1425.\n (Size: 1)\n (Size: 1)\n", string0);
      assertEquals(2, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(2, operandStack0.size());
      assertEquals(1425, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      ALOAD aLOAD0 = new ALOAD(1997);
      assertEquals((short)25, aLOAD0.getOpcode());
      assertEquals("aload", aLOAD0.getName());
      assertEquals(1997, aLOAD0.getIndex());
      assertEquals(4, aLOAD0.getLength());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertNotNull(aLOAD0);
      
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals((short)25, aLOAD0.getOpcode());
      assertEquals("aload", aLOAD0.getName());
      assertEquals(1997, aLOAD0.getIndex());
      assertEquals(4, aLOAD0.getLength());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      
      LCMP lCMP0 = new LCMP();
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      assertNotNull(lCMP0);
      
      I2S i2S0 = new I2S();
      assertEquals(1, i2S0.getLength());
      assertEquals("i2s", i2S0.getName());
      assertEquals((short)147, i2S0.getOpcode());
      assertNotNull(i2S0);
      
      String string1 = i2S0.toString(false);
      assertEquals("i2s", string1);
      assertEquals(1, i2S0.getLength());
      assertEquals("i2s", i2S0.getName());
      assertEquals((short)147, i2S0.getOpcode());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(frame0);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE((InstructionHandle) null);
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      assertNotNull(iF_ACMPNE0);
      
      instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
      assertEquals("if_acmpne", iF_ACMPNE0.getName());
      assertEquals(0, iF_ACMPNE0.getIndex());
      assertEquals(3, iF_ACMPNE0.getLength());
      assertEquals((short)166, iF_ACMPNE0.getOpcode());
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertNotNull(dUP_X1_0);
      
      FNEG fNEG0 = new FNEG();
      assertEquals("fneg", fNEG0.getName());
      assertEquals(1, fNEG0.getLength());
      assertEquals((short)118, fNEG0.getOpcode());
      assertNotNull(fNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1365);
      assertEquals(1365, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1365, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1365, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1365, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1365, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1365, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(frame0.equals((Object)frame1));
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      
      LSHR lSHR0 = new LSHR();
      assertEquals("lshr", lSHR0.getName());
      assertEquals(1, lSHR0.getLength());
      assertEquals((short)123, lSHR0.getOpcode());
      assertNotNull(lSHR0);
      
      LSHR lSHR1 = new LSHR();
      assertEquals((short)123, lSHR1.getOpcode());
      assertEquals(1, lSHR1.getLength());
      assertEquals("lshr", lSHR1.getName());
      assertNotNull(lSHR1);
      assertTrue(lSHR1.equals((Object)lSHR0));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("{");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L{;", objectType0.getSignature());
      assertEquals("{", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      OperandStack operandStack0 = new OperandStack(1411);
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L{;", objectType0.getSignature());
      assertEquals("{", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (double) 1411);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen1.getSize());
      assertNotNull(constantPoolGen1);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      
      PUSH pUSH1 = new PUSH(constantPoolGen1, 0.0);
      assertEquals(1, constantPoolGen1.getSize());
      assertNotNull(pUSH1);
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertFalse(pUSH1.equals((Object)pUSH0));
      
      String string1 = frame0.toString();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(string1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(string1.equals((Object)string0));
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      INEG iNEG0 = new INEG();
      assertEquals((short)116, iNEG0.getOpcode());
      assertEquals("ineg", iNEG0.getName());
      assertEquals(1, iNEG0.getLength());
      assertNotNull(iNEG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type '{'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/<illegal type>");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("el7Ye/7c(gEU]");
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1411.\nel7Ye.7c(gEU] (Size: 1)\nel7Ye.7c(gEU] (Size: 1)\n", string0);
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(string0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("el7Ye.7c(gEU]", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lel7Ye/7c(gEU];", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      
      LSHL lSHL0 = new LSHL();
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals("lshl", lSHL0.getName());
      assertEquals(1, lSHL0.getLength());
      assertNotNull(lSHL0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      int int0 = lSHL0.consumeStack(constantPoolGen0);
      assertEquals(3, int0);
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals("lshl", lSHL0.getName());
      assertEquals(1, lSHL0.getLength());
      assertEquals(1, constantPoolGen0.getSize());
      
      POP2 pOP2_0 = new POP2();
      assertEquals("pop2", pOP2_0.getName());
      assertEquals((short)88, pOP2_0.getOpcode());
      assertEquals(1, pOP2_0.getLength());
      assertNotNull(pOP2_0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is 'el7Ye.7c(gEU]' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1367);
      assertEquals(1367, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("w");
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1367, objectType0);
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1367, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1367, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertEquals(1367, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1367, localVariables0.maxLocals());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1367, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertNotNull(uninitializedObjectType0);
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1367, localVariables0.maxLocals());
      assertEquals(1367, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      LocalVariables localVariables2 = new LocalVariables(1367);
      assertEquals(1367, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      LocalVariables localVariables3 = (LocalVariables)localVariables2.clone();
      assertEquals(1367, localVariables2.maxLocals());
      assertEquals(1367, localVariables3.maxLocals());
      assertNotNull(localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      
      boolean boolean0 = uninitializedObjectType0.isAssignmentCompatibleWith(objectType0);
      assertFalse(boolean0);
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      
      LocalVariables localVariables4 = localVariables1.getClone();
      assertEquals(1367, localVariables0.maxLocals());
      assertEquals(1367, localVariables1.maxLocals());
      assertEquals(1367, localVariables4.maxLocals());
      assertNotNull(localVariables4);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables2));
      
      operandStack1.push(uninitializedObjectType0);
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1367, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2, operandStack1.size());
      assertEquals(1367, operandStack1.maxStack());
      assertEquals(2, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      OperandStack operandStack2 = operandStack0.getClone();
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1367, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(1367, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertFalse(operandStack2.isEmpty());
      assertNotNull(operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack2.equals((Object)operandStack1));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1367, localVariables0.maxLocals());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1367, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      
      DSTORE dSTORE0 = new DSTORE(1367);
      assertEquals((short)57, dSTORE0.getOpcode());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals(4, dSTORE0.getLength());
      assertEquals(1367, dSTORE0.getIndex());
      assertEquals("dstore", dSTORE0.getName());
      assertNotNull(dSTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'w'; Instruction type: 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(216);
      assertEquals(216, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = new LocalVariables(2657);
      assertEquals(2657, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertFalse(localVariables1.equals((Object)localVariables0));
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertEquals(2657, localVariables1.maxLocals());
      assertEquals(2657, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables0));
      
      instConstraintVisitor0.setFrame((Frame) null);
      Frame frame0 = new Frame(2389, 2657);
      assertNotNull(frame0);
      
      instConstraintVisitor0.setFrame(frame0);
      BasicType basicType0 = Type.LONG;
      assertEquals("J", basicType0.getSignature());
      assertEquals((byte)11, basicType0.getType());
      assertEquals(2, basicType0.getSize());
      assertNotNull(basicType0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(345, 345);
      assertEquals(345, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(345, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(345, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      
      LLOAD lLOAD0 = new LLOAD(216);
      assertEquals(2, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertEquals(216, lLOAD0.getIndex());
      assertNotNull(lLOAD0);
      
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      assertEquals(2, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertEquals(216, lLOAD0.getIndex());
      
      DLOAD dLOAD0 = new DLOAD(216);
      assertEquals((short)24, dLOAD0.getOpcode());
      assertEquals((short)24, dLOAD0.getCanonicalTag());
      assertEquals("dload", dLOAD0.getName());
      assertEquals(2, dLOAD0.getLength());
      assertEquals(216, dLOAD0.getIndex());
      assertNotNull(dLOAD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(dLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DLOAD constraint violated: Read-Access on local variable 216 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1404);
      assertEquals(1404, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2207, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2207, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2207, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2207, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2207, operandStack0.maxStack());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      String string0 = operandStack1.toString();
      assertEquals("Slots used: 1 MaxStack: 2207.\n (Size: 1)\n", string0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2207, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2207, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      String string1 = frame0.toString();
      assertEquals("Local Variables:\nnullOperandStack:\nSlots used: 1 MaxStack: 2207.\n (Size: 1)\n", string1);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2207, operandStack0.maxStack());
      assertNotNull(string1);
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertFalse(string1.equals((Object)string0));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2207, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      
      LOR lOR0 = new LOR();
      assertEquals("lor", lOR0.getName());
      assertEquals(1, lOR0.getLength());
      assertEquals((short)129, lOR0.getOpcode());
      assertNotNull(lOR0);
      
      GETSTATIC gETSTATIC0 = new GETSTATIC(1979);
      assertEquals("getstatic", gETSTATIC0.getName());
      assertEquals(1979, gETSTATIC0.getIndex());
      assertEquals((short)178, gETSTATIC0.getOpcode());
      assertEquals(3, gETSTATIC0.getLength());
      assertNotNull(gETSTATIC0);
      
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals("getstatic", gETSTATIC0.getName());
      assertEquals(1979, gETSTATIC0.getIndex());
      assertEquals((short)178, gETSTATIC0.getOpcode());
      assertEquals(3, gETSTATIC0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1404);
      assertEquals(1404, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2207, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 2207.\n (Size: 1)\n", string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(string0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame1 = frame0.getClone();
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2207, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      
      DRETURN dRETURN0 = new DRETURN();
      assertEquals("dreturn", dRETURN0.getName());
      assertEquals(1, dRETURN0.getLength());
      assertEquals((short)175, dRETURN0.getOpcode());
      assertNotNull(dRETURN0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1440);
      assertEquals(1440, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("e_+ba4ZX+wu'");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Le_+ba4ZX+wu';", objectType0.getSignature());
      assertEquals("e_+ba4ZX+wu'", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1440);
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1440, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1440, localVariables0.maxLocals());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1440, operandStack0.maxStack());
      assertNotNull(frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1440, localVariables0.maxLocals());
      assertEquals(1440, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Le_+ba4ZX+wu';", objectType0.getSignature());
      assertEquals("e_+ba4ZX+wu'", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1440, operandStack0.maxStack());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1440, localVariables0.maxLocals());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1440, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables1);
      
      FALOAD fALOAD0 = new FALOAD();
      assertEquals("faload", fALOAD0.getName());
      assertEquals((short)48, fALOAD0.getOpcode());
      assertEquals(1, fALOAD0.getLength());
      assertNotNull(fALOAD0);
      
      I2L i2L0 = new I2L();
      assertEquals(1, i2L0.getLength());
      assertEquals("i2l", i2L0.getName());
      assertEquals((short)133, i2L0.getOpcode());
      assertNotNull(i2L0);
      
      OperandStack operandStack1 = new OperandStack(1440);
      assertEquals(0, operandStack1.slotsUsed());
      assertTrue(operandStack1.isEmpty());
      assertEquals(1440, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertNotNull(operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      String string0 = operandStack1.toString();
      assertEquals("Slots used: 0 MaxStack: 1440.\n", string0);
      assertEquals(0, operandStack1.slotsUsed());
      assertTrue(operandStack1.isEmpty());
      assertEquals(1440, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertNotNull(string0);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      IMUL iMUL0 = new IMUL();
      assertEquals("imul", iMUL0.getName());
      assertEquals(1, iMUL0.getLength());
      assertEquals((short)104, iMUL0.getOpcode());
      assertNotNull(iMUL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type 'e_+ba4ZX+wu''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      POP2 pOP2_0 = new POP2();
      assertEquals("pop2", pOP2_0.getName());
      assertEquals((short)88, pOP2_0.getOpcode());
      assertEquals(1, pOP2_0.getLength());
      assertNotNull(pOP2_0);
      
      LocalVariables localVariables0 = new LocalVariables(1404);
      assertEquals(1404, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("nk@NU{JL?_@V");
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(122, objectType0);
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(122, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      Object object0 = frame0.clone();
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(object0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(object0.equals((Object)frame0));
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'nk@NU{JL?_@V'>", uninitializedObjectType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("Lnk@NU{JL?_@V;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("nk@NU{JL?_@V", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(122, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, object0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      I2L i2L0 = new I2L();
      assertEquals("i2l", i2L0.getName());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals(1, i2L0.getLength());
      assertNotNull(i2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'nk@NU{JL?_@V'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1365);
      assertEquals(1365, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("rHB6[=uRCuR2W0d.");
      assertEquals(1, objectType0.getSize());
      assertEquals("LrHB6[=uRCuR2W0d/;", objectType0.getSignature());
      assertEquals("rHB6[=uRCuR2W0d.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1365, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      String string0 = localVariables1.toString();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1365, localVariables1.maxLocals());
      assertNotNull(string0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      ObjectType objectType1 = ObjectType.getInstance("rHB6[=uRCuR2W0d.");
      assertEquals("LrHB6[=uRCuR2W0d/;", objectType1.getSignature());
      assertEquals("rHB6[=uRCuR2W0d.", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertNotNull(objectType1);
      assertNotSame(objectType1, objectType0);
      assertTrue(objectType1.equals((Object)objectType0));
      
      ObjectType objectType2 = ObjectType.getInstance(" <Q\"DN4LxNN#N");
      assertEquals("L <Q\"DN4LxNN#N;", objectType2.getSignature());
      assertEquals((byte)14, objectType2.getType());
      assertEquals(" <Q\"DN4LxNN#N", objectType2.getClassName());
      assertEquals(1, objectType2.getSize());
      assertNotNull(objectType2);
      assertNotSame(objectType2, objectType0);
      assertNotSame(objectType2, objectType1);
      assertFalse(objectType2.equals((Object)objectType0));
      assertFalse(objectType2.equals((Object)objectType1));
      
      localVariables0.merge(localVariables1);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1365, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      OperandStack operandStack0 = new OperandStack(1365, objectType2);
      assertEquals("L <Q\"DN4LxNN#N;", objectType2.getSignature());
      assertEquals((byte)14, objectType2.getType());
      assertEquals(" <Q\"DN4LxNN#N", objectType2.getClassName());
      assertEquals(1, objectType2.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      assertFalse(objectType2.equals((Object)objectType0));
      assertFalse(objectType2.equals((Object)objectType1));
      
      ObjectType objectType3 = new ObjectType(" <Q\"DN4LxNN#N");
      assertEquals(1, objectType3.getSize());
      assertEquals((byte)14, objectType3.getType());
      assertEquals(" <Q\"DN4LxNN#N", objectType3.getClassName());
      assertEquals("L <Q\"DN4LxNN#N;", objectType3.getSignature());
      assertNotNull(objectType3);
      assertFalse(objectType3.equals((Object)objectType0));
      assertFalse(objectType3.equals((Object)objectType1));
      assertTrue(objectType3.equals((Object)objectType2));
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1365, localVariables1.maxLocals());
      assertEquals("L <Q\"DN4LxNN#N;", objectType2.getSignature());
      assertEquals((byte)14, objectType2.getType());
      assertEquals(" <Q\"DN4LxNN#N", objectType2.getClassName());
      assertEquals(1, objectType2.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(objectType2.equals((Object)objectType0));
      assertTrue(objectType2.equals((Object)objectType3));
      assertFalse(objectType2.equals((Object)objectType1));
      
      Boolean boolean0 = new Boolean("rHB6[=uRCuR2W0d.");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1365, localVariables1.maxLocals());
      assertEquals(1365, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      operandStack0.push(objectType3);
      assertEquals("L <Q\"DN4LxNN#N;", objectType2.getSignature());
      assertEquals((byte)14, objectType2.getType());
      assertEquals(" <Q\"DN4LxNN#N", objectType2.getClassName());
      assertEquals(1, objectType2.getSize());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1365, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1, objectType3.getSize());
      assertEquals((byte)14, objectType3.getType());
      assertEquals(" <Q\"DN4LxNN#N", objectType3.getClassName());
      assertEquals("L <Q\"DN4LxNN#N;", objectType3.getSignature());
      assertNotSame(objectType2, objectType0);
      assertNotSame(objectType2, objectType3);
      assertNotSame(objectType2, objectType1);
      assertNotSame(objectType3, objectType0);
      assertNotSame(objectType3, objectType1);
      assertNotSame(objectType3, objectType2);
      assertFalse(objectType2.equals((Object)objectType0));
      assertTrue(objectType2.equals((Object)objectType3));
      assertFalse(objectType2.equals((Object)objectType1));
      assertFalse(objectType3.equals((Object)objectType0));
      assertFalse(objectType3.equals((Object)objectType1));
      assertTrue(objectType3.equals((Object)objectType2));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1365, localVariables1.maxLocals());
      assertEquals("L <Q\"DN4LxNN#N;", objectType2.getSignature());
      assertEquals((byte)14, objectType2.getType());
      assertEquals(" <Q\"DN4LxNN#N", objectType2.getClassName());
      assertEquals(1, objectType2.getSize());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1365, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(objectType2, objectType0);
      assertNotSame(objectType2, objectType3);
      assertNotSame(objectType2, objectType1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertFalse(objectType2.equals((Object)objectType0));
      assertTrue(objectType2.equals((Object)objectType3));
      assertFalse(objectType2.equals((Object)objectType1));
      
      LSHR lSHR0 = new LSHR();
      assertEquals("lshr", lSHR0.getName());
      assertEquals((short)123, lSHR0.getOpcode());
      assertEquals(1, lSHR0.getLength());
      assertNotNull(lSHR0);
      
      SALOAD sALOAD0 = new SALOAD();
      assertEquals(1, sALOAD0.getLength());
      assertEquals((short)53, sALOAD0.getOpcode());
      assertEquals("saload", sALOAD0.getName());
      assertNotNull(sALOAD0);
      
      IXOR iXOR0 = new IXOR();
      assertEquals(1, iXOR0.getLength());
      assertEquals("ixor", iXOR0.getName());
      assertEquals((short)130, iXOR0.getOpcode());
      assertNotNull(iXOR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L <Q\"DN4LxNN#N;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1365);
      assertEquals(1365, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1365, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      assertFalse(frame0.equals((Object)frame1));
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      assertNotNull(dUP_X1_0);
      
      instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals(1, dUP_X1_0.getLength());
      
      Frame frame2 = new Frame(localVariables0, operandStack0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame2);
      assertFalse(frame2.equals((Object)frame1));
      
      IAND iAND0 = new IAND();
      assertEquals((short)126, iAND0.getOpcode());
      assertEquals("iand", iAND0.getName());
      assertEquals(1, iAND0.getLength());
      assertNotNull(iAND0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1458);
      assertEquals(1458, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1458, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertNotNull(frame0);
      
      OperandStack operandStack1 = new OperandStack(1458, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1458, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 1458.\n (Size: 1)\n (Size: 1)\n", string0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      Frame frame1 = new Frame(localVariables0, operandStack1);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1458, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(frame1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame1.equals((Object)frame0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(frame0.equals((Object)frame1));
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals(1458, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      LSHR lSHR0 = new LSHR();
      assertEquals(1, lSHR0.getLength());
      assertEquals("lshr", lSHR0.getName());
      assertEquals((short)123, lSHR0.getOpcode());
      assertNotNull(lSHR0);
      
      LXOR lXOR0 = new LXOR();
      assertEquals("lxor", lXOR0.getName());
      assertEquals(1, lXOR0.getLength());
      assertEquals((short)131, lXOR0.getOpcode());
      assertNotNull(lXOR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1411, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      OperandStack operandStack2 = (OperandStack)operandStack0.clone();
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1411, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertEquals(1, operandStack2.slotsUsed());
      assertFalse(operandStack2.isEmpty());
      assertNotNull(operandStack2);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      operandStack1.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1411, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.size());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack2);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertFalse(operandStack1.equals((Object)operandStack2));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      OperandStack operandStack3 = operandStack0.getClone();
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack3.isEmpty());
      assertEquals(1, operandStack3.size());
      assertEquals(1, operandStack3.slotsUsed());
      assertEquals(1411, operandStack3.maxStack());
      assertNotNull(operandStack3);
      assertNotSame(operandStack0, operandStack3);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack3, operandStack0);
      assertNotSame(operandStack3, operandStack2);
      assertNotSame(operandStack3, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack3.equals((Object)operandStack0));
      assertFalse(operandStack3.equals((Object)operandStack1));
      assertTrue(operandStack3.equals((Object)operandStack2));
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack3);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack3));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack0.equals((Object)operandStack2));
      
      instConstraintVisitor0.visitMONITORENTER((MONITORENTER) null);
      SASTORE sASTORE0 = new SASTORE();
      assertEquals("sastore", sASTORE0.getName());
      assertEquals(1, sASTORE0.getLength());
      assertEquals((short)86, sASTORE0.getOpcode());
      assertNotNull(sASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1404);
      assertEquals(1404, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1404, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1404, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      OperandStack operandStack2 = operandStack1.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1404, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(1, operandStack2.size());
      assertEquals(1404, operandStack2.maxStack());
      assertFalse(operandStack2.isEmpty());
      assertNotNull(operandStack2);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(operandStack1, operandStack2);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      String string0 = operandStack1.toString();
      assertEquals("Slots used: 1 MaxStack: 1404.\n (Size: 1)\n", string0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1404, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(operandStack1, operandStack2);
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack2));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      Frame.setThis((UninitializedObjectType) null);
      Frame frame1 = frame0.getClone();
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertEquals(1404, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1404, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      
      D2I d2I0 = new D2I();
      assertEquals((short)142, d2I0.getOpcode());
      assertEquals(1, d2I0.getLength());
      assertEquals("d2i", d2I0.getName());
      assertNotNull(d2I0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1411, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      String string0 = frame0.toString();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      String string1 = frame0.toString();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotNull(string1);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(string1.equals((Object)string0));
      
      Frame frame1 = frame0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotNull(frame1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame1.equals((Object)frame0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      
      Frame frame2 = new Frame(3013, (byte)124);
      assertNotNull(frame2);
      assertFalse(frame2.equals((Object)frame0));
      assertFalse(frame2.equals((Object)frame1));
      
      I2B i2B0 = new I2B();
      assertEquals("i2b", i2B0.getName());
      assertEquals(1, i2B0.getLength());
      assertEquals((short)145, i2B0.getOpcode());
      assertNotNull(i2B0);
      
      I2B i2B1 = new I2B();
      assertEquals((short)145, i2B1.getOpcode());
      assertEquals("i2b", i2B1.getName());
      assertEquals(1, i2B1.getLength());
      assertNotNull(i2B1);
      assertTrue(i2B1.equals((Object)i2B0));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      ObjectType objectType1 = new ObjectType("&.}IEtX?Q-k7W ;*5Q");
      assertEquals(1, objectType1.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType1.getClassName());
      assertNotNull(objectType1);
      assertFalse(objectType1.equals((Object)objectType0));
      
      OperandStack operandStack0 = new OperandStack(1054, objectType1);
      assertEquals(1, objectType1.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType1.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1054, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      assertFalse(objectType1.equals((Object)objectType0));
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals(1, objectType1.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType1.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1054, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1054, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertNotSame(objectType1, objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      assertEquals(1, objectType1.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType1.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1054, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, objectType1.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType1.getSignature());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType1.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(1054, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(objectType1, objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      FALOAD fALOAD0 = new FALOAD();
      assertEquals("faload", fALOAD0.getName());
      assertEquals((short)48, fALOAD0.getOpcode());
      assertEquals(1, fALOAD0.getLength());
      assertNotNull(fALOAD0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pkUjxl1J+GFhw}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FALOAD fALOAD1 = new FALOAD();
      assertEquals(1, fALOAD1.getLength());
      assertEquals("faload", fALOAD1.getName());
      assertEquals((short)48, fALOAD1.getOpcode());
      assertNotNull(fALOAD1);
      assertTrue(fALOAD1.equals((Object)fALOAD0));
      
      I2L i2L0 = new I2L();
      assertEquals(1, i2L0.getLength());
      assertEquals("i2l", i2L0.getName());
      assertEquals((short)133, i2L0.getOpcode());
      assertNotNull(i2L0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      ASTORE aSTORE0 = new ASTORE(1054);
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(1054, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(4, aSTORE0.getLength());
      assertEquals("astore", aSTORE0.getName());
      assertNotNull(aSTORE0);
      
      ASTORE aSTORE1 = (ASTORE)aSTORE0.copy();
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(1054, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(4, aSTORE0.getLength());
      assertEquals("astore", aSTORE0.getName());
      assertEquals(4, aSTORE1.getLength());
      assertEquals((short)58, aSTORE1.getCanonicalTag());
      assertEquals(1054, aSTORE1.getIndex());
      assertEquals("astore", aSTORE1.getName());
      assertEquals((short)58, aSTORE1.getOpcode());
      assertNotNull(aSTORE1);
      assertNotSame(aSTORE0, aSTORE1);
      assertNotSame(aSTORE1, aSTORE0);
      assertTrue(aSTORE1.equals((Object)aSTORE0));
      
      instConstraintVisitor0.visitASTORE(aSTORE0);
      assertEquals((short)58, aSTORE0.getOpcode());
      assertEquals(1054, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(4, aSTORE0.getLength());
      assertEquals("astore", aSTORE0.getName());
      assertNotSame(aSTORE0, aSTORE1);
      assertTrue(aSTORE0.equals((Object)aSTORE1));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertNotNull(uninitializedObjectType0);
      
      operandStack1.clear();
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(0, operandStack1.slotsUsed());
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1876, 1876);
      assertEquals(1876, constantFieldref0.getClassIndex());
      assertEquals(1876, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(3011, 1876);
      assertEquals(3011, constantFieldref1.getClassIndex());
      assertEquals(1876, constantFieldref1.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertNotNull(constantFieldref1);
      assertFalse(constantFieldref1.equals((Object)constantFieldref0));
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3507, 3507);
      assertEquals(3507, constantMethodHandle0.getReferenceIndex());
      assertEquals(3507, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = (ConstantMethodHandle)constantMethodHandle0.clone();
      assertEquals(3507, constantMethodHandle0.getReferenceIndex());
      assertEquals(3507, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(3507, constantMethodHandle1.getReferenceIndex());
      assertEquals(3507, constantMethodHandle1.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertNotNull(constantMethodHandle1);
      assertNotSame(constantMethodHandle0, constantMethodHandle1);
      assertNotSame(constantMethodHandle1, constantMethodHandle0);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      
      ConstantInteger constantInteger0 = new ConstantInteger(3011);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(3011, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      IREM iREM0 = new IREM();
      assertEquals("irem", iREM0.getName());
      assertEquals(1, iREM0.getLength());
      assertEquals((short)112, iREM0.getOpcode());
      assertNotNull(iREM0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ObjectType objectType0 = new ObjectType("&.}IEtX?Q-k7W ;*5Q");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType0.getSignature());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1054, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType0.getSignature());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1054, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType0.getSignature());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1054, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1054, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame((LocalVariables) null, operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType0.getSignature());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1054, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType0.getSignature());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1054, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&.}IEtX?Q-k7W ;*5Q");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FALOAD fALOAD0 = new FALOAD();
      assertEquals("faload", fALOAD0.getName());
      assertEquals((short)48, fALOAD0.getOpcode());
      assertEquals(1, fALOAD0.getLength());
      assertNotNull(fALOAD0);
      
      I2L i2L0 = new I2L();
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals("i2l", i2L0.getName());
      assertEquals(1, i2L0.getLength());
      assertNotNull(i2L0);
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 1054.\n&.}IEtX?Q-k7W  (Size: 1)\n", string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L&/}IEtX?Q-k7W ;*5Q;", objectType0.getSignature());
      assertEquals("&.}IEtX?Q-k7W ;*5Q", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1054, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG((DCMPG) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1365);
      assertEquals(1365, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1365, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals(1365, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1365, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1365, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(frame0.equals((Object)frame1));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(1365, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      
      LSHR lSHR0 = new LSHR();
      assertEquals(1, lSHR0.getLength());
      assertEquals("lshr", lSHR0.getName());
      assertEquals((short)123, lSHR0.getOpcode());
      assertNotNull(lSHR0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE((IF_ICMPLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = new LocalVariables(46);
      assertEquals(46, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertFalse(localVariables1.equals((Object)localVariables0));
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      String string0 = Character.getName(1411);
      assertEquals("ARMENIAN SMALL LETTER PIWR", string0);
      assertNotNull(string0);
      
      OperandStack operandStack0 = new OperandStack(8);
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(0, operandStack0.size());
      assertTrue(operandStack0.isEmpty());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(frame0);
      assertFalse(localVariables0.equals((Object)localVariables1));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DADD dADD0 = new DADD();
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      assertEquals((short)99, dADD0.getOpcode());
      assertNotNull(dADD0);
      
      Type type0 = dADD0.getType((ConstantPoolGen) null);
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      assertEquals((short)99, dADD0.getOpcode());
      assertEquals((byte)7, type0.getType());
      assertEquals("D", type0.getSignature());
      assertEquals(2, type0.getSize());
      assertNotNull(type0);
      
      operandStack0.push(type0);
      assertFalse(operandStack0.isEmpty());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      assertEquals((short)99, dADD0.getOpcode());
      assertEquals((byte)7, type0.getType());
      assertEquals("D", type0.getSignature());
      assertEquals(2, type0.getSize());
      
      String string1 = operandStack0.toString();
      assertEquals("Slots used: 2 MaxStack: 8.\ndouble (Size: 2)\n", string1);
      assertFalse(operandStack0.isEmpty());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertFalse(localVariables0.equals((Object)localVariables1));
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor1);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(instConstraintVisitor0, instConstraintVisitor1);
      assertNotSame(localVariables0, localVariables1);
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor1));
      assertFalse(localVariables0.equals((Object)localVariables1));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertEquals(46, localVariables2.maxLocals());
      assertEquals(46, localVariables1.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables0));
      
      OperandStack operandStack1 = new OperandStack(46);
      assertTrue(operandStack1.isEmpty());
      assertEquals(46, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertEquals(0, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      Frame frame1 = new Frame(localVariables2, operandStack0);
      assertEquals(46, localVariables2.maxLocals());
      assertEquals(46, localVariables1.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame1);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(frame1.equals((Object)frame0));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      InstConstraintVisitor instConstraintVisitor2 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor2);
      assertFalse(instConstraintVisitor2.equals((Object)instConstraintVisitor1));
      assertFalse(instConstraintVisitor2.equals((Object)instConstraintVisitor0));
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Frame frame2 = new Frame(localVariables2, operandStack0);
      assertEquals(46, localVariables2.maxLocals());
      assertEquals(46, localVariables1.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame2);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(frame2.equals((Object)frame1));
      assertFalse(frame2.equals((Object)frame0));
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      instConstraintVisitor2.setFrame(frame2);
      assertEquals(46, localVariables2.maxLocals());
      assertEquals(46, localVariables1.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(instConstraintVisitor2, instConstraintVisitor1);
      assertNotSame(instConstraintVisitor2, instConstraintVisitor0);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertNotSame(operandStack0, operandStack1);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertFalse(instConstraintVisitor2.equals((Object)instConstraintVisitor1));
      assertFalse(instConstraintVisitor2.equals((Object)instConstraintVisitor0));
      assertTrue(frame2.equals((Object)frame1));
      assertFalse(frame2.equals((Object)frame0));
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      D2F d2F0 = new D2F();
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertNotNull(d2F0);
      
      instConstraintVisitor0.visitD2F(d2F0);
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertNotSame(instConstraintVisitor0, instConstraintVisitor1);
      assertNotSame(instConstraintVisitor0, instConstraintVisitor2);
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor1));
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor2));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = new LocalVariables(46);
      assertEquals(46, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertFalse(localVariables1.equals((Object)localVariables0));
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      String string0 = Character.getName(1411);
      assertEquals("ARMENIAN SMALL LETTER PIWR", string0);
      assertNotNull(string0);
      
      OperandStack operandStack0 = new OperandStack(8);
      assertEquals(0, operandStack0.size());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(0, operandStack0.size());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertNotNull(frame0);
      assertFalse(localVariables0.equals((Object)localVariables1));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DADD dADD0 = new DADD();
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      assertEquals((short)99, dADD0.getOpcode());
      assertNotNull(dADD0);
      
      operandStack0.push(objectType0.FLOAT);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string1 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 8.\nfloat (Size: 1)\n", string1);
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertFalse(localVariables0.equals((Object)localVariables1));
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor1);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(instConstraintVisitor0, instConstraintVisitor1);
      assertNotSame(localVariables0, localVariables1);
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor1));
      assertFalse(localVariables0.equals((Object)localVariables1));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LLOAD lLOAD0 = new LLOAD(1411);
      assertEquals((short)22, lLOAD0.getOpcode());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertEquals(4, lLOAD0.getLength());
      assertEquals(1411, lLOAD0.getIndex());
      assertNotNull(lLOAD0);
      
      LALOAD lALOAD0 = new LALOAD();
      assertEquals("laload", lALOAD0.getName());
      assertEquals(1, lALOAD0.getLength());
      assertEquals((short)47, lALOAD0.getOpcode());
      assertNotNull(lALOAD0);
      
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      assertEquals((short)1, aCONST_NULL0.getOpcode());
      assertEquals("aconst_null", aCONST_NULL0.getName());
      assertEquals(1, aCONST_NULL0.getLength());
      assertNotNull(aCONST_NULL0);
      
      DSUB dSUB0 = new DSUB();
      assertEquals(1, dSUB0.getLength());
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertNotNull(dSUB0);
      
      F2L f2L0 = new F2L();
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertEquals((short)140, f2L0.getOpcode());
      assertNotNull(f2L0);
      
      instConstraintVisitor0.visitF2L(f2L0);
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertEquals((short)140, f2L0.getOpcode());
      assertNotSame(instConstraintVisitor0, instConstraintVisitor1);
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor1));
      
      NEW nEW0 = new NEW(5681);
      assertEquals(3, nEW0.getLength());
      assertEquals(5681, nEW0.getIndex());
      assertEquals("new", nEW0.getName());
      assertEquals((short)187, nEW0.getOpcode());
      assertNotNull(nEW0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEW(nEW0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = new LocalVariables(46);
      assertEquals(46, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertFalse(localVariables1.equals((Object)localVariables0));
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      String string0 = Character.getName(1411);
      assertEquals("ARMENIAN SMALL LETTER PIWR", string0);
      assertNotNull(string0);
      
      OperandStack operandStack0 = new OperandStack(8);
      assertEquals(8, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.size());
      assertNotNull(frame0);
      assertFalse(localVariables0.equals((Object)localVariables1));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DADD dADD0 = new DADD();
      assertEquals("dadd", dADD0.getName());
      assertEquals(1, dADD0.getLength());
      assertEquals((short)99, dADD0.getOpcode());
      assertNotNull(dADD0);
      
      operandStack0.push(objectType0.FLOAT);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      String string1 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 8.\nfloat (Size: 1)\n", string1);
      assertEquals(8, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertFalse(localVariables0.equals((Object)localVariables1));
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor1);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(instConstraintVisitor0, instConstraintVisitor1);
      assertNotSame(localVariables0, localVariables1);
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor1));
      assertFalse(localVariables0.equals((Object)localVariables1));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LLOAD lLOAD0 = new LLOAD(1411);
      assertEquals(1411, lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertEquals(4, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertNotNull(lLOAD0);
      
      LALOAD lALOAD0 = new LALOAD();
      assertEquals("laload", lALOAD0.getName());
      assertEquals(1, lALOAD0.getLength());
      assertEquals((short)47, lALOAD0.getOpcode());
      assertNotNull(lALOAD0);
      
      DUP_X1 dUP_X1_0 = new DUP_X1();
      assertEquals(1, dUP_X1_0.getLength());
      assertEquals("dup_x1", dUP_X1_0.getName());
      assertEquals((short)90, dUP_X1_0.getOpcode());
      assertNotNull(dUP_X1_0);
      
      instConstraintVisitor1.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(8, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      assertFalse(localVariables0.equals((Object)localVariables1));
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      instConstraintVisitor1.visitFRETURN((FRETURN) null);
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(1);
      assertEquals(1, iNSTANCEOF0.getIndex());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertNotNull(iNSTANCEOF0);
      
      InstConstraintVisitor instConstraintVisitor2 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor2);
      assertFalse(instConstraintVisitor2.equals((Object)instConstraintVisitor1));
      assertFalse(instConstraintVisitor2.equals((Object)instConstraintVisitor0));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor2.visitLoadClass(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(1411, 1411);
      assertNotNull(frame0);
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      
      operandStack1.merge(operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalVariables localVariables3 = (LocalVariables)localVariables0.clone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables3.maxLocals());
      assertNotNull(localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      operandStack1.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(2, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      Frame frame1 = (Frame)frame0.clone();
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(frame0, frame1);
      assertTrue(frame0.equals((Object)frame1));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (long) 1411);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionListObserver instructionListObserver0 = mock(InstructionListObserver.class, new ViolatedAssumptionAnswer());
      localVariables0.set(2, (Type) null);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      FSTORE fSTORE0 = new FSTORE(2);
      assertEquals((short)69, fSTORE0.getOpcode());
      assertEquals((short)56, fSTORE0.getCanonicalTag());
      assertEquals("fstore_2", fSTORE0.getName());
      assertEquals(1, fSTORE0.getLength());
      assertEquals(2, fSTORE0.getIndex());
      assertNotNull(fSTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(fSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1398);
      assertEquals(1398, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1398, localVariables0.maxLocals());
      assertEquals(1398, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      ObjectType objectType0 = new ObjectType("U");
      assertEquals("LU;", objectType0.getSignature());
      assertEquals("U", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1398, objectType0);
      assertEquals("LU;", objectType0.getSignature());
      assertEquals("U", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1398, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1398, localVariables0.maxLocals());
      assertEquals("LU;", objectType0.getSignature());
      assertEquals("U", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1398, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 1398.\nU (Size: 1)\n", string0);
      assertEquals("LU;", objectType0.getSignature());
      assertEquals("U", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1398, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(string0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1398, localVariables0.maxLocals());
      assertEquals("LU;", objectType0.getSignature());
      assertEquals("U", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1398, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      instConstraintVisitor0.setFrame(frame1);
      assertEquals(1398, localVariables0.maxLocals());
      assertEquals("LU;", objectType0.getSignature());
      assertEquals("U", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1398, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      
      L2I l2I0 = new L2I();
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      assertEquals(1, l2I0.getLength());
      assertNotNull(l2I0);
      
      FALOAD fALOAD0 = new FALOAD();
      assertEquals((short)48, fALOAD0.getOpcode());
      assertEquals("faload", fALOAD0.getName());
      assertEquals(1, fALOAD0.getLength());
      assertNotNull(fALOAD0);
      
      DADD dADD0 = new DADD();
      assertEquals(1, dADD0.getLength());
      assertEquals((short)99, dADD0.getOpcode());
      assertEquals("dadd", dADD0.getName());
      assertNotNull(dADD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'U'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      ReferenceType referenceType0 = Type.NULL;
      assertNotNull(referenceType0);
      
      ObjectType objectType1 = (ObjectType)objectType0.getFirstCommonSuperclass(referenceType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType1.getClassName());
      assertEquals((byte)14, objectType1.getType());
      assertEquals(1, objectType1.getSize());
      assertEquals("L;", objectType1.getSignature());
      assertNotNull(objectType1);
      assertSame(objectType0, objectType1);
      assertSame(objectType1, objectType0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      String string0 = Type.getMethodSignature(uninitializedObjectType0.STRING, objectType0.NO_ARGS);
      assertEquals("()Ljava/lang/String;", string0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(string0);
      assertSame(objectType0, objectType1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      
      Frame.setThis((UninitializedObjectType) null);
      LDC_W lDC_W0 = new LDC_W(1411);
      assertEquals(1411, lDC_W0.getIndex());
      assertEquals("ldc_w", lDC_W0.getName());
      assertEquals(3, lDC_W0.getLength());
      assertEquals((short)19, lDC_W0.getOpcode());
      assertNotNull(lDC_W0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertSame(objectType0, objectType1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertSame(objectType0, objectType1);
      
      POP pOP0 = new POP();
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals("pop", pOP0.getName());
      assertNotNull(pOP0);
      
      instConstraintVisitor0.visitPOP(pOP0);
      assertEquals(1, pOP0.getLength());
      assertEquals((short)87, pOP0.getOpcode());
      assertEquals("pop", pOP0.getName());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(936);
      assertEquals(936, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("'368,FW8#,");
      assertEquals(1, objectType0.getSize());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals(1, objectType0.getSize());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(936, localVariables0.maxLocals());
      assertEquals(936, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertEquals(936, localVariables0.maxLocals());
      assertEquals(936, localVariables1.maxLocals());
      assertEquals(936, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      BasicType basicType0 = Type.INT;
      assertEquals((byte)10, basicType0.getType());
      assertEquals("I", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertNotNull(basicType0);
      
      operandStack1.push(basicType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(2, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals((byte)10, basicType0.getType());
      assertEquals("I", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 2.\n'368,FW8#, (Size: 1)\n", string0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(2, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals(1, mONITORENTER0.getLength());
      assertNotNull(mONITORENTER0);
      
      String string1 = mONITORENTER0.toString(false);
      assertEquals("monitorenter", string1);
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals(1, mONITORENTER0.getLength());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MONITORENTER constraint violated: The stack top should be of a ReferenceType, but is 'int'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      String string0 = localVariables0.toString();
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(string0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Frame frame1 = new Frame(1411, 1411);
      assertNotNull(frame1);
      assertFalse(frame1.equals((Object)frame0));
      
      OperandStack operandStack1 = new OperandStack(1411);
      assertEquals(0, operandStack1.slotsUsed());
      assertTrue(operandStack1.isEmpty());
      assertEquals(0, operandStack1.size());
      assertEquals(1411, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      localVariables0.merge(localVariables1);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(frame0.equals((Object)frame1));
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(uninitializedObjectType0);
      
      OperandStack operandStack2 = operandStack0.getClone();
      assertEquals(2, operandStack2.slotsUsed());
      assertFalse(operandStack2.isEmpty());
      assertEquals(2, operandStack2.size());
      assertEquals(1411, operandStack2.maxStack());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotNull(operandStack2);
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack2.equals((Object)operandStack1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      String string1 = uninitializedObjectType0.toString();
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", string1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      operandStack0.push(uninitializedObjectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      DCMPG dCMPG0 = new DCMPG();
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals(1, dCMPG0.getLength());
      assertNotNull(dCMPG0);
      
      SWAP sWAP0 = new SWAP();
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertNotNull(sWAP0);
      
      PUTFIELD pUTFIELD0 = new PUTFIELD(1411);
      assertEquals("putfield", pUTFIELD0.getName());
      assertEquals(1411, pUTFIELD0.getIndex());
      assertEquals(3, pUTFIELD0.getLength());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertNotNull(pUTFIELD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTFIELD(pUTFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1386);
      assertEquals(1386, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("w");
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lw;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1386, objectType0);
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1386, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(uninitializedObjectType0);
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals(1386, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack1.push(uninitializedObjectType0);
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(1386, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.size());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals("w", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      RET rET0 = new RET(412);
      assertEquals("ret", rET0.getName());
      assertEquals(412, rET0.getIndex());
      assertEquals(4, rET0.getLength());
      assertEquals((short)169, rET0.getOpcode());
      assertNotNull(rET0);
      
      LSHR lSHR0 = new LSHR();
      assertEquals((short)123, lSHR0.getOpcode());
      assertEquals("lshr", lSHR0.getName());
      assertEquals(1, lSHR0.getLength());
      assertNotNull(lSHR0);
      
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals("if_icmpeq", iF_ICMPEQ0.getName());
      assertNotNull(iF_ICMPEQ0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type 'w'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      IINC iINC0 = new IINC(1411, 1365);
      assertEquals(1411, iINC0.getIndex());
      assertEquals(1365, iINC0.getIncrement());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals("iinc", iINC0.getName());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals(6, iINC0.getLength());
      assertNotNull(iINC0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1425);
      assertEquals(1425, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(6, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(6, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(6, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      OperandStack operandStack1 = new OperandStack(6, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(6, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      operandStack1.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(6, operandStack1.maxStack());
      assertEquals(2, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.size());
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1425, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      OperandStack operandStack2 = new OperandStack(1987, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack2.size());
      assertEquals(1987, operandStack2.maxStack());
      assertEquals(1, operandStack2.slotsUsed());
      assertFalse(operandStack2.isEmpty());
      assertNotNull(operandStack2);
      assertFalse(operandStack2.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      
      operandStack2.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack2.size());
      assertEquals(1987, operandStack2.maxStack());
      assertEquals(2, operandStack2.slotsUsed());
      assertFalse(operandStack2.isEmpty());
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertFalse(operandStack2.equals((Object)operandStack0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1425, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(6, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      IINC iINC0 = new IINC(317, 1987);
      assertEquals(317, iINC0.getIndex());
      assertEquals("iinc", iINC0.getName());
      assertEquals((short) (-1), iINC0.getCanonicalTag());
      assertEquals((short)132, iINC0.getOpcode());
      assertEquals(1987, iINC0.getIncrement());
      assertEquals(6, iINC0.getLength());
      assertNotNull(iINC0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertNotNull(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack1.slotsUsed());
      assertEquals(1411, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(3, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1.0));
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(1, instructionList0.size());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      
      InstructionList instructionList2 = pUSH0.getInstructionList();
      assertEquals(1, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList2);
      assertNotSame(instructionList2, instructionList1);
      assertNotSame(instructionList2, instructionList0);
      assertFalse(instructionList2.equals((Object)instructionList1));
      assertFalse(instructionList2.equals((Object)instructionList0));
      
      InstructionList instructionList3 = pUSH0.getInstructionList();
      assertEquals(1, instructionList3.size());
      assertEquals(1, instructionList3.getLength());
      assertFalse(instructionList3.isEmpty());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList3);
      assertNotSame(instructionList3, instructionList2);
      assertNotSame(instructionList3, instructionList0);
      assertNotSame(instructionList3, instructionList1);
      assertFalse(instructionList3.equals((Object)instructionList2));
      assertFalse(instructionList3.equals((Object)instructionList0));
      assertFalse(instructionList3.equals((Object)instructionList1));
      
      InstructionList instructionList4 = new InstructionList(pUSH0);
      assertFalse(instructionList4.isEmpty());
      assertEquals(1, instructionList4.getLength());
      assertEquals(1, instructionList4.size());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList4);
      assertFalse(instructionList4.equals((Object)instructionList1));
      assertFalse(instructionList4.equals((Object)instructionList0));
      assertFalse(instructionList4.equals((Object)instructionList3));
      assertFalse(instructionList4.equals((Object)instructionList2));
      
      LDC2_W lDC2_W0 = new LDC2_W(1);
      assertEquals(1, lDC2_W0.getIndex());
      assertEquals(3, lDC2_W0.getLength());
      assertEquals((short)20, lDC2_W0.getOpcode());
      assertEquals("ldc2_w", lDC2_W0.getName());
      assertNotNull(lDC2_W0);
      
      ISTORE iSTORE0 = new ISTORE(7);
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(2, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(7, iSTORE0.getIndex());
      assertNotNull(iSTORE0);
      
      ISTORE iSTORE1 = (ISTORE)iSTORE0.copy();
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(2, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(7, iSTORE0.getIndex());
      assertEquals("istore", iSTORE1.getName());
      assertEquals(7, iSTORE1.getIndex());
      assertEquals((short)54, iSTORE1.getOpcode());
      assertEquals((short)54, iSTORE1.getCanonicalTag());
      assertEquals(2, iSTORE1.getLength());
      assertNotNull(iSTORE1);
      assertNotSame(iSTORE0, iSTORE1);
      assertNotSame(iSTORE1, iSTORE0);
      assertTrue(iSTORE1.equals((Object)iSTORE0));
      
      instConstraintVisitor0.visitISTORE(iSTORE0);
      assertEquals((short)54, iSTORE0.getOpcode());
      assertEquals((short)54, iSTORE0.getCanonicalTag());
      assertEquals(2, iSTORE0.getLength());
      assertEquals("istore", iSTORE0.getName());
      assertEquals(7, iSTORE0.getIndex());
      assertNotSame(iSTORE0, iSTORE1);
      assertTrue(iSTORE0.equals((Object)iSTORE1));
      
      InstructionHandle instructionHandle0 = null;
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertNotNull(iFNONNULL0);
      
      int int0 = iFNONNULL0.consumeStack(constantPoolGen0);
      assertEquals(1, int0);
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
      assertEquals((short)199, iFNONNULL0.getOpcode());
      assertEquals("ifnonnull", iFNONNULL0.getName());
      assertEquals(0, iFNONNULL0.getIndex());
      assertEquals(3, iFNONNULL0.getLength());
      
      GETSTATIC gETSTATIC0 = new GETSTATIC(1411);
      assertEquals(1411, gETSTATIC0.getIndex());
      assertEquals("getstatic", gETSTATIC0.getName());
      assertEquals((short)178, gETSTATIC0.getOpcode());
      assertEquals(3, gETSTATIC0.getLength());
      assertNotNull(gETSTATIC0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadClass(gETSTATIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1386);
      assertEquals(1386, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("w");
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("w", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1386, objectType0);
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("w", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("w", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1386, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("w", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("w", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertNotNull(uninitializedObjectType0);
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("w", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals(1386, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack1.push(uninitializedObjectType0);
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("w", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1386, operandStack1.maxStack());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals(2, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'w'>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals("Lw;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("w", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1386, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      RET rET0 = new RET(412);
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(412, rET0.getIndex());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      LSHR lSHR0 = new LSHR();
      assertEquals(1, lSHR0.getLength());
      assertEquals("lshr", lSHR0.getName());
      assertEquals((short)123, lSHR0.getOpcode());
      assertNotNull(lSHR0);
      
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals("if_icmpeq", iF_ICMPEQ0.getName());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertNotNull(iF_ICMPEQ0);
      
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      assertEquals((short)158, iFLE0.getOpcode());
      assertEquals(3, iFLE0.getLength());
      assertEquals(0, iFLE0.getIndex());
      assertEquals("ifle", iFLE0.getName());
      assertNotNull(iFLE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE(iFLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLE constraint violated: The value at the stack top is not of type 'int', but of type 'w'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      String string0 = localVariables0.toString();
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(string0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      operandStack0.push(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1.0));
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      DUP_X2 dUP_X2_0 = new DUP_X2();
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertNotNull(dUP_X2_0);
      
      DUP_X2 dUP_X2_1 = (DUP_X2)dUP_X2_0.copy();
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertEquals("dup_x2", dUP_X2_1.getName());
      assertEquals(1, dUP_X2_1.getLength());
      assertEquals((short)91, dUP_X2_1.getOpcode());
      assertNotNull(dUP_X2_1);
      assertSame(dUP_X2_0, dUP_X2_1);
      assertSame(dUP_X2_1, dUP_X2_0);
      
      instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
      assertEquals(1, dUP_X2_0.getLength());
      assertEquals("dup_x2", dUP_X2_0.getName());
      assertEquals((short)91, dUP_X2_0.getOpcode());
      assertSame(dUP_X2_0, dUP_X2_1);
      
      int int0 = (-2349);
      ASTORE aSTORE0 = null;
      try {
        aSTORE0 = new ASTORE((-2349));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal value: -2349
         //
         verifyException("org.apache.bcel.generic.LocalVariableInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1481);
      assertEquals(1481, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1481, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1481, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1481, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1481, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1481, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1481, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(1481);
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertEquals("invokevirtual", iNVOKEVIRTUAL0.getName());
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertEquals(1481, iNVOKEVIRTUAL0.getIndex());
      assertNotNull(iNVOKEVIRTUAL0);
      
      DUP dUP0 = new DUP();
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      assertNotNull(dUP0);
      
      String string0 = File.separator;
      assertEquals("/", string0);
      assertNotNull(string0);
      
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LASTORE lASTORE0 = new LASTORE();
      assertEquals((short)80, lASTORE0.getOpcode());
      assertEquals("lastore", lASTORE0.getName());
      assertEquals(1, lASTORE0.getLength());
      assertNotNull(lASTORE0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      OperandStack operandStack0 = new OperandStack(1411);
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertNotNull(frame0);
      
      operandStack0.clear();
      assertTrue(operandStack0.isEmpty());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      Boolean boolean0 = new Boolean("<init>");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1.0));
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      assertNotNull(instructionList0);
      
      Frame frame1 = new Frame(52, 52);
      assertNotNull(frame1);
      assertFalse(frame1.equals((Object)frame0));
      
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(1, instructionList1.size());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      
      FMUL fMUL0 = new FMUL();
      assertEquals((short)106, fMUL0.getOpcode());
      assertEquals(1, fMUL0.getLength());
      assertEquals("fmul", fMUL0.getName());
      assertNotNull(fMUL0);
      
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(2, (short)3158);
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals(2, mULTIANEWARRAY0.getIndex());
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals((short)3158, mULTIANEWARRAY0.getDimensions());
      assertNotNull(mULTIANEWARRAY0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '3158' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      
      LocalVariables localVariables1 = new LocalVariables(1411);
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      
      Frame frame1 = new Frame(1411, 1411);
      assertNotNull(frame1);
      assertFalse(frame1.equals((Object)frame0));
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack1.slotsUsed());
      assertEquals(1411, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(3, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertFalse(frame0.equals((Object)frame1));
      
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1.0));
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string0 = pUSH0.toString();
      assertEquals("ldc2_w[20](3) 1 (PUSH)", string0);
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(string0);
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.getLength());
      assertEquals(1, instructionList0.size());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = pUSH0.getInstructionList();
      assertEquals(1, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(1, instructionList1.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      
      InstructionList instructionList2 = pUSH0.getInstructionList();
      assertEquals(1, instructionList2.size());
      assertFalse(instructionList2.isEmpty());
      assertEquals(1, instructionList2.getLength());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList2);
      assertNotSame(instructionList2, instructionList0);
      assertNotSame(instructionList2, instructionList1);
      assertFalse(instructionList2.equals((Object)instructionList0));
      assertFalse(instructionList2.equals((Object)instructionList1));
      
      Frame frame2 = new Frame(2686, 7);
      assertNotNull(frame2);
      assertFalse(frame2.equals((Object)frame0));
      assertFalse(frame2.equals((Object)frame1));
      
      D2F d2F0 = new D2F();
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertNotNull(d2F0);
      
      InstructionHandle instructionHandle0 = instructionList1.append((Instruction) d2F0);
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList1, instructionList0);
      assertNotSame(instructionList1, instructionList2);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      assertEquals(2, instructionList1.size());
      assertFalse(instructionList1.isEmpty());
      assertEquals(2, instructionList1.getLength());
      assertEquals((short)144, d2F0.getOpcode());
      assertEquals("d2f", d2F0.getName());
      assertEquals(1, d2F0.getLength());
      assertEquals((-1), instructionHandle0.getPosition());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals(3, iF_ICMPLT0.getLength());
      assertEquals("if_icmplt", iF_ICMPLT0.getName());
      assertEquals(0, iF_ICMPLT0.getIndex());
      assertEquals((short)161, iF_ICMPLT0.getOpcode());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(iF_ICMPLT0);
      assertFalse(instructionList1.equals((Object)instructionList0));
      assertFalse(instructionList1.equals((Object)instructionList2));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      int int0 = 1411;
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      InstructionList instructionList0 = new InstructionList();
      assertEquals(0, instructionList0.getLength());
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2361, 1411);
      assertEquals(2361, constantFieldref0.getClassIndex());
      assertEquals(1411, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DCMPL dCMPL0 = new DCMPL();
      assertEquals((short)151, dCMPL0.getOpcode());
      assertEquals("dcmpl", dCMPL0.getName());
      assertEquals(1, dCMPL0.getLength());
      assertNotNull(dCMPL0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      
      LocalVariables localVariables1 = new LocalVariables(1411);
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      String string0 = frame0.toString();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotNull(string0);
      assertNotSame(localVariables0, localVariables1);
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotNull(frame1);
      assertTrue(frame1.equals((Object)frame0));
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack1.size());
      assertEquals(3, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.size());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-0.35131309875596006));
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(pUSH0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList0);
      
      InstructionList instructionList1 = new InstructionList(pUSH0);
      assertEquals(1, instructionList1.size());
      assertEquals(1, instructionList1.getLength());
      assertFalse(instructionList1.isEmpty());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionList1);
      assertFalse(instructionList1.equals((Object)instructionList0));
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      assertEquals(2, instructionList0.size());
      assertEquals(2, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, instructionList1.size());
      assertEquals(0, instructionList1.getLength());
      assertTrue(instructionList1.isEmpty());
      assertFalse(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, constantPoolGen0.getSize());
      assertNotNull(instructionHandle0);
      assertNotSame(instructionList0, instructionList1);
      assertNotSame(instructionList1, instructionList0);
      assertFalse(instructionList0.equals((Object)instructionList1));
      assertFalse(instructionList1.equals((Object)instructionList0));
      
      instConstraintVisitor0.visitIF_ACMPEQ((IF_ACMPEQ) null);
      GETSTATIC gETSTATIC0 = null;
      try {
        gETSTATIC0 = new GETSTATIC((-2993));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -2993
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411);
      assertTrue(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.slotsUsed());
      assertEquals(0, operandStack0.size());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = frame0.clone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(object0);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertTrue(object0.equals((Object)frame0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertNotSame(frame0, object0);
      assertFalse(frame0.equals((Object)object0));
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ARETURN aRETURN0 = new ARETURN();
      assertEquals(1, aRETURN0.getLength());
      assertEquals((short)176, aRETURN0.getOpcode());
      assertEquals("areturn", aRETURN0.getName());
      assertNotNull(aRETURN0);
      
      ILOAD iLOAD0 = new ILOAD(1411);
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getOpcode());
      assertEquals(4, iLOAD0.getLength());
      assertEquals(1411, iLOAD0.getIndex());
      assertNotNull(iLOAD0);
      
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals("iload", iLOAD0.getName());
      assertEquals((short)21, iLOAD0.getOpcode());
      assertEquals(4, iLOAD0.getLength());
      assertEquals(1411, iLOAD0.getIndex());
      
      LREM lREM0 = new LREM();
      assertEquals(1, lREM0.getLength());
      assertEquals((short)113, lREM0.getOpcode());
      assertEquals("lrem", lREM0.getName());
      assertNotNull(lREM0);
      
      IDIV iDIV0 = new IDIV();
      assertEquals("idiv", iDIV0.getName());
      assertEquals((short)108, iDIV0.getOpcode());
      assertEquals(1, iDIV0.getLength());
      assertNotNull(iDIV0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1386);
      assertEquals(1386, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Mismatch in argument array lengths: ");
      assertFalse(boolean0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2256, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2256, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2256, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      OperandStack operandStack1 = new OperandStack(2256, objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2256, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      operandStack0.merge(operandStack1);
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2256, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2256, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals(1386, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals(1386, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1386, localVariables0.maxLocals());
      assertEquals("", objectType0.getClassName());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2256, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(operandStack0, operandStack1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      FALOAD fALOAD0 = new FALOAD();
      assertEquals("faload", fALOAD0.getName());
      assertEquals(1, fALOAD0.getLength());
      assertEquals((short)48, fALOAD0.getOpcode());
      assertNotNull(fALOAD0);
      
      IOR iOR0 = new IOR();
      assertEquals("ior", iOR0.getName());
      assertEquals((short)128, iOR0.getOpcode());
      assertEquals(1, iOR0.getLength());
      assertNotNull(iOR0);
      
      ASTORE aSTORE0 = new ASTORE(119);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(2, aSTORE0.getLength());
      assertEquals("astore", aSTORE0.getName());
      assertEquals(119, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getOpcode());
      assertNotNull(aSTORE0);
      
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      assertEquals((short)58, aSTORE0.getCanonicalTag());
      assertEquals(2, aSTORE0.getLength());
      assertEquals("astore", aSTORE0.getName());
      assertEquals(119, aSTORE0.getIndex());
      assertEquals((short)58, aSTORE0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(936);
      assertEquals(936, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("'368,FW8#,");
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      localVariables0.set(2, objectType0);
      assertEquals(936, localVariables0.maxLocals());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(936, localVariables0.maxLocals());
      assertEquals(936, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      BasicType basicType0 = Type.INT;
      assertEquals("I", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)10, basicType0.getType());
      assertNotNull(basicType0);
      
      operandStack1.push(basicType0);
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2, operandStack1.size());
      assertEquals(2, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.slotsUsed());
      assertEquals("I", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertEquals((byte)10, basicType0.getType());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 2.\n'368,FW8#, (Size: 1)\n", string0);
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertNotNull(string0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(2, operandStack1.size());
      assertEquals(2, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertNotNull(mONITORENTER0);
      
      LSUB lSUB0 = new LSUB();
      assertEquals("lsub", lSUB0.getName());
      assertEquals((short)101, lSUB0.getOpcode());
      assertEquals(1, lSUB0.getLength());
      assertNotNull(lSUB0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'int'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Frame frame1 = new Frame(1411, 1411);
      assertNotNull(frame1);
      assertFalse(frame1.equals((Object)frame0));
      
      OperandStack operandStack1 = new OperandStack(1411);
      assertTrue(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertEquals(0, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      localVariables0.merge(localVariables1);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(3, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(3, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(frame0.equals((Object)frame1));
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(uninitializedObjectType0);
      
      OperandStack operandStack2 = operandStack0.getClone();
      assertFalse(operandStack2.isEmpty());
      assertEquals(1411, operandStack2.maxStack());
      assertEquals(3, operandStack2.size());
      assertEquals(3, operandStack2.slotsUsed());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(3, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack2);
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack2.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      operandStack0.push(uninitializedObjectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(4, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(4, operandStack0.slotsUsed());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      OperandStack operandStack3 = operandStack1.getClone();
      assertEquals(0, operandStack3.size());
      assertEquals(0, operandStack3.slotsUsed());
      assertTrue(operandStack3.isEmpty());
      assertEquals(1411, operandStack3.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertEquals(0, operandStack1.size());
      assertEquals(0, operandStack1.slotsUsed());
      assertNotNull(operandStack3);
      assertNotSame(operandStack3, operandStack2);
      assertNotSame(operandStack3, operandStack1);
      assertNotSame(operandStack3, operandStack0);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(operandStack1, operandStack3);
      assertNotSame(operandStack1, operandStack2);
      assertTrue(operandStack3.equals((Object)operandStack1));
      assertFalse(operandStack3.equals((Object)operandStack2));
      assertFalse(operandStack3.equals((Object)operandStack0));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(operandStack1.equals((Object)operandStack2));
      
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.STRINGBUFFER);
      assertEquals(1, uninitializedObjectType1.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType1.getSignature());
      assertEquals((byte)15, uninitializedObjectType1.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(uninitializedObjectType1);
      assertFalse(uninitializedObjectType1.equals((Object)uninitializedObjectType0));
      
      String string0 = uninitializedObjectType0.toString();
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", string0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotNull(string0);
      assertNotSame(uninitializedObjectType0, uninitializedObjectType1);
      assertFalse(uninitializedObjectType0.equals((Object)uninitializedObjectType1));
      
      operandStack0.push(uninitializedObjectType1);
      assertEquals(1, uninitializedObjectType1.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.StringBuffer'>", uninitializedObjectType1.getSignature());
      assertEquals((byte)15, uninitializedObjectType1.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(5, operandStack0.slotsUsed());
      assertEquals(5, operandStack0.size());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertNotSame(uninitializedObjectType1, uninitializedObjectType0);
      assertNotSame(operandStack0, operandStack3);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(uninitializedObjectType0, uninitializedObjectType1);
      assertFalse(uninitializedObjectType1.equals((Object)uninitializedObjectType0));
      assertFalse(operandStack0.equals((Object)operandStack3));
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(uninitializedObjectType0.equals((Object)uninitializedObjectType1));
      
      DCMPG dCMPG0 = new DCMPG();
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals(1, dCMPG0.getLength());
      assertNotNull(dCMPG0);
      
      SWAP sWAP0 = new SWAP();
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      assertNotNull(sWAP0);
      
      PUTFIELD pUTFIELD0 = new PUTFIELD(1411);
      assertEquals(1411, pUTFIELD0.getIndex());
      assertEquals((short)181, pUTFIELD0.getOpcode());
      assertEquals("putfield", pUTFIELD0.getName());
      assertEquals(3, pUTFIELD0.getLength());
      assertNotNull(pUTFIELD0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTFIELD(pUTFIELD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction PUTFIELD constraint violated: Stack next-to-top should be an object reference that's not an array reference, but is '<UNINITIALIZED OBJECT OF TYPE ''>'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Boolean boolean0 = Boolean.valueOf("The value at the stack top is not of type 'long', but of type '");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = ObjectType.getInstance("The value at the stack top is not of type 'long', but of type '");
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      String string0 = frame0.toString();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(string0);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack1.slotsUsed());
      assertEquals(3, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      
      String string1 = operandStack1.toString();
      assertEquals("Slots used: 3 MaxStack: 1411.\nThe value at the stack top is not of type 'long', but of type ' (Size: 1)\nThe value at the stack top is not of type 'long', but of type ' (Size: 1)\nThe value at the stack top is not of type 'long', but of type ' (Size: 1)\n", string1);
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(3, operandStack1.slotsUsed());
      assertEquals(3, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1411, operandStack1.maxStack());
      assertNotNull(string1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertFalse(string1.equals((Object)string0));
      
      Frame frame2 = frame0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotNull(frame2);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertTrue(frame2.equals((Object)frame1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      
      Frame frame3 = frame1.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotNull(frame3);
      assertNotSame(frame3, frame1);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, frame0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame3);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame3);
      assertTrue(frame3.equals((Object)frame0));
      assertTrue(frame3.equals((Object)frame1));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)frame2));
      
      boolean boolean3 = operandStack0.equals(byteArray0);
      assertFalse(boolean3);
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(3, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(3, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      LOR lOR0 = new LOR();
      assertEquals((short)129, lOR0.getOpcode());
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      assertNotNull(lOR0);
      
      LOR lOR1 = new LOR();
      assertEquals(1, lOR1.getLength());
      assertEquals("lor", lOR1.getName());
      assertEquals((short)129, lOR1.getOpcode());
      assertNotNull(lOR1);
      assertTrue(lOR1.equals((Object)lOR0));
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("The value at the stack top is not of type 'long', but of type '", objectType0.getClassName());
      assertEquals("LThe value at the stack top is not of type 'long', but of type ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(4, operandStack0.size());
      assertEquals(1411, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(4, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      
      LocalVariables localVariables1 = new LocalVariables(1);
      assertEquals(1, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertFalse(localVariables1.equals((Object)localVariables0));
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertEquals(1, localVariables1.maxLocals());
      assertEquals(1, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertEquals(1, localVariables1.maxLocals());
      assertEquals(1, localVariables3.maxLocals());
      assertNotNull(localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor1);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      assertEquals((short)94, dUP2_X2_0.getOpcode());
      assertEquals(1, dUP2_X2_0.getLength());
      assertEquals("dup2_x2", dUP2_X2_0.getName());
      assertNotNull(dUP2_X2_0);
      
      Instruction instruction0 = dUP2_X2_0.copy();
      assertEquals((short)94, dUP2_X2_0.getOpcode());
      assertEquals(1, dUP2_X2_0.getLength());
      assertEquals("dup2_x2", dUP2_X2_0.getName());
      assertEquals((short)94, instruction0.getOpcode());
      assertEquals("dup2_x2", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      assertNotNull(instruction0);
      assertSame(dUP2_X2_0, instruction0);
      assertSame(instruction0, dUP2_X2_0);
      
      instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
      assertEquals((short)94, dUP2_X2_0.getOpcode());
      assertEquals(1, dUP2_X2_0.getLength());
      assertEquals("dup2_x2", dUP2_X2_0.getName());
      assertNotSame(instConstraintVisitor0, instConstraintVisitor1);
      assertSame(dUP2_X2_0, instruction0);
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor1));
      
      ILOAD iLOAD0 = new ILOAD(3450);
      assertEquals((short)21, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(3450, iLOAD0.getIndex());
      assertEquals("iload", iLOAD0.getName());
      assertEquals(4, iLOAD0.getLength());
      assertNotNull(iLOAD0);
      
      instConstraintVisitor1.visitILOAD(iLOAD0);
      assertEquals((short)21, iLOAD0.getOpcode());
      assertEquals((short)21, iLOAD0.getCanonicalTag());
      assertEquals(3450, iLOAD0.getIndex());
      assertEquals("iload", iLOAD0.getName());
      assertEquals(4, iLOAD0.getLength());
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      LSHL lSHL0 = new LSHL();
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals("lshl", lSHL0.getName());
      assertEquals(1, lSHL0.getLength());
      assertNotNull(lSHL0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      String[] stringArray0 = new String[0];
      RETURN rETURN0 = (RETURN)InstructionConstants.RETURN;
      assertEquals("return", rETURN0.getName());
      assertEquals((short)177, rETURN0.getOpcode());
      assertEquals(1, rETURN0.getLength());
      assertNotNull(rETURN0);
      
      InstructionList instructionList0 = new InstructionList(rETURN0);
      assertEquals("return", rETURN0.getName());
      assertEquals((short)177, rETURN0.getOpcode());
      assertEquals(1, rETURN0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertNotNull(instructionList0);
      
      MethodGen methodGen0 = new MethodGen((-1033), objectType0, objectType0.NO_ARGS, stringArray0, "", "", instructionList0, (ConstantPoolGen) null);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("return", rETURN0.getName());
      assertEquals((short)177, rETURN0.getOpcode());
      assertEquals(1, rETURN0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isFinal());
      assertEquals("", methodGen0.getClassName());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isTransient());
      assertEquals((-1033), methodGen0.getModifiers());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isNative());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAbstract());
      assertTrue(methodGen0.isVarArgs());
      assertEquals("", methodGen0.getName());
      assertEquals((-1033), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynchronized());
      assertNotNull(methodGen0);
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor1);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      instConstraintVisitor1.setMethodGen(methodGen0);
      assertEquals(1, objectType0.getSize());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("return", rETURN0.getName());
      assertEquals((short)177, rETURN0.getOpcode());
      assertEquals(1, rETURN0.getLength());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals(0, methodGen0.getMaxStack());
      assertTrue(methodGen0.isFinal());
      assertEquals("", methodGen0.getClassName());
      assertTrue(methodGen0.isAnnotation());
      assertTrue(methodGen0.isTransient());
      assertEquals((-1033), methodGen0.getModifiers());
      assertTrue(methodGen0.isProtected());
      assertTrue(methodGen0.isInterface());
      assertTrue(methodGen0.isVolatile());
      assertTrue(methodGen0.isNative());
      assertEquals(0, methodGen0.getMaxLocals());
      assertFalse(methodGen0.isStatic());
      assertFalse(methodGen0.isAbstract());
      assertTrue(methodGen0.isVarArgs());
      assertEquals("", methodGen0.getName());
      assertEquals((-1033), methodGen0.getAccessFlags());
      assertTrue(methodGen0.isPrivate());
      assertTrue(methodGen0.isStrictfp());
      assertTrue(methodGen0.isSynthetic());
      assertTrue(methodGen0.isEnum());
      assertTrue(methodGen0.isPublic());
      assertTrue(methodGen0.isSynchronized());
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      FCMPG fCMPG0 = new FCMPG();
      assertEquals("fcmpg", fCMPG0.getName());
      assertEquals((short)150, fCMPG0.getOpcode());
      assertEquals(1, fCMPG0.getLength());
      assertNotNull(fCMPG0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("$");
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1411, objectType0);
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      Frame frame2 = frame1.getClone();
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame2);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame2);
      assertNotSame(frame1, frame0);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame2.equals((Object)frame0));
      
      String string0 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 1411.\n$ (Size: 1)\n", string0);
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(string0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      operandStack0.push(objectType0);
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      
      OperandStack operandStack1 = new OperandStack(1827);
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(0, operandStack1.size());
      assertEquals(1827, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertNotNull(operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      operandStack1.clear();
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(0, operandStack1.size());
      assertEquals(1827, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      operandStack1.push(objectType0);
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1827, operandStack1.maxStack());
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      Frame frame3 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotNull(frame3);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(frame3.equals((Object)frame2));
      assertFalse(frame3.equals((Object)frame1));
      
      instConstraintVisitor0.setFrame(frame3);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals("L$;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("$", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame3, frame0);
      assertNotSame(frame3, frame2);
      assertNotSame(frame3, frame1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(frame3.equals((Object)frame2));
      assertTrue(frame3.equals((Object)frame0));
      assertFalse(frame3.equals((Object)frame1));
      
      RET rET0 = new RET(1827);
      assertEquals("ret", rET0.getName());
      assertEquals(1827, rET0.getIndex());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      DDIV dDIV0 = new DDIV();
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertNotNull(dDIV0);
      
      String string1 = dDIV0.toString(true);
      assertEquals("ddiv[111](1)", string1);
      assertEquals(1, dDIV0.getLength());
      assertEquals((short)111, dDIV0.getOpcode());
      assertEquals("ddiv", dDIV0.getName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Float.MAX_EXPONENT;
      assertEquals(127, int0);
      
      instConstraintVisitor0.visitIFNULL((IFNULL) null);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1411);
      assertEquals(1411, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = new LocalVariables(1411);
      assertEquals(1411, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertNotNull(objectType0);
      
      String string0 = Character.getName(1411);
      assertEquals("ARMENIAN SMALL LETTER PIWR", string0);
      assertNotNull(string0);
      
      OperandStack operandStack0 = new OperandStack(1411);
      assertTrue(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1411, localVariables0.maxLocals());
      assertTrue(operandStack0.isEmpty());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(0, operandStack0.slotsUsed());
      assertNotNull(frame0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DADD dADD0 = new DADD();
      assertEquals((short)99, dADD0.getOpcode());
      assertEquals("dadd", dADD0.getName());
      assertEquals(1, dADD0.getLength());
      assertNotNull(dADD0);
      
      operandStack0.push(objectType0.FLOAT);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string1 = operandStack0.toString();
      assertEquals("Slots used: 1 MaxStack: 1411.\nfloat (Size: 1)\n", string1);
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(localVariables0, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor1);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1411, localVariables0.maxLocals());
      assertEquals(1411, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotSame(instConstraintVisitor0, instConstraintVisitor1);
      assertNotSame(localVariables0, localVariables1);
      assertFalse(instConstraintVisitor0.equals((Object)instConstraintVisitor1));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LLOAD lLOAD0 = new LLOAD(1411);
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertEquals(4, lLOAD0.getLength());
      assertEquals(1411, lLOAD0.getIndex());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertNotNull(lLOAD0);
      
      Frame frame1 = new Frame(1411, 1058);
      assertNotNull(frame1);
      assertFalse(frame1.equals((Object)frame0));
      
      BasicType basicType0 = Type.VOID;
      assertEquals(0, basicType0.getSize());
      assertEquals("V", basicType0.getSignature());
      assertEquals((byte)12, basicType0.getType());
      assertNotNull(basicType0);
      
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      assertEquals((short)190, aRRAYLENGTH0.getOpcode());
      assertEquals("arraylength", aRRAYLENGTH0.getName());
      assertEquals(1, aRRAYLENGTH0.getLength());
      assertNotNull(aRRAYLENGTH0);
      
      LSHL lSHL0 = new LSHL();
      assertEquals("lshl", lSHL0.getName());
      assertEquals(1, lSHL0.getLength());
      assertEquals((short)121, lSHL0.getOpcode());
      assertNotNull(lSHL0);
      
      FREM fREM0 = new FREM();
      assertEquals((short)114, fREM0.getOpcode());
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      assertNotNull(fREM0);
      
      FREM fREM1 = new FREM();
      assertEquals(1, fREM1.getLength());
      assertEquals((short)114, fREM1.getOpcode());
      assertEquals("frem", fREM1.getName());
      assertNotNull(fREM1);
      assertTrue(fREM1.equals((Object)fREM0));
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(936);
      assertEquals(936, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("'368,FW8#,");
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      assertFalse(boolean0);
      
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertNotNull(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Frame frame0 = new Frame((LocalVariables) null, operandStack1);
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(1, operandStack1.size());
      assertNotNull(frame0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'368,FW8#,");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(936, localVariables0.maxLocals());
      assertEquals(936, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      BasicType basicType0 = Type.INT;
      assertEquals((byte)10, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("I", basicType0.getSignature());
      assertNotNull(basicType0);
      
      operandStack1.push(basicType0);
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(2, operandStack1.size());
      assertEquals((byte)10, basicType0.getType());
      assertEquals(1, basicType0.getSize());
      assertEquals("I", basicType0.getSignature());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("'368,FW8#,", objectType0.getClassName());
      assertEquals("L'368,FW8#,;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(2, operandStack1.maxStack());
      assertEquals(2, operandStack1.size());
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals(1, mONITORENTER0.getLength());
      assertNotNull(mONITORENTER0);
      
      String string0 = mONITORENTER0.toString(false);
      assertEquals("monitorenter", string0);
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals(1, mONITORENTER0.getLength());
      assertNotNull(string0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      assertNotNull(constantPoolGen0);
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(6);
      assertEquals(6, iNSTANCEOF0.getIndex());
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertNotNull(iNSTANCEOF0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INSTANCEOF constraint violated: The 'objectref' is not of a ReferenceType but of type int.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1458);
      assertEquals(1458, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals(1458, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      ObjectType objectType0 = new ObjectType("CONSTANT_NameAndType");
      assertEquals(1, objectType0.getSize());
      assertEquals("CONSTANT_NameAndType", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LCONSTANT_NameAndType;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1458, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("CONSTANT_NameAndType", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LCONSTANT_NameAndType;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(operandStack0);
      
      LocalVariables localVariables2 = new LocalVariables(0);
      assertEquals(0, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      
      localVariables1.merge(localVariables0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals(1458, localVariables1.maxLocals());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("CONSTANT_NameAndType", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LCONSTANT_NameAndType;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertNotNull(frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("CONSTANT_NameAndType", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LCONSTANT_NameAndType;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      
      Frame frame1 = new Frame(localVariables0, operandStack0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("CONSTANT_NameAndType", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LCONSTANT_NameAndType;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertNotNull(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      
      OperandStack operandStack1 = new OperandStack(1993, objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("CONSTANT_NameAndType", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LCONSTANT_NameAndType;", objectType0.getSignature());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1993, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      Frame frame2 = new Frame(localVariables2, operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals("CONSTANT_NameAndType", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LCONSTANT_NameAndType;", objectType0.getSignature());
      assertEquals(0, localVariables2.maxLocals());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1993, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertNotNull(frame2);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame2.equals((Object)frame1));
      assertFalse(frame2.equals((Object)frame0));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(");
      assertFalse(boolean0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals(1, objectType0.getSize());
      assertEquals("CONSTANT_NameAndType", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LCONSTANT_NameAndType;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(frame1.equals((Object)frame2));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(0);
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertEquals("invokevirtual", iNVOKEVIRTUAL0.getName());
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertEquals(0, iNVOKEVIRTUAL0.getIndex());
      assertNotNull(iNVOKEVIRTUAL0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      LocalVariables localVariables3 = new LocalVariables(0);
      assertEquals(0, localVariables3.maxLocals());
      assertNotNull(localVariables3);
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      
      OperandStack operandStack2 = new OperandStack(983);
      assertEquals(0, operandStack2.slotsUsed());
      assertTrue(operandStack2.isEmpty());
      assertEquals(983, operandStack2.maxStack());
      assertEquals(0, operandStack2.size());
      assertNotNull(operandStack2);
      assertFalse(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack2.equals((Object)operandStack1));
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      I2L i2L0 = new I2L();
      assertEquals(1, i2L0.getLength());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals("i2l", i2L0.getName());
      assertNotNull(i2L0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE((IASTORE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1458);
      assertEquals(1458, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1458, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1458, operandStack0.maxStack());
      assertNotNull(operandStack0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1458, operandStack0.maxStack());
      assertNotNull(frame0);
      
      operandStack0.push(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals(1458, localVariables1.maxLocals());
      assertNotNull(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals(1458, localVariables1.maxLocals());
      assertEquals(1458, localVariables2.maxLocals());
      assertNotNull(localVariables2);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      
      OperandStack operandStack1 = new OperandStack(1458, objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1458, operandStack1.maxStack());
      assertNotNull(operandStack1);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      Frame frame1 = new Frame(localVariables0, operandStack1);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1458, operandStack1.maxStack());
      assertNotNull(frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertFalse(frame1.equals((Object)frame0));
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertNotNull(uninitializedObjectType0);
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(frame0.equals((Object)frame1));
      
      ObjectType objectType1 = (ObjectType)operandStack1.pop();
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(0, operandStack1.size());
      assertEquals(1458, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertEquals(1, objectType1.getSize());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("L;", objectType1.getSignature());
      assertEquals("", objectType1.getClassName());
      assertNotNull(objectType1);
      assertSame(objectType0, objectType1);
      assertNotSame(operandStack1, operandStack0);
      assertSame(objectType1, objectType0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(1458);
      assertEquals(3, iNVOKEVIRTUAL0.getLength());
      assertEquals((short)182, iNVOKEVIRTUAL0.getOpcode());
      assertEquals(1458, iNVOKEVIRTUAL0.getIndex());
      assertEquals("invokevirtual", iNVOKEVIRTUAL0.getName());
      assertNotNull(iNVOKEVIRTUAL0);
      
      operandStack1.push(uninitializedObjectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(1458, operandStack1.maxStack());
      assertEquals(1, uninitializedObjectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertSame(objectType0, objectType1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      
      LocalVariables localVariables3 = new LocalVariables(1458);
      assertEquals(1458, localVariables3.maxLocals());
      assertNotNull(localVariables3);
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      
      OperandStack operandStack2 = new OperandStack(291);
      assertEquals(0, operandStack2.slotsUsed());
      assertEquals(0, operandStack2.size());
      assertTrue(operandStack2.isEmpty());
      assertEquals(291, operandStack2.maxStack());
      assertNotNull(operandStack2);
      assertFalse(operandStack2.equals((Object)operandStack1));
      assertFalse(operandStack2.equals((Object)operandStack0));
      
      UninitializedObjectType uninitializedObjectType1 = Frame.getThis();
      assertEquals(1, uninitializedObjectType1.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType1.getSignature());
      assertEquals((byte)15, uninitializedObjectType1.getType());
      assertNotNull(uninitializedObjectType1);
      assertSame(uninitializedObjectType1, uninitializedObjectType0);
      
      LSHL lSHL0 = new LSHL();
      assertEquals((short)121, lSHL0.getOpcode());
      assertEquals("lshl", lSHL0.getName());
      assertEquals(1, lSHL0.getLength());
      assertNotNull(lSHL0);
      
      LDC_W lDC_W0 = new LDC_W(241);
      assertEquals(2, lDC_W0.getLength());
      assertEquals(241, lDC_W0.getIndex());
      assertEquals("ldc", lDC_W0.getName());
      assertEquals((short)18, lDC_W0.getOpcode());
      assertNotNull(lDC_W0);
      
      ISHL iSHL0 = new ISHL();
      assertEquals((short)120, iSHL0.getOpcode());
      assertEquals(1, iSHL0.getLength());
      assertEquals("ishl", iSHL0.getName());
      assertNotNull(iSHL0);
      
      DSTORE dSTORE0 = new DSTORE(241);
      assertEquals(2, dSTORE0.getLength());
      assertEquals("dstore", dSTORE0.getName());
      assertEquals(241, dSTORE0.getIndex());
      assertEquals((short)57, dSTORE0.getCanonicalTag());
      assertEquals((short)57, dSTORE0.getOpcode());
      assertNotNull(dSTORE0);
      
      UninitializedObjectType uninitializedObjectType2 = (UninitializedObjectType)operandStack1.pop();
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, uninitializedObjectType2.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE ''>", uninitializedObjectType2.getSignature());
      assertEquals((byte)15, uninitializedObjectType2.getType());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(0, operandStack1.size());
      assertEquals(1458, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertNotNull(uninitializedObjectType2);
      assertSame(objectType0, objectType1);
      assertSame(uninitializedObjectType2, uninitializedObjectType1);
      assertSame(uninitializedObjectType2, uninitializedObjectType0);
      assertNotSame(operandStack1, operandStack2);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertTrue(operandStack1.equals((Object)operandStack2));
      
      String string0 = frame1.toString();
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(0, operandStack1.size());
      assertEquals(1458, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertNotNull(string0);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertSame(objectType0, objectType1);
      assertNotSame(operandStack1, operandStack2);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame1, frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertTrue(operandStack1.equals((Object)operandStack2));
      assertFalse(frame1.equals((Object)frame0));
      
      boolean boolean0 = frame0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1458, operandStack0.maxStack());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertSame(objectType0, objectType1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertFalse(frame0.equals((Object)frame1));
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor1);
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      instConstraintVisitor1.setFrame(frame1);
      assertEquals(1458, localVariables0.maxLocals());
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(0, operandStack1.slotsUsed());
      assertEquals(0, operandStack1.size());
      assertEquals(1458, operandStack1.maxStack());
      assertTrue(operandStack1.isEmpty());
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertSame(objectType0, objectType1);
      assertNotSame(operandStack1, operandStack2);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(frame1, frame0);
      assertNotSame(instConstraintVisitor1, instConstraintVisitor0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(operandStack1.equals((Object)operandStack0));
      assertTrue(operandStack1.equals((Object)operandStack2));
      assertFalse(frame1.equals((Object)frame0));
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      
      F2I f2I0 = new F2I();
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals("f2i", f2I0.getName());
      assertEquals(1, f2I0.getLength());
      assertNotNull(f2I0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE((IFNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables0 = new LocalVariables(1435);
      assertEquals(1435, localVariables0.maxLocals());
      assertNotNull(localVariables0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectType objectType0 = new ObjectType("");
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertNotNull(objectType0);
      
      OperandStack operandStack0 = new OperandStack(1435, objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1435, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(operandStack0);
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      operandStack0.initializeObject((UninitializedObjectType) null);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1435, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertEquals(1435, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1435, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame0);
      
      Frame frame1 = frame0.getClone();
      assertEquals(1435, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1435, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotNull(frame1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals(1435, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1435, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertNotSame(frame0, frame1);
      
      BasicType basicType0 = Type.SHORT;
      assertEquals((byte)9, basicType0.getType());
      assertEquals("S", basicType0.getSignature());
      assertEquals(1, basicType0.getSize());
      assertNotNull(basicType0);
      
      LLOAD lLOAD0 = new LLOAD(1071);
      assertEquals(1071, lLOAD0.getIndex());
      assertEquals(4, lLOAD0.getLength());
      assertEquals((short)22, lLOAD0.getCanonicalTag());
      assertEquals("lload", lLOAD0.getName());
      assertEquals((short)22, lLOAD0.getOpcode());
      assertNotNull(lLOAD0);
      
      RET rET0 = new RET(1435);
      assertEquals("ret", rET0.getName());
      assertEquals((short)169, rET0.getOpcode());
      assertEquals(1435, rET0.getIndex());
      assertEquals(4, rET0.getLength());
      assertNotNull(rET0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOOKUPSWITCH((LOOKUPSWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
