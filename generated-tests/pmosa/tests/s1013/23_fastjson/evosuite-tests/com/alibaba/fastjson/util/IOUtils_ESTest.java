/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 02:21:53 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.FileDescriptor;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PushbackReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8((char[]) null, 0, 0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", (int) (byte)0, (-401));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      int int0 = 100;
      IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 100, 0);
      IOUtils.getStringProperty("fastjson.properties");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      mockFileReader0.skip(0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0);
      PushbackReader pushbackReader1 = null;
      try {
        pushbackReader1 = new PushbackReader(pushbackReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.firstIdentifier('v');
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1111L), (-1082), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars(475, 128, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'k';
      charArray0[2] = '/';
      charArray0[3] = '7';
      charArray0[4] = '\"';
      charArray0[5] = ';';
      charArray0[6] = 'E';
      charArray0[7] = '6';
      charArray0[8] = 'u';
      // Undeclared exception!
      try { 
        IOUtils.getChars(256, 256, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils.getStringProperty("com.alibaba.fastjson.JSONException");
      IOUtils.isValidJsonpQueryParam((String) null);
      int int0 = 913;
      int int1 = 117;
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '<';
      char char0 = '(';
      charArray0[2] = '(';
      charArray0[3] = 'a';
      charArray0[4] = '~';
      // Undeclared exception!
      try { 
        IOUtils.getChars(913, 117, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 116
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1986;
      IOUtils.stringSize(1986);
      int int1 = (-415);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 1986, (-415));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils.stringSize((-32));
      String string0 = IOUtils.getStringProperty("mOcmQ9f2q95(jo");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 76, (-696), iOUtils0.replaceChars);
      assertEquals(0, int0);
      
      boolean boolean0 = IOUtils.isIdent('H');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils.isIdent('0');
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-32), (int) (byte) (-32), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("#p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.stringSize((long) 1);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((char[]) null, 12, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.stringSize((long) 1);
      IOUtils.stringSize((-1390));
      IOUtils.isValidJsonpQueryParam("2AHzBEWC/^~I-0S");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 1, 1246);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.firstIdentifier('+');
      IOUtils.isValidJsonpQueryParam("As4H+2<");
      IOUtils.stringSize((-746L));
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      String string0 = "9c";
      // Undeclared exception!
      try { 
        uTF8Decoder0.replaceWith("9c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Replacement too long
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOUtils.decodeBase64("u");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte) (-13), 72, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char char0 = 's';
      IOUtils.isIdent('s');
      IOUtils.loadPropertiesFromFile();
      IOUtils.isIdent('s');
      String string0 = "nXBfAqZq+";
      IOUtils.decodeBase64("nXBfAqZq+");
      IOUtils.decodeBase64("");
      String string1 = null;
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isIdent(':');
      assertFalse(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("v?-;0;");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8(iOUtils0.replaceChars, 30, 1, iOUtils0.specicalFlags_singleQuotes);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.decodeBase64("D,AqaE");
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-13), (int) (byte) (-13), iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -14
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char char0 = 's';
      IOUtils.isIdent('s');
      IOUtils.loadPropertiesFromFile();
      IOUtils.isIdent('s');
      IOUtils.decodeBase64("nBfAqZ");
      IOUtils.decodeBase64("}H)^(Ah:#E-");
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 1, 1, iOUtils0.replaceChars);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(4, 11, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-32);
      IOUtils.stringSize((-32));
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'i';
      charArray0[2] = 'f';
      charArray0[3] = 'M';
      charArray0[4] = '8';
      charArray0[5] = '0';
      charArray0[6] = 'G';
      charArray0[7] = 'c';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-32), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = ';';
      charArray0[2] = '[';
      charArray0[3] = '?';
      IOUtils.decodeUTF8(byteArray0, 1023, (byte)0, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("iryi:uL.E2!C", 0, 3971);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.stringSize((long) 1);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("utf8 decode error, ", 0, 2742);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.stringSize((long) 1);
      IOUtils.isValidJsonpQueryParam("2AHzBEWC/^~I-0S");
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      IOUtils.decodeBase64(charArray0, 0, 1);
      IOUtils iOUtils0 = new IOUtils();
      iOUtils0.UTF8.newDecoder();
      CharBuffer charBuffer0 = null;
      // Undeclared exception!
      try { 
        iOUtils0.UTF8.encode((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 5, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.getStringProperty(">");
      Charset charset0 = IOUtils.UTF8;
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      ByteBuffer byteBuffer0 = charset0.encode("Hl:n,z\"ApkI:I");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      IOUtils.close(fileChannel0);
      assertFalse(fileChannel0.isOpen());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.ASCII_CHARS, 19, 5);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      IOUtils.readAll(lineNumberReader0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", (-1277), (-1277));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = IOUtils.stringSize(0);
      int int1 = IOUtils.stringSize((long) 1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.util.UTF8Decoder");
      assertTrue(boolean0);
      
      boolean boolean1 = IOUtils.isIdent('S');
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils.stringSize(2230L);
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'X';
      charArray0[2] = 'x';
      charArray0[3] = 'i';
      charArray0[4] = 'a';
      charArray0[5] = '%';
      IOUtils.getChars(584, 4, charArray0);
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-64);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (byte) (-109), 584, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -109
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (byte)0, 2125114026, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '\\';
      charArray0[0] = '\\';
      char char1 = '@';
      charArray0[1] = '@';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1267L), 2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars(2057L, 1, iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOUtils.stringSize(9999);
      IOUtils.stringSize((long) 9999);
      IOUtils.decodeBase64("");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte) (-13), 72, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOUtils.decodeBase64(".x@(C=&.mu%HMHZ", 3, 3);
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      assertEquals("fastjson.compatibleWithJavaBean", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils.decodeBase64("uR^mMprl|~r|\"Hc.2G", 3, 3);
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'a';
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, 3, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 25, 3);
      assertArrayEquals(new byte[] {(byte)81}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 38, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 75
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils.stringSize(9999);
      IOUtils.stringSize((long) 9999);
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '{';
      charArray0[2] = 'u';
      charArray0[3] = 'P';
      charArray0[4] = 'M';
      charArray0[5] = 'W';
      charArray0[6] = 'h';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 4, 8064);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8067
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[7];
      byte[] byteArray0 = new byte[23];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 12, 11, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOUtils.decodeBase64("uR^mMprl|~r|\"Hc.2G", 3, 3);
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte)10, (int) (byte)10, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOUtils.close((Closeable) null);
      IOUtils.decodeBase64("");
      IOUtils.decodeBase64("");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 77, 77);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = IOUtils.stringSize(0);
      int int1 = IOUtils.stringSize((long) 1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[1];
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 0, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      IOUtils.getChars((long) 1, 1, charArray0);
      int int2 = IOUtils.stringSize(0L);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.getChars((long) 3, 3, iOUtils0.replaceChars);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray1 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 38, 38);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.replaceChars, 2, 2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(byteArray0, 4, 4, iOUtils0.replaceChars);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\u008C';
      charArray0[1] = '(';
      charArray0[2] = '\u008C';
      charArray0[3] = '\u008C';
      charArray0[0] = '\u008C';
      charArray0[5] = '\u008C';
      charArray0[6] = '\u008C';
      charArray0[8] = '\u008C';
      charArray0[8] = '\u008C';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 10, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\u008C';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-31);
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)29, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u001D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("uR^mMprl|~r|\"Hc.2G", 3, 3);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-54)}, byteArray0);
      
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      byte[] byteArray1 = IOUtils.decodeBase64("-eg$c@qXm", 3, 3);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[11];
      byte[] byteArray0 = new byte[27];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-49);
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)29, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[9];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)0;
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)29, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u001D', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 4, 4);
      assertArrayEquals(new byte[] {(byte)106, (byte)88, (byte) (-101)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IOUtils.getStringProperty("com.alibaba.fastjson.util.UTF8Decoder");
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 8, 8);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)125, (byte) (-85), (byte)45}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u0101');
      boolean boolean1 = IOUtils.isIdent('|');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.getStringProperty(">");
      byte[] byteArray0 = IOUtils.decodeBase64("[45jH9=");
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-104), (byte) (-57)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IOUtils.decodeBase64(">");
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("=6%+N=");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-2)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOUtils.isIdent('\u0100');
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[11];
      byte[] byteArray0 = new byte[27];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-13);
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)29, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[23];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)35;
      int int0 = IOUtils.decodeUTF8(byteArray0, 1, 128, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[11];
      byte[] byteArray0 = new byte[27];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-32);
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)29, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[11];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)6;
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, 1, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize((long) (byte) (-30));
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[48];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-11);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)86;
      byteArray1[5] = (byte)63;
      byteArray1[6] = (byte) (-11);
      byteArray1[7] = (byte)86;
      byteArray1[8] = (byte)86;
      int int0 = IOUtils.decodeUTF8(byteArray1, 6, 2, charArray0);
      assertEquals((-1), int0);
      
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      int int1 = IOUtils.stringSize((long) (byte) (-11));
      assertEquals(1, int1);
  }
}
