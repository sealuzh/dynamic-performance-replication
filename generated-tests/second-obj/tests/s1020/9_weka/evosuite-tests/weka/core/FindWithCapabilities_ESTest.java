/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:25:12 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.CheckOptionHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.Range;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-not-nominal-class";
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      stringArray0[1] = "#anU;/b&^f3j";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("numeric-atts");
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      findWithCapabilities0.getOptions();
      assertEquals("numeric-atts", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "yqt^E<|*Q";
      findWithCapabilities0.m_Superclass = "yqt^E<|*Q";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "yqt^E<|*Q";
      stringArray0[1] = "yqt^E<|*Q";
      stringArray0[2] = "yqt^E<|*Q";
      stringArray0[3] = "- allowed: ";
      findWithCapabilities0.getRevision();
      stringArray0[4] = "-nominal-atts";
      stringArray0[5] = "yqt^E<|*Q";
      stringArray0[6] = "yqt^E<|*Q";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      capabilities0.enableAllClassDependencies();
      capabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      capabilities0.or(capabilities1);
      SingleIndex singleIndex0 = new SingleIndex("Dyc[%_zX(iU/Fz '{6b");
      capabilities0.getOtherCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("s");
      findWithCapabilities0.getNotCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-1";
      stringArray0[1] = "-c";
      stringArray0[2] = "R. Quinlan";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-unary-atts";
      stringArray0[1] = "wE";
      stringArray0[2] = "o&";
      stringArray0[3] = "";
      stringArray0[4] = "@end";
      stringArray0[5] = "R. Quinlan";
      stringArray0[6] = "DoNotLoadIfFileNotPresent";
      stringArray0[7] = "";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(1L);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      String[] stringArray0 = new String[5];
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      hashSet0.add(capabilities_Capability1);
      capabilities1.toString();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      hashSet0.add(capabilities_Capability2);
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      LinkedList<CheckOptionHandler> linkedList0 = new LinkedList<CheckOptionHandler>();
      Attribute attribute0 = new Attribute("8034", (List<String>) null, (-1807));
      findWithCapabilities0.setClassIndex("8034");
      capabilities1.getAttributeCapabilities();
      Capabilities capabilities2 = findWithCapabilities0.m_NotCapabilities.getClassCapabilities();
      findWithCapabilities0.setCapabilities(capabilities2);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i6&B#-oT\"jsZ{");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Misses = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getOptions();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 2740;
      intArray0[2] = 2740;
      intArray0[3] = 2740;
      intArray0[4] = 2740;
      intArray0[5] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.2, intArray0, (-507));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Instances instances0 = binarySparseInstance0.m_Dataset;
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Capabilities.enableAllAttributes();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "nT)");
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities1.disable(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities1);
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.setFilename("\tDoesn't need a class.");
      findWithCapabilities0.getOptions();
      assertEquals("\tDoesn't need a class.", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      Locale.getISOCountries();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.toSource(".z$m");
      capabilities0.disableDependency(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String string0 = findWithCapabilities0.m_Superclass;
      long long0 = 1290L;
      System.setCurrentTimeMillis(1290L);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      capabilities1.disableAllClassDependencies();
      findWithCapabilities0.setFilename("RIL~D0$DO)\"Qj");
      String string0 = Capabilities.PROPERTIES_FILE;
      System.setCurrentTimeMillis(1290L);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-not-no-class";
      stringArray0[1] = "&";
      stringArray0[2] = "-N";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      capabilities0.getAttributeCapabilities();
      // Undeclared exception!
      try { 
        capabilities0.test((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "I+8k]asCa";
      stringArray0[1] = "8W5";
      stringArray0[2] = "-generic";
      stringArray0[3] = "2[soIDDd|/jS<H";
      stringArray0[4] = "\tGenerates multi-instance data.";
      stringArray0[5] = "-nominal-class";
      stringArray0[6] = "\nSearching for the following Capabilities:";
      stringArray0[7] = "not-no-class";
      stringArray0[8] = "/index.html";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*m\"!+vBB5^6ng";
      stringArray0[1] = "RwXDS";
      stringArray0[2] = "$s8}1}-mi";
      stringArray0[3] = "-binary-class";
      stringArray0[4] = "` %6;At]'FYU";
      stringArray0[5] = "All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.";
      stringArray0[6] = "Y;1S\"#+H";
      stringArray0[7] = "generic";
      stringArray0[8] = "7[xG+/`+MeSD-[;@Du";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      capabilities0.enableAllClassDependencies();
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      SingleIndex singleIndex0 = new SingleIndex("weka/core/Capabilities.props");
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.getOtherCapabilities();
      TestInstances.forCapabilities(capabilities1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      try { 
        testInstances0.generateAttribute((-2), (-2), "Dyc[%_zX(iU/Fz '{6b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute type '-2' unknown!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = ";C";
      stringArray0[2] = "Iv6?tOR=cD'";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.disableDependency(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-105);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      findWithCapabilities0.find();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Vector<Object> vector0 = new Vector<Object>();
      boolean boolean0 = capabilities1.m_MinimumNumberInstancesTest;
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      Capabilities capabilities3 = findWithCapabilities0.getNotCapabilities();
      assertNotSame(capabilities3, capabilities1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}Sv");
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("'L9?=>E+vhQgSW2:", "'L9?=>E+vhQgSW2:", 1868);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "#N|w{,\u0003|!EMD";
      stringArray0[1] = "-date-atts";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      HashSet<Capabilities.Capability> hashSet0 = new HashSet<Capabilities.Capability>();
      capabilities0.m_Capabilities = hashSet0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      hashSet0.add(capabilities_Capability1);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      capabilities0.disableDependency(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.find();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getNotCapabilities();
      SingleIndex.indexToString(372);
      findWithCapabilities0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      singleIndex0.toString();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      String string0 = OptionHandlerJavadoc.OPTIONS_STARTTAG;
      findWithCapabilities0.setClassIndex("No index set");
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Random.setNextRandom(350);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.generate();
      capabilities0.capabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      findWithCapabilities1.getRevision();
      findWithCapabilities2.getOptions();
      findWithCapabilities0.setClassIndex(".bsi");
      findWithCapabilities1.setHandler(findWithCapabilities2);
      assertFalse(findWithCapabilities2.equals((Object)findWithCapabilities0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      capabilities0.disableDependency(capabilities_Capability2);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.BINARY_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.handles(capabilities_Capability4);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      capabilities0.disableDependency(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      Capabilities capabilities2 = new Capabilities((CapabilitiesHandler) null);
      capabilities1.disableDependency(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      boolean boolean1 = ClassCache.VERBOSE;
      System.setCurrentTimeMillis((-1));
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.handles(capabilities_Capability3);
      Vector<String> vector0 = findWithCapabilities2.getMatches();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "J8P?";
      stringArray0[1] = "-not-date-class";
      stringArray0[2] = "<!-- globalinfo-end -->";
      stringArray0[3] = "not-no-class";
      stringArray0[4] = "Va8gV\"rxxv}1yLo";
      stringArray0[5] = "J#u}'X3Ls";
      stringArray0[6] = "second set of options is null!";
      stringArray0[7] = "-not-missing-class-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "Iv6?tOR=cD'";
      stringArray0[4] = "EtXR0EM}uU'mnR";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities2 = findWithCapabilities0.getCapabilities();
      capabilities2.toSource("]Z", 87);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      capabilities2.disableDependency(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      boolean boolean0 = ClassCache.VERBOSE;
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.handles(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities2.getMatches();
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      boolean boolean0 = findWithCapabilities0.m_Capabilities.m_Test;
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      singleIndex0.toString();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.setClassIndex("[");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      int[] intArray0 = new int[9];
      intArray0[0] = (-503);
      intArray0[1] = (-1441098588);
      intArray0[3] = 1;
      intArray0[4] = 69;
      intArray0[5] = 91;
      intArray0[6] = (-1120);
      intArray0[7] = (-1212);
      intArray0[3] = 1514;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, (-1728494896));
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "mb]P _B";
      stringArray0[1] = "\tRetrieves the package list from the GenericPropertiesCreator\n\tfor the given superclass. (overrides -packages <list>).";
      stringArray0[2] = "-not-string-atts";
      stringArray0[3] = "\tThe number of instances in the datasets (default 20).";
      stringArray0[4] = "<!-- technical-bibtex-end -->";
      stringArray0[5] = "8OHIv";
      stringArray0[6] = "GDOp#e<[;PW";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_ENDTAG;
      findWithCapabilities0.getOptions();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities2.enableNot(capabilities_Capability0);
      assertFalse(findWithCapabilities2.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.listOptions();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getRevision();
      String string0 = OptionHandlerJavadoc.OPTIONS_STARTTAG;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.enableAll();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[9];
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      stringArray0[0] = "-misses";
      stringArray0[1] = "8034";
      stringArray0[2] = "-0";
      stringArray0[3] = ").";
      stringArray0[4] = "string-class";
      stringArray0[5] = "-missing-att-values";
      stringArray0[6] = "7)Of";
      stringArray0[7] = ",3O";
      stringArray0[8] = "XW}-w/";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      String[] stringArray1 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[22];
      stringArray0[0] = "<!-- technical-bibtex-start -->";
      stringArray0[1] = "8&$!3";
      stringArray0[2] = "tM";
      stringArray0[3] = "t9Fk=nF ytPg{3]c1j";
      stringArray0[5] = "E'^4z$pjG<:k7&Ps>C";
      stringArray0[6] = "integer";
      stringArray0[7] = "Q\"s^)>Co/";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.setClassIndex("-1");
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.find();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      singleIndex0.toString();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.find();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      singleIndex0.toString();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Locale.getISOCountries();
      capabilities0.createMessage("No index set");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.disable(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.toString();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enableNot(capabilities_Capability1);
      Locale.getISOCountries();
      findWithCapabilities0.m_Capabilities.createMessage("e}bvb>^v1S%dm[S");
      String[] stringArray0 = findWithCapabilities1.getOptions();
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-not-numeric-atts";
      stringArray0[1] = "";
      stringArray0[2] = "    return ";
      stringArray0[3] = "6c";
      stringArray0[4] = "U\"'^Mxl+v-vO1g6aPS";
      stringArray0[5] = "No index set";
      stringArray0[6] = "nCz<[q: XU";
      stringArray0[7] = "-binary-class";
      stringArray0[8] = "2[soIDDd|/jS<H";
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = new Vector<String>();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.find();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances1.m_Handler;
      Random.setNextRandom((-1));
      findWithCapabilities0.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "3Q]5J,";
      findWithCapabilities0.setFilename("Ur6m");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      findWithCapabilities0.m_Filename = "Ur6m";
      findWithCapabilities0.getMatches();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";C";
      stringArray0[1] = "&|Y&_Q7f*EAdb";
      stringArray0[2] = "last";
      stringArray0[3] = "6C^1rk~?j`+Q%?V*P%!";
      stringArray0[4] = "C4.5: Programs for Machine Learning";
      stringArray0[5] = "-relational-atts";
      stringArray0[6] = "first set of options is null!";
      stringArray0[7] = "2001-04-04 14:13:55";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      try { 
        Capabilities.forInstances((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String string0 = Capabilities.PROPERTIES_FILE;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      findWithCapabilities0.find();
      String string1 = findWithCapabilities2.getRevision();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.m_NotCapabilities;
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      FindWithCapabilities.main(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka/core/Capabilities.props", arrayList0, 7);
      Capabilities capabilities2 = Capabilities.forInstances(instances0, false);
      findWithCapabilities2.setClassIndex("-1");
      capabilities2.getAttributeCapabilities();
      findWithCapabilities2.setCapabilities(capabilities2);
      findWithCapabilities0.getOptions();
      String string2 = findWithCapabilities2.getClassIndex();
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Range range0 = new Range("r=7|*7#hzu]b");
      Vector vector0 = range0.m_RangeStrings;
      findWithCapabilities1.m_Packages = vector0;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_ENDTAG;
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.listOptions();
      findWithCapabilities3.find();
      findWithCapabilities3.getOptions();
      findWithCapabilities0.m_Superclass = "<!-- technical-plaintext-end -->";
      findWithCapabilities3.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "?D/y[I}e}6_H$";
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SQ~rvyf2";
      stringArray0[1] = "-binary-atts";
      stringArray0[2] = "OnX:kN+#I1_hPp{]V";
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("string-atts");
      String[] stringArray1 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities2.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      boolean boolean0 = ClassCache.VERBOSE;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities1 = new Capabilities(findWithCapabilities1);
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities1.disableDependency(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities2.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.handles(capabilities_Capability1);
      findWithCapabilities1.getMatches();
      Vector<String> vector0 = findWithCapabilities3.getMisses();
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String string0 = Capabilities.PROPERTIES_FILE;
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.listOptions();
      findWithCapabilities3.getOptions();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities3.getRevision();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      String[] stringArray2 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities.main(stringArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.getRevision();
      String[] stringArray3 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities.main(stringArray3);
      findWithCapabilities0.setFilename("Gv");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("KRN.K$5'tY");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities3.getMisses();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities5.enable(capabilities_Capability1);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "?D/y[I}e}6_H$";
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SQ~rvyf2";
      stringArray0[1] = "-binary-atts";
      stringArray0[2] = "OnX:kN+#I1_hPp{]V";
      stringArray0[3] = "not-numeric-atts";
      findWithCapabilities1.enable(capabilities_Capability0);
      stringArray0[4] = "cBK+}gFn1O#F-Y[q>ne";
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "50B_c";
      stringArray0[1] = "Yx0";
      findWithCapabilities0.setFilename("#D~DXS=l21MZM!s!");
      stringArray0[2] = "m(:|vrX7\"/Up";
      stringArray0[3] = "D";
      stringArray0[4] = "-not-missing-att-values";
      stringArray0[5] = "not-nominal-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities2.enableNot(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_ENDTAG;
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities4.find();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities2.getOptions();
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities.main(stringArray0);
      boolean boolean0 = ClassCache.VERBOSE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        vector0.setSize((-117));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -117
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities0.listOptions();
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_ENDTAG;
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities2.m_Misses;
      Locale.getISOCountries();
      findWithCapabilities0.m_Superclass = "<!-- technical-plaintext-end -->";
      findWithCapabilities2.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.getOptions();
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      Vector<String> vector1 = findWithCapabilities1.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("");
      findWithCapabilities5.setFilename("No capabilities set!");
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities5.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities6.m_Matches = vector1;
      findWithCapabilities4.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities7.listOptions();
      findWithCapabilities6.m_Matches = vector0;
      findWithCapabilities4.disableNot(capabilities_Capability0);
      findWithCapabilities6.getMisses();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities2.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities6.disableNot(capabilities_Capability2);
      assertFalse(capabilities_Capability2.equals((Object)capabilities_Capability0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-missing-class-values";
      stringArray0[1] = "(VWW3D";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.getHandler();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.toSource("weka/core/Capabilities.props", 4442);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      capabilities0.disableDependency(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities4.find();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      boolean boolean0 = capabilities1.m_MinimumNumberInstancesTest;
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities2.handles(capabilities_Capability3);
      Vector<String> vector1 = findWithCapabilities5.getMatches();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities0.listOptions();
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_ENDTAG;
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      Vector<String> vector0 = findWithCapabilities2.m_Misses;
      findWithCapabilities2.getOptions();
      findWithCapabilities0.m_Superclass = "<!-- technical-plaintext-end -->";
      findWithCapabilities2.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      String[] stringArray2 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities1.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.m_Matches = vector0;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities2.setFilename("");
      findWithCapabilities5.setFilename("8N`=v:_Jtzng,fZ$1/r");
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities6.find();
      findWithCapabilities4.find();
      findWithCapabilities5.setFilename("8N`=v:_Jtzng,fZ$1/r");
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities5.getHandler();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      String[] stringArray2 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities.main(stringArray2);
      boolean boolean0 = ClassCache.VERBOSE;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("qML>DDhRk_qHdp-J");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray3 = findWithCapabilities2.getOptions();
      assertFalse(stringArray3.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_ENDTAG;
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      TestInstances.listToArray("<!-- technical-plaintext-end -->");
      findWithCapabilities0.m_Superclass = "<!-- technical-plaintext-end -->";
      findWithCapabilities1.getRevision();
      findWithCapabilities0.getOptions();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      String[] stringArray2 = findWithCapabilities1.getOptions();
      String[] stringArray3 = TestInstances.DEFAULT_WORDS;
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray2);
      boolean boolean0 = ClassCache.VERBOSE;
      boolean boolean1 = ClassCache.VERBOSE;
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.find();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }
}
