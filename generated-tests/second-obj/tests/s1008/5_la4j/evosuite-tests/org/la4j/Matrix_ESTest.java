/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:58:37 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-1), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 0;
      ColumnMajorSparseMatrix.diagonal(0, 0);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("!T,Wf*Ri+rN(A5D*~e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(352, 352, 2994);
      cCSMatrix0.getColumn(4);
      // Undeclared exception!
      try { 
        cCSMatrix0.foldRow(353, (VectorAccumulator) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '353' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2926;
      doubleArray0[1] = (double) 2926;
      doubleArray0[2] = (double) 12;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(12, 2926, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2926
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.diagonalProduct();
      cCSMatrix0.swapRows((-2308), 0);
      Locale locale0 = Locale.KOREAN;
      locale0.getDisplayVariant(locale0);
      NumberFormat.getNumberInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(7);
      Matrix matrix0 = Matrix.fromCSV("      ");
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 7, (-137), 1, (-3986), 324, 324);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 1, -3986
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      int int0 = 1662;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(3130, 1662);
      // Undeclared exception!
      denseMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(797, 1238);
      int int0 = 1673;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = (-827);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft((-827), 2695);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-827][0..2695].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 0.0;
      int int0 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      NumberFormat.getIntegerInstance();
      int int1 = (-3206);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.rotate();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = 0;
      int int1 = 2;
      matrix0.removeRow(2);
      // Undeclared exception!
      try { 
        matrix0.insertRow(1193, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-285);
      // Undeclared exception!
      try { 
        Matrix.zero((-285), (-285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -285x-285
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-189.911589424415));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 392;
      doubleArray0[2] = (-189.911589424415);
      doubleArray0[3] = (double) 392;
      doubleArray0[4] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(392, 0, doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfColumns(0);
      assertTrue(matrix0.equals((Object)columnMajorSparseMatrix0));
      
      Vector vector0 = denseMatrix0.getColumn(0);
      vector0.euclideanNorm();
      columnMajorSparseMatrix0.setRow(392, vector0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      matrix1.toRowVector();
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(392, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MatrixOperation<SparseMatrix> matrixOperation0 = (MatrixOperation<SparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.DenseMatrix.class));
      basic2DMatrix0.apply(matrixOperation0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateRow(2337, vectorFunction0);
      basic2DMatrix0.min();
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.rowMajorIterator();
      RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      Locale locale0 = Locale.KOREA;
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many percent/per mille characters in pattern \"%%MatrixMarket matrix coordinate real general row-major
         // 0 0 0
         // \"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2734.73591136;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-2065.3672);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 375;
      doubleArray0[7] = (double) 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 375, doubleArray0);
      int int1 = 0;
      sparseMatrix0.iteratorOfRow(0);
      Matrix matrix0 = sparseMatrix0.blankOfShape(0, 0);
      sparseMatrix0.toString();
      int int2 = 12;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformColumn(12, vectorFunction0);
      matrix0.trace();
      matrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(375, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [375..0][0..375].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        matrix1.sliceTopLeft((-1880), (-1880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1880][0..-1880].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 212.59382199;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2174.906247;
      doubleArray1[2] = 212.59382199;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      rowMajorSparseMatrix0.rotate();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.is(advancedMatrixPredicate0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 8, 0);
      cCSMatrix0.removeFirstColumn();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.isZeroAt(487, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 487
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(0, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 0);
      denseVector0.product();
      Matrix matrix0 = denseVector0.toRowMatrix();
      matrix0.toCSV();
      String string0 = "org.la4j.decomposition.RawLUDecompositor";
      // Undeclared exception!
      try { 
        Matrix.fromCSV("org.la4j.decomposition.RawLUDecompositor");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.toCSV();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      NumberFormat.getIntegerInstance();
      matrix0.multiply((Vector) sparseVector0);
      matrix0.columns();
      matrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      int int1 = 4816;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 4816);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      // Undeclared exception!
      try { 
        cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.removeRow(0);
      matrix1.columns();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      // Undeclared exception!
      try { 
        matrix1.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = null;
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      // Undeclared exception!
      try { 
        denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = 577.15;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(359);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.updateColumn((-708), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(989, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 374;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(374, 2295.330417151562);
      // Undeclared exception!
      try { 
        denseMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      NumberFormat.getIntegerInstance();
      int[] intArray0 = new int[1];
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(37, (double) (-3222), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -4410918.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 1.0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      MockRandom mockRandom0 = new MockRandom();
      basic2DMatrix0.minInRow((-1917));
      columnMajorSparseMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 577.15;
      doubleArray2[2] = 212.59382199;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, 5, 0, 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 5, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3108, 3108);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2102, vectorFunction0);
      cRSMatrix0.setColumn((-1438), (double) 3108);
      Matrix matrix0 = cCSMatrix0.rotate();
      // Undeclared exception!
      try { 
        matrix0.foldRow((-1346), (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1346
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      Random random0 = null;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      columnMajorSparseMatrix0.diagonalProduct();
      Locale locale0 = Locale.CHINA;
      NumberFormat.getInstance(locale0);
      Locale locale1 = Locale.KOREAN;
      NumberFormat.getNumberInstance(locale1);
      columnMajorSparseMatrix0.setColumn(0, (-397.559595315));
      int int1 = (-1346);
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MatrixFunction matrixFunction0 = null;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      columnMajorSparseMatrix0.diagonalProduct();
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      Locale locale1 = Locale.KOREAN;
      columnMajorSparseMatrix0.mkString(numberFormat0, "", "");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.updateRow(0, vectorFunction0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1366.93523567848;
      doubleArray0[7] = 1.0;
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      Matrix matrix0 = Matrix.from1DArray(1, 1, doubleArray0);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      matrix1.removeFirstColumn();
      matrix0.toSparseMatrix();
      matrix1.divide(0.0);
      // Undeclared exception!
      try { 
        matrix0.swapColumns(347, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 347
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.update((MatrixFunction) null);
      basic2DMatrix0.min();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      int int0 = (-638);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply((DenseMatrix) basic2DMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-638), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.removeRow(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.insertRow(0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 212.59382199;
      doubleArray0[0] = doubleArray1;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      basic2DMatrix0.transpose();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.rank();
      cRSMatrix0.toMatrixMarket();
      Double double0 = new Double(0);
      cRSMatrix0.equals((Object) rowMajorSparseMatrix0);
      cRSMatrix0.toString();
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.update((MatrixFunction) null);
      denseMatrix0.min();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      DenseMatrix denseMatrix1 = rowMajorSparseMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix1, denseMatrix1, rowMajorSparseMatrix0, denseMatrix0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.fold(matrixAccumulator0);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(10);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldColumns(vectorAccumulator0);
      cCSMatrix0.maxInRow((-2048));
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(9, (-145.8025321819905));
      cCSMatrix1.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.update((MatrixFunction) null);
      denseMatrix0.min();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      DenseMatrix denseMatrix1 = rowMajorSparseMatrix0.toDenseMatrix();
      denseMatrix1.maxInRow(0);
      denseMatrix0.toString();
      SparseMatrix.identity(7);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(312, (-446.0182022));
      columnMajorSparseMatrix0.maxInRow(37);
      columnMajorSparseMatrix0.toDenseMatrix();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 746;
      Matrix matrix0 = Matrix.identity(746);
      int int1 = 6;
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int2 = (-1200);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(746);
      linkedList1.add(integer0);
      Integer integer1 = new Integer(288);
      linkedList1.add(integer1);
      linkedList0.removeAll(linkedList1);
      Integer integer2 = new Integer((-1200));
      linkedList0.add(integer2);
      Vector.zero(6);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      SparseVector.fromCollection(linkedList0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = sparseVector0.to(vectorFactory0);
      Matrix matrix1 = denseMatrix0.shuffle();
      denseMatrix0.toString();
      matrix1.get(int1, int2);
      matrix0.setRow(int1, vector0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      denseMatrix0.is(matrixPredicate0);
      Matrix.identity(int1);
      matrix0.maxInColumn(int0);
      int int3 = 3028;
      int int4 = (-3607);
      MockRandom mockRandom0 = new MockRandom(int1);
      Matrix matrix2 = Matrix.random(int3, int4, mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix2.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.removeRow(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      matrix1.toCSV(numberFormat0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformColumn(0, vectorFunction0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix1.is(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-195.7416);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = 0;
      matrix0.removeRow(0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = (-1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      basic2DMatrix0.non(matrixPredicate0);
      int int1 = 3434;
      // Undeclared exception!
      try { 
        Matrix.zero((-1), 3434);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      int int0 = (-2946);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.toMatrixMarket();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      double double0 = (-4171.6297);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZeroInColumn(4816, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      int int1 = 402;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(402, 2994.560435);
      // Undeclared exception!
      cCSMatrix0.power(402);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.update((MatrixFunction) null);
      denseMatrix0.min();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      DenseMatrix denseMatrix1 = rowMajorSparseMatrix0.toDenseMatrix();
      denseMatrix1.maxInRow(0);
      denseMatrix0.toString();
      DenseMatrix.identity(7);
      denseMatrix0.getColumn(7);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(219, 10, 222);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInRow((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2142.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.964;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) null, (-4047), (-4047));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -4047x-4047
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      cRSMatrix0.toMatrixMarket();
      RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      cRSMatrix0.equals((Object) denseMatrix0);
      cRSMatrix0.toString();
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft(48, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 23.564179017402147;
      doubleArray0[1] = (-195.741633);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix1.infinityNorm();
      // Undeclared exception!
      matrix1.copyOfShape(2147483614, 931);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 8;
      int int1 = 5;
      Matrix matrix0 = Matrix.constant(8, 5, 5);
      // Undeclared exception!
      try { 
        matrix0.setRow(8, (double) 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Matrix.unit(17, 17);
      MockRandom mockRandom0 = new MockRandom((-501));
      // Undeclared exception!
      try { 
        Matrix.random((-501), 3411, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      int int1 = 5;
      SparseMatrix.diagonal(5, 0.0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.determinant();
      int int2 = 1;
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix.random(0, 0, mockRandom0);
      int int3 = 2;
      int int4 = (-144);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, columnMajorSparseMatrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      NumberFormat.getIntegerInstance();
      int int0 = (-3222);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        Matrix.identity((-3222));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.toMatrixMarket();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      cRSMatrix0.equals((Object) matrix0);
      matrix0.toString();
      matrix0.sliceTopLeft(48, 0);
      Matrix matrix1 = matrix0.subtract((-1.0));
      matrix0.insert(matrix1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Random random0 = null;
      int int0 = 17;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(17, 17, 17);
      columnMajorSparseMatrix0.diagonalProduct();
      Locale locale0 = Locale.PRC;
      NumberFormat.getInstance(locale0);
      Locale locale1 = Locale.KOREAN;
      Locale locale2 = Locale.FRENCH;
      NumberFormat.getNumberInstance(locale2);
      String string0 = null;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn(17, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 375;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2734.73591136;
      doubleArray0[1] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(375, 0.0);
      int int1 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      String string0 = "AX4.ivo";
      cCSMatrix0.mkString((NumberFormat) choiceFormat0, (String) null, "AX4.ivo");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.updateRow(0, vectorFunction0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      denseMatrix0.toString();
      cRSMatrix0.toString();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ((Basic2DMatrix) denseMatrix0).setAll(0);
      Integer integer0 = new Integer((-2278));
      linkedList0.addFirst(integer0);
      SparseVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.divide(0.0);
      matrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        DenseMatrix.identity((-971));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2734.73591136;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-2065.3672);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 375;
      doubleArray0[7] = (double) 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 375, doubleArray0);
      sparseMatrix0.iteratorOfRow(0);
      DenseMatrix denseMatrix0 = sparseMatrix0.toDenseMatrix();
      sparseMatrix0.toMatrixMarket();
      Double double0 = new Double((-1939.818566));
      denseMatrix0.toString();
      sparseMatrix0.equals((Object) denseMatrix0);
      sparseMatrix0.toString();
      Matrix matrix0 = sparseMatrix0.sliceTopLeft(0, 0);
      matrix0.minInColumn((-5510));
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.is(advancedMatrixPredicate0);
      sparseMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        Matrix.zero((-2032), 1477);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      denseMatrix0.update((MatrixFunction) null);
      denseMatrix0.min();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.toDiagonalMatrix();
      int int0 = (-1880);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 577.15;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 0);
      rowMajorSparseMatrix0.rotate();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) rowMajorSparseMatrix0, 1, 0, 4326, 1, 331, 325);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 4326, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      denseMatrix0.update((MatrixFunction) null);
      denseMatrix0.min();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, Double.POSITIVE_INFINITY);
      int int0 = 17;
      // Undeclared exception!
      try { 
        cCSMatrix0.multiply((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 2 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.multiplyByItsTranspose();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0.0);
      cCSMatrix0.power(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.multiply(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 3.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 0.0);
      cCSMatrix0.power(9);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      MockRandom mockRandom0 = new MockRandom(12);
      // Undeclared exception!
      try { 
        DenseVector.random((-2309), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      rowMajorSparseMatrix0.toMatrixMarket();
      Double double0 = new Double(0.0);
      denseMatrix0.toString();
      Integer integer0 = new Integer(1000);
      rowMajorSparseMatrix0.equals((Object) integer0);
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2174.906247;
      doubleArray2[2] = 212.59382199;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[3] = (-1.0);
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      rowMajorSparseMatrix0.rotate();
      rowMajorSparseMatrix0.rows();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("x");
      DecimalFormat decimalFormat0 = new DecimalFormat("pW?6QbL");
      rowMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.update((MatrixFunction) null);
      basic2DMatrix0.min();
      Matrix matrix0 = basic2DMatrix0.transpose();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.rank();
      cRSMatrix0.toMatrixMarket();
      Double double0 = new Double(0);
      rowMajorSparseMatrix0.equals((Object) cRSMatrix0);
      cRSMatrix0.toString();
      Matrix matrix1 = cRSMatrix0.sliceTopLeft(0, 0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.is(advancedMatrixPredicate0);
      matrix1.insert(matrix0);
      rowMajorSparseMatrix0.transform((MatrixFunction) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.removeRow(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      matrix1.toCSV(numberFormat0);
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      matrix0.apply(matrixOperation0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-1101.0), 0.75).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformColumn(0, vectorFunction0);
      matrix1.transform(matrixFunction0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2147483647, 2147483647
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 212.59382199;
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 212.59382199;
      doubleArray2[1] = 577.15;
      doubleArray2[2] = 212.59382199;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, 0, 37, (-1635), 0, 37, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1635, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.multiplyByItsTranspose();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0.0);
      cCSMatrix0.power(0);
      Matrix matrix1 = matrix0.removeRow(0);
      matrix1.product();
      int int0 = 12;
      int int1 = 443;
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket(" in a ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 359;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(359, 0);
      rowMajorSparseMatrix0.rotate();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      columnMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 212.59382199;
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 212.59382199;
      doubleArray2[1] = 577.15;
      doubleArray2[2] = 212.59382199;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, 30, 3, 0, 1755, 2172, (-666));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2172x-666
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.removeRow(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.transformColumn(1365, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1365' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2734.73591136;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-2065.3672);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 375;
      doubleArray0[7] = (double) 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 375, doubleArray0);
      sparseMatrix0.iteratorOfRow(0);
      CRSMatrix.identity(0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1605, 0.0);
      int int0 = 2;
      int int1 = (-2336);
      // Undeclared exception!
      try { 
        cCSMatrix0.power((-2336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2336.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = 577.15;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 3x4.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = 577.15;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      int int1 = 0;
      Matrix matrix1 = matrix0.transpose();
      columnMajorSparseMatrix0.equals(matrix1, 0.0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, 0, (-1635), 1, 0, 10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 1, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      double[][] doubleArray0 = new double[1][8];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix.zero(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.determinant();
      int int0 = 169;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeRow(169);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = 577.15;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.transpose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.transformRow(0, vectorFunction0);
      int int1 = 20;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.sliceBottomRight(20, 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [20..3][20..3].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2174.906247;
      doubleArray2[2] = 212.59382199;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      columnMajorSparseMatrix0.determinant();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, 5, 0, 1, 0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 5, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 212.59382199;
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 212.59382199;
      doubleArray2[1] = 577.15;
      doubleArray2[2] = 212.59382199;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 2174.906247;
      doubleArray3[2] = 212.59382199;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 212.59382199;
      doubleArray4[3] = (-1.0);
      doubleArray0[3] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      columnMajorSparseMatrix0.toColumnVector();
      rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 0, 573, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 573
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      int int0 = 4816;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4816);
      int int1 = (-2926);
      basic2DMatrix0.copyOfRows(9);
      // Undeclared exception!
      try { 
        basic2DMatrix0.maxInRow((-2926));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2926
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.toString();
      matrix1.infinityNorm();
      // Undeclared exception!
      try { 
        matrix1.copyOfShape(Integer.MAX_VALUE, 916);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 37;
      MockRandom mockRandom0 = new MockRandom(37);
      Matrix matrix0 = Matrix.randomSymmetric(37, mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(37, 37);
      // Undeclared exception!
      try { 
        cCSMatrix0.ensureIndexesAreInBounds(37, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = 0;
      matrix0.removeRow(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      NumberFormat.getIntegerInstance();
      Matrix matrix1 = matrix0.sliceBottomRight(0, 0);
      matrix1.toColumnVector();
      int int1 = (-3206);
      // Undeclared exception!
      try { 
        SparseMatrix.identity((-3206));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 212.59382199;
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 212.59382199;
      doubleArray2[1] = 577.15;
      doubleArray2[2] = 212.59382199;
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      rowMajorSparseMatrix0.rotate();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      SparseVector sparseVector0 = SparseVector.fromCSV("     ");
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow(1, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 3.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 1.0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      double[][] doubleArray1 = new double[1][8];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      RowMajorSparseMatrix.zero(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 1.0, (Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix.randomSymmetric(17, 7.771561172376096E-14, (Random) mockRandom1);
      rowMajorSparseMatrix0.trace();
      columnMajorSparseMatrix0.toMatrixMarket();
      Matrix.from1DArray(37, 37, doubleArray0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.is(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 8 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.min();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = denseMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.insert((Matrix) denseMatrix0, 0, 0);
      denseMatrix0.toString();
      DenseMatrix.identity(7);
      denseMatrix0.getColumn(7);
      rowMajorSparseMatrix0.mkString("t", "");
      // Undeclared exception!
      try { 
        Matrix.fromCSV("t");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2734.73591136;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[0] = (-2065.3672);
      doubleArray0[0] = (double) 375;
      doubleArray0[6] = (double) 375;
      doubleArray0[7] = (double) 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 375, doubleArray0);
      sparseMatrix0.iteratorOfRow(0);
      Matrix matrix0 = sparseMatrix0.blankOfShape(0, 0);
      sparseMatrix0.toString();
      matrix0.copyOfRows(4);
      // Undeclared exception!
      try { 
        sparseMatrix0.subtract(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x375 does not equal to 0x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      NumberFormat.getIntegerInstance();
      double[][] doubleArray1 = new double[1][5];
      ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      int int0 = 0;
      int int1 = (-1708);
      int int2 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn((-1708), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1708' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 375;
      double[] doubleArray0 = new double[8];
      double double0 = 2734.73591136;
      doubleArray0[0] = 2734.73591136;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-2065.3672);
      doubleArray0[5] = (double) 375;
      doubleArray0[6] = (double) 375;
      doubleArray0[7] = (double) 0;
      SparseMatrix.from1DArray(0, 375, doubleArray0);
      Locale locale0 = new Locale("?ywN=LH9HN", "clV ]Z?%{<#f6*B4W", "?ywN=LH9HN");
      Locale locale1 = Locale.forLanguageTag("HdlRicb&\"#V*QL");
      locale0.getDisplayVariant(locale1);
      NumberFormat.getNumberInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(7);
      CCSMatrix cCSMatrix0 = new CCSMatrix(45, 17);
      cCSMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        cCSMatrix0.trace();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2174.906247;
      doubleArray2[2] = 212.59382199;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      columnMajorSparseMatrix0.determinant();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, (-8), 0, 1, 0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 1, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = 0;
      Matrix matrix1 = matrix0.removeRow(0);
      matrix1.columnMajorIterator();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("]|E?(8{;;jZv/O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      int int1 = 16;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      SparseMatrix.identity(12);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(357);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      sparseMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.removeRow(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      matrix1.toCSV((NumberFormat) decimalFormat0);
      CRSMatrix.identity(0);
      matrix0.sliceBottomRight(0, 0);
      matrix1.product();
      SparseMatrix.fromCSV("0, -195.742, 0\n0,        0, 1\n");
      // Undeclared exception!
      try { 
        Matrix.diagonal((-324), (-324));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.update((MatrixFunction) null);
      basic2DMatrix0.min();
      Matrix matrix0 = basic2DMatrix0.transpose();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.toMatrixMarket();
      rowMajorSparseMatrix0.equals((Object) cRSMatrix0);
      cRSMatrix0.toString();
      cRSMatrix0.blank();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.is(advancedMatrixPredicate0);
      rowMajorSparseMatrix0.insert(matrix0);
      Matrix matrix1 = basic2DMatrix0.blank();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      matrix1.toCSV(numberFormat0);
      matrix1.setRow(32, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(37);
      Matrix matrix0 = Matrix.randomSymmetric(37, mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      double[][] doubleArray0 = new double[0][0];
      int int0 = 49;
      RowMajorSparseMatrix.zero(49, 48);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(37, 37, 37);
      cCSMatrix0.determinant();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int1 = (-4550);
      Basic2DMatrix.random(int1, int0, mockRandom0);
      matrix0.blank();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateAt(48, 345, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      NumberFormat.getIntegerInstance();
      int int0 = (-3206);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.rank();
      cRSMatrix0.toMatrixMarket();
      Double double0 = new Double(0);
      cRSMatrix0.equals((Object) rowMajorSparseMatrix0);
      cRSMatrix0.toString();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix1.sliceTopLeft(0, (-2290));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][0..-2290].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          double[] doubleArray0 = new double[3];
          double[][] doubleArray1 = new double[5][5];
          ColumnMajorSparseMatrix.from2DArray(doubleArray1);
          RowMajorSparseMatrix.zero(371, 371);
          int int0 = 337;
          Matrix.unit(337, 0);
          CRSMatrix cRSMatrix0 = new CRSMatrix(337, 2137);
          cRSMatrix0.rotate();
          int int1 = 1;
          CRSMatrix cRSMatrix1 = new CRSMatrix(301, 1);
          VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
          doReturn((double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
          cRSMatrix1.transformRow(1, vectorFunction0);
          LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
          // Undeclared exception!
          try { 
            cRSMatrix1.withSolver(linearAlgebra_SolverFactory0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Given coefficient matrix can not be used with this solver.
             //
             verifyException("org.la4j.linear.AbstractSolver", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          double[] doubleArray0 = new double[13];
          doubleArray0[2] = 0.0;
          int int0 = 0;
          NumberFormat.getIntegerInstance();
          SparseMatrix.identity(0);
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          RowMajorSparseMatrix.diagonal(0, (-417.3093));
          DenseMatrix denseMatrix0 = DenseMatrix.identity(219);
          denseMatrix0.blank();
          int int1 = 2350;
          // Undeclared exception!
          try { 
            CCSMatrix.zero(3, Integer.MAX_VALUE, 3);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[2] = 0.0;
      int int0 = 0;
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.shuffle();
      Matrix matrix1 = basic2DMatrix0.rotate();
      matrix0.copyOfRows(0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix1.non(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.getRow(29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.diagonalProduct();
      cCSMatrix0.swapRows(0, 0);
      Vector.constant(0, 1.0);
      SparseMatrix.identity(3259);
      RowMajorSparseMatrix.diagonal(358, 0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      Matrix matrix0 = denseMatrix0.blank();
      matrix0.toMatrixMarket();
      int int0 = 348;
      // Undeclared exception!
      try { 
        CCSMatrix.zero(362, (-149), 348);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 362x-149
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          double[] doubleArray0 = new double[3];
          doubleArray0[0] = 1.0;
          doubleArray0[1] = (-195.741633);
          doubleArray0[2] = 1.0;
          SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
          Matrix matrix0 = sparseVector0.toDiagonalMatrix();
          int int0 = 0;
          Matrix matrix1 = matrix0.removeRow(0);
          matrix0.rank();
          DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
          matrix0.toMatrixMarket();
          Double double0 = new Double(1.0);
          denseMatrix0.toString();
          matrix0.equals((Object) doubleArray0);
          RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n3 3 3\n1 1 1.000\n2 2 -195.742\n3 3 1.000\n");
          Locale locale0 = Locale.KOREA;
          ParsePosition parsePosition0 = new ParsePosition(0);
          // Undeclared exception!
          try { 
            CCSMatrix.block(denseMatrix0, denseMatrix0, matrix1, matrix1);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = 0;
      matrix0.removeRow(0);
      matrix0.rank();
      matrix0.toMatrixMarket();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix.randomSymmetric(0, (double) 2, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = 0;
      matrix0.removeRow(0);
      matrix0.rank();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 0);
      Matrix matrix1 = basic2DMatrix0.rotate();
      // Undeclared exception!
      try { 
        matrix1.insertRow(0, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.update((MatrixFunction) null);
      basic2DMatrix0.min();
      basic2DMatrix0.transpose();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.rank();
      cRSMatrix0.toMatrixMarket();
      Double double0 = new Double(0);
      rowMajorSparseMatrix0.equals((Object) cRSMatrix0);
      cRSMatrix0.toString();
      cRSMatrix0.sum();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(0);
      Matrix.random(0, 0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.update((MatrixFunction) null);
      basic2DMatrix0.min();
      basic2DMatrix0.transpose();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.rank();
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      cRSMatrix0.toMatrixMarket();
      Double double0 = new Double(0);
      rowMajorSparseMatrix0.sum();
      denseMatrix0.toString();
      rowMajorSparseMatrix0.equals((Object) cRSMatrix0);
      cRSMatrix0.toString();
      Matrix matrix0 = cRSMatrix0.sliceTopLeft(0, 0);
      matrix0.hadamardProduct(denseMatrix0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.is(advancedMatrixPredicate0);
      matrix0.insert((Matrix) denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[2] = 0.0;
      int int0 = 0;
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.shuffle();
      Matrix matrix1 = basic2DMatrix0.rotate();
      matrix0.copyOfRows(0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix1.non(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.getRow(29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[2] = 0.0;
      int int0 = 0;
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.shuffle();
      Matrix matrix0 = basic2DMatrix0.rotate();
      int int1 = 29;
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        matrix0.blankOfColumns((-168));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.update((MatrixFunction) null);
      basic2DMatrix0.min();
      basic2DMatrix0.transpose();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.rank();
      cRSMatrix0.toMatrixMarket();
      Double double0 = new Double(869.680000882492);
      cRSMatrix0.equals((Object) null);
      cRSMatrix0.toString();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(279, 3, 8);
      cRSMatrix1.sliceTopLeft(2532, 0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix2 = CRSMatrix.randomSymmetric(3, (double) 2532, (Random) mockRandom0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.is(advancedMatrixPredicate0);
      cRSMatrix1.insert((Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.removeRow(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      String string0 = matrix1.toCSV(numberFormat0);
      matrix0.insertRow(0, sparseVector0);
      Matrix matrix2 = matrix0.sliceBottomRight(0, 0);
      int int0 = (-3206);
      SparseMatrix.fromCSV(string0);
      int int1 = 355;
      Matrix.fromCSV((String) null);
      matrix0.blank();
      int int2 = (-1983627305);
      matrix2.updateAt(int1, int2, matrixFunction0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix2.updateColumn(int0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 212.59382199;
      doubleArray0[0] = doubleArray1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[2] = 212.59382199;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      CCSMatrix.zero(0, 0, 0);
      columnMajorSparseMatrix0.determinant();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.norm();
      rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 212.59382199;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2174.906247;
      doubleArray2[2] = 212.59382199;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      CCSMatrix.zero(0, 0, 0);
      columnMajorSparseMatrix0.determinant();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      Locale locale0 = new Locale(":JC}(JgX,W", ":JC}(JgX,W", ":JC}(JgX,W");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      decimalFormatSymbols0.setInternationalCurrencySymbol("Az*o'/><%/cBCeHh/u");
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      rowMajorSparseMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      rowMajorSparseMatrix0.is(advancedMatrixPredicate0);
      CCSMatrix.zero(0, 8, 0);
      Object object0 = new Object();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 2174.906247);
      columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        cRSMatrix0.isZeroAt(487, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 487
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = 0;
      matrix0.removeRow(0);
      int int1 = Double.BYTES;
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      Matrix matrix1 = denseMatrix0.rotate();
      matrix1.toBinary();
      denseMatrix0.manhattanNorm();
      matrix0.toMatrixMarket();
      matrix1.toDenseMatrix();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("%%MatrixMarket matrix coordinate real general row-major\n3 3 1\n3 3 1.000\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many percent/per mille characters in pattern \"%%MatrixMarket matrix coordinate real general row-major
         // 3 3 1
         // 3 3 1.000
         // \"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      int int0 = 3;
      int int1 = (-2584);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.maxInColumn(3);
      ooPlaceMatrixByItsTransposeMultiplication0.apply((DenseMatrix) basic2DMatrix0);
      MockRandom mockRandom0 = new MockRandom(9993L);
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        CRSMatrix.random(3, (-2584), (-966.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.update((MatrixFunction) null);
      basic2DMatrix0.min();
      basic2DMatrix0.transpose();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.rank();
      Double double0 = new Double(0);
      rowMajorSparseMatrix0.equals((Object) cRSMatrix0);
      cRSMatrix0.toString();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.sliceTopLeft(0, 0);
      cRSMatrix1.nonZeroRowMajorIterator();
      cRSMatrix1.blank();
      CRSMatrix.diagonal(0, 0.0);
      NumberFormat.getCurrencyInstance();
      basic2DMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 37;
      MockRandom mockRandom0 = new MockRandom(37);
      Matrix matrix0 = Matrix.randomSymmetric(37, mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int0 = 0;
      Matrix matrix1 = matrix0.removeRow(0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      matrix1.mkString("real", " in a ");
      basic2DMatrix0.min();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(0, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 2.4424906541753444E-13, (Random) null);
      cRSMatrix0.toMatrixMarket();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      double[][] doubleArray1 = new double[4][2];
      rowMajorSparseMatrix0.swapColumns((-2327), 0);
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
