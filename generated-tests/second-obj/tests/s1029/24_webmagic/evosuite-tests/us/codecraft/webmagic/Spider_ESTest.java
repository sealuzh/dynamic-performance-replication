/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:42:45 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Links can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider1 = spider0.pipeline(filePipeline0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setUUID("r)L|GMLpv8bZ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>(232, comparator0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7pMw}XA");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("7pMw}XA");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider0.scheduler(duplicateRemovedScheduler0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.addPipeline(collectorPipeline0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GN :TbO%8");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.addPipeline(consolePipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      Spider spider3 = spider2.setSpawnUrl(true);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>(3032);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3032, 3032, 3032, timeUnit0, linkedBlockingDeque0);
      Spider spider4 = spider3.setExecutorService(threadPoolExecutor0);
      spider4.clearPipeline();
      Json json0 = new Json("GN :TbO%8");
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QVF}F: }");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockThread.getDefaultUncaughtExceptionHandler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Z:`4}*p97E[iM<s9#K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Pipeline pipeline0 = null;
      Spider spider1 = spider0.pipeline((Pipeline) null);
      String[] stringArray0 = new String[0];
      spider1.stop();
      // Undeclared exception!
      try { 
        spider1.get("Z:`4}*p97E[iM<s9#K");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.PriorityScheduler");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[0] = null;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      requestArray0[1] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "zqv&Dk2|p'D|RO";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7pMw}XA");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("7pMw}XA", "7pMw}XA");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.getStatus();
      spider1.getSite();
      // Undeclared exception!
      try { 
        spider0.thread((-154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%m^Bcbpf1k");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.setExitWhenComplete(false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(897, 897, 562L, timeUnit0, linkedBlockingQueue0, (ThreadFactory) null, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.thread((ExecutorService) null, 86);
      spider0.destroyWhenExit = false;
      String string1 = "r)L|GMLpv8bZ";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "r)L|GMLpv8bZ");
      Page page0 = null;
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "=,0E.I0dSnWbu(I%";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=,0E.I0dSnWbu(I%");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("=,0E.I0dSnWbu(I%", "=,0E.I0dSnWbu(I%");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.runAsync();
      Spider spider2 = spider1.setUUID("a[<");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(";Rljf");
      Spider spider0 = new Spider(simplePageProcessor0);
      Json json0 = new Json((List<String>) null);
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(";Rljf", ";Rljf");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider3 = spider2.setScheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider3.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FilePipeline filePipeline0 = new FilePipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.Spider$Status");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      ArrayBlockingQueue<String> arrayBlockingQueue0 = new ArrayBlockingQueue<String>(249, false);
      ThreadGroup threadGroup0 = new ThreadGroup("\"");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "^[JT%Svfk#-E|)&Te");
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(249, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup1, true);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("M{m$ORrZs5&");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      Spider spider2 = spider1.clearPipeline();
      Request[] requestArray0 = new Request[0];
      spider2.addRequest(requestArray0);
      spider1.setScheduler(fileCacheQueueScheduler0);
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "RWu3H;q;R&3mL~m";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("RWu3H;q;R&3mL~m");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("RWu3H;q;R&3mL~m");
      spider1.stop();
      spider0.destroyWhenExit = true;
      // Undeclared exception!
      try { 
        spider1.get("RWu3H;q;R&3mL~m");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("invalid regex ");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Selector[] selectorArray0 = new Selector[0];
      OrSelector orSelector0 = new OrSelector(selectorArray0);
      List<String> list0 = orSelector0.selectList("");
      Spider spider2 = spider1.startUrls(list0);
      Spider spider3 = spider2.thread(897);
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      spider0.setExitWhenComplete(false);
      spider0.setEmptySleepTime(2437);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7pMw}XA");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("7pMw}XA", "7pMw}XA");
      Spider spider1 = spider0.clearPipeline();
      Spider.Status spider_Status0 = Spider.Status.Running;
      spider1.getSite();
      // Undeclared exception!
      try { 
        spider0.thread((-154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7pMw}XA");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("i3dAFR\"eIVngi-");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "`uC.3_=*e3Glw+0g");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.setSpawnUrl(false);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "m], agM<iFQJ`s,");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(false);
      Site site0 = new Site();
      Site site1 = site0.setSleepTime(112);
      Site site2 = site1.setCycleRetryTimes(112);
      spider1.site = site2;
      assertFalse(spider1.isSpawnUrl());
      
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Pipeline> list0 = spider2.getAll((Collection<String>) synchronousQueue0);
      spider1.setPipelines(list0);
      spider1.initComponent();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "oYqk8}dv(7$u";
      stringArray0[2] = "m], agM<iFQJ`s,";
      Spider spider3 = spider1.clearPipeline();
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.getSite();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ArrayBlockingQueue<String> arrayBlockingQueue0 = new ArrayBlockingQueue<String>(86, false);
      List<Request> list0 = spider0.getAll((Collection<String>) arrayBlockingQueue0);
      Spider spider2 = spider1.startRequest(list0);
      ThreadGroup threadGroup0 = new ThreadGroup("h ");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.pipeline(filePipeline0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.thread((ExecutorService) null, 86);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "r)L|GMLpv8bZ");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = MockThread.MAX_PRIORITY;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "r)L|GMLpv8bZ";
      stringArray0[1] = "r)L|GMLpv8bZ";
      ThreadGroup threadGroup0 = new ThreadGroup("us.codecraft.webmagic.Spider$Status");
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(86, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, false);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      threadGroup0.setDaemon(true);
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider4.setPipelines(linkedList1);
      spider4.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList2 = new LinkedList<SpiderListener>();
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("]*/BWb((");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.downloader((Downloader) null);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      spider3.getCollectorPipeline();
      stringArray0[1] = "";
      stringArray0[2] = "]*/BWb((";
      stringArray0[3] = "";
      stringArray0[4] = "";
      fileCacheQueueScheduler0.poll(spider1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.scheduler(duplicateRemovedScheduler0);
      Spider spider4 = spider2.setUUID("");
      spider4.start();
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("invalid regex ");
      Spider spider2 = spider0.setScheduler(fileCacheQueueScheduler0);
      Selector[] selectorArray0 = new Selector[0];
      OrSelector orSelector0 = new OrSelector(selectorArray0);
      List<String> list0 = orSelector0.selectList("");
      Spider spider3 = spider2.startUrls(list0);
      spider3.thread(897);
      Request request0 = new Request();
      Request[] requestArray0 = new Request[1];
      requestArray0[0] = request0;
      Spider spider4 = spider3.addRequest(requestArray0);
      Spider spider5 = spider3.setExitWhenComplete(true);
      spider5.getStatus();
      spider5.getSite();
      Spider spider6 = spider5.thread(897);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider6.startRequest(linkedList0);
      spider1.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      spider4.setSpawnUrl(true);
      spider5.scheduler(fileCacheQueueScheduler0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "zqv&Dk2|p'D|RO");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Spider spider2 = spider1.setSpawnUrl(false);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Pipeline> list0 = spider2.getAll((Collection<String>) synchronousQueue0);
      spider1.setPipelines(list0);
      spider1.initComponent();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "oYqk8}dv(7$u";
      stringArray0[2] = "zqv&Dk2|p'D|RO";
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.addPipeline(filePipeline0);
      spider0.setUUID("");
      spider1.getPageCount();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "zqv&Dk2|p'D|RO");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.getStatus();
      spider0.getSite();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      ArrayBlockingQueue<String> arrayBlockingQueue0 = new ArrayBlockingQueue<String>(86, true);
      List<Request> list0 = spider0.getAll((Collection<String>) arrayBlockingQueue0);
      Spider spider2 = spider1.startRequest(list0);
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      FilePipeline filePipeline0 = new FilePipeline("yF&,}0");
      spider0.addPipeline(filePipeline0);
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "zqv&Dk2|p'D|RO");
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(148, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, true);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider3 = spider1.setSpiderListeners(linkedList1);
      spider3.getStatus();
      Site site0 = spider2.site;
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ArrayBlockingQueue<String> arrayBlockingQueue0 = new ArrayBlockingQueue<String>(2, false);
      ThreadGroup threadGroup0 = new ThreadGroup("");
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.getStartTime();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "zqv&Dk2|p'D|RO");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.getStatus();
      spider0.getSite();
      Spider spider2 = spider1.thread(125);
      Request request0 = new Request("zqv&Dk2|p'D|RO");
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      spider2.setDownloader(phantomJSDownloader0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(125, 1410, 1410, timeUnit0, linkedBlockingDeque0);
      threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(spider2, threadPoolExecutor0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider1.pipeline(filePipeline0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.clearPipeline();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "r)L|GMLpv8bZ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider2 = Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "r)L|GMLpv8bZ";
      ThreadGroup threadGroup0 = new ThreadGroup("us.codecraft.webmagic.Spider$Status");
      ThreadGroup threadGroup1 = new ThreadGroup("r)L|GMLpv8bZ");
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(86, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, false);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider1.setSpiderListeners(linkedList0);
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      spider4.setExecutorService(forkJoinPool0);
      spider2.getSpiderListeners();
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider5 = spider0.setSpiderListeners(linkedList1);
      spider5.initComponent();
      Spider.Status.fromValue((byte)82);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "zqv&Dk2|p'D|RO");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Spider spider2 = spider1.setSpawnUrl(false);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Pipeline> list0 = spider2.getAll((Collection<String>) synchronousQueue0);
      Spider spider3 = spider1.setPipelines(list0);
      spider1.initComponent();
      String[] stringArray0 = new String[8];
      spider1.getThreadAlive();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      priorityScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider3.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.thread((ExecutorService) null, 86);
      spider2.start();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "r)L|GMLpv8bZ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider3 = spider2.thread(86);
      int int0 = MockThread.MAX_PRIORITY;
      String[] stringArray0 = new String[4];
      ThreadGroup threadGroup0 = new ThreadGroup("");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.pipeline(filePipeline0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider4 = spider3.setSpiderListeners(linkedList0);
      FilePipeline filePipeline1 = new FilePipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider3.setScheduler(priorityScheduler0);
      spider4.pipeline(filePipeline0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      synchronousQueue0.retainAll(linkedList1);
      // Undeclared exception!
      try { 
        spider4.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
