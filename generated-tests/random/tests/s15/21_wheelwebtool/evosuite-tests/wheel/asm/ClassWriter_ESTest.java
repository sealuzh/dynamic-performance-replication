/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:34:47 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1368));
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(35);
      classWriter0.visitOuterClass("", "FY", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(568, "", "PTV x)w@ph>^", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-225));
      int int0 = classWriter0.newUTF8("7O;[j%<QvjE");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      int int0 = classWriter0.newUTF8("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777216);
      int int0 = classWriter0.newNameType("", "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      Item item0 = classWriter0.newMethodItem("", "", "The list of names must not be null", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      Item item0 = classWriter0.newMethodItem("ca", "ca", "", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4971));
      Item item0 = classWriter0.newLong(12);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4971));
      Item item0 = classWriter0.newInteger(3);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      Item item0 = classWriter0.newFloat(2989.45F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(99);
      Item item0 = classWriter0.newFieldItem("", "?BVWG(OL;u^B2D", "");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1368));
      Item item0 = classWriter0.newFieldItem("", "", "6");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1368));
      Item item0 = classWriter0.newClassItem(".Uf=");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2550));
      Item item0 = classWriter0.newClassItem("");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      int int0 = classWriter0.newClass("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 248);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2548);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("y'rd<XHBQ%C", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'y'rd<XHBQ%C.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2550));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "SourceDebugExtension");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(35);
      int int0 = classWriter0.addUninitializedType("", 38);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1754);
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Synthetic";
      stringArray0[1] = "Synthetic";
      stringArray0[2] = "_+k!ok}}K~czb]>z";
      stringArray0[3] = "Label offset position has not been resolved yet";
      stringArray0[4] = "Synthetic";
      stringArray0[5] = "Synthetic";
      stringArray0[6] = "Synthetic";
      stringArray0[7] = "Label offset position has not been resolved yet";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-2254), "Synthetic", "Label offset position has not been resolved yet", "_+k!ok}}K~czb]>z", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1192));
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-1192), "Deprecated", "v8dzXVjZu69@J4]  ", "InnerClasses", "Deprecated");
      // Undeclared exception!
      try { 
        classWriter0.visitField(2, "3aR<nO%zJ8w8", "IZ[-K:5w#=m", "BD@ng'", fieldVisitor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.FieldWriter@a
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3393);
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1411);
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem((String) null, "ng3'<Y", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      // Undeclared exception!
      try { 
        classWriter0.newField("g<_oE<yrDo_", "p}\"my", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      // Undeclared exception!
      try { 
        classWriter0.addType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-435));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-225));
      int int0 = classWriter0.newNameType("7O;[j%<QvjE", "org.apache.commons.io.filefilter.SizeFileFilter");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1494);
      int int0 = classWriter0.newClass("a|");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1192));
      classWriter0.newDouble(1620.5199232378034);
      classWriter0.threshold = (-1192);
      classWriter0.visitInnerClass("java/lang/Object", "Deprecated", "v8dzXVjZu69@J4]  ", (-1192));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(22);
      String string0 = classWriter0.getCommonSuperClass("java/lang/Object", "java/lang/Object");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(256);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1368));
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addType("The FilenameFilter must not be null");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1192));
      int int0 = classWriter0.addUninitializedType("java/lang/Object", (-1192));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(256);
      classWriter0.addType("Itcj'w1Y!IR:Amq");
      int int0 = classWriter0.addType("Itcj'w1Y!IR:Amq");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      classWriter0.newMethodItem("", "6`dEu#eci#gc~", "", false);
      int int0 = classWriter0.newField("&EWs3h.u8rb'@aJ", "6`dEu#eci#gc~", "");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(24, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "Signature", "Signature");
      FieldVisitor fieldVisitor1 = classWriter0.visitField((-2098), "", "", "vhj{", "Signature");
      assertFalse(fieldVisitor1.equals((Object)fieldVisitor0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2550));
      Item item0 = classWriter0.newDouble((-2550));
      Item item1 = classWriter0.newDouble((-2550));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1501);
      Item item0 = classWriter0.newLong((-2377L));
      Item item1 = classWriter0.newLong((-2377L));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(99);
      Item item0 = classWriter0.newFloat((-1708.9159F));
      Item item1 = classWriter0.newFloat((-1708.9159F));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      Item item0 = classWriter0.newInteger((-2));
      Item item1 = classWriter0.newInteger((-2));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777216);
      classWriter0.newMethod("A*qajM_''SW", "A*qajM_''SW", "A*qajM_''SW", true);
      int int0 = classWriter0.newMethod("A*qajM_''SW", "A*qajM_''SW", "A*qajM_''SW", true);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      classWriter0.newField("SourceFile", "SourceFile", "SourceFile");
      Item item0 = classWriter0.newFieldItem("SourceFile", "SourceFile", "SourceFile");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(22);
      Type type0 = Type.BOOLEAN_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1192));
      Type type0 = Type.getObjectType("InnerClasses");
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      Double double0 = new Double(0.0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "ca", "ca", "@2[<", double0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(22);
      Long long0 = new Long(2);
      Item item0 = classWriter0.newConstItem(long0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4971));
      Float float0 = new Float(2196.13669634957);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(12, "C5[GO", "fvTz]Z {r1YRG", "wQA\"&!{c", float0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      Boolean boolean0 = Boolean.FALSE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2052);
      Boolean boolean0 = Boolean.TRUE;
      FieldVisitor fieldVisitor0 = classWriter0.visitField(2052, "B)PKq?oDU", "FUi:'t%n(o0BZqCSm\"", "FUi:'t%n(o0BZqCSm\"", boolean0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3393);
      Short short0 = new Short((short)1);
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-225));
      Character character0 = new Character('t');
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(35);
      Byte byte0 = new Byte((byte)9);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(38, "RuntimeVisibleAnnotations", "", "", byte0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1494);
      int int0 = classWriter0.newConst(classWriter0.cr.SKIP_CODE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1368));
      Attribute attribute0 = new Attribute("");
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(381);
      classWriter0.visitInnerClass("RuntimeVisibleAnnotations", ".k_D", "Qv0", 381);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(102, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2052);
      classWriter0.visitSource("F-Vm?MeE", "yD]n");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(89, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(381);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Synthetic";
      stringArray0[1] = "Synthetic";
      stringArray0[2] = "Qv0";
      stringArray0[3] = "Qv0";
      stringArray0[4] = "Synthetic";
      classWriter0.visit(381, 5071, "Synthetic", "Qv0", "Synthetic", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1368));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6";
      stringArray0[1] = "^9ITy9jDM`QR9]";
      classWriter0.visitMethod((-1368), "6", "6", (String) null, stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(121, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1494);
      classWriter0.visitField(21, "a|", "#", "?0", (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(66, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      classWriter0.visitInnerClass((String) null, (String) null, "", 24);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      classWriter0.visitInnerClass("RuntimeInvisibleAnnotations", "", (String) null, (-2265));
      classWriter0.visitInnerClass("p}\"my", (String) null, "p}\"my", (-889275714));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1494);
      classWriter0.visitAnnotation("The wildcard array must not be null", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(102, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1494);
      classWriter0.visitAnnotation("The wildcard array must not be null", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(104, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2052);
      classWriter0.visitOuterClass("short", "short", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1494);
      classWriter0.visitOuterClass("The wildcard array must not be null", "The wildcard array must not be null", "The wildcard array must not be null");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(98, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-97));
      classWriter0.visitOuterClass("", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1754);
      classWriter0.visitSource((String) null, "^");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2548);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rX\"rOhu)[?j(y:R";
      stringArray0[1] = "rX\"rOhu)[?j(y:R";
      stringArray0[2] = "rX\"rOhu)[?j(y:R";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "rX\"rOhu)[?j(y:R";
      stringArray0[6] = "";
      classWriter0.visit((-1025), (-2355), "rX\"rOhu)[?j(y:R", "", "rX\"rOhu)[?j(y:R", stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1368));
      classWriter0.visit((-1368), (-3022), "org.apache.commons.io.filefilter.AgeFileFilter", "  p`/n]l0xdC;", "wheel.asm.ClassReader", (String[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(158, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-837));
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        classWriter0.visit((-837), (-837), "ug,Bc*2,r*8t>T", "ug,Bc*2,r*8t>T", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(177);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConst(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@18b16ad6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      int int0 = classWriter0.newMethod("TU#N\"LABuaBMx*k", "p}\"my", "RuntimeInvisibleAnnotations", false);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Attribute");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1274);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 1);
      assertEquals(1274, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(192, "p}\"my", "&C8_}1T#LG$L_4w", (String) null, "p}\"my");
      assertNotNull(fieldVisitor0);
  }
}
