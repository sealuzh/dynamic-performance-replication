/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:07:55 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+X");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. X
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanISO8601DateIfMatch();
      int int0 = (-1899);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1899));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ", 45);
      jSONReaderScanner0.scanBoolean('+');
      assertEquals(45, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4?H,]f&/uew", 10);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.putChar('u');
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      jSONScanner0.charArrayCompare(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(10);
      jSONScanner0.scanSymbol(symbolTable0, 'u');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('u', 'u', '^', 'H', 'U');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '+';
      charArray0[2] = 'C';
      int int0 = 16;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, 16);
      jSONReaderScanner0.matchStat = 101;
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      Feature feature0 = Feature.IgnoreAutoType;
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.scanLong('+');
      int int1 = (-2754);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2754));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-3142);
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", (-3142));
      jSONScanner0.nextIdent();
      jSONScanner0.info();
      Locale locale0 = jSONScanner0.getLocale();
      jSONScanner0.locale = locale0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar(';');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ; - j, info : pos 2, json : , json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", (-434));
      char char0 = '%';
      jSONScanner0.scanString('%');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_P5^", (-1368));
      jSONScanner0.setToken((-1368));
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.matchStat = (-1368);
      jSONScanner0.scanType("/?_T;t,!GB_b M");
      jSONScanner0.bytesValue();
      char[] charArray1 = new char[4];
      charArray1[0] = '2';
      charArray1[1] = 'z';
      charArray1[2] = '!';
      charArray1[3] = '<';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray1, class0);
      assertEquals('^', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WnR`q3", 3568);
      jSONReaderScanner0.sp = 2348;
      String string0 = "z~ZFTB@";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"WnR`q\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = '\"';
      charArray0[2] = ' ';
      charArray0[3] = '(';
      charArray0[4] = '&';
      charArray0[5] = '|';
      charArray0[6] = 'b';
      int int0 = 187;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1708, 187);
      SymbolTable symbolTable0 = new SymbolTable(48);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "Set";
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      int int0 = (-2258);
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2258));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("to");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("utotype");
      jSONScanner0.sp = 106;
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'M';
      charArray0[2] = '4';
      charArray0[3] = 'W';
      charArray0[4] = 'G';
      charArray0[5] = 'g';
      charArray0[6] = 'X';
      charArray0[7] = '$';
      charArray0[8] = 'L';
      int int0 = 68;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 68);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanDouble('4');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      int int0 = 43;
      int int1 = 51;
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(43);
      char[] charArray0 = new char[7];
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("FxDs3", 51, 1528, 51, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108);
      jSONReaderScanner0.scanFieldString(charArray0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.matchStat = 108;
      char[] charArray1 = new char[5];
      charArray1[0] = '\\';
      charArray1[1] = 'M';
      charArray1[2] = 'H';
      charArray1[3] = 'D';
      charArray1[4] = 'V';
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.scanDouble('/');
      jSONReaderScanner0.getTimeZone();
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not close json text, token : ");
      jSONScanner0.matchStat();
      char[] charArray0 = new char[2];
      jSONScanner0.scanBoolean('/');
      jSONScanner0.scanDecimal('}');
      jSONScanner0.scanUUID('}');
      charArray0[0] = '}';
      char char0 = '#';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed", 8192);
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = 'l';
      charArray0[2] = 'i';
      charArray0[3] = 'k';
      charArray0[4] = '+';
      charArray0[5] = 'H';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDate('W');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WriteEnumUsingName");
      int int0 = 45;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 45);
      jSONReaderScanner0.scanDouble(']');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - W, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = 'S';
      charArray0[2] = 'b';
      charArray0[3] = 'V';
      charArray0[4] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44, 44);
      jSONReaderScanner0.scanInt('G');
      jSONReaderScanner0.scanInt('4');
      JSONScanner jSONScanner0 = new JSONScanner("el");
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.indexOf('0', (-1));
      System.setCurrentTimeMillis((-63653L));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "4f-";
      int int0 = (-2147483647);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4f-", (-2147483647));
      jSONReaderScanner0.scanLong('>');
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-1448));
      jSONReaderScanner0.nextToken((-1448));
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = 'R';
      charArray0[2] = '%';
      charArray0[3] = 'C';
      charArray0[4] = '=';
      charArray0[5] = 'r';
      charArray0[6] = ':';
      charArray0[7] = 'E';
      charArray0[8] = 't';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.next();
      char[] charArray1 = new char[5];
      charArray1[0] = '2';
      charArray1[1] = '=';
      charArray1[2] = '2';
      charArray1[3] = 'E';
      charArray1[4] = 'C';
      jSONReaderScanner0.scanFieldLong(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('<', (-1448));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '5';
      charArray0[0] = '5';
      char char1 = 'A';
      charArray0[1] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 128, 43);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      System.setCurrentTimeMillis((-1178L));
      String string0 = "/#}Txwm%[dU-PwL";
      JSONScanner jSONScanner0 = new JSONScanner("/#}Txwm%[dU-PwL", 1205);
      char[] charArray0 = new char[5];
      jSONScanner0.scanFieldDate(charArray0);
      charArray0[0] = '|';
      charArray0[1] = '@';
      charArray0[2] = 'o';
      charArray0[3] = 'H';
      jSONScanner0.stringDefaultValue = "Xc2'1|J.}`6rz9";
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'E';
      charArray0[2] = '%';
      charArray0[3] = 'e';
      charArray0[4] = 'G';
      charArray0[5] = 'd';
      charArray0[6] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 825, 83);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('t');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = ';';
      charArray0[2] = ' ';
      charArray0[3] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1767);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("35u", 1);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.eofPos = 94;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('u');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match u - 3, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = (-3112);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-3112));
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(10);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-3112), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 79);
      jSONReaderScanner0.nextTokenWithChar('9');
      jSONReaderScanner0.scanLong('I');
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not close json text, token : ");
      jSONScanner0.matchStat();
      char[] charArray0 = new char[2];
      jSONScanner0.scanDecimal('}');
      charArray0[0] = '}';
      char char0 = '#';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", (-1176));
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'Y';
      jSONScanner0.close();
      jSONScanner0.scanFieldBigInteger(charArray0);
      charArray0[2] = 'W';
      jSONScanner0.scanFieldIntArray(charArray0);
      charArray0[3] = 's';
      charArray0[4] = '*';
      jSONScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = 'S';
      charArray1[1] = ')';
      jSONScanner0.scanFieldInt(charArray1);
      jSONScanner0.next();
      Locale locale0 = Locale.ROOT;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.skipWhitespace();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanStringArray(linkedHashSet0, '*');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3?~");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanBoolean('9');
      char char0 = 'O';
      jSONReaderScanner0.scanBoolean('O');
      jSONReaderScanner0.scanNumber();
      JSONScanner jSONScanner0 = new JSONScanner("3?~");
      int int0 = 1245;
      jSONScanner0.sp = 1245;
      int int1 = (-721);
      jSONReaderScanner0.pos = 1245;
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-721), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeAccept");
      jSONScanner0.scanBoolean('*');
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      timeZone0.toZoneId();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.sub_chars(12, 12);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 101);
      jSONReaderScanner0.indexOf('U', 1290);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(101, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "7";
      int int0 = 23;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7", 23);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'n';
      charArray0[2] = 'i';
      charArray0[3] = ',';
      charArray0[4] = 'z';
      charArray0[5] = '-';
      charArray0[6] = '/';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('O');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 811, 104);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 4);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('@', 'o', 'Q', 'o', 'J');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = '}';
      charArray0[2] = 'F';
      charArray0[3] = '1';
      charArray0[4] = 'S';
      charArray0[5] = 'm';
      charArray0[6] = '!';
      charArray0[7] = 'd';
      int int0 = 12;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12, 12);
      jSONReaderScanner0.eofPos = 1918;
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanBoolean('d');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2363));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#", 172);
      int int0 = 4071;
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '.';
      charArray0[2] = 'M';
      charArray0[3] = 'a';
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.close();
      jSONScanner0.lexError("#", (Object[]) null);
      char char0 = 'u';
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = '.';
      charArray0[2] = ',';
      charArray0[3] = 'Q';
      charArray0[4] = '7';
      charArray0[5] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9982);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("C");
      int int0 = (-1081);
      jSONScanner0.nextToken((-1081));
      jSONScanner0.np = (-1081);
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I", 1001);
      char char0 = 'y';
      Locale locale0 = Locale.TAIWAN;
      jSONScanner0.setToken((-490));
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.calendar = calendar0;
      Locale.setDefault(locale0);
      jSONScanner0.next();
      char char1 = '{';
      locale0.getUnicodeLocaleKeys();
      jSONScanner0.setTimeZone('y', 'y', '{', 'n', '{');
      jSONScanner0.stringDefaultValue();
      jSONScanner0.next();
      jSONScanner0.stringVal();
      char char2 = 'Q';
      jSONScanner0.scanLong('Q');
      jSONScanner0.scanISO8601DateIfMatch();
      int int0 = (-3196);
      SymbolTable symbolTable0 = new SymbolTable(2);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-3196), 1001, 1001, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(");
      char[] charArray0 = new char[3];
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.features = 55232;
      jSONReaderScanner0.features = 12;
      jSONReaderScanner0.scanDecimal('{');
      char[] charArray1 = new char[9];
      charArray1[0] = '{';
      charArray1[1] = '{';
      charArray1[2] = '{';
      charArray1[3] = '{';
      charArray1[4] = '{';
      charArray1[5] = '|';
      charArray1[6] = '{';
      charArray1[7] = '{';
      charArray1[8] = 'J';
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      charArray0[0] = 'a';
      jSONReaderScanner0.eofPos = 67;
      char char0 = 'M';
      charArray0[1] = 'M';
      char char1 = '?';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = 'Z';
      charArray0[2] = 'B';
      charArray0[3] = '5';
      charArray0[4] = ']';
      charArray0[5] = '*';
      charArray0[6] = 'o';
      charArray0[7] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24, 24);
      jSONReaderScanner0.token = (-1279);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("Erz%wP[xm:)c)w", 2042);
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(930);
      jSONScanner0.scanEnum(class0, symbolTable0, '{');
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(2042, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal", 498);
      jSONScanner0.scanIdent();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 6 - \u001A, info : pos 7, json : illegal
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-528));
      jSONReaderScanner0.setToken((-528));
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = 'Y';
      charArray0[2] = '=';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.pos = (-528);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.isEOF();
      jSONReaderScanner0.scanInt('7');
      // Undeclared exception!
      try { 
        jSONScanner0.subString(114, 3798);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("W$A;sPj@V", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      Feature feature0 = Feature.DisableASM;
      jSONReaderScanner0.config(feature0, false);
      Locale locale0 = jSONReaderScanner0.getLocale();
      locale0.getExtensionKeys();
      locale0.getDisplayScript();
      jSONReaderScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error", 58);
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleKeys();
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanNumber();
      jSONScanner0.isBlankInput();
      jSONScanner0.skipWhitespace();
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanType("error");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. r
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("l", 3678080);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong(']');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("35u", 1);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('u');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match u - 3, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-302);
      JSONScanner jSONScanner0 = new JSONScanner(" cz", (-302));
      jSONScanner0.scanType((String) null);
      char char0 = '[';
      jSONScanner0.scanString('[');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-302));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 483;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("C py", 483);
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(483);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier :  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("z", 59);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(59);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'z');
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      charArray0[1] = '0';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = new JSONScanner("RdC!cp{*DZ");
      char[] charArray1 = new char[9];
      charArray1[0] = '0';
      charArray1[1] = ' ';
      charArray1[2] = '1';
      charArray1[3] = 'z';
      charArray1[4] = ' ';
      charArray1[5] = 'z';
      charArray1[6] = '0';
      charArray1[7] = 'z';
      charArray1[8] = '0';
      jSONScanner0.scanFieldString(charArray1);
      assertEquals((-2), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = 'k';
      charArray0[2] = 's';
      charArray0[3] = ']';
      charArray0[4] = 'P';
      charArray0[5] = 'h';
      charArray0[6] = 'F';
      charArray0[7] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, 93);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "true";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-784));
      Feature feature0 = Feature.IgnoreAutoType;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanDecimal('B');
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.bytesValue();
      char[] charArray0 = new char[1];
      jSONReaderScanner0.sbuf = charArray0;
      charArray0[0] = 'B';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.isRef();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1005));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt(' ');
      jSONReaderScanner0.next();
      jSONReaderScanner0.isRef();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'i';
      charArray0[2] = 'd';
      charArray0[3] = 'Z';
      charArray0[4] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-889);
      JSONScanner jSONScanner0 = new JSONScanner("", (-889));
      jSONScanner0.skipWhitespace();
      jSONScanner0.getLocale();
      Feature feature0 = Feature.NonStringKeyAsString;
      char char0 = '}';
      jSONScanner0.ch = '}';
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.config(feature0, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse true", (-889));
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IAc}WcQYE|S{Y.[j:~");
      char char0 = 'X';
      jSONReaderScanner0.scanDouble('X');
      jSONReaderScanner0.sp = 78;
      char char1 = '5';
      jSONReaderScanner0.scanDate('5');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 17);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldDate(charArray0);
      charArray0[0] = '!';
      charArray0[1] = '!';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanUUID('!');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('d');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match d - f, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",vj&?3yd");
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      jSONScanner0.nextIdent();
      charArray0[1] = ':';
      charArray0[2] = ')';
      charArray0[3] = '?';
      charArray0[4] = '_';
      charArray0[5] = 'P';
      charArray0[6] = '*';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.getLocale();
      jSONScanner0.scanFieldInt(charArray0);
      StringReader stringReader0 = new StringReader(".<vi/KvsEm");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(66, charArray0, 2607, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan null error", 269);
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONReaderScanner0.config(feature0, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 't';
      charArray0[2] = 'v';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.sub_chars(269, 269);
      charArray0[3] = ']';
      charArray0[4] = '>';
      charArray0[5] = 'U';
      charArray0[6] = 'F';
      charArray0[7] = 'c';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      jSONScanner0.setToken(125);
      jSONScanner0.scanUUID('\"');
      jSONScanner0.scanInt('%');
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(125, 0, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '%';
      charArray0[2] = 'M';
      charArray0[3] = 'q';
      charArray0[4] = '+';
      charArray0[5] = 'R';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '9';
      charArray0[2] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2484);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.matchStat();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error", 58);
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleAttributes();
      locale0.getDisplayCountry((Locale) null);
      locale0.getUnicodeLocaleKeys();
      jSONScanner0.setLocale(locale0);
      jSONScanner0.isBlankInput();
      jSONScanner0.skipWhitespace();
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanType("error");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. e
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 671);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.bp = 3;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = 'l';
      charArray0[2] = ';';
      jSONScanner0.eofPos = (-1686);
      charArray0[3] = '0';
      charArray0[4] = 'f';
      charArray0[5] = 'o';
      charArray0[6] = ',';
      charArray0[7] = 'n';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanBoolean('<');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanInt('8');
      jSONScanner0.next();
      jSONScanner0.scanType("_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_");
      jSONReaderScanner0.scanBoolean('f');
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed", 8192);
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      charArray0[1] = 'l';
      charArray0[2] = 'i';
      charArray0[3] = 'k';
      charArray0[4] = '+';
      charArray0[5] = 'H';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(126);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'J');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.info();
      jSONScanner0.bytesValue();
      jSONScanner0.nextIdent();
      int int0 = 4;
      String string0 = "$VALUES";
      jSONScanner0.intValue();
      int int1 = 58;
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = ",~Q";
      int int0 = 78;
      JSONScanner jSONScanner0 = new JSONScanner(",~Q", 78);
      jSONScanner0.scanISO8601DateIfMatch();
      char[] charArray0 = null;
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ~, info : pos 1, json : ,~Q
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.ZoneId", 45);
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal", (-1918));
      int int0 = jSONReaderScanner0.token();
      assertEquals(0, int0);
      assertEquals((-1918), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[4];
      jSONScanner0.nextToken();
      char char0 = 'c';
      charArray0[0] = 'c';
      char char1 = '<';
      charArray0[1] = '<';
      int int0 = (-541);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-541));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2*]!r4=-yR\"Id");
      SymbolTable symbolTable0 = new SymbolTable(105);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'p');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".Zr96");
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      jSONScanner0.scanFloat(';');
      charArray0[1] = 'J';
      charArray0[2] = '4';
      charArray0[3] = 'b';
      char char0 = '\"';
      charArray0[4] = '\"';
      char char1 = ']';
      jSONScanner0.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      int int0 = (-3574);
      jSONReaderScanner0.token = (-3574);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      jSONReaderScanner0.scanInt('V');
      jSONReaderScanner0.scanStringArray(list0, 'J');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}Hek`[z;eXTH");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Im0<", (-1439242468));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFloat('}');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("illega str", (-1));
      jSONScanner0.isEOF();
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.intValue();
      char char0 = ',';
      jSONReaderScanner0.putChar(',');
      int int0 = 2474;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      int int1 = 141;
      SymbolTable symbolTable0 = new SymbolTable(141);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("l", 0, (-654), 0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UseSingleQuotes");
      char[] charArray0 = new char[4];
      jSONScanner0.bytesValue();
      jSONScanner0.sbuf = charArray0;
      charArray0[0] = '0';
      jSONScanner0.intValue();
      jSONScanner0.nextToken(31);
      jSONScanner0.sp = 100;
      jSONScanner0.scanString('o');
      jSONScanner0.stringDefaultValue = "4< 2Ft[.MaP|HK\"PqGw";
      charArray0[1] = '*';
      charArray0[2] = '<';
      jSONScanner0.scanNumber();
      charArray0[3] = 'L';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.subString(6, 6);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.stringDefaultValue();
      jSONScanner0.scanDate('L');
      jSONScanner0.scanDecimal('#');
      jSONScanner0.intValue();
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.lexError("4< 2Ft[.MaP|HK\"PqGw", (Object[]) null);
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.SymbolTable", 4096);
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = 'Y';
      jSONReaderScanner0.scanFieldString(charArray0);
      charArray0[2] = '&';
      charArray0[3] = 'Z';
      charArray0[4] = '9';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rAQ+c +#", 101);
      char[] charArray0 = new char[7];
      char char0 = 'X';
      SymbolTable symbolTable0 = new SymbolTable(101);
      jSONScanner0.scanSymbol(symbolTable0);
      charArray0[0] = 'X';
      charArray0[1] = 'c';
      char char1 = '?';
      charArray0[2] = '?';
      char char2 = '3';
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.timeZone = timeZone0;
      charArray0[3] = '3';
      char char3 = 'v';
      charArray0[4] = 'v';
      char char4 = 'g';
      charArray0[5] = 'g';
      charArray0[6] = '+';
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.longValue();
      jSONScanner0.scanFieldFloatArray(charArray0);
      int int0 = 108;
      // Undeclared exception!
      try { 
        jSONScanner0.subString(101, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-1031);
      JSONScanner jSONScanner0 = new JSONScanner("7rj$", (-1031));
      jSONScanner0.matchStat = (-1031);
      boolean boolean0 = true;
      jSONScanner0.skipWhitespace();
      char char0 = 'E';
      char char1 = 't';
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error", 2204);
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = '$';
      charArray0[2] = '2';
      charArray0[3] = 'k';
      charArray0[4] = '\"';
      charArray0[5] = '>';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.longValue();
      jSONScanner0.getCalendar();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NO;Ul|;F'i5ea");
      jSONScanner0.scanType("unclosed.str.lit");
      jSONScanner0.scanType("undefined");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('z', 'z', 'O', 'z', 'O');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<;/V?m{| tf^YWJ!", 0);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('<', char0);
      
      JSONScanner jSONScanner0 = new JSONScanner("E<O");
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = 'W';
      charArray0[2] = 'I';
      charArray0[3] = '<';
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-643), "false");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      charArray0[4] = '<';
      charArray0[5] = 'a';
      charArray0[6] = '<';
      jSONScanner0.copyTo(0, 0, charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      
      Feature feature0 = Feature.NonStringKeyAsString;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AutoCloseSource");
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = 'n';
      charArray0[2] = '9';
      jSONScanner0.scanFieldBigInteger(charArray0);
      charArray0[3] = 'U';
      charArray0[4] = 's';
      charArray0[5] = 'y';
      charArray0[6] = 'k';
      charArray0[7] = '4';
      SymbolTable symbolTable0 = new SymbolTable(39);
      jSONScanner0.scanFieldStringArray(charArray0, (-1617521625), symbolTable0);
      jSONScanner0.longValue();
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = '\"';
      charArray0[2] = ' ';
      charArray0[3] = '(';
      charArray0[4] = '&';
      charArray0[5] = '|';
      charArray0[6] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1708, 187);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PRzwEA='tLP", (-276));
      Object[] objectArray0 = new Object[2];
      jSONReaderScanner0.nextToken();
      Object object0 = new Object();
      jSONReaderScanner0.isBlankInput();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "!}_2gH";
      jSONReaderScanner0.lexError("!}_2gH", objectArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      char char0 = 't';
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "FW/\"Dtpnoz&9F";
      int int0 = (-1);
      JSONScanner jSONScanner0 = new JSONScanner("FW/\"Dtpnoz&9F", (-1));
      jSONScanner0.scanString();
      jSONScanner0.nextToken();
      jSONScanner0.matchStat();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse true");
      jSONReaderScanner0.close();
      char[] charArray0 = new char[0];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 123, 863, 1, 863);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      int int0 = 256;
      jSONScanner0.isEnabled(256, 59);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      int int0 = 1;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      jSONReaderScanner0.resetStringPosition();
      int int1 = 4032;
      JSONScanner jSONScanner0 = new JSONScanner("%],g", 4032);
      jSONReaderScanner0.subString(538, 1);
      jSONScanner0.scanInt('f');
      jSONScanner0.scanFieldLong(charArray0);
      int int2 = 1252;
      jSONScanner0.matchField(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = 'f';
      charArray1[1] = 'f';
      charArray1[2] = 'f';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - %, info : pos 0, json : %],g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.sp = 68;
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = 'B';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = '}';
      charArray1[1] = 'e';
      jSONReaderScanner0.sbuf = charArray1;
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      charArray1[2] = 'S';
      jSONReaderScanner0.matchField(charArray1);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.nextToken(117);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("QXn.A(Cr|'m,<", (-641));
      jSONScanner0.scanFieldLong(charArray1);
      assertEquals((-641), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '}';
      charArray0[2] = ',';
      charArray0[3] = 'C';
      charArray0[4] = 'd';
      charArray0[5] = '(';
      charArray0[6] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      char[] charArray1 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray1);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 10);
      jSONScanner0.matchStat = 10;
      jSONScanner0.scanBoolean('s');
      jSONScanner0.scanDate('2');
      StringReader stringReader0 = new StringReader("com.alibaba.fastjson.parser.JSONScanner");
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = 's';
      charArray0[2] = '2';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = 's';
      charArray0[7] = 'a';
      charArray0[8] = 's';
      stringReader0.read(charArray0);
      stringReader0.mark(44);
      stringReader0.markSupported();
      stringReader0.mark(13);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 102);
      char[] charArray1 = new char[1];
      charArray1[0] = '2';
      jSONReaderScanner0.charArrayCompare(charArray1);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-2335), 56);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L/s5ZCE");
      char[] charArray0 = new char[1];
      Feature feature0 = Feature.AllowISO8601DateFormat;
      Feature feature1 = Feature.AllowISO8601DateFormat;
      jSONScanner0.config(feature1, true);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'D';
      charArray0[0] = 'D';
      int int0 = 32;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32, 32);
      SymbolTable symbolTable0 = new SymbolTable(91);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'D');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 3115;
      JSONScanner jSONScanner0 = new JSONScanner("oL:j!<5ZXwt(eV", 3115);
      jSONScanner0.nextToken(3115);
      jSONScanner0.scanLong('M');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanDecimal('M');
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-562));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 1490;
      JSONScanner jSONScanner0 = new JSONScanner("hn", 1490);
      jSONScanner0.tokenName();
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = '*';
      charArray0[2] = 'i';
      jSONScanner0.close();
      charArray0[3] = 'y';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('J', 'O', ':', 'y', 'X');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";|dlAEwgWx)/d#.m'&>", (-241));
      jSONScanner0.sp = (-241);
      jSONScanner0.stringDefaultValue();
      char[] charArray0 = new char[4];
      char char0 = ':';
      jSONScanner0.np = (-241);
      charArray0[0] = ':';
      Locale locale0 = Locale.UK;
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.locale = locale0;
      charArray0[1] = ')';
      charArray0[2] = '-';
      locale0.getUnicodeLocaleAttributes();
      charArray0[3] = '3';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ", 3);
      jSONReaderScanner0.nextIdent();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '{';
      charArray0[2] = '\\';
      charArray0[3] = 'd';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, (-2528));
      jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals((-2528), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unterminated json string, ", 97);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - u, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^#QX3X'-8", 92);
      jSONScanner0.scanUUID('{');
      StringReader stringReader0 = new StringReader("}McMVpqMdaXIi@~ +`v");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "TreeSet";
      int int0 = 735;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 735);
      char char0 = 'o';
      char char1 = 'r';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. T
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit", 110);
      jSONScanner0.scanIdent();
      jSONScanner0.info();
      int int0 = 110;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '[';
      charArray0[2] = 'Q';
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      char char0 = 'i';
      int int0 = (-1756);
      jSONScanner0.token = (-1756);
      char char1 = 'f';
      jSONScanner0.next();
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = '1';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 1, json : unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`vj6.q4$L3v}q4X{@");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.stringDefaultValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '!';
      charArray0[2] = 'y';
      charArray0[3] = '<';
      charArray0[4] = '5';
      charArray0[5] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 73);
      jSONReaderScanner0.indexOf('[', 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'W';
      charArray0[2] = 'J';
      char char0 = 'y';
      charArray0[3] = 'y';
      JSONScanner.charArrayCompare("jCl)d", 0, charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<;/V?m{| tf^YWJ!", 0);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('<', char0);
      
      JSONScanner jSONScanner0 = new JSONScanner("E<O");
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = 'W';
      charArray0[2] = 'I';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'a';
      charArray0[6] = '<';
      jSONScanner0.copyTo(0, 0, charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      jSONScanner0.getCalendar();
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.tokenName();
      jSONScanner0.next();
      jSONScanner0.scanDate('C');
      jSONScanner0.pos();
      jSONScanner0.longValue();
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      jSONScanner0.matchField(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'C';
      charArray1[1] = 'o';
      charArray1[2] = 'o';
      charArray1[3] = 'o';
      charArray1[4] = 'C';
      jSONScanner0.scanFieldSymbol(charArray1);
      jSONScanner0.matchField2(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - o, info : pos 1, json : com.alibaba.fastjson.parser.JSONLexerBase
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "error";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error");
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("C{%tBX%:mS");
      jSONReaderScanner0.charAt(93);
      SymbolTable symbolTable0 = new SymbolTable(5);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("C{%tBX%:mS", 0, 2168, 2168, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'u';
      char char0 = '$';
      charArray0[2] = '$';
      char char1 = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '9';
      int int0 = 106;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 106);
      jSONReaderScanner0.pos = 70;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(106, "}p{(n~2I7u7ySw$", 70, 106, 70, 102, 106, 70, 70, 106, 67);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 70
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '@';
      charArray0[2] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.nextToken((-518));
      long long0 = 0L;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '`';
      charArray0[0] = '`';
      int int0 = 88;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 88, 88);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set", 69);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanDouble('p');
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '*');
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.lookupTag(linkedList0, arrayList0);
      jSONReaderScanner0.setLocale(locale0);
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("autoType is not support. ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 7);
      jSONReaderScanner0.scanNumber();
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken(7);
      timeZone0.setID("com.alibaba.fastjson.serializer.SerializerFeature");
      jSONReaderScanner0.scanDecimal('r');
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.getFeatures();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
