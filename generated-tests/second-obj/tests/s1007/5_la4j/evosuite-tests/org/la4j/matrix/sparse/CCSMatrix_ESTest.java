/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:43:34 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(788, 788);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(5, 5, matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(3803);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3803
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(788);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1448.9)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(5, 5, matrixFunction0);
      cCSMatrix0.minInColumn(3803);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-7L));
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(116, 116);
      Matrix matrix0 = cCSMatrix0.copyOfShape(10, 65);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      matrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.eachNonZeroInColumn((-2360), (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(8, 5, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(2, 2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 782;
      double double0 = 760.0;
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 782;
      doubleArray1[1] = (double) 782;
      doubleArray0[0] = doubleArray1;
      CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("].");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 141;
      int int1 = 1191;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(1191, 1191, (double) 1191, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.toMatrixMarket();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.iteratorOfColumn(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4, 4);
      cCSMatrix0.min();
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.norm();
      cCSMatrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse((-1700), (-1700), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1700' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32);
      cCSMatrix0.getRow(32);
      cCSMatrix0.min();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(17, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-2896L);
      MockRandom mockRandom0 = new MockRandom((-2896L));
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(3, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(3, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(10);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      cCSMatrix0.blankOfRows(4242);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(141, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(112);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(matrixAccumulator0).accumulate();
      cCSMatrix0.fold(matrixAccumulator0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.iterator();
      Matrix.zero(14, 8);
      int int0 = 7;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(7, vectorProcedure0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(4, 14, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      int int0 = 47;
      cCSMatrix0.columnMajorIterator();
      Matrix.zero(47, 6);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow((-225), (VectorProcedure) null);
      cCSMatrix0.iteratorOrNonZeroColumns();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = (MatrixMatrixOperation<Object>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.apply(matrixMatrixOperation0, (Matrix) sparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2920;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2920, 27, 474);
      cCSMatrix0.nonZeroAt(474, 24);
      cCSMatrix0.set((-39), (-2719), 474);
      int int1 = (-4228);
      int int2 = 773;
      double double0 = (-1.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.random(int1, int2, double0, (Random) mockRandom0);
      cCSMatrix0.getOrElse(int2, int0, int1);
      cCSMatrix1.nonZeroIteratorOfColumn(int0);
      int[] intArray0 = null;
      cCSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(14);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = new CCSMatrix(574, 574);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.maxInColumn(14);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      CCSMatrix.from1DArray(2, 0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.columnMajorIterator();
      Integer integer0 = new Integer(12);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-1), 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x12
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.max();
      cCSMatrix0.setAll(1.1102230246251565E-14);
      // Undeclared exception!
      try { 
        cCSMatrix0.set(755, 755, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '755' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(13, 13);
      cCSMatrix0.columnMajorIterator();
      Matrix.zero(47, 6);
      cCSMatrix0.setAll(0.5);
      int int1 = 149;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(13, 149);
      cCSMatrix1.iteratorOrNonZeroColumns();
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("This matrix can't grow up.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      cCSMatrix0.subtract((-3993.3));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure1);
      cCSMatrix0.setAll(1);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(787);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.updateColumn(756, (VectorFunction) null);
      VectorFunction vectorFunction0 = null;
      int int0 = 61;
      cCSMatrix0.updateColumn(int0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      int int0 = 14;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      cCSMatrix0.product();
      cCSMatrix0.setAll((-2248.322));
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(8, 14);
      cCSMatrix1.iteratorOrNonZeroColumns();
      int int1 = (-5442);
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroIteratorOfColumn(55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt((-1405), 102, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(788, 788);
      cCSMatrix0.getOrElse(5, 5, (-2729.12698795419));
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns((-2637), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2636
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2194;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2194, 2194);
      cCSMatrix0.columnMajorIterator();
      int int1 = 2179;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(2179, 2179, matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2179);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateColumn(2179, vectorFunction0);
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      cCSMatrix1.select(intArray0, intArray0);
      cCSMatrix0.max();
      int int2 = (-411);
      CCSMatrix cCSMatrix2 = new CCSMatrix(int1, intArray0[0]);
      int int3 = 380;
      CCSMatrix cCSMatrix3 = CCSMatrix.zero(int3, int1);
      int int4 = 4;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.eachInColumn(int4, vectorProcedure0);
      cCSMatrix3.copyOfShape(int0, int1);
      cCSMatrix0.columnMajorIterator();
      int int5 = (-347);
      cCSMatrix0.getOrElse(int5, intArray0[0], int2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 127;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(127, 1.0, (Random) mockRandom0);
      int int1 = (-1541);
      cCSMatrix0.getColumn(int1);
      int int2 = 10;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.spliterator();
      int int3 = (-829);
      Matrix.identity(int3);
      cCSMatrix0.trace();
      int[] intArray0 = new int[9];
      intArray0[0] = int3;
      intArray0[1] = int3;
      intArray0[2] = int3;
      intArray0[3] = int1;
      intArray0[4] = int3;
      intArray0[5] = int2;
      intArray0[6] = int0;
      intArray0[7] = int1;
      intArray0[8] = int2;
      cCSMatrix0.select(intArray0, intArray0);
      String string0 = "No rows or columns selected.";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromMatrixMarket(string0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(intArray0[5], intArray0[2], matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(32, 32);
      cCSMatrix0.getRow(32);
      cCSMatrix0.copyOfColumns(1);
      cCSMatrix0.min();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows(6, (-2917));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      int int0 = 6;
      cCSMatrix0.iterator();
      cCSMatrix0.toRowVector();
      Matrix.zero(14, 6);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(7, vectorProcedure0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(8, vectorProcedure1);
      // Undeclared exception!
      try { 
        cCSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(788, 788);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(5, 5, matrixFunction0);
      cCSMatrix0.copyOfColumns(4);
      cCSMatrix0.minInColumn(788);
      int int0 = (-848);
      CCSMatrix.diagonal(int0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(788, 788);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(5, 5, matrixFunction0);
      int int0 = 109;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-276.3752);
      doubleArray0[1] = (double) 788;
      Matrix matrix0 = cCSMatrix0.copyOfColumns(139);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
      cCSMatrix0.min();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        CCSMatrix.zero(8, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 83;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(83);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      int int1 = 117;
      MatrixFunction matrixFunction0 = null;
      int int2 = 3;
      DenseVector denseVector0 = DenseVector.fromCSV("Xf0`");
      cCSMatrix0.min();
      MatrixMatrixOperation<CCSMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<CCSMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      int int3 = (-2618);
      int int4 = 122;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int3, int4, int4);
      cCSMatrix0.apply(matrixMatrixOperation0, (Matrix) cCSMatrix1);
      Matrix.constant(int2, int0, int2);
      cCSMatrix0.maxInRow(int4);
      denseVector0.toMatrixMarket();
      cCSMatrix0.insertRow(int2, denseVector0);
      cCSMatrix0.updateAt(int1, int1, matrixFunction0);
      cCSMatrix0.copyOfShape(int1, int0);
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      int int5 = 128;
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix2.minInColumn(int1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInColumn(int0, vectorProcedure0);
      CCSMatrix.zero(int2, int5);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32);
      cCSMatrix0.getRow(32);
      int int0 = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      MockRandom mockRandom0 = new MockRandom((-1505L));
      // Undeclared exception!
      try { 
        CCSMatrix.random((-560), 1, (double) 1, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -560x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 6;
      CCSMatrix.zero(6, 6);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2280, 2280);
      cCSMatrix0.copy();
      cCSMatrix0.copyOfShape(2280, 2280);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2280;
      intArray0[2] = 1200;
      intArray0[3] = 2745;
      intArray0[4] = 2280;
      intArray0[5] = 1205;
      intArray0[6] = 2280;
      intArray0[7] = 2280;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = 728;
      int int1 = (-5403);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random((-5403), 3, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      int int1 = 25;
      int int2 = 2702;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2702, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        CCSMatrix.block(rowMajorSparseMatrix0, cCSMatrix0, cCSMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32);
      cCSMatrix0.getRow(32);
      cCSMatrix0.getRow(32);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(788, 788);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(5, 5, matrixFunction0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(756, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(788, 788);
      int int0 = 5;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(5, 5, matrixFunction0);
      cCSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom((-1L));
      // Undeclared exception!
      try { 
        CCSMatrix.random(5, 5, 1426.3331364, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(787);
      cCSMatrix0.maxInColumn(8);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.minInColumn(3510);
      int int0 = 13;
      cCSMatrix0.minInColumn(int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      byte[] byteArray0 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      cCSMatrix0.sum();
      ColumnMajorSparseMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int1 = 0;
      cCSMatrix0.iteratorOfColumn(int1);
      cCSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      Matrix.zero(14, 6);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      Matrix.identity(14);
      cCSMatrix0.trace();
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfColumns(8);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      cCSMatrix0.product();
      SparseMatrix.identity(14);
      cCSMatrix0.setAll(853.965300545986);
      cCSMatrix1.nonZeroColumnMajorIterator();
      cCSMatrix0.maxInColumn(6);
      cCSMatrix0.blankOfShape(6, 6);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(679, 597, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 30;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(30);
      NumberFormat.getCurrencyInstance();
      int int1 = 2305;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2305);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix.fromMatrixMarket("No rows or columns selected.");
      int int2 = 1198;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      String string0 = "UA*bc);%a;'7A9";
      CCSMatrix.fromCSV(string0);
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix.random(int0, int1, (double) int2, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(int1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32);
      cCSMatrix0.getRow(32);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix.zero(32, 32, 32);
      cCSMatrix0.nonZeroColumnMajorIterator();
      org.evosuite.runtime.Random.setNextRandom(1805);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.iterator();
      Matrix.zero(14, 6);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.spliterator();
      Matrix.identity(14);
      cCSMatrix0.trace();
      cCSMatrix0.blankOfColumns(8);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2477, 8);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setRow(6, (double) 6);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      ((CCSMatrix) columnMajorSparseMatrix0).updateAt(6, 1029, matrixFunction0);
      int int0 = 3598;
      CCSMatrix cCSMatrix1 = new CCSMatrix((-3047), (-284));
      int int1 = 8;
      cCSMatrix1.minInColumn(int1);
      int int2 = (-1077);
      CCSMatrix.diagonal(int2, int0);
      ((CCSMatrix) columnMajorSparseMatrix0).nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32);
      cCSMatrix0.getRow(32);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      SparseMatrix.identity(1);
      MockRandom mockRandom0 = new MockRandom((-2025L));
      SparseMatrix.random(63, 38, 1.0, (Random) mockRandom0);
      cCSMatrix0.setAll((-1.0));
      cCSMatrix0.copyOfColumns(2323);
      cCSMatrix0.min();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(13, vectorProcedure0);
      cCSMatrix0.max();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric((-2233), (double) (-2233), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2233x-2233
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2191, 2191);
      int[] intArray0 = new int[10];
      intArray0[0] = 2191;
      intArray0[1] = 2191;
      intArray0[2] = 8;
      intArray0[3] = 567;
      intArray0[4] = 2191;
      intArray0[5] = 567;
      intArray0[6] = 567;
      intArray0[7] = 567;
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.minInColumn(567);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(8, vectorAccumulator0);
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(567, 64, matrixFunction0);
      cCSMatrix2.blankOfShape(567, 54);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(32, 32);
      cCSMatrix0.getRow(32);
      int int0 = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      int int1 = (-560);
      MockRandom mockRandom0 = new MockRandom(1);
      double double0 = 1.0;
      // Undeclared exception!
      CCSMatrix.random(32, 9019, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(772, 772);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(5, 5, matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(5, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 788;
      CCSMatrix cCSMatrix0 = new CCSMatrix(788, 788);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(5, 5, matrixFunction0);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(5, 0.6);
      byte[] byteArray0 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(788, Double.NEGATIVE_INFINITY);
      cCSMatrix1.nonZeroIteratorOfRow(5);
      cCSMatrix1.setRow(5, Double.POSITIVE_INFINITY);
      MatrixFactory<Matrix> matrixFactory1 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, columnMajorSparseMatrix0);
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      cCSMatrix2.toSparseMatrix();
      int int1 = 19;
      int int2 = (-1656);
      CCSMatrix cCSMatrix3 = new CCSMatrix(int0, int1, int2);
      String string0 = "u%tM;4 t>n84XxM_";
      CCSMatrix.fromMatrixMarket(string0);
      int int3 = (-2042);
      CCSMatrix.zero(int3, int0);
      int int4 = 1001;
      double double0 = 2.0;
      ((CCSMatrix) columnMajorSparseMatrix0).getOrElse(int4, int2, double0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)48;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(18, 18);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.iterator();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.spliterator();
      Matrix.identity(14);
      Integer integer0 = new Integer(14);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfColumns(8);
      cCSMatrix1.multiply((Matrix) cCSMatrix0);
      cCSMatrix1.nonZeroIteratorOfRow(7);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 8;
      doubleArray1[2] = (-165.89198350537);
      doubleArray1[3] = (double) 8;
      doubleArray1[4] = (double) 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      intArray0[2] = 8;
      // Undeclared exception!
      try { 
        cCSMatrix1.multiply((Matrix) cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1 does not equal to 8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 8, 8);
      cCSMatrix0.infinityNorm();
      SparseMatrix.diagonal(68, 598.08790031249);
      Integer integer0 = new Integer((-1528));
      int int0 = 7;
      cCSMatrix0.subtract(4004.2);
      cCSMatrix0.nonZeroIteratorOfRow(13);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(8, 68);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(81, (-1096));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 81x-1096
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      SparseMatrix.diagonal(25, (-270.28257429));
      Integer integer0 = new Integer(8);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = (-225);
      cCSMatrix0.iteratorOrNonZeroColumns();
      Matrix matrix0 = cCSMatrix0.copyOfColumns(7);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.multiply(matrix0);
      MockRandom mockRandom0 = new MockRandom((-2209L));
      int int1 = (-272);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(7, (-272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 7x-272
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (-165.89198350537);
      doubleArray1[3] = (double) 8;
      doubleArray1[4] = (double) 8;
      doubleArray1[5] = (double) 8;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.apply((MatrixMatrixOperation<Matrix>) ooPlaceMatricesAddition0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 8x8 does not equal to 1x8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(6, 6);
      int int1 = 38;
      cCSMatrix0.product();
      cCSMatrix0.setAll((-4813.289361543544));
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(38, 6);
      cCSMatrix0.iteratorOrNonZeroColumns();
      CCSMatrix cCSMatrix2 = new CCSMatrix(6, 38);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix2);
      NumberFormat.getPercentInstance();
      cCSMatrix0.mkString("", "w");
      int int2 = 3;
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroIteratorOfColumn(38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromBinary(byteArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn((byte)48, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 25;
      int int1 = 83;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1462, (-2472.8441348186));
      cCSMatrix0.toColumnMajorSparseMatrix();
      int int2 = 21;
      cCSMatrix0.minInColumn(25);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1462);
      int int3 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1136.4788646, (-2472.8441348186), (-2472.8441348186), Double.NEGATIVE_INFINITY, (-2472.8441348186)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.updateColumn(0, vectorFunction0);
      int int4 = Integer.MAX_VALUE;
      int[] intArray0 = new int[9];
      intArray0[0] = int4;
      intArray0[1] = int3;
      int int5 = 684;
      intArray0[2] = int5;
      int int6 = 18;
      intArray0[3] = int6;
      intArray0[4] = int4;
      intArray0[0] = int3;
      intArray0[7] = int0;
      int int7 = (-457);
      intArray0[8] = int7;
      int int8 = 48;
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(int2, int8);
      int int9 = 1;
      cCSMatrix2.getOrElse(int2, int9, int1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 2194;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2194, 2194);
      cCSMatrix0.columnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(2194, 2179, matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2194);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2194, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (double)2194, (double)2194).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.updateColumn(2179, vectorFunction0);
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      cCSMatrix0.select(intArray0, intArray0);
      int int1 = (-1923);
      double double0 = 226.19;
      long long0 = 717L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
      int int2 = 3;
      int int3 = 1387;
      CCSMatrix.zero(int2, int3);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 87;
      int int1 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, 53);
      Matrix matrix0 = cCSMatrix0.multiply((double) 6);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1372.3363867142655, (double)87, (double)87, (double)53, (double)53).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      int[] intArray0 = new int[8];
      intArray0[0] = 18;
      intArray0[1] = 53;
      intArray0[2] = 684;
      intArray0[3] = (-457);
      intArray0[4] = 18;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = 87;
      intArray0[7] = 684;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '18' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.toRowMajorSparseMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1466, (-2472.8441348186));
      cCSMatrix1.toColumnMajorSparseMatrix();
      cCSMatrix1.minInColumn(25);
      CCSMatrix.diagonal(21, 1466);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(301, vectorProcedure0);
      int int0 = (-111);
      cCSMatrix1.copyOfShape(301, (-111));
      cCSMatrix0.columnMajorIterator();
      int int1 = 28;
      double double0 = Double.NEGATIVE_INFINITY;
      cCSMatrix1.getOrElse(int1, int0, double0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 87;
      int int1 = 53;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, 53);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction1);
      int int2 = 16;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(16, Double.POSITIVE_INFINITY);
      Double double0 = new Double(3775.0);
      Object object0 = new Object();
      cCSMatrix1.equals(object0);
      int int3 = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(0, 87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1217, 1217);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2161, Double.POSITIVE_INFINITY);
      cCSMatrix1.toColumnMajorSparseMatrix();
      cCSMatrix1.minInColumn(1217);
      cCSMatrix0.getRow(487);
      CCSMatrix.diagonal(2191, 2029.9586780561135);
  }
}
