/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 00:43:55 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      JSONScanner jSONScanner0 = new JSONScanner("nF");
      jSONScanner0.intValue();
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(121);
      jSONScanner0.scanEnum(class0, symbolTable0, 'k');
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '8';
      charArray0[2] = ':';
      charArray0[3] = 'T';
      charArray0[4] = 'e';
      charArray0[5] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1791, 1791);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      SymbolTable symbolTable0 = new SymbolTable(3409);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'e');
      assertEquals(1791, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      jSONScanner0.scanFloat('J');
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.isRef();
      jSONScanner0.nextToken(1813);
      jSONScanner0.scanNumber();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      SymbolTable symbolTable0 = null;
      jSONScanner0.scanSymbol((SymbolTable) null);
      char char0 = '1';
      jSONScanner0.indexOf('1', 119);
      jSONScanner0.getCurrent();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 0, json : {y~X^
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      jSONScanner0.intValue();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDouble('B');
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2AHzBEWC/^~I-0S");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.scanDecimal('d');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      char char0 = 'z';
      jSONReaderScanner0.scanDecimal('z');
      jSONReaderScanner0.setToken(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('\'');
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('P');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")H");
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONScanner0.nextIdent();
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'p');
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      jSONScanner0.scanNumber();
      jSONScanner0.scanIdent();
      assertEquals('~', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - u, info : pos 0, json : unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I4S");
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      jSONScanner0.nextIdent();
      charArray0[1] = '@';
      int int0 = (-2363);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-2363));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 3, json : I4S
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.Font");
      jSONReaderScanner0.charAt(20);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("F2");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals('2', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("invalid comment");
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '=';
      jSONScanner0.matchField(charArray0);
      charArray0[2] = 'r';
      charArray0[3] = 'B';
      charArray0[4] = 'V';
      Locale locale0 = new Locale("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.scanISO8601DateIfMatch();
      Locale locale1 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant(locale1);
      charArray0[5] = 'm';
      jSONScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f2");
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?");
      jSONScanner0.nextToken(58);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 803;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8<)31hB;1;PI_j}/N", 803);
      jSONReaderScanner0.sp = 803;
      jSONReaderScanner0.stringDefaultValue();
      char char0 = '|';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('|');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match | - 8, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d");
      int int0 = Calendar.MARCH;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char char0 = 'c';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":ts~Id04bVf# SsB");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{X4@", (-1640));
      jSONReaderScanner0.scanDecimal('t');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = new BufferedReader(mockFileReader0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(bufferedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("U[1yX*7", 43);
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      jSONScanner0.stringDefaultValue = "";
      jSONScanner0.scanFieldDouble(charArray0);
      charArray0[1] = '9';
      charArray0[2] = 'M';
      jSONScanner0.scanBoolean('M');
      jSONScanner0.scanFloat('L');
      charArray0[3] = '(';
      jSONScanner0.isRef();
      charArray0[4] = 'm';
      charArray0[5] = '>';
      charArray0[6] = '[';
      charArray0[7] = 'T';
      charArray0[8] = 'W';
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      boolean boolean0 = jSONScanner0.scanBoolean('#');
      assertFalse(boolean0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("InternFieldNames");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.close();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[0] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2339, 2339);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("not match ", objectArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1867);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{X4@");
      int int0 = jSONScanner0.intValue();
      int int1 = jSONScanner0.matchStat();
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      int int0 = Calendar.DAY_OF_YEAR;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner0.scanStringArray(linkedList0, '.');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":ts~Id04bVf# SsB");
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextToken(120);
      jSONScanner0.intValue();
      jSONScanner0.scanNumber();
      assertEquals('t', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ly(nt}%FEU708c)<?");
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      charArray0[7] = 'o';
      charArray0[8] = 'o';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'o');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEnabled(191, 65);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("J$c0,DU5");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled((-1705), 1089);
      assertEquals((-2), jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'J';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanUUID('Z');
      char[] charArray1 = new char[2];
      charArray1[0] = 'w';
      charArray1[1] = 'Z';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{X4@");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.putChar(',');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2AHzBEWC/^~I-0S", 1155);
      char char0 = 'z';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('z');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":ts~Id04bVf# SsB");
      Feature feature0 = Feature.SupportNonPublicField;
      jSONScanner0.config(feature0, false);
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{X4@");
      jSONScanner0.resetStringPosition();
      jSONScanner0.intValue();
      jSONScanner0.intValue();
      Feature feature0 = Feature.UseBigDecimal;
      jSONScanner0.config(feature0, false);
      assertEquals(861, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) "=";
      objectArray0[3] = (Object) "=";
      objectArray0[4] = (Object) "=";
      jSONReaderScanner0.nextIdent();
      objectArray0[5] = (Object) jSONReaderScanner0;
      objectArray0[6] = (Object) jSONReaderScanner0;
      objectArray0[7] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("=", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('c', (-2429));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2339, 2339);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("2AHzBEWC/^~I-0S", objectArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d");
      int int0 = Calendar.MARCH;
      jSONScanner0.scanDecimal('K');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2AHzBEWC/^~I-0S");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("2AHzBEWC/^~I-0S", objectArray0);
      jSONReaderScanner0.nextToken();
      assertEquals('H', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      String string0 = jSONScanner0.scanString('y');
      assertNull(string0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.scanNumber();
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF");
      jSONScanner0.isRef();
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"E\", pos 1, json : EOF
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2AHzBEWC/^~I-0S");
      jSONScanner0.intValue();
      jSONScanner0.setTimeZone((TimeZone) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '4';
      charArray0[2] = 'H';
      charArray0[3] = '^';
      charArray0[4] = 'R';
      charArray0[5] = '^';
      charArray0[6] = 'N';
      charArray0[7] = '+';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1007));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.intValue();
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SF XDe!\"q #J)U*UG");
      char[] charArray0 = new char[4];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanString('`');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{X4@");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      Locale locale0 = new Locale("{X4@", "I4S", "I4S");
      jSONScanner0.setLocale(locale0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[2];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T;q\"?bPgcS");
      charArray0[0] = '}';
      charArray0[1] = 's';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41, 41);
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.token();
      SymbolTable symbolTable0 = new SymbolTable(41);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(13, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NI ;ISULE:\"");
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      char char0 = '&';
      jSONScanner0.scanDate('&');
      timeZone0.getOffset((-1L));
      jSONScanner0.scanBoolean('&');
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.matchStat = 414;
      jSONScanner0.scanISO8601DateIfMatch(false);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('N', 'N', 'N', 'N', 'N', 'N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2AHzBEWC/^~I-0S");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanDecimal(':');
      jSONScanner0.skipWhitespace();
      jSONScanner0.decimalValue(false);
      jSONScanner0.scanInt(':');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{X4@");
      jSONScanner0.np = 1946;
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      jSONScanner0.scanNumber();
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.isBlankInput();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{X4@");
      JSONScanner jSONScanner1 = new JSONScanner("{X4@");
      int int0 = jSONScanner1.intValue();
      assertEquals(0, int0);
      
      jSONScanner1.close();
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SF XDe\"q #J)U*UG");
      jSONScanner0.nextToken((-311));
      jSONScanner0.intValue();
      jSONScanner0.stringDefaultValue();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      jSONScanner0.scanIdent();
      JSONScanner jSONScanner1 = new JSONScanner("{y~X^", 0);
      int int0 = jSONScanner0.intValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(823, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qnO");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      boolean boolean0 = jSONScanner0.isEnabled(0);
      assertFalse(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      jSONScanner0.scanStringArray(set0, 'b');
      jSONScanner0.stringDefaultValue();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDouble('%');
      jSONScanner0.intValue();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner0.scanStringArray(linkedList0, '.');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.scanDate('1');
      char[] charArray0 = new char[1];
      float float0 = jSONScanner0.scanFloat('W');
      assertEquals(0.0F, float0, 0.01F);
      
      charArray0[0] = '1';
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.stringVal();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.scanString('t');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      jSONScanner0.nextToken();
      int int0 = Calendar.MARCH;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{X4@");
      String string0 = jSONScanner0.tokenName();
      assertEquals("Unknown", string0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'h';
      charArray0[2] = 'e';
      charArray0[3] = 'u';
      charArray0[4] = 'Y';
      charArray0[5] = 'X';
      charArray0[6] = '2';
      charArray0[7] = '[';
      charArray0[8] = 'h';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanNumber();
      jSONScanner0.isEnabled(0, (-1434881251));
      jSONScanner0.scanFieldInt(charArray0);
      int int0 = 110;
      // Undeclared exception!
      try { 
        jSONScanner0.subString(110, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = 2339;
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 2339);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.lexError("I4S", (Object[]) null);
      jSONReaderScanner0.nextToken();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.close();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanLong('Q');
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2AHzBEWC/^~I-0S");
      jSONScanner0.getLocale();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString(':');
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      SymbolTable symbolTable0 = new SymbolTable(69);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":ts~Id04bVf# SsB");
      jSONScanner0.nextToken(120);
      char[] charArray0 = new char[8];
      charArray0[0] = 'u';
      charArray0[1] = '2';
      char char0 = '_';
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONScanner jSONScanner1 = new JSONScanner("qnO", 39);
      int int0 = jSONScanner1.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.scanDecimal('3');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("6G");
      jSONScanner0.intValue();
      SymbolTable symbolTable0 = new SymbolTable(823);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '<');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("falsDe");
      float float0 = jSONScanner0.scanFloat('!');
      assertEquals(0.0F, float0, 0.01F);
      
      jSONScanner0.scanBoolean(' ');
      jSONScanner0.scanDecimal(' ');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('2');
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{[y~X^");
      jSONScanner0.scanNumber();
      jSONScanner0.scanUUID('\\');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(158);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'A';
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2339, 2339);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("2AHzBEWC/^~I-0S", objectArray0);
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'E');
      jSONReaderScanner0.matchStat = (int) 'E';
      jSONReaderScanner0.isRef();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.token();
      jSONReaderScanner0.info();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken(20);
      jSONScanner0.intValue();
      jSONScanner0.scanNumber();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      jSONScanner0.scanIdent();
      jSONScanner0.scanNumber();
      jSONScanner0.scanUUID('L');
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.til.OptioalLong");
      SymbolTable symbolTable0 = new SymbolTable(554);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '[';
      charArray0[2] = '}';
      charArray0[3] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1484);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. %
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":ts~Id04bVf# SsB");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      Locale locale0 = Locale.FRENCH;
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.close();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("InternFieldNames");
      jSONReaderScanner0.scanLong('C');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[0] = '{';
      charArray0[1] = 'Q';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[2] = 'K';
      charArray0[3] = '5';
      charArray0[4] = '+';
      charArray0[5] = 'O';
      charArray0[6] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108);
      jSONReaderScanner0.scanType("error parse true");
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('N');
      assertEquals(12, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      jSONScanner0.nextToken(16);
      jSONScanner0.intValue();
      jSONScanner0.scanNumber();
      assertEquals('y', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(120);
      jSONScanner0.scanNumber();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDouble('%');
      jSONScanner0.scanUUID('m');
      jSONScanner0.putChar('m');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) jSONScanner0;
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.lexError("internfieldnames", objectArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      jSONScanner0.nextToken(1695);
      assertEquals(18, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("TreeSet");
      jSONScanner1.intValue();
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = 'a';
      charArray0[2] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 25);
      jSONReaderScanner0.indexOf('a', 49);
      jSONScanner1.charAt(1695);
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2AHzBEWC/^~I-0S");
      JSONScanner jSONScanner1 = new JSONScanner("error parse false");
      jSONScanner1.scanBoolean('h');
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONScanner1.scanNumber();
      assertEquals(3, jSONScanner1.token());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 3372);
      jSONReaderScanner0.stringVal();
      assertEquals(3372, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n_l");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":ts~Id04bVf# SsB");
      char[] charArray0 = new char[0];
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONScanner jSONScanner0 = new JSONScanner("i4s");
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = 'j';
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.Collections$EmptyMap", 590);
      jSONReaderScanner0.close();
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'g';
      charArray0[2] = ' ';
      charArray0[3] = 'R';
      charArray0[4] = 'p';
      charArray0[5] = '9';
      charArray0[6] = '3';
      charArray0[7] = '7';
      charArray0[8] = '\'';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g9N");
      jSONScanner0.nextToken((-1623931174));
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 9pos 0, json : g9N
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 125;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      char char0 = 'a';
      jSONReaderScanner0.scanDate('a');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("3ZwkE{+Gj![");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate(' ');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      jSONReaderScanner0.scanDate('a');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not close json text, token : ");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('u');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("null");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.getCalendar();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ckIWEqN'b.]hwX9m");
      int int0 = 92;
      jSONReaderScanner0.subString(92, 144);
      jSONReaderScanner0.nextIdent();
      char char0 = 'V';
      JSONLexerBase.isWhitespace('V');
      jSONReaderScanner0.skipWhitespace();
      SymbolTable symbolTable0 = new SymbolTable(144);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ,&d3(&q(-y}%");
      jSONScanner0.nextToken(110);
      JSONScanner jSONScanner1 = new JSONScanner("null", 110);
      jSONScanner1.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONScanner jSONScanner0 = new JSONScanner("xD{^xNNi6fapHT(");
      JSONScanner jSONScanner1 = new JSONScanner("xD{^xNNi6fapHT(");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. D
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+2U4#l}HsXw&]WZ{");
      jSONScanner0.nextToken(120);
      char[] charArray0 = new char[3];
      char char0 = '{';
      charArray0[0] = '{';
      charArray0[1] = '\'';
      charArray0[2] = 'g';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 7, (-423));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ase");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      jSONScanner0.scanStringArray(list0, '^');
      jSONScanner0.scanNumber();
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3?loRo(6B;zV", (-549));
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanDate('R');
      assertEquals((-549), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONLexerBase.isWhitespace(']');
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 988);
      jSONReaderScanner0.nextTokenWithChar(']');
      assertEquals(15, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2Z^{1&t", 16);
      jSONScanner0.nextToken(9);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not close json text, token : ");
      jSONScanner0.scanString('N');
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not close json text, token : ");
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'q';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      Class<Feature> class0 = Feature.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'q');
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tq,Up:#+>y!]", 3970);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONScanner0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = '@';
      charArray0[2] = 'I';
      charArray0[3] = '6';
      charArray0[4] = 'z';
      charArray0[5] = 'A';
      jSONScanner0.scanFieldFloatArray(charArray0);
      objectArray0[1] = (Object) jSONScanner0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) jSONScanner0;
      objectArray0[4] = (Object) jSONScanner0;
      objectArray0[5] = (Object) jSONScanner0;
      objectArray0[6] = (Object) "tq,Up:#+>y!]";
      Object object1 = new Object();
      objectArray0[7] = object1;
      jSONScanner0.lexError("tq,Up:#+>y!]", objectArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray1);
      JSONScanner jSONScanner1 = new JSONScanner("tq,Up:#+>y!]");
      JSONScanner jSONScanner2 = new JSONScanner(charArray1, 0, 3970);
      jSONScanner2.scanFieldDouble(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner1.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SF XDe\"q #J)U*UG");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextToken(40);
      jSONScanner0.scanNumber();
      char[] charArray1 = new char[1];
      charArray1[0] = '>';
      jSONScanner0.scanFieldUUID(charArray1);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanNumber();
      char[] charArray1 = new char[1];
      jSONScanner0.scanFieldUUID(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":ts~Id04bVf# SsB");
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      jSONScanner0.scanBoolean('9');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed siAVle-quote string");
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(76);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(110);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse true", 110);
      jSONReaderScanner0.scanType("wvvq7%'|%ct:!Gl");
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('0');
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-1721), (-2747), 110, symbolTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[0] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("not match ", objectArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.setToken((-4986));
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":ts~Id04bVf# SsB");
      jSONScanner0.close();
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.nextToken(19);
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      String string0 = jSONScanner0.stringDefaultValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")}");
      Object object0 = new Object();
      JSONScanner jSONScanner1 = new JSONScanner("ol");
      jSONScanner0.nextToken();
      jSONScanner0.scanNumber();
      assertEquals('}', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = 'Q';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[2] = 'K';
      charArray0[3] = '5';
      charArray0[1] = '\u001D';
      charArray0[5] = '\u001D';
      charArray0[6] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108);
      jSONReaderScanner0.scanType("error parse true");
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.nextIdent();
      long long0 = jSONReaderScanner0.scanLong('N');
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      char char0 = File.pathSeparatorChar;
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.scanLong('~');
      jSONReaderScanner0.nextToken((-1));
      jSONReaderScanner0.getLocale();
      int int0 = jSONReaderScanner0.scanType("create instance error");
      assertEquals('Z', jSONReaderScanner0.getCurrent());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF");
      jSONScanner0.putChar('V');
      Number number0 = jSONScanner0.integerValue();
      assertEquals(21, number0);
      
      jSONScanner0.numberString();
      jSONScanner0.scanDecimal('X');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%VH9)G7md<i]v\"ry&Y");
      jSONScanner0.nextToken();
      int int0 = Calendar.SHORT_FORMAT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.putChar('g');
      jSONScanner0.integerValue();
      jSONScanner0.numberString();
      JSONScanner jSONScanner1 = new JSONScanner("false");
      jSONScanner1.scanSymbol((SymbolTable) null);
      assertEquals('\u001A', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SF XDe\"q #J)U*UG");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.putChar('g');
      jSONScanner0.scanString('O');
      jSONScanner0.integerValue();
      jSONScanner0.numberString();
      SymbolTable symbolTable0 = null;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '%';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1483);
      jSONReaderScanner0.scanType("");
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.nextIdent();
      long long0 = jSONReaderScanner0.scanLong('8');
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'W';
      charArray0[2] = '.';
      charArray0[3] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4384);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextToken(999999);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.lexError("URB-i6B5&!{E7f", (Object[]) null);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.setToken(36);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3@,I6f/hN1mmZ8");
      jSONScanner0.scanFloat('[');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-3606), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2AHzBEWC/^~I-0S");
      JSONScanner jSONScanner1 = new JSONScanner("InternFieldNames");
      jSONScanner0.scanFloat('a');
      Locale locale0 = Locale.ITALY;
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SF XDe\"q #J)U*UG");
      jSONScanner0.nextToken(0);
      int int0 = Calendar.DST_OFFSET;
      jSONScanner0.scanDecimal('C');
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.matchField2(charArray0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r;\"9dIkQVDg,y");
      jSONScanner0.nextToken();
      int int0 = Calendar.SHORT_FORMAT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.nextToken((-2006));
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(1, (-173));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("aW9~)?HIp");
      jSONScanner0.nextToken(5);
      jSONScanner0.scanNumber();
      assertEquals('W', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      int int0 = 894;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 894);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanIdent();
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // *\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SF XDe\"q #J)U*UG");
      jSONScanner0.nextToken((-311));
      jSONScanner0.intValue();
      jSONScanner0.longValue();
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '7';
      charArray0[2] = 'j';
      charArray0[3] = '<';
      charArray0[4] = '\\';
      charArray0[5] = 'q';
      charArray0[6] = ';';
      char char0 = 'o';
      charArray0[7] = 'o';
      int int0 = (-397);
      SymbolTable symbolTable0 = new SymbolTable(8);
      jSONScanner0.scanFieldStringArray(charArray0, (-397), symbolTable0);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g9N");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.getLocale();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'F';
      charArray0[0] = 'F';
      charArray0[1] = '_';
      char char1 = 'H';
      charArray0[2] = 'H';
      char char2 = '(';
      charArray0[3] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 154, 154);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), 1358);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(121);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=0GR2x.THa}y*6Oa", 121);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('h');
      jSONReaderScanner0.isEOF();
      assertEquals(121, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F2");
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charArray0;
      objectArray0[1] = (Object) "5m4l";
      objectArray0[2] = (Object) charArray0;
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) "5m4l";
      objectArray0[5] = (Object) "5m4l";
      objectArray0[6] = (Object) jSONReaderScanner0;
      objectArray0[7] = (Object) charArray0;
      jSONReaderScanner0.lexError("5m4l", objectArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.setToken((-164789406));
      assertEquals((-164789406), jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9x]K2\"j4}", 0);
      int int0 = jSONReaderScanner0.scanInt('\'');
      assertEquals(9, int0);
      
      jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4", 91);
      int int0 = jSONReaderScanner0.scanInt('`');
      assertEquals(4, int0);
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals(91, jSONReaderScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str", 0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = '2';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 91);
      jSONReaderScanner1.scanInt('2');
      jSONReaderScanner1.isEOF();
      int int0 = (-2716);
      jSONReaderScanner0.features = 2354;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(4);
      assertEquals(20, jSONScanner0.token());
      
      jSONScanner0.scanNumber();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("InternFieldNames");
      jSONScanner0.nextToken(11);
      jSONScanner0.scanNumber();
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("aW9~)?HIp");
      JSONScanner jSONScanner1 = new JSONScanner("<9");
      jSONScanner1.nextToken(7);
      assertEquals('9', jSONScanner1.getCurrent());
      
      jSONScanner0.scanNumber();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/!s\u0003k%KA");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(4);
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '?';
      charArray0[2] = 'V';
      charArray0[3] = 'l';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 61);
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("falsDe");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2AHzBEWC/^~I-0S", 18);
      jSONScanner0.stringVal();
      jSONScanner0.isRef();
      jSONScanner0.nextToken(18);
      int int0 = Calendar.MONTH;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d");
      jSONScanner0.scanIdent();
      int int0 = Calendar.MARCH;
      jSONScanner0.nextToken(2);
      jSONScanner0.scanNumber();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p{';TQ!*zfA-=C");
      JSONScanner jSONScanner1 = new JSONScanner("e2)sY|>Y!{s}");
      jSONScanner1.isRef();
      jSONScanner1.scanNumber();
      assertEquals(3, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":ts~Id04bVf# SsB");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanDecimal('g');
      jSONScanner0.scanInt('g');
      assertEquals('t', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y}~X^");
      jSONScanner0.next();
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONScanner0.nextToken(2);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(",`;P<zbrwv2gm)&h_!");
      jSONScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '5');
      jSONScanner0.nextToken(48);
      jSONScanner0.stringDefaultValue();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("k%Z(#wAJA=AI7 ?", 0);
      SymbolTable symbolTable0 = new SymbolTable(2113);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONScanner0.scanEnum(class0, symbolTable0, 'g');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      JSONScanner jSONScanner1 = new JSONScanner("aw9");
      jSONScanner0.scanFloat('l');
      jSONScanner1.nextToken(1678);
      assertEquals(1, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanFloat('\u0012');
      jSONScanner0.scanBoolean('e');
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('U');
      assertEquals('n', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONScanner jSONScanner1 = new JSONScanner("null");
      jSONScanner1.scanFloat('.');
      jSONScanner1.nextToken(102);
      assertTrue(jSONScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(17);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44, 2465);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"B<[pCc4~!dZGVK-ys");
      jSONScanner0.scanFloat('.');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 29, 29);
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : pos 1, json :  - 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(385);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":NGc_s{u^'wy");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, (-1725629740), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDecimal('K');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanDecimal('[');
      JSONScanner jSONScanner1 = new JSONScanner("new", 3);
      jSONScanner1.putChar('[');
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldUUID(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 29, 29);
      jSONReaderScanner0.scanUUID('[');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 44);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 29, 29);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45);
      jSONReaderScanner1.scanIdent();
      assertEquals(18, jSONReaderScanner1.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("NVR3#?:4tr,");
      jSONScanner0.scanFloat('.');
      jSONScanner0.nextToken(64);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      jSONScanner0.nextToken();
      int int0 = Calendar.TUESDAY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.nextToken(3);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{y~X^");
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.nextToken();
      int int0 = Calendar.TUESDAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1124, 3, (-4104));
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      assertEquals(12, jSONScanner0.token());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = jSONScanner0.scanSymbol((SymbolTable) null);
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('T');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1(0FYqr8");
      jSONScanner0.nextToken();
      int int0 = Calendar.SHORT_FORMAT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      char char0 = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'g';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.putChar('i');
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("J$c0,DU5", 70);
      jSONScanner0.nextToken(70);
      JSONScanner jSONScanner1 = new JSONScanner("J$c0,DU5");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.isEOF();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanBoolean('R');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1(0FYqr8");
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
      
      int int0 = Calendar.SHORT_FORMAT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      float float0 = jSONScanner0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1(0FYqr8");
      jSONScanner0.nextToken();
      assertEquals('(', jSONScanner0.getCurrent());
      
      int int0 = Calendar.SHORT_FORMAT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'i';
      charArray0[2] = 'g';
      jSONScanner0.floatValue();
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 29, 29);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 13);
      jSONReaderScanner1.scanIdent();
      JSONScanner.checkDate('&', 'h', 'j', '`', '1', 'A', 84, 71);
      jSONReaderScanner0.isRef();
      jSONReaderScanner1.next();
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = '`';
      charArray0[2] = 'V';
      charArray0[3] = '%';
      charArray0[4] = '-';
      charArray0[5] = 'f';
      charArray0[6] = 'Z';
      charArray0[7] = 'x';
      charArray0[7] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, 0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.nextToken(70);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'E');
      jSONReaderScanner0.scanDouble('A');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 252);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken(12);
      JSONScanner jSONScanner1 = new JSONScanner("null");
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-2));
      jSONReaderScanner0.next();
      assertEquals((-2), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken(12);
      JSONScanner jSONScanner1 = new JSONScanner("null");
      char char0 = File.separatorChar;
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 29, 29);
      int int0 = Calendar.AUGUST;
      jSONReaderScanner0.nextIdent();
      assertEquals(20, jSONReaderScanner0.token());
      
      char[] charArray1 = new char[7];
      charArray1[0] = '9';
      charArray1[1] = '9';
      charArray1[2] = '9';
      charArray1[3] = '9';
      charArray1[4] = '9';
      charArray1[5] = '9';
      charArray1[6] = '9';
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 7);
      jSONScanner0.scanBoolean('?');
      jSONScanner0.scanDecimal('c');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 25;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 25);
      TimeZone timeZone0 = TimeZone.getTimeZone(", json : ");
      jSONReaderScanner0.timeZone = timeZone0;
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char char0 = 'w';
      jSONReaderScanner0.scanDouble('w');
      JSONScanner jSONScanner1 = new JSONScanner(", json : ");
      jSONScanner1.scanFieldDecimal(charArray0);
      jSONScanner1.scanString('w');
      jSONScanner1.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a\"L9");
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '1';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanDouble('1');
      jSONReaderScanner0.scanInt('1');
      jSONReaderScanner0.nextIdent();
      char[] charArray1 = new char[4];
      charArray1[0] = 'v';
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'c');
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1(0FYqr8");
      float float0 = jSONScanner0.scanFloat('[');
      assertEquals(1.0F, float0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 601, (-3606));
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-3606), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(17);
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '2';
      StringReader stringReader0 = new StringReader("new");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(bufferedReader0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanDate('2');
      JSONScanner jSONScanner1 = new JSONScanner("new");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(9, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDate('2');
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      
      jSONReaderScanner0.isEnabled((-980));
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      // Undeclared exception!
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'v');
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldUUID(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(4161);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("3ZwkE{+Gj![", 4161, 4161, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      jSONScanner0.scanFloat('#');
      jSONScanner0.scanType("3ZwkE{+Gj![");
      JSONScanner jSONScanner1 = new JSONScanner("3ZwkE{+Gj![", (-2));
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldDecimal(charArray0);
      jSONScanner1.scanNumber();
      assertEquals((-1), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanDecimal('2');
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ase");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      jSONScanner0.scanStringArray(list0, '^');
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3?loRo(6B;zV", (-549));
      char char0 = JSONLexer.EOI;
      jSONReaderScanner0.scanDate('R');
      assertEquals((-549), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "\"B<[pCc4~j!dZ\\YVK-ys";
      JSONScanner jSONScanner0 = new JSONScanner("\"B<[pCc4~j!dZYVK-ys");
      char char0 = '\u001B';
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldDate(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(480);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('#');
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![", 1024);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "3cBL40*o-FgZo6";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3cBL40*o-FgZo6", 4534);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('g');
      charArray0[0] = 'Y';
      jSONReaderScanner0.scanFieldLong(charArray0);
      charArray0[1] = 'l';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 4534);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("EEE", 2122);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.sbuf = charArray0;
      Locale locale0 = Locale.FRENCH;
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.close();
      jSONReaderScanner0.scanFieldLong(charArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, 'Z');
      jSONScanner0.scanUUID('Z');
      jSONScanner0.scanNumber();
      int int0 = 417;
      int int1 = (-2843);
      int int2 = 117;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![", 'Z');
      char[] charArray0 = new char[7];
      MockDate mockDate0 = new MockDate();
      jSONReaderScanner0.scanIdent();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldDate(charArray0);
      int int0 = Calendar.MONDAY;
      jSONReaderScanner0.info();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanIdent();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.token();
      jSONReaderScanner0.info();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      char char0 = File.pathSeparatorChar;
      jSONReaderScanner0.scanInt('5');
      JSONScanner jSONScanner0 = new JSONScanner("}GNK\",4x}");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("EEE", 44);
      jSONScanner0.scanFieldDecimal(charArray0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(44, "3ZwkE{+Gj![");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.token();
      jSONReaderScanner0.info();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[0];
      jSONScanner0.putChar('\'');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.setToken(24);
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("EEE", 24);
      jSONReaderScanner2.scanBoolean('\'');
      jSONScanner0.nextToken(0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.setToken(2423);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pqn");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("pqn", 'q');
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanUUID('q');
      JSONScanner jSONScanner1 = new JSONScanner("A=<vGF[cS8<u_]CQ#ZB", (-1));
      jSONScanner0.scanFloat('c');
      JSONScanner jSONScanner2 = new JSONScanner("MOzVa]gav0?&M.z/.", 102);
      jSONScanner0.scanNumber();
      jSONReaderScanner0.scanString('q');
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.putChar(']');
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = '\'';
      charArray0[2] = ']';
      charArray0[3] = '\'';
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      charArrayReader0.mark(0);
      SymbolTable symbolTable0 = new SymbolTable(40);
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanEnum(class0, symbolTable0, '\'');
      int[] intArray0 = JSONLexerBase.digits;
      jSONReaderScanner0.getCalendar();
      char[] charArray1 = new char[3];
      charArray1[0] = '\'';
      charArray1[1] = 'l';
      charArray1[2] = ']';
      jSONReaderScanner0.scanFieldSymbol(charArray1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 4428);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('|');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 784);
      jSONReaderScanner0.nextToken(8);
      jSONReaderScanner0.getLocale();
      jSONScanner0.setTimeZone((TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      char char0 = '5';
      char char1 = 'V';
      char char2 = '{';
      jSONReaderScanner0.scanInt('{');
      JSONScanner jSONScanner0 = new JSONScanner("java.nio.file.Path");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      StringReader stringReader0 = new StringReader("\":\">}7");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanDate(']');
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'Z';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanBoolean('2');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![", 0);
      char[] charArray0 = new char[0];
      jSONScanner0.putChar('\'');
      Locale locale0 = Locale.FRENCH;
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.close();
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.getLocale();
      jSONScanner0.setTimeZone((TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![", 0);
      char[] charArray0 = new char[0];
      jSONScanner0.putChar('\'');
      Locale locale0 = Locale.FRENCH;
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.close();
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-u\"l");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-u\"l");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-u\"l");
      jSONReaderScanner0.scanIdent();
      char[] charArray1 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      charArrayReader0.read(charArray0);
      charArrayReader0.ready();
      int int0 = 17;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.sbuf = charArray0;
      StringReader stringReader0 = new StringReader("3ZwkE{+Gj![");
      jSONScanner0.setToken(63);
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("WriteEnumUsingName", 63);
      jSONReaderScanner0.scanBoolean('u');
      jSONScanner0.nextToken((-1));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SF XDe\"q #J)U*UG");
      jSONScanner0.nextToken((-311));
      jSONScanner0.intValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SF XDe\"q #J)U*UG");
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'H';
      charArray0[2] = 'x';
      charArray0[3] = '}';
      charArray0[4] = '4';
      charArray0[5] = 'F';
      charArray0[6] = '[';
      jSONReaderScanner0.scanFieldDate(charArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanIdent();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      charArrayReader0.mark((-2));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanNumber();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 2, json : SF XDe\"q #J)U*UG
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[3];
      charArray0[1] = 'Q';
      charArray0[1] = ')';
      charArray0[2] = '}';
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'k');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = ')';
      charArray0[2] = '}';
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'k');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner1 = new JSONScanner("ull");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner1.scanFieldDecimal(charArray0);
      jSONScanner1.scanDecimal('o');
      jSONScanner0.scanFieldFloat(charArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'M';
      jSONScanner0.scanFieldDecimal(charArray1);
      jSONScanner0.scanDecimal('t');
      jSONScanner0.scanFieldFloat(charArray1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.nextToken((int) (byte)10);
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.scanType("create instance error");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      JSONScanner jSONScanner1 = new JSONScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.scanLong(',');
      jSONReaderScanner0.nextToken(15);
      jSONReaderScanner0.scanBoolean(',');
      jSONScanner0.nextToken((-2055));
      jSONReaderScanner0.getCalendar();
      jSONScanner0.scanDouble('!');
      jSONScanner0.getFeatures();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      StringReader stringReader0 = new StringReader("\":\">}7");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "syntax error, expect {, actual ");
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[2] = 'Z';
      charArray0[2] = ']';
      charArray0[3] = 'Z';
      jSONReaderScanner1.scanFieldString(charArray0);
      jSONReaderScanner1.scanFieldIntArray(charArray0);
      jSONReaderScanner0.next();
      jSONScanner0.scanNumber();
      jSONReaderScanner1.scanString('Z');
      jSONScanner0.scanFieldIntArray(charArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3ZwkE{+Gj![");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      StringReader stringReader0 = new StringReader("\":\">}7");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[2] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      jSONReaderScanner1.scanFieldString(charArray0);
      jSONReaderScanner1.scanFieldIntArray(charArray0);
      jSONReaderScanner0.next();
      jSONScanner0.scanNumber();
      jSONReaderScanner1.scanString('Z');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.isEOF();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '5';
      charArray0[5] = 'F';
      charArray0[3] = 'z';
      charArray0[5] = 'S';
      charArray0[6] = 'z';
      charArray0[1] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      jSONReaderScanner0.nextToken(3);
      jSONReaderScanner0.scanDate('z');
      JSONScanner jSONScanner0 = new JSONScanner("illegal", 123);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanString('}');
      JSONScanner jSONScanner1 = new JSONScanner("new");
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanLong('}');
      int int0 = (-2055);
      SymbolTable symbolTable0 = new SymbolTable(110);
      Class<String> class0 = String.class;
      char char0 = 'm';
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'T');
      jSONReaderScanner0.nextToken(123);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanString('}');
      JSONScanner jSONScanner1 = new JSONScanner("new");
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanLong('}');
      jSONScanner1.scanSymbol((SymbolTable) null);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      JSONScanner jSONScanner0 = new JSONScanner("3ZwkE{+Gj![");
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken(0);
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.scanType("wkE");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. +
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
