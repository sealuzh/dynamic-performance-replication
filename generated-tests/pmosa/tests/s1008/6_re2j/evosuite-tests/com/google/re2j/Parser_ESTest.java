/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:28:03 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "+L+v8w";
      int int0 = 3632;
      try { 
        Parser.parse("+L+v8w", 3632);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 0, 0);
      Parser parser0 = new Parser("", 2626);
      Parser.parse("", 2626);
      Parser.parse("", 2626);
      Parser.parse("", 0);
      Parser.parse("", 0);
      Parser.parse("3q@c8YCq", 0);
      Parser.parse("invalid named capture", 0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, 2626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 116;
      try { 
        Parser.parse("|+9&2SPJ[-", 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", 256);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse("`", 1445);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Parser.parse("<(?P<(?PY", 484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?PY`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse(",(", (-1532));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `,(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("(/", 225);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(/`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 64);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "stack underflow";
      Parser parser0 = new Parser("stack underflow", 0);
      Parser.parse("stack underflow", 0);
      Parser.parse("stack underflow", 0);
      int int0 = (-2483);
      Parser.parse("stack underflow", (-2483));
      int int1 = 43264;
      Parser.parse("stack underflow", 43264);
      Regexp[] regexpArray0 = new Regexp[1];
      String string1 = "[:^alpha:]";
      Regexp regexp0 = Parser.parse("[:^alpha:]", 2088);
      regexp0.cap = 0;
      regexp0.flags = 0;
      regexpArray0[0] = regexp0;
      Parser.subarray(regexpArray0, 1521, 1521);
      regexp0.name = "stack underflow";
      Parser.parse("com.google.re2j.Parser$Stack", 114);
      Parser.parse("com.google.re2j.Parser$Stack", 114);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 43264, 1521);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        Parser.parse("+tD+@-~x", 484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Parser.parse("[", 632);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[-]", (-2016));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = (-299);
      String string0 = "E(?P<";
      try { 
        Parser.parse("E(?P<", (-299));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("[:-", 148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Parser.parse("", 2777);
      Parser.parse("", 0);
      Regexp regexp0 = Parser.parse("", (-169));
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("IjCD?Ur7?qg`ojn", 128557);
      regexpArray0[1] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-988), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      String string0 = "`!{cO=-0iP";
      Regexp regexp2 = Parser.parse("`!{cO=-0iP", 0);
      regexpArray0[2] = regexp2;
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp0 = Parser.parse("{/", (-1304));
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1069, (-1304));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{", (-4527));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp0 = Parser.parse("{f", (-243));
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1506), (-992));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 2257;
      try { 
        Parser.parse("gki&sc%o=xM')KkB", 2257);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser.parse("T$X6Ep_8", 8147);
      Regexp regexp0 = Parser.parse("T$X6Ep_8", 0);
      regexp0.reinit();
      Parser parser0 = new Parser("q7Y8iqjv.j2,:", 8147);
      Parser.parse("q7Y8iqjv.j2,:", 0);
      Parser.parse("q7Y8iqjv.j2,:", 8147);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = (-1392);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      int int0 = (-1817);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1114), (-1817));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Parser.parse("$)E/p", (-1188));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      try { 
        Parser.parse("(g-[V<c;Ghg.-t()@", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[V<c;Ghg.-t()@`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 105;
      try { 
        Parser.parse("[:-%", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-%`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", (-2464));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Parser parser0 = new Parser("GwFZ0uc:=>'jd9$3,p]", 6980);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("GwFZ0uc:=>'jd9$3,p]", 6980);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("GwFZ0uc:=>'jd9$3,p]", (-559));
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("RJ.Rxs}#,u.|", 16);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp4);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      
      regexpArray0[6] = regexp7;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 2025, 2025);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Parser.parse("=|U$z,", (-292));
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 42, (-292));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":|", 1332);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "\\x";
      Parser.parse("x", (-115));
      int int0 = 3851;
      Parser.parse(string0, int0);
      String string1 = "Unified_Ideograph";
      int int1 = 124;
      Parser parser0 = new Parser(string1, int1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        Parser.parse("'[^x0-x{0FFF}", 3584);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^x0-x{0FFF}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "\\x{";
      int int0 = (-1624);
      Parser parser0 = new Parser("x{", (-1624));
      Parser.parse("x{", (-1624));
      String string1 = "\\P";
      int int1 = 2546;
      Parser.parse(string1, int1);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1332;
      try { 
        Parser.parse("'[x{0FFF}", 1332);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[x{0FFF}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Parser.parse("", 0);
      Parser parser0 = new Parser("Shavian", 2401);
      Parser.parse("S", 7965);
      String string0 = "@l|?SVPU=~US";
      int int0 = (-3176);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "\"fK?h";
      int int0 = 1744;
      Parser parser0 = new Parser("\"fK?h", 1744);
      Parser.parse("\"fK?h", 1744);
      Regexp regexp0 = Parser.parse("\"fK?h", 0);
      Parser.parse("o*\u0004kcP|", 1744);
      Parser.parse(string0, int0);
      Regexp regexp1 = Parser.parse(string0, int0);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp2;
      String string1 = "#t']N";
      Regexp regexp3 = Parser.parse(string1, int0);
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      int int1 = (-1583);
      regexp3.reinit();
      int int2 = 0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "\\7m`S/lwp\"O9L";
      Parser.parse("\u0007m`S/lwp\"O9L", 2344);
      int int0 = 3010;
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 2250;
      Parser.parse("oKN3+^&", (-547));
      int int1 = 706;
      Parser.parse("auoo", 706);
      try { 
        Parser.parse("G`^P0k)FMW", 8057);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = new Parser("", (-1161));
      Regexp[] regexpArray0 = new Regexp[2];
      try { 
        Parser.parse("[:.-t()@", (-411));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:.-t()@`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Parser.parse(":^", 0);
      Regexp regexp0 = Parser.parse(":^", 0);
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op2 = Regexp.Op.LITERAL;
      Regexp regexp4 = new Regexp(regexp_Op2);
      Regexp regexp5 = new Regexp(regexp0);
      Regexp.Op regexp_Op3 = Regexp.Op.STAR;
      Regexp regexp6 = new Regexp(regexp_Op3);
      Regexp regexp7 = new Regexp(regexp3);
      assertFalse(regexp7.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        Parser.parse("[", (-628));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp0 = Parser.parse("o*\u0004kcP|", (-1));
      Parser.parse("o*\u0004kcP|", (-1));
      Parser.parse("o*\u0004kcP|", (-1));
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.flags = 882;
      Parser.parse(">&Z N|1jR", (-1));
      regexp0.reinit();
      Parser.subarray(regexpArray0, 58, 58);
      Regexp regexp2 = Parser.parse("Any", 64);
      Regexp regexp3 = Parser.parse(">&Z N|1jR", 0);
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":|A5", 1332);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Parser parser0 = new Parser("[:a:]", 500);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("[:a:]", 500);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("P", 37);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      String string0 = "yYn> 4]6{^%h;f";
      int int0 = 2386;
      Regexp regexp5 = Parser.parse(string0, int0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse(string0, int0);
      regexpArray0[5] = regexp6;
      String string1 = "^a";
      int int1 = 49;
      Regexp regexp7 = Parser.parse(string1, int1);
      regexpArray0[6] = regexp7;
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp8 = new Regexp(regexp_Op1);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexpArray0[7]);
      regexpArray0[8] = regexp9;
      int int2 = (-1);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":|5", 1332);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Common", 2683);
      Regexp regexp1 = Parser.parse("ISzQYh.cB#9GS-Ka?", 1232);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "6{W'Kxx3YA;p;(gZs:";
      int int0 = 4084;
      try { 
        Parser.parse("6{W'Kxx3YA;p;(gZs:", 4084);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `6{W'Kxx3YA;p;(gZs:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("8|.YAoQ0Yt", 2389);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("com.google.re2j.Utils", 2377);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[4] = regexp4;
      Parser.parse("missing closing )", 14);
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 14, (-3067));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("zt\bf]&P W", (-16));
      Regexp regexp1 = Parser.parse("zt\bf]&P W", (-16));
      regexp1.equals(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.reinit();
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("zt\bf]&P W", (-16));
      assertFalse(regexp3.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 847;
      Parser.parse(">&Z N|1jR", (-1));
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 1770, 1770);
      int int1 = 1628;
      Parser.parse("Pwb", 1628);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1033;
      try { 
        Parser.parse("v*|'[-[m", 1033);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-[m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "oKN3+^&";
      int int0 = (-547);
      Regexp regexp0 = Parser.parse("oKN3+^&", (-547));
      Parser.parse("regexp/syntax: internal error", (-547));
      Regexp regexp1 = Parser.parse("Pkq>", (-547));
      regexp1.reinit();
      int int1 = 1770;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "";
      int int0 = 1543;
      Regexp regexp0 = Parser.parse("", 1543);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      int int1 = 2672;
      Regexp regexp2 = Parser.parse("p", 2672);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse(string0, int0);
      regexpArray0[4] = regexp4;
      String string1 = "[:";
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 64;
      try { 
        Parser.parse("v*|'[-[m", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-[m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 1543);
      Regexp regexp1 = Parser.parse("", (-910));
      int int0 = 965;
      Regexp regexp2 = Parser.parse("", 965);
      String string0 = "invalid escape sequence";
      Parser.parse("invalid escape sequence", 965);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp2;
      int int1 = 1121;
      try { 
        Parser.parse("Yb8{)R9#$;u*gU&g4Zo", 1121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Parser.parse("o*\u0004kcP|", (-1));
      Parser.parse("o*\u0004kcP|", (-1));
      Parser.parse("o*\u0004kcP|", (-1));
      int int0 = 2672;
      Parser.parse("q", 2672);
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Parser.parse("o*\u0004kcP|", (-1));
      String string0 = "w'bzrK-1{rEa({1Di";
      try { 
        Parser.parse("w'bzrK-1{rEa({1Di", 2672);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `w'bzrK-1{rEa({1Di`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "Hh{9(l";
      try { 
        Parser.parse("Hh{9(l", 949);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Hh{9(l`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("8|.YAoQ0Yt", 2389);
      regexp0.max = 1406;
      regexpArray0[0] = regexp0;
      regexp0.equals("8|.YAoQ0Yt");
      Parser.parse("()", 2389);
      Regexp regexp1 = Parser.parse(".-", (-727));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|K", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "Bidi_Control";
      int int0 = 3;
      Parser parser0 = new Parser("Bidi_Control", 3);
      Parser.parse("&nyMs", 3);
      Parser.parse("p}&.Q'", 461);
      Regexp[] regexpArray0 = null;
      int int1 = 91;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "oN13~\\}&.Q'";
      Parser.parse("oN13~}&.Q'", (-547));
      Parser.parse("", (-547));
      try { 
        Parser.parse("-[", (-547));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Parser.parse("(?PY", 484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|x`wY4g|wl*|", 8);
      Regexp regexp1 = Parser.parse("|x`wY4g|wl*|", 80);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser.parse("[::]", 480);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 330);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Parser.parse("@+Zcxi", 44);
      try { 
        Parser.parse("y%~{go}f(i_^j99e{", 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `y%~{go}f(i_^j99e{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 80;
      Parser parser0 = new Parser("(?", 80);
      try { 
        Parser.parse("(?", 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "\\";
      Parser.parse("", 1009);
      int int0 = 1027;
      Regexp regexp0 = Parser.parse(string0, int0);
      String string1 = "^|[?9|hWezUH_XWwt";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        Parser.parse("'[^x00-x{10FFFF}", (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^x00-x{10FFFF}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", 16);
      Parser parser0 = new Parser("^x00-x{10FFFF}", (-435));
      Parser.parse("^x00-x{10FFFF}", 6);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      Regexp regexp1 = Parser.parse("^x00-x{10FFFF}", (-435));
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 16, (-3916));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8|.|YAoQ0Yt", 2768);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8|.|YAoQ0Yt", (-3139));
      Regexp regexp1 = Parser.parse("8|.|YAoQ0Yt", 2785);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2785, (-3139));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\r", 1524);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        Parser.parse("_Bwm.Se[q[<IB^-", 484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[q[<IB^-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 484;
      Parser.parse("w", 484);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 484, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PCl", 484);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp1 = Parser.parse("PCl", 66);
      regexpArray0[3] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3585, 327);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP", (-3079));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Parser.parse("6V[^7k", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^7k`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Parser.parse("(?:", 484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        Parser.parse("(?-:$f", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp regexp0 = Parser.parse("=sKYx&-:Ad;?LD.|Z", 484);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Parser.parse("(?i<(?PY", 484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?i<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = new Parser(":$39vCf9", 1489);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse(":$39vCf9", 1489);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("mktoYXN9", 565);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("ihT~UBv7$/jMg", 113);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse(":$39vCf9", 3270);
      regexpArray0[5] = regexp6;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3252, (-145));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("\f", (-404));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("\f", (-404));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("\f", (-404));
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("", 439);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("75o1uR|#nj_fnau", (-404));
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[5] = regexp6;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = Parser.parse("N PzyRUOU~", 332);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexp_Op0);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3674, 43056);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007!", 81);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 81, 70);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser.parse("9xh|,`szx0!", (-1188));
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, (-1188), (-1188));
      assertNotNull(regexpArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000!", 3128);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Parser parser0 = new Parser("Z", 1295);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("Z", 1295);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("KxR", 1295);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("KxR", 12);
      regexpArray0[4] = regexp4;
      int int0 = (-3119);
      Regexp regexp5 = Parser.parse("regexp/syntax: internal error", (-3119));
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("\u0004", 36);
      regexpArray0[6] = regexp6;
      int int1 = (-1209);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = new Parser("Dash", 43008);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("Dash", 800);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("\n", (-2959));
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp6 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp5);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp1);
      regexpArray0[7] = regexp8;
      Regexp.Op regexp_Op2 = Regexp.Op.END_LINE;
      Regexp regexp9 = new Regexp(regexp_Op2);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 191, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      int int0 = 89;
      Regexp regexp0 = Parser.parse("GDS9wED9\u0006C=s", 89);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.toString();
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp4);
      regexpArray0[5] = regexp5;
      int int1 = (-1760);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Parser.parse("P{", 484);
      String string0 = "rQ).-";
      int int0 = (-683);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 2768);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2768, 54);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      int int0 = (-2388);
      Regexp regexp0 = Parser.parse("}po[j_y-]%", (-2388));
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      int int1 = 32;
      try { 
        Parser.parse("(?/=", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:-]", 1068);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        Parser.parse("c|{)%b\u0000\u0007>M x", 1084);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Parser.parse("ba>m_zNF)_w^@", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Parser.parse("(?U<(?", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?U<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D\"-l\"e_Gp+ =w,y", (-828));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Q ", (-260));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 13056);
      Regexp regexp0 = Parser.parse("cn5J|j|W", (-252));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000q6c", 1880);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 1744);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-275), (-275));
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Parser.parse(": `", 1055);
      String string0 = "\\0";
      int int0 = (-701);
      Parser.parse("\u0000", (-701));
      Parser parser0 = new Parser(": `", 1055);
      Parser.parse("-]", 64);
      Parser.parse("n([#oF", (-701));
      Parser.parse("\u0000", 2333);
      int int1 = (-1);
      Parser.parse("\u0000", (-1));
      Parser.parse("\u0000", 1055);
      Parser.parse("(?(?", 1055);
      Parser.parse(": `", 1055);
      Parser.parse("\u0000", 10727);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-1963), 661);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("S|sCg:EJqv,", 705);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("q9]f|q2", 64);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse("''z\u0005*yN", 569);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{94>_d{<$YNj}\"", 2728);
      Regexp regexp1 = Parser.parse("{94>_d{<$YNj}\"", (-782));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse("r\"X{35", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = (-268);
      Parser.parse("\u0003qINoQA}K\"xa", (-268));
      String string0 = "?:";
      Parser parser0 = new Parser(string0, int0);
      Regexp[] regexpArray0 = new Regexp[0];
      int int1 = 6108;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000!", 6100);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Regexp regexp0 = Parser.parse("yA^|yiwt?Oy", 1068);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Regexp regexp0 = Parser.parse("L_%VHLY|LvVD`$n", 321);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser parser0 = new Parser("(?s:.)", 2810);
      Regexp regexp0 = Parser.parse("(?s:.)", 7620);
      Regexp regexp1 = Parser.parse("Phoenician", 405);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u00028`", 1445);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0001w", (-720));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pM:}p&", 2147483601);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A", (-188));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = new Parser("_;[F]%UKn$i:", 2420);
      Parser.parse("_;[F]%UKn$i:", (-1137));
      Regexp regexp0 = Parser.parse("q$75XUV;\"_rR,Q}63!", 951);
      Parser.parse("}-;", 1473);
      Parser.parse("_;[F]%UKn$i:", 41);
      Parser.parse("C=&", (-1));
      Regexp regexp1 = Parser.parse("com.google.re2j.Utils", 1473);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1), 65024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Regexp regexp0 = Parser.parse("_;[F]%UKn$i:", (-2763));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Regexp regexp0 = Parser.parse("_[F]%UKn$i:", 53);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.flags = 53;
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      Parser.subarray(regexpArray0, 53, 53);
      Parser parser0 = new Parser((String) null, 53);
  }
}
