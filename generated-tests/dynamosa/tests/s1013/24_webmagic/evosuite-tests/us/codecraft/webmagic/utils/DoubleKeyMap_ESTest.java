/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 19:00:33 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Object, String>();
      doubleKeyMap0.put((HashMap<Integer, String>) null, (Object) "`\"_|3bMK]C({he.a", "");
      String string0 = doubleKeyMap0.remove((HashMap<Integer, String>) null, (Object) "`\"_|3bMK]C({he.a");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      HashMap<HashMap<Object, Integer>, Integer> hashMap0 = new HashMap<HashMap<Object, Integer>, Integer>();
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put((Object) hashMap0, (Object) hashMap0, integer0);
      Map<Object, Integer> map0 = doubleKeyMap0.remove((Object) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1579));
      HashMap<Integer, Map<HashMap<String, Integer>, Object>> hashMap0 = new HashMap<Integer, Map<HashMap<String, Integer>, Object>>();
      Class<HashMap> class0 = HashMap.class;
      HashMap<HashMap<String, Integer>, Object> hashMap1 = new HashMap<HashMap<String, Integer>, Object>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Integer>, Object>(hashMap0, class0);
      Map<HashMap<String, Integer>, Object> map0 = doubleKeyMap0.get(integer0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Object, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, String>(hashMap0, class0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      doubleKeyMap0.put(hashMap1, (Object) null, (String) null);
      Map<Object, String> map0 = doubleKeyMap0.get(hashMap1);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<Object, String>, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, HashMap<Object, String>>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0, class0);
      String string0 = doubleKeyMap1.remove("[)->a&3Mqe40k6m=,PB", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove(object0, (String) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Map<Integer, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Integer>, Integer>(class0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap0.put((Object) null, (Object) "rM;,WuKq-iqH", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<Integer, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, String>, String>(class0);
      Integer integer0 = new Integer((-786));
      DoubleKeyMap<Integer, Object, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<String, Object>>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = doubleKeyMap1.put(integer0, (Object) doubleKeyMap0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, "us.codecraft.webmagic.utils.DoubleKeyMap", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>((Map<Object, Map<Integer, Object>>) null);
      Object object0 = doubleKeyMap0.get((Object) null, (Integer) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<Object, String>, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, HashMap<Object, String>>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0, class0);
      String string0 = doubleKeyMap1.get("wrong proto type map ", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Integer>, Integer>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, "$az,iN }eL/x2!");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Map<String, Integer> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class0);
      Object object0 = new Object();
      Map<String, Integer> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Object) hashMap0, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<Map<Integer, String>, String>> hashMap0 = new HashMap<Object, Map<Map<Integer, String>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Integer, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, String>, String>(hashMap0, class0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) class0, (Map<Integer, String>) hashMap1, "us.codecraft.webmagic.utils.DoubleKeyMap");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Object, String>();
      doubleKeyMap0.put((HashMap<Integer, String>) null, (Object) null, "`\"_|3bMK]C({he.a");
      String string0 = doubleKeyMap0.remove((HashMap<Integer, String>) null, (Object) "`\"_|3bMK]C({he.a");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Object, String>();
      doubleKeyMap0.put((HashMap<Integer, String>) null, (Object) null, "`\"_|3bMK]C({he.a");
      String string0 = doubleKeyMap0.put((HashMap<Integer, String>) null, (Object) null, (String) null);
      assertEquals("`\"_|3bMK]C({he.a", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<Object, Integer>, Integer>, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, Integer>, Integer>, Object, String>((Map<Map<HashMap<Object, Integer>, Integer>, Map<Object, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
