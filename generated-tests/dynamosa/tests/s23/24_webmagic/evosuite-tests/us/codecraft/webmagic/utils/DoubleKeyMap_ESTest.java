/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 11:03:34 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<HashMap<Object, String>, Map<Object, Map<Object, Object>>> hashMap1 = new HashMap<HashMap<Object, String>, Map<Object, Map<Object, Object>>>();
      HashMap<Object, Map<Object, Object>> hashMap2 = new HashMap<Object, Map<Object, Object>>(1);
      hashMap1.put(hashMap0, hashMap2);
      DoubleKeyMap<HashMap<Object, String>, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Map<Object, Object>>(hashMap1);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.remove(hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap0.put("", "PCJHLl9)@u2*k$", (Object) "");
      Map<String, Object> map0 = doubleKeyMap0.remove("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      doubleKeyMap0.put((Object) "EB6s&+N0{f<", (Object) "EB6s&+N0{f<", "");
      Map<Object, String> map0 = doubleKeyMap0.get((Object) "EB6s&+N0{f<");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Object object0 = doubleKeyMap1.remove((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Integer, HashMap<String, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Integer, HashMap<String, Map<Object, Object>>>();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap1.remove(hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(map0);
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, Object>>((Map<Object, Map<Object, Map<Object, Object>>>) null);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>();
      DoubleKeyMap<Object, Object, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, Object>>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Collection<Object> collection0 = hashMap0.values();
      Integer integer0 = new Integer(1);
      HashMap<Integer, Map<String, Object>> hashMap1 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap1);
      Object object0 = doubleKeyMap0.put(integer0, "Xm!~,,", (Object) collection0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap0.put((Object) "<SxGXxJ3E !pvq", (Object) null, "<SxGXxJ3E !pvq");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer(857);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.put(integer0, object0, "na>!Jxj");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, String>, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap0.put((Integer) null, hashMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      HashMap<Object, Map<Map<Object, Object>, Integer>> hashMap0 = new HashMap<Object, Map<Map<Object, Object>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, Integer>(hashMap0, class0);
      HashMap<Map<Object, Object>, Map<Map<Object, Object>, Integer>> hashMap1 = new HashMap<Map<Object, Object>, Map<Map<Object, Object>, Integer>>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, Integer> doubleKeyMap2 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, Integer>(hashMap1);
      Map<Object, Object> map0 = doubleKeyMap2.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, map0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<HashMap<Object, Integer>, Object>> hashMap0 = new HashMap<String, Map<HashMap<Object, Integer>, Object>>();
      DoubleKeyMap<String, HashMap<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Integer>, Object>(hashMap0, class0);
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(map0);
      Integer integer0 = new Integer((-1));
      Object object0 = doubleKeyMap1.get(integer0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = doubleKeyMap1.get(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = doubleKeyMap0.get((Object) null, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Map<HashMap<Object, String>, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<HashMap<Object, String>, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, HashMap<Object, String>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, HashMap<Object, Object>>(hashMap0);
      DoubleKeyMap<Integer, String, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Integer, String, HashMap<String, Object>>();
      Map<Object, Map<Map<Object, Object>, Integer>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Map<Object, Object>, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Map<Object, Object>, Integer>(map0);
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, Integer> doubleKeyMap3 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, Integer>();
      Map<Object, Object> map1 = doubleKeyMap3.newMap();
      Integer integer0 = doubleKeyMap2.get((Object) doubleKeyMap0, map1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, Object>>((Map<Object, Map<Object, Map<Object, Object>>>) null);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>((Map<Object, Map<Integer, Integer>>) null, class0);
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(map0);
      DoubleKeyMap<Object, HashMap<Object, String>, Object> doubleKeyMap2 = new DoubleKeyMap<Object, HashMap<Object, String>, Object>(class0);
      Map<HashMap<Object, String>, Object> map1 = doubleKeyMap2.get((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, Object>>();
      Map<Object, Map<HashMap<String, Object>, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<String, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Object>, String>(map0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) map0, hashMap0, "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Integer, HashMap<String, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Integer, HashMap<String, Map<Object, Object>>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(hashMap0, hashMap0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        doubleKeyMap0.get((Map<Object, Object>) hashMap0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, HashMap<Object, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, HashMap<Object, Integer>>((Map<Integer, Map<String, HashMap<Object, Integer>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<Map<Map<Object, Object>, Map<Object, Object>>, Object, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Map<Object, Object>, Map<Object, Object>>, Object, HashMap<Integer, String>>();
      HashMap<Map<Object, Object>, Map<Object, Object>> hashMap0 = new HashMap<Map<Object, Object>, Map<Object, Object>>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap2 = doubleKeyMap0.put((Map<Map<Object, Object>, Map<Object, Object>>) hashMap0, (Object) "thvd?]3b9c)2;", hashMap1);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      HashMap<Integer, String> hashMap4 = doubleKeyMap0.put((Map<Map<Object, Object>, Map<Object, Object>>) hashMap0, (Object) hashMap3, hashMap2);
      assertNull(hashMap4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<Integer, HashMap<Map<Object, Object>, Object>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Map<Object, Object>, Object>>>();
      DoubleKeyMap<Object, Integer, HashMap<Map<Object, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Map<Object, Object>, Object>>(hashMap0);
      Integer integer0 = new Integer((-1108));
      HashMap<Map<Object, Object>, Map<Map<Object, Object>, Integer>> hashMap1 = new HashMap<Map<Object, Object>, Map<Map<Object, Object>, Integer>>();
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, Integer>(hashMap1, class0);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<String, Object, Integer>();
      Map<HashMap<Integer, String>, Map<HashMap<Map<Object, Object>, Map<Object, Object>>, HashMap<String, Integer>>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<HashMap<Integer, String>, HashMap<Map<Object, Object>, Map<Object, Object>>, HashMap<String, Integer>> doubleKeyMap3 = new DoubleKeyMap<HashMap<Integer, String>, HashMap<Map<Object, Object>, Map<Object, Object>>, HashMap<String, Integer>>(map0, class0);
      Map<Integer, HashMap<Map<Object, Object>, Object>> map1 = doubleKeyMap3.newMap();
      hashMap0.put(hashMap1, map1);
      Map<HashMap<Integer, Object>, Object> map2 = doubleKeyMap1.newMap();
      HashMap<Map<Object, Object>, Object> hashMap2 = doubleKeyMap0.get((Object) map2, integer0);
      assertNull(hashMap2);
  }
}
