/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:42:27 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      ByteString byteString1 = buffer1.snapshot();
      byteString0.base64();
      deflaterSink0.flush();
      byte[] byteArray0 = byteString1.toByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[6];
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)96;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=53af63f07f60]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      ByteString.read(sequenceInputStream1, 0);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.asByteBuffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-64);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okio.AsyncTimeout");
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals(0, int0);
      
      int int1 = byteString0.lastIndexOf(byteString1, 0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toString();
      byteString1.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.md5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("y9UrbX3~8ZI");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byteString0.write(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      byteString0.write(buffer2);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.add(byteString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("#{thGvINml");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString0.lastIndexOf(byteArray0);
      byteString0.base64();
      int int1 = byteString1.indexOf(byteArray0);
      assertTrue(int1 == int0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString0.EMPTY.base64Url();
      boolean boolean0 = byteString1.endsWith(byteArray0);
      byteString0.md5();
      boolean boolean1 = byteString0.equals("");
      assertFalse(boolean1 == boolean0);
      
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
      
      byteString0.base64();
      byteString0.toAsciiLowercase();
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte) (-119), 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-119 byteCount=56
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byteString0.equals(sequenceInputStream0);
      byteString0.toAsciiUppercase();
      byteString0.base64();
      byteString0.toAsciiLowercase();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = null;
      byteString0.rangeEquals(49, (byte[]) null, 49, 49);
      byteString0.base64();
      ByteString.encodeUtf8("\u2026]");
      byteString0.rangeEquals(119, byteString0, 3259, 14);
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        byteString0.indexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      options0.get(0);
      String string0 = byteString0.utf8();
      String string1 = byteString0.hex();
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString1 = options0.get(0);
      int int0 = byteString0.indexOf(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        byteString0.substring(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)15;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((int) (byte)15, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)23;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.hashCode();
      byteString0.hashCode();
      // Undeclared exception!
      try { 
        Charset.forName("\u0000\uFFFD\u0017");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \u0000\uFFFD\u0017
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Expected leading [0-9a-fA-F] character but was %#x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: x
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("l4l/||]|G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: l4l/||]|G
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("r%]<RaUQW!9xA3Oc%>", 4288);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        options0.get(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "**j*Ob@El4");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("**j*Ob@El4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: *
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.EMPTY.indexOf(byteString0, 90);
      // Undeclared exception!
      try { 
        Charset.forName("[size=0]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [size=0]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.encodeUtf8("&+ ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(",");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      ByteString byteString0 = ByteString.of(byteBuffer1);
      charset1.encode("&+ ");
      String string0 = byteString0.string(charset1);
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("&+ ", 0);
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("Number too large: ");
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byteString0.endsWith(byteString0);
      byteString0.sha256();
      byteString0.toString();
      byteString0.toString();
      ByteString.decodeBase64("`jm<#rp^N},");
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      String string0 = byteString0.utf8();
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("");
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = byteString0.indexOf(byteArray0, (int) (byte)17);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, 5);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byteString0.substring(0);
      byteString0.hex();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byte byte0 = (byte)8;
      byteArray0[1] = (byte)8;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        HashingSink.hmacSha512(buffer0, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Pipe pipe0 = new Pipe(2527L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      inflater0.reset();
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      inflaterSource0.timeout();
      byteString0.asByteBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      int int0 = (-56321);
      // Undeclared exception!
      try { 
        byteString0.substring((-56321), (-56321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      HashingSource hashingSource2 = HashingSource.md5(hashingSource1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource2);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)109;
      ByteString byteString1 = hashingSource1.hash();
      byteString1.EMPTY.rangeEquals((int) (byte)109, byteString0, (int) (byte)109, 9);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("endIndex > length(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byteString0.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byte byte0 = (byte) (-80);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.endsWith(byteArray0);
      Inflater inflater0 = new Inflater();
      // Undeclared exception!
      try { 
        inflater0.setDictionary(byteArray0, (int) (byte)7, (int) (byte) (-80));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Inflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-27);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[21];
      byteArray1[0] = (byte) (-27);
      byteArray1[1] = (byte) (-27);
      byteArray1[2] = (byte) (-27);
      byteArray1[4] = (byte) (-27);
      byteArray1[5] = (byte) (-27);
      byteArray1[6] = (byte) (-27);
      byteArray1[7] = (byte) (-27);
      byteArray1[8] = (byte) (-27);
      Charset.defaultCharset();
      Charset.defaultCharset();
      byteString0.asByteBuffer();
      byte[] byteArray2 = new byte[2];
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteArray2[0] = (byte) (-27);
      byteArray2[1] = (byte) (-64);
      boolean boolean0 = byteString0.startsWith(byteArray2);
      assertFalse(boolean0);
      
      byteString1.sha1();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      String string0 = ",";
      ByteBuffer byteBuffer0 = charset0.encode("\n");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charset1.encode(charBuffer0);
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      Charset charset0 = Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byteString0.utf8();
      ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-27);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-27);
      byteArray1[1] = (byte) (-27);
      byteArray1[2] = (byte) (-27);
      byteArray1[3] = (byte) (-27);
      byteArray1[4] = (byte) (-27);
      byteArray1[5] = (byte) (-27);
      byteArray1[6] = (byte) (-27);
      byteArray1[7] = (byte) (-27);
      byteArray1[8] = (byte) (-27);
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("{ROC[uIP");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      ByteString byteString1 = ByteString.of(byteBuffer1);
      byteString0.asByteBuffer();
      byteString0.string(charset1);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("&+ ", 0);
      assertEquals(0, int0);
      
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("&+ ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertEquals(4, byteString1.size());
      
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)65;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString2 = hashingSink0.hash();
      ByteString byteString3 = byteString2.hmacSha256(byteString1);
      ByteString byteString4 = byteString0.toAsciiLowercase();
      Pipe pipe0 = new Pipe((byte)77);
      Buffer buffer2 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      ByteString byteString5 = hashingSource0.hash();
      boolean boolean0 = byteString4.startsWith(byteString5);
      assertFalse(boolean0);
      
      int int1 = byteString3.indexOf(byteString2, 0);
      int int2 = byteString4.compareTo(byteString3);
      assertSame(byteString4, byteString1);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[17];
      byteArray1[0] = (byte) (-27);
      byteArray1[2] = (byte) (-27);
      byteArray1[4] = (byte) (-27);
      byteArray1[12] = (byte) (-27);
      byteArray1[7] = (byte) (-27);
      byteArray1[8] = (byte) (-27);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink.sha1(realBufferedSource0.buffer);
      ByteString byteString1 = byteString0.hmacSha256(byteString0);
      byteString1.toAsciiLowercase();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((byte) (-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -27
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("&+ ", 0);
      assertEquals(0, int0);
      
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("&+ ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteArray0[1] = (byte) (-34);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      hashingSink0.hash();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      ByteString byteString3 = byteString0.toAsciiLowercase();
      Pipe pipe0 = new Pipe((byte)94);
      Buffer buffer2 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      ByteString byteString4 = hashingSource0.hash();
      boolean boolean0 = byteString0.startsWith(byteString2);
      assertFalse(boolean0);
      
      int int1 = byteString4.indexOf(byteString3, 0);
      assertEquals((-1), int1);
      
      ByteString byteString5 = realBufferedSource0.readByteString();
      int int2 = byteString3.compareTo(byteString5);
      assertSame(byteString3, byteString1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)122;
      byte byte0 = (byte)117;
      byteArray0[8] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)32);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("&+ ", 0);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("&+ ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteArray0[1] = (byte) (-34);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString2 = hashingSink0.hash();
      ByteString byteString3 = byteString0.hmacSha256(byteString1);
      byteString1.rangeEquals((int) (byte) (-34), byteString2, 0, 0);
      byteString0.lastIndexOf(byteString2);
      byteString2.endsWith(byteArray0);
      byteString0.endsWith(byteArray0);
      ByteString.decodeBase64("2");
      byteString0.utf8();
      byteString3.endsWith(byteArray0);
      byteString1.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        ByteString.read(sequenceInputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("&+ ", 0);
      assertEquals(0, int0);
      
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("&+ ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteArray0[1] = (byte) (-34);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      hashingSink0.hash();
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      ByteString byteString3 = ByteString.decodeHex("");
      Pipe pipe0 = new Pipe((byte)94);
      Buffer buffer2 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString4 = hashingSource0.hash();
      byteString4.startsWith(byteString2);
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer0, byteString2);
      ByteString byteString5 = hashingSource1.hash();
      int int1 = byteString5.indexOf(byteString2, 1925);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      ByteString byteString6 = realBufferedSource1.readByteString();
      int int2 = byteString6.compareTo(byteString4);
      assertTrue(int2 == int1);
      assertTrue(byteString6.equals((Object)byteString3));
      
      byteString5.toByteArray();
      assertSame(byteString1, byteString0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString0.base64Url();
      ByteString byteString2 = byteString1.md5();
      byteString2.lastIndexOf(byteString1, 58);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (int) (byte)0, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "";
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[11];
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 1024;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.encodeString("data == null", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "&+ ";
      int int0 = 0;
      ByteString byteString0 = ByteString.encodeUtf8("&+ ");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.hmacSha1(byteString0);
      ByteString.decodeBase64("&+ ");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("&+ ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: &
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte byte0 = (byte)120;
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("&+ ", 0);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("&+ ");
      byte[] byteArray0 = new byte[6];
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.equals(byteString0);
      ByteString.of(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("\\");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("Rn%dsDy", 0);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2SsqWG");
      ByteString byteString0 = ByteString.encodeUtf8("Rn%dsDy");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString1.EMPTY.toAsciiLowercase();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mn?1NF");
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteString2.EMPTY.toString();
      byteString1.equals(byteString0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        ByteString.read(inputStream0, 468);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("&+ ", 0);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("&+ ");
      byte[] byteArray0 = new byte[6];
      ByteString byteString1 = byteString0.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString2 = ByteString.of(byteArray0);
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.toString();
      ByteString.decodeBase64("[hex=000000000000]");
      byteString2.endsWith(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      byteString3.startsWith(byteArray0);
      byteString2.toString();
      realBufferedSource0.readByteString();
      byteString1.equals(byteString2);
      ByteString byteString4 = realBufferedSource0.readByteString((long) 0);
      byteString4.indexOf(byteArray0, 0);
      realBufferedSource0.readByteString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "";
      ByteString byteString0 = ByteString.encodeUtf8("");
      ByteString[] byteStringArray0 = new ByteString[18];
      byteStringArray0[0] = byteString0;
      Charset charset0 = Charset.defaultCharset();
      boolean boolean0 = false;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byteString0.utf8();
      byte byte0 = (byte)17;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString1.toString();
      ByteString byteString2 = ByteString.encodeUtf8("[hex=19bd3cbb62b1937957a11cabd0d39860582b6928e77d0e0ea5ee7f3b2f8cacb3dea8ea0972651adc3245fd10926f2f31e80377196e4e6c7ee2bd74051e58bcba]");
      byteString2.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString3 = ByteString.of(byteArray0);
      ByteString byteString4 = new ByteString(byteArray0);
      byteString2.toString();
      byteString2.toString();
      ByteString.decodeBase64("size=%s fromIndex=%s toIndex=%s");
      byteString3.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1((Source) null, (ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toString();
      int int0 = 0;
      byteString0.substring(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("Rn%dsDy", 0);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2SsqWG");
      ByteString byteString0 = ByteString.encodeUtf8("Rn%dsDy");
      byte[] byteArray0 = new byte[2];
      ByteString byteString1 = byteString0.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString1.EMPTY.toAsciiLowercase();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString3 = realBufferedSource0.readByteString();
      byteString2.startsWith(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Mn?1NF");
      ByteString byteString4 = byteString2.sha256();
      byteString3.toString();
      byteString4.toString();
      ByteString.decodeBase64("2SsqWG");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("2SsqWG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: S
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.toString();
      byteString0.substring(3);
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.hex();
      byteString1.toString();
      byteString0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.toString();
      ByteString byteString3 = byteString0.substring(0);
      ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSource1.readByteString();
      byteString2.equals(byteString3);
      Charset.defaultCharset();
      ByteString byteString4 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(hashingSource0);
      realBufferedSource2.readByteString();
      byteString1.asByteBuffer();
      // Undeclared exception!
      try { 
        Charset.forName("[hex=00000000000000000000000000000000]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [hex=00000000000000000000000000000000]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
