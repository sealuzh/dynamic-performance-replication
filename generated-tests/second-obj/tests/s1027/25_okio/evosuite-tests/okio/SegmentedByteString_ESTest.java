/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:30:34 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pipe pipe0 = new Pipe(2890L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      pipe0.sourceClosed = false;
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(2646L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      boolean boolean0 = segmentedByteString0.equals(pipe0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[10];
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      segmentedByteString0.rangeEquals((-1144), byteArray0, (-1144), 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      HashingSink.sha512(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pipe pipe0 = new Pipe(2890L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      pipe0.sourceClosed = false;
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pipe pipe0 = new Pipe(751L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[10];
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      boolean boolean0 = segmentedByteString0.rangeEquals((-2626), byteString0, (-2626), 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(9, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(2890L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      HashingSink.sha512(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hashCode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hashCode();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      segmentedByteString0.write(objectOutputStream0);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      buffer0.writeLongLe(100L);
      buffer0.sha512();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      segmentedByteString0.sha1();
      assertEquals(3, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)3;
      byteArray0[3] = (byte)3;
      buffer0.toString();
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.writeInt(4095);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString0.base64();
      segmentedByteString0.rangeEquals(4095, byteString0, (int) (byte)3, (int) (byte)3);
      byteString0.indexOf((ByteString) segmentedByteString0, (int) (byte)3);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream0);
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals(3, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      buffer0.toString();
      ByteString byteString0 = ByteString.encodeUtf8("[size=0]");
      buffer0.writeLong(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      byteString0.toString();
      segmentedByteString0.rangeEquals(0, byteString0, 0, (-1488));
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      buffer0.toString();
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer1 = buffer0.writeInt(0);
      Buffer buffer2 = buffer0.writeLong(0);
      buffer1.outputStream();
      byteString0.base64();
      int int0 = ObjectStreamConstants.baseWireHandle;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)1);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer2.sha512();
      segmentedByteString0.rangeEquals((int) (byte)0, byteArray0, (int) (byte)0, 0);
      segmentedByteString0.indexOf(byteArray0, (int) (byte)1);
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      segmentedByteString0.write(buffer2);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha512();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      buffer0.writeLong((byte)0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      segmentedByteString0.base64();
      buffer0.inputStream();
      segmentedByteString0.size();
      segmentedByteString0.rangeEquals(2, byteArray0, (-1408), 3);
      assertEquals(3, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)3;
      byteArray0[3] = (byte)3;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.writeInt(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      int int0 = ObjectStreamConstants.baseWireHandle;
      segmentedByteString0.rangeEquals(0, byteString0, (int) (byte)3, (int) (byte)3);
      byteString0.indexOf((ByteString) segmentedByteString0, (int) (byte)3);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream0);
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals(3, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.toString();
      buffer0.writeLong(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)8);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)3;
      buffer0.toString();
      Buffer buffer1 = buffer0.writeLong((byte)0);
      buffer1.readIntLe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "byteString == null");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      buffer1.sha512();
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)0, byteArray0, (int) (byte)0, 0);
      assertTrue(boolean0);
      assertEquals(3, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-f;R?XO)+tB");
      byteArray0[0] = (byte)3;
      byteArray0[0] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      buffer0.writeLong(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)0, byteArray0, (-400), 0);
      assertFalse(boolean0);
      
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      assertEquals(3, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hashCode();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      objectOutputStream0.reset();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        objectOutputStream0.writeObject(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.writeLong((byte)0);
      byteString0.base64Url();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteString0.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.hashCode();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("[hex=03000303]", "[hex=03000303]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [hex=03000303]
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      buffer0.toString();
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.writeInt(0);
      buffer0.writeLong(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      segmentedByteString0.lastIndexOf(byteString0, (int) (byte)3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Object object0 = new Object();
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertEquals(3, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[2] = (byte)3;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer1 = buffer0.writeLong(0);
      buffer1.sha512();
      byteString0.toString();
      buffer1.getByte((byte)3);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.write(buffer1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.rangeEquals((int) (byte)3, byteArray0, 886, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer1 = buffer0.writeLong((byte)0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      byteString0.compareTo((ByteString) segmentedByteString0);
      segmentedByteString0.toByteArray();
      segmentedByteString0.base64Url();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      segmentedByteString0.write(buffer2);
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)3;
      byte[] byteArray0 = new byte[4];
      buffer0.writableSegment((byte)3);
      buffer0.size = 1689L;
      byteArray0[1] = (byte)3;
      // Undeclared exception!
      try { 
        buffer0.toString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.toString();
      Buffer buffer1 = buffer0.writeLong((-10));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)3);
      buffer1.sha512();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeHexadecimalUnsignedLong((byte)3);
      Buffer buffer1 = buffer0.writeLong(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)3);
      buffer1.readIntLe();
      segmentedByteString0.toString();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)3);
      buffer1.sha512();
      segmentedByteString1.write(buffer1);
      segmentedByteString0.equals(segmentedByteString1);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[hex=330000]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }
}
