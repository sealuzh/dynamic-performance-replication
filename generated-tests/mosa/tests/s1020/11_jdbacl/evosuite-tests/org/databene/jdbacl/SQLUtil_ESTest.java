/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:57:15 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
      
      String string1 = SQLUtil.leftJoin(" or ", stringArray0, "XSCB0.S", (String) null, stringArray0);
      assertEquals("left join XSCB0.S as null on ", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "47K:JM";
      stringArray0[1] = "47K:JM";
      String string0 = SQLUtil.join("47K:JM", "47K:JM", stringArray0, "47K:JM", "47K:JM", stringArray0);
      assertEquals("47K:JM join 47K:JM as 47K:JM on 47K:JM.47K:JM = 47K:JM.47K:JM and 47K:JM.47K:JM = 47K:JM.47K:JM", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "T&-`QvmM", stringArray0);
      assertEquals(" as T&-`QvmM on . = T&-`QvmM. and . = T&-`QvmM. and .null = T&-`QvmM.null and .null = T&-`QvmM.null and .null = T&-`QvmM.null and .null = T&-`QvmM.null and .null = T&-`QvmM.null and .null = T&-`QvmM.null and .null = T&-`QvmM.null", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("delete");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("org.firebirdsql.gds.impl.jni.GDSSynchronizationPolicy$ClientLibrarySyncPolicy", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "u3R,B<AD^Hhyj";
      stringArray0[2] = "u3R,B<AD^Hhyj";
      stringArray0[4] = "u3R,B<AD^Hhyj";
      stringArray0[7] = "u3R,B<AD^Hhyj";
      String string0 = SQLUtil.renderColumnListWithTableName("u3R,B<AD^Hhyj", stringArray0);
      assertEquals("u3R,B<AD^Hhyj.null, u3R,B<AD^Hhyj.u3R,B<AD^Hhyj, u3R,B<AD^Hhyj.u3R,B<AD^Hhyj, u3R,B<AD^Hhyj.null, u3R,B<AD^Hhyj.u3R,B<AD^Hhyj, u3R,B<AD^Hhyj.null, u3R,B<AD^Hhyj.null, u3R,B<AD^Hhyj.u3R,B<AD^Hhyj", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(")PH");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      SQLUtil.addOptionalCondition("", stringBuilder1);
      assertEquals("false or ", stringBuilder1.toString());
      assertEquals("false or ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("crate table)*[@{]5fcx_+st", true);
      assertEquals("crate table) * [ @ { ] 5fcx_ + st", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?L 4_- v1uLz");
      SQLUtil.removeComments("?L 4_- v1uLz");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("?L 4_- v1uLz", false, "?L 4_- v1uLz", "truncatecr");
      SQLUtil.constraintName(dBCheckConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.removeComments("deletecrate tabl)*[@{]5fcx_+st");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deletecrate tabl)*[@{]5fcx_+st");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM deletecrate tabl)*[@{]5fcx_+st WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.normalize("insert!i}e/lqani*", false);
      SQLUtil.mutatesStructure("insert!i}e/lqani*");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("]e", true, "Unknown constraint type: ", "inse");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK inse", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = RawStoreFactory.CONTAINER_INITIAL_PAGES;
      String[] stringArray0 = new String[2];
      stringArray0[1] = "derby.storage.initialPages";
      stringArray0[1] = "UR@O|m/Y7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "UR@O|m/Y7", true, stringArray0);
      String string1 = SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT UR@O|m/Y7 PRIMARY KEY (, UR@O|m/Y7)", string1);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT UR@O|m/Y7 PRIMARY KEY (, UR@O|m/Y7)", string2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.normalize(" ADD ", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ADD");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("JG$KhZb(FMN&#q:W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: JG$KhZb(FMN&#q:W
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("ws@*o#");
      DBCatalog dBCatalog0 = new DBCatalog("ws@*o#");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog ws@*o#", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[8] = "";
      stringArray0[2] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(47);
      SQLUtil.addRequiredCondition("IZ3xdIcR+W>5c", stringBuilder0);
      assertEquals("IZ3xdIcR+W>5c", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.normalize("derby.s", true);
      assertEquals("derby.s", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.normalize("", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = new StringBuilder("");
      SQLUtil.addOptionalCondition("into", stringBuilder1);
      assertEquals("into", stringBuilder1.toString());
      
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table ", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("select into%(pc83d-+kymcj;q*]a", true);
      assertEquals("select into % (pc83d - + kymcj ; q * ] a", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = RawStoreFactory.CONTAINER_INITIAL_PAGES;
      String[] stringArray0 = new String[2];
      stringArray0[1] = "derby.storage.initialPages";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("derby.storage.initialPages", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, derby.storage.initialPages) REFERENCES null(, derby.storage.initialPages)", string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-- [", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("%(pc83d-+kym");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\u0001%\u000B\uFFFF\n%\u0007\uFFFF\u0012%\u0001\u0209\u0007%\u0004\uFFFF\u0001%\u0001\uFFFF\u001A%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("( ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.removeComments("cV/1{icE30`.]");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.normalize("select into%(pc83d-+kymcj;q*]a", false);
      SQLUtil.isProcedureCall("select into%(pc83d-+kymcj;q*]a");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("cpwe~G)%6+&o9yY");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      SQLUtil.addRequiredCondition("cpwe~G)%6+&o9yY", stringBuilder1);
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("cpwe~G)%6+&o9yY0.0 and cpwe~G)%6+&o9yY", stringBuilder0.toString());
      assertEquals("cpwe~G)%6+&o9yY0.0 and cpwe~G)%6+&o9yY", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isProcedureCall("uxzKN=YcY5(0?)");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("uxzKN=YcY5(0?)", defaultDBTable0, (-2645), "uxzKN=YcY5(0?)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT  PRIMARY KEY (, )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop index,", true);
      assertEquals("drop index,", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = RawStoreFactory.CONTAINER_INITIAL_PAGES;
      defaultDBTable0.getReferrers();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "derby.storage.initialPages";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "UR@O|m/Y7", true, stringArray0);
      SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      SQLUtil.mutatesDataOrStructure("derby.storage.initialPages");
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT UR@O|m/Y7 CONSTRAINT UR@O|m/Y7 ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("}", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, )", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("create table)*[@{]5fcx_+st");
      assertFalse(boolean0);
      
      DBSchema dBSchema0 = new DBSchema("%");
      DBPackage dBPackage0 = new DBPackage("rename", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure(">\"dkr9-avw-`yR4B", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("rename.>\"dkr9-avw-`yR4B", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Optimization started at time ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "q{N~I", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.mutatesDataOrStructure("PRIMARY KEY (Optimization started at time , , , , , , , , )");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("lockmode", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.substituteMarkers("Optimization started at time ", "@", dBForeignKeyConstraint0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%(pc83d-+ky");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("EXECUTE PROCEDURE");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter1);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("select into%(pc83d-+kymcj;q*]a", false);
      assertEquals("select into % (pc83d - + kymcj ; q * ] a", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("select into%(pc83d-+kymcj;q*]a");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string1 = SQLUtil.join((String) null, "E8lzX$GPrxE4+5bPSy", stringArray0, stringArray0[0], "drop table", stringArray0);
      assertEquals("null as drop table on E8lzX$GPrxE4+5bPSy.null = drop table.null", string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      DBDataType.getInstance((-2029), "create materialized view");
      Integer integer0 = RawTransaction.ABORT;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ")5JfA:qA-|");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cV/1{icE30`.]");
      DBDataType dBDataType0 = DBDataType.getInstance(2714, "cV/1{icE30`.]");
      Integer integer0 = new Integer((-2371));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cV/1{icE30`.]", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CV/1{ICE30`.](-2371,-2371)", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("b\"[NImgRF{T<_1o!!$", false);
      assertEquals("b \"[NImgRF{T<_1o!!$\"", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Boolean boolean0 = new Boolean("select");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+hYL}I]*");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create table";
      stringArray0[1] = "+hYL}I]*";
      stringArray0[2] = "KU:UmiH";
      stringArray0[3] = "+hYL}I]*";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " or ", true, stringArray0);
      defaultDBTable0.getIndex("KU:UmiH");
      dBPrimaryKeyConstraint0.setDoc("alter materi");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table ", true, stringArray0);
      dBPrimaryKeyConstraint1.setName((String) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("PRIMARY KEY (create table, +hYL}I]*, KU:UmiH, +hYL}I]*)", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncatecrate table)*[@{]5fcx_+st");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      assertEquals("", string1);
      
      String string2 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("+hYL}I]*", string2);
      
      boolean boolean1 = SQLUtil.isDDL("exec");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "epzpCT");
      StringBuilder stringBuilder0 = new StringBuilder(774);
      StringBuilder stringBuilder1 = stringBuilder0.append((-1667L));
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      assertSame(stringBuilder0, stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("V'?w{1_ }~&Fk<c<%", true);
      assertEquals("V '?w{1_ }~&Fk<c<%'", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.normalize("iHsertoptimization started at tim$", true);
      DBDataType dBDataType0 = DBDataType.getInstance(7, "update");
      Integer integer0 = RawTransaction.ABORT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBTable0.getColumnNames();
      DBDataType.getInstance(9, "iHsertoptimization started at tim$");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("iHsertoptimization started at tim $", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("iHsertoptimization started at tim $");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('|');
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBTable0.getColumnNames();
      DBDataType dBDataType0 = DBDataType.getInstance(9, "create unique indexselect");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer2);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter materialized viewalter materialized view", defaultDBTable0, 18, "create materialized viewcreate materialized viewselect");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter(18);
      StringWriter stringWriter1 = stringWriter0.append('\'');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("'create table null (\n\tnull CREATE UNIQUE INDEXSELECT(0) NULL,\n\talter materialized viewalter materialized view CREATE MATERIALIZED VIEWCREATE MATERIALIZED VIEWSELECT NULL\n)", stringWriter1.toString());
      assertEquals("'create table null (\n\tnull CREATE UNIQUE INDEXSELECT(0) NULL,\n\talter materialized viewalter materialized view CREATE MATERIALIZED VIEWCREATE MATERIALIZED VIEWSELECT NULL\n)", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("crate table)*[@{]5fcx_+st");
      String string0 = SQLUtil.normalize("crate table)*[@{]5fcx_+st", false);
      assertEquals("crate table) * [ @ { ] 5fcx_ + st", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "crate table) * [ @ { ] 5fcx_ + st");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("crate table)*[@{]5fcx_+st");
      boolean boolean2 = SQLUtil.isProcedureCall("crate table) * [ @ { ] 5fcx_ + st");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TERTIARY");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "crate table)*[@{]5fcx_+st";
      stringArray0[1] = "IyI/'?.Tv%C,{";
      stringArray0[2] = "alter materialized viewalter materialized view";
      stringArray0[3] = "crate table)*[@{]5fcx_+st";
      stringArray0[4] = "alter materialized viewalter materialized view";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "crate table)*[@{]5fcx_+st";
      stringArray0[3] = "TERTIARY";
      defaultDBTable1.getUniqueConstraint(stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(stringArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBSchema dBSchema0 = new DBSchema("crate table)*[@{]5fcx_+st");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("crate table)*[@{]5fcx_+st", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "crate table)*[@{]5fcx_+st";
      stringArray0[1] = "crate table)*[@{]5fcx_+st";
      stringArray0[2] = "crate table)*[@{]5fcx_+st";
      stringArray0[3] = "crate table)*[@{]5fcx_+st";
      stringArray0[4] = "crate table)*[@{]5fcx_+st";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "crate table)*[@{]5fcx_+st", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"crate table)*[@{]5fcx_+st\" UNIQUE (crate table)*[@{]5fcx_+st, crate table)*[@{]5fcx_+st, crate table)*[@{]5fcx_+st, crate table)*[@{]5fcx_+st, crate table)*[@{]5fcx_+st)", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Boolean boolean0 = new Boolean("DsZG#:J#D>;");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = RawStoreFactory.CONTAINER_INITIAL_PAGES;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("URF@O|m/Y7");
      DBDataType dBDataType0 = DBDataType.getInstance(13, "42X85");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("rename 42X85(0) NULL", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("rename, rename, rename, rename, rename", string2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Character character0 = new Character('U');
      Character.compare('n', 'U');
      Character.isBmpCodePoint(59);
      Character.compare('#', '#');
      SQLUtil.renderValue(character0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("98)Nl'iw-");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BviR'N$@Wa0Q _!2V";
      stringArray0[1] = "BviR'N$@Wa0Q _!2V";
      stringArray0[2] = "crate table.*[@{]5fcx_+st";
      stringArray0[3] = "BviR'N$@Wa0Q _!2V";
      stringArray0[4] = "BviR'N$@Wa0Q _!2V";
      stringArray0[5] = "BviR'N$@Wa0Q _!2V";
      stringArray0[6] = "98)Nl'iw-";
      stringArray0[7] = "drop index";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "BviR'N$@Wa0Q _!2V", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("crate table.*[@{]5fcx_+st", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("ARRAY_GET", "P/n>69GLPe");
      File file0 = FileUtil.canonicalFile("crate table.*[@{]5fcx_+st");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.format("truncatecheck", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }
}
