/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:55:16 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.LineNumberReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Locale;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.leftJoin("S+#f2Q~{zkJ{&}S", stringArray0, " as ", stringArray0[1], stringArray0);
      assertEquals("left join  as  as null on S+#f2Q~{zkJ{&}S.null = null.null and S+#f2Q~{zkJ{&}S.null = null.null and S+#f2Q~{zkJ{&}S.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;";
      stringArray0[1] = "DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;";
      String string0 = SQLUtil.innerJoin("DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;", stringArray0, "DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;", "DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;", stringArray0);
      assertEquals("DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2; as DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2; on DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;.DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2; = DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;.DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2; and DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;.DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2; = DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;.DELETE FROM INFORMATION_SCHEMA.LOBS WHERE TABLE = -2;", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("<=5wkF");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("<=5wkF");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(" next: ");
      SQLUtil.removeComments("}q6+h!3![");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}q6+h!3![";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("}q6+h!3![ = ' next: '", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = SQLUtil.normalize("?4P;d%p>LQ0/JU)", false);
      assertEquals("? 4P ; d % p > LQ0 / JU)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("wf^wn(25Go==:kI_b");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("RchsbxY*co.jOh");
      assertNull(boolean0);
      
      SQLUtil.typeAndName((DBObject) null);
      boolean boolean1 = SQLUtil.isDML("RchsbxY*co.jOh");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.normalize("RcDhsbxY*co.jOh", true);
      assertEquals("RcDhsbxY * co.j  Oh", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", true, "update", "update");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT update CHECK update", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")EFX40bm'>\"J7");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")EFX40bm'>\"J7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")EFX40bm'>\"J7", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()EFX40bm'>\"J7, , , , , , )", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure(")EFX40bm'>\"J7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table ", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create table \" PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("w5thVG2`_]q.fEx'");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "w5thVG2`_]q.fEx'");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("w5thVG2`_]q.fEx'", stringBuilder0);
      SQLUtil.addOptionalCondition("w5thVG2`_]q.fEx'", stringBuilder1);
      assertEquals("w5thVG2`_]q.fEx' or w5thVG2`_]q.fEx' or w5thVG2`_]q.fEx'", stringBuilder1.toString());
      assertEquals("w5thVG2`_]q.fEx' or w5thVG2`_]q.fEx' or w5thVG2`_]q.fEx'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("RchsbxY*co.jOh");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RchsbxY*co.jOh";
      String string0 = SQLUtil.renderColumnListWithTableName("RchsbxY*co.jOh", stringArray0);
      assertEquals("RchsbxY*co.jOh.RchsbxY*co.jOh", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select intoselect into");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("`-m=*zP<Hh|(?O}9rnL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: `-m=*zP<Hh|(?O}9rnL
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("update?<efx640bm'>\"j7", true);
      assertEquals("update ? < efx640bm '>\"j7'", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(126);
      SQLUtil.addOptionalCondition(")t[[9;DiX'", stringBuilder0);
      assertEquals(")t[[9;DiX'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.removeComments("w5thVG2`_]q.fEx'");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("NWKy9WEK}u-|zQ6r]n", stringBuilder0);
      assertEquals("NWKy9WEK}u-|zQ6r]n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("alter materialized view");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog alter materialized view", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("w5thVG2`_]q.fCx'");
      SQLUtil.mutatesStructure("execw5th");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?<EFX640bm'>\"J7");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("c?--gN16:/s*#XgV:", "c?--gN16:/s*#XgV:", "c?--gN16:/s*#XgV:");
      assertEquals("'c?--gN16:/s*#XgV:'", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create materialized view";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName("create materialized view", stringArray0);
      System.setCurrentTimeMillis(0L);
      SQLUtil.isDML("create materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("R`<9FsJ", false, dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.setName((String) null);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[1], dBTable0, 28, "create materialized view");
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create materialized view", defaultDBTable0, 10890, "create materialized view");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "g.b");
      SQLUtil.addOptionalCondition("`", stringBuilder0);
      assertEquals("g.b or `", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "F}f`Cx/";
      stringArray0[1] = "F}f`Cx/";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      SQLUtil.isDML("F}f`Cx/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "UaC#?PsY`^!z%IW", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("F}f`Cx/", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.setName("F}f`Cx/");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, dBTable0, 28, "F}f`Cx/");
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("F}f`Cx/", defaultDBTable0, 28, "(F}f`Cx/, F}f`Cx/, , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F}f`Cx/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.normalize(".-ct//VCI+~", false);
      assertEquals(".- ct / / VCI + ~", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("WucbUwP+$ltI^n '");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-2299), "WucbUwP+$ltI^n '");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      dBSchema0.getTables(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "WUCBUWP+$LTI^N '", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(191, "");
      dBDataType0.isAlpha();
      Integer integer0 = new Integer((-3541));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("(-3541)", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , ", string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "{gTFylQj8I73", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
      
      String string1 = SQLUtil.renderValue("{gTFylQj8I73");
      assertEquals("'{gTFylQj8I73'", string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("w5hVG2`_]q.Cx'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RVq^j/^X7t", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RVq^j/^X7t";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "RVq^j/^X7t", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (RVq^j/^X7t)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("CHECK ");
      StringBuilder stringBuilder1 = stringBuilder0.append('\'');
      SQLUtil.addRequiredCondition("CHECK ", stringBuilder1);
      assertEquals("CHECK ' and CHECK ", stringBuilder1.toString());
      assertEquals("CHECK ' and CHECK ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("2)jC*H(~,BD", true);
      assertEquals("2) jC * H (~, BD", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("G`(8X6#V9=Cv[", true);
      assertEquals("G ` (8X6 # V9 = Cv [", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("+K CxpVADM.", true);
      assertEquals("+ K CxpVADM.", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("5U\"D/", true);
      assertEquals("5U \"D/\"", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName("()", stringArray0);
      SQLUtil.isDML("deletef}f`cx/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "truncatef}f`cx/", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("lGdEz4Kbj|LKD3ChbH|", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.setName("$y#NT");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("()", defaultDBTable0, 456, "()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RcDhsbxY*co.jOh");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RcDhsbxY*co.jOh";
      stringArray0[1] = "RcDhsbxY*co.jOh";
      stringArray0[2] = "RcDhsbxY*co.jOh";
      stringArray0[3] = null;
      stringArray0[4] = "RcDhsbxY*co.jOh";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      defaultDBTable0.getUniqueConstraint("$pOpA]+%");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (RcDhsbxY*co.jOh, RcDhsbxY*co.jOh, RcDhsbxY*co.jOh, , RcDhsbxY*co.jOh)", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("RcDhsbxY*co.jOh = 'RcDhsbxY*co.jOh' AND RcDhsbxY*co.jOh = 'RcDhsbxY*co.jOh' AND RcDhsbxY*co.jOh = 'RcDhsbxY*co.jOh' AND null = null AND RcDhsbxY*co.jOh = 'RcDhsbxY*co.jOh'", string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(191, "intoselect");
      dBDataType0.isAlpha();
      Integer integer0 = new Integer((-3541));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Cannot change transaction read-only property in the middle of a transaction.", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("INTOSELECT(-3541)", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.Cannot change transaction read-only property in the middle of a transaction.", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create table//";
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "create table//", (String) null, stringArray0);
      assertEquals("create table// as null on null.create table// = null.create table//", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".-ct//VCI+~");
      DBDataType dBDataType0 = DBDataType.getInstance(1436, "UNIQUE ");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = Integer.getInteger("UNIQUE ", (-51));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o[E;H )Sd(.<.@J", defaultDBTable0, dBDataType0, integer2);
      DBDataType dBDataType1 = DBDataType.getInstance(1436, "\"466o:BXBJ");
      Integer integer3 = RawTransaction.COMMIT;
      dBDataType1.isNumber();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType1, integer2, integer3);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("\"466O:BXBJ(-51,0)", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!V");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("!V", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String string0 = SQLUtil.normalize("?4Pedn%ep*Lp0/J)", true);
      assertEquals("? 4Pedn % ep * Lp0 / J)", string0);
      
      Character character0 = new Character('e');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'e'", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-- ERROR: checksum mismatch page: ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-118);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.normalize("-- ERROR: checksum mismatch page: ", false);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")EFX40bm'>\"J7");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")EFX40bm'>\"J7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "unknown BLOB value repr", true, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Unknown constraint type: ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(")EFX40bm'>\"J7", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "8vV#GmO\\nhqV$%NGpF_";
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-2299), "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
      
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.normalize("", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[2], false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Unknown XML Result class: {0}", true, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("UNIQUE (, , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")EFX40bm'>\"J7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "unknown BLOB value repr", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"unknown BLOB value repr\" PRIMARY KEY ()EFX40bm'>\"J7, , , , )", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"unknown BLOB value repr\" ", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Random.setNextRandom(2903);
      SQLUtil.isQuery("selectconstraint \"unknown blob value repr\" primary key ()efx40bm'>\"j7, , , , )");
      boolean boolean1 = SQLUtil.isQuery("selectconstraint \"unknown blob value repr\" primary key ()efx40bm'>\"j7, , , , )");
      assertTrue(boolean1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "alter materialized view";
      objectArray0[1] = (Object) "drop table";
      objectArray0[2] = (Object) "selectconstraint \"unknown blob value repr\" primary key ()efx40bm'>\"j7, , , , )";
      objectArray0[3] = (Object) "alter materialized view";
      objectArray0[4] = (Object) defaultDBTable0;
      objectArray0[5] = (Object) "selectconstraint \"unknown blob value repr\" primary key ()efx40bm'>\"j7, , , , )";
      objectArray0[6] = (Object) "alter materialized view";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      assertEquals("SELECT * FROM drop table WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".-ct//VCI+~");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".-ct//VCI+~", defaultDBTable0, 1436, "?@E>^J+io>^j");
      DBDataType dBDataType0 = DBDataType.getInstance(1436, ".-ct//VCI+~");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SMU%R7Hl+&s(nFrK_ A", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn1.getForeignKeyConstraint();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?@E>^J+io>^j");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.removeComments("?@E>^J+io>^j");
      assertEquals("?@E>^J+io>^j", string0);
  }
}
