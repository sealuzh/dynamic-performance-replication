/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:11:42 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.Pipe;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(65536L);
      asyncTimeout0.enter();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      asyncTimeout1.deadline(65536L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      asyncTimeout1.deadline(65536L, timeUnit1);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException("(W!T_4L");
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.source((Source) null);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.timedOut();
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      mockIOException0.getSuppressed();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.enter();
      asyncTimeout0.timeout(1000000L, timeUnit0);
      pipe0.sinkClosed = true;
      asyncTimeout0.source(pipe_PipeSource0);
      asyncTimeout0.enter();
      pipe0.sourceClosed = true;
      Pipe pipe1 = new Pipe(3566L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      asyncTimeout0.newTimeoutException(iOException0);
      // Undeclared exception!
      try { 
        pipe_PipeSink0.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.deadlineNanoTime(65536L);
      asyncTimeout0.enter();
      asyncTimeout0.source((Source) null);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asyncTimeout0.timeout(9223372036854775807L, timeUnit0);
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      asyncTimeout1.source(buffer0);
      asyncTimeout0.enter();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      asyncTimeout1.sink((Sink) null);
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(65536L);
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      asyncTimeout0.deadline(65536L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      asyncTimeout0.deadline(1000000000L, timeUnit1);
      asyncTimeout2.deadline(1000000000L, timeUnit1);
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      asyncTimeout1.timedOut();
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException((String) null, mockIOException0);
      asyncTimeout1.exit((IOException) mockIOException1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      long long0 = 65536L;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(65536L);
      asyncTimeout0.enter();
      try { 
        asyncTimeout1.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException(" text=");
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.throwIfReached();
      mockIOException0.getStackTrace();
      IOException iOException1 = asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.newTimeoutException(iOException1);
      Source source0 = asyncTimeout0.source((Source) null);
      Pipe pipe0 = new Pipe(60L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(source0, 498L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout$2", e);
      }
  }
}
