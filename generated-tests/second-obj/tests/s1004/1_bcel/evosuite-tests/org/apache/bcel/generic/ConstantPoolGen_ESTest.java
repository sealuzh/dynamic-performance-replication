/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:46:23 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong(1428L);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[8] = (Constant) constantLong0;
      int int0 = constantPoolGen0.addConstant(constantLong0, constantPoolGen0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(102, 102);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(102, 102);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType1, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInteger(64);
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
      
      int int1 = constantPoolGen0.lookupInteger(1057);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(235, (-4934));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("XgiAnw6fpyqxr'4");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1600), (-1600));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantClass constantClass0 = new ConstantClass((-3758));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref1;
      constantArray0[2] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      int int0 = 256;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(256);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(256, 256);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1, 1);
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[0] = constant0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1, 1);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat(0.0F);
      constantPoolGen0.lookupLong(1);
      int int0 = constantPoolGen0.lookupDouble(0.0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.lookupInterfaceMethodref("", "", "");
      int int1 = constantPoolGen0.lookupInteger(64);
      assertTrue(int1 == int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(585, 585);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantLong constantLong0 = new ConstantLong(585);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupFloat((-1.0F));
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-513));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ObjectType objectType0 = Type.THROWABLE;
      constantPoolGen0.addClass(objectType0);
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("Xw--+p|:Dkr}C:Xq*n");
      constantPoolGen0.adjustSize();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.toString();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-2L));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, 1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantLong cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(2.0);
      int int0 = Pattern.CASE_INSENSITIVE;
      int int1 = constantPoolGen0.addDouble(2);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(0L);
      int int0 = constantPoolGen0.addInteger(6);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(6);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger((-3943));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodType[16](descriptor_index = 6)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(1703);
      constantArray0[0] = (Constant) constantClass0;
      ConstantDouble constantDouble0 = new ConstantDouble(2842.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger(8);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1703, 889);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      int int0 = 10;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(10, 10);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(10, 10);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantClass constantClass0 = new ConstantClass(10);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      constantPoolGen0.addInteger(1);
      int int0 = constantPoolGen0.lookupInteger(3);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(217, 217);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantFloat constantFloat0 = new ConstantFloat(217);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-9), 217);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 788;
      ConstantDouble constantDouble0 = new ConstantDouble(788);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ArrayType arrayType0 = null;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen1.addConstant(constantDouble0, constantPoolGen0);
      ArrayType arrayType1 = null;
      try {
        arrayType1 = new ArrayType("SimpleElementValueGen doesnt know how to write out type ", 788);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 788
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong((-2868L));
      constantArray0[0] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      Constant[] constantArray1 = new Constant[9];
      constantArray1[0] = (Constant) constantInteger0;
      constantArray1[1] = (Constant) constantInteger0;
      constantArray1[2] = (Constant) constantInteger1;
      constantArray1[3] = (Constant) constantInteger1;
      constantArray1[4] = (Constant) constantInteger0;
      constantArray1[5] = (Constant) constantInteger1;
      constantArray1[6] = (Constant) constantLong0;
      constantArray1[7] = (Constant) constantInteger0;
      constantArray1[8] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPool0.toString();
      constantPoolGen0.addConstant(constantArray1[7], constantPoolGen0);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType("OXC", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: 0
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected constant type: ");
      ConstantInteger constantInteger0 = new ConstantInteger(13);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPool0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addConstant(constantInteger0, constantPoolGen0);
      constantPoolGen1.getConstantPool();
      ArrayType arrayType0 = new ArrayType("Unexpected constant type: ", 6);
      assertEquals((byte)13, arrayType0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(880.083889734333);
      constantPoolGen0.lookupFieldref("getStatic", ">F+016<y?N#[M", "/A(S86m_-yg|`Jb+");
      int int0 = constantPoolGen0.lookupDouble((-1));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupNameAndType("9~cmhW9", "9~cmhW9");
      constantPoolGen0.lookupMethodref("9~cmhW9", "CONSTANT_Fieldref", "The filters must not be null");
      constantPoolGen0.size = (-1);
      String string0 = "jmW3<|";
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass("jmW3<|");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, 3);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantClass constantClass0 = new ConstantClass((-3758));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addClass(objectType0);
      int int0 = Float.MAX_EXPONENT;
      constantPoolGen0.lookupInterfaceMethodref("Fe", "Fe", "Fe");
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      ObjectType objectType1 = Type.THROWABLE;
      objectType0.subclassOf(objectType1);
      int int1 = Float.MIN_EXPONENT;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("9449Hv3H:!IjOx", "@", "@");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      assertEquals(6, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addMethodref("\n", "\n", "Unexpected constant type: ");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupClass("\n");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-32));
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addFieldref("n5}AsoO:Unexpected constant type: :sJf!9q2B_O]>\\@4T", "n5}AsoO:Unexpected constant type: :sJf!9q2B_O]>\\@4T", "9449Hv3H:!IjOx");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addFieldref((String) null, "9449Hv3H:!IjOx", "9449Hv3H:!IjOx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      constantPoolGen0.addInteger(1);
      int int0 = Character.MAX_CODE_POINT;
      constantPoolGen0.addMethodref("VnZeZMJc)u", "VnZeZMJc)u", "NEW.getType() returning a non-reference type?!");
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, 1);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString(3);
      constantArray0[1] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger(3);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      String string0 = "YfRb";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("YfRb");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-464));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(252, (-464));
      constantArray0[5] = (Constant) constantMethodref0;
      ConstantString constantString1 = new ConstantString((-1090));
      constantArray0[6] = (Constant) constantString1;
      ConstantFloat constantFloat0 = new ConstantFloat(252);
      constantArray0[7] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("Unknown constant type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addInterfaceMethodref("Unknown constant type ", "Unknown constant type ", "Q7YSBuOtI`-");
      int int0 = constantPoolGen0.addClass("Q7YSBuOtI`-");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addLong((-522L));
      int int0 = Pattern.DOTALL;
      constantPoolGen0.addFloat((-522L));
      int int1 = constantPoolGen0.lookupLong((-1L));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      constantPoolGen0.addLong(0L);
      int int0 = Pattern.CANON_EQ;
      constantPoolGen0.lookupInteger(128);
      int int1 = constantPoolGen0.addDouble(2094.918);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-578), (-578));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantClass constantClass0 = new ConstantClass((-3758));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantFieldref1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -578
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantLong constantLong0 = new ConstantLong((-2868L));
      constantArray0[0] = (Constant) constantLong0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S");
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      Constant[] constantArray1 = new Constant[9];
      constantArray1[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPool0.toString();
      ConstantFloat constantFloat0 = new ConstantFloat((-1498.1F));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      constantPoolGen0.adjustSize();
      constantPoolGen0.getConstantPool();
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((String) null, (-2529));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-2868L));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(1.0F);
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addFloat(1);
      objectType0.referencesInterfaceExact();
      constantPoolGen0.lookupInterfaceMethodref("JavaClass.debug", "JavaClass.debug", "Fe");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantClass constantClass0 = new ConstantClass(1);
      constantPoolGen0.lookupMethodref("JavaClass.debug", "castore", "JavaClass.debug");
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      ConstantPool constantPool1 = constantPool0.copy();
      objectType0.subclassOf(objectType0);
      int int0 = Float.MIN_EXPONENT;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, (-2042));
      constantPoolGen0.getConstantPool();
      constantPool1.copy();
      ConstantFloat constantFloat0 = new ConstantFloat(3);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantPoolGen0.addConstant(constantFloat1, constantPoolGen0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2042
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRING;
      int int0 = constantPoolGen0.index;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addMethodref("#%\"MsRg", "Unexpected constant type: ", "getStatic");
      int int1 = constantPoolGen0.index;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("getStatic");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      Constant.setComparator((BCELComparator) null);
      constantPoolGen0.addNameAndType("Unexpected constant type: ", "getStatic");
      assertEquals(7, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      constantPoolGen3.lookupDouble(7);
      int int2 = constantPoolGen3.addConstant(constantUtf8_0, constantPoolGen2);
      constantPoolGen1.getConstantPool();
      int int3 = constantPoolGen2.lookupLong(3);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-2868L));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Short.BYTES;
      constantPoolGen0.getConstantPool();
      int int1 = 1402;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("newarray");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1402, 64);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1402
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2013265910), (-2013265910));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(242, (-2013265910));
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addString("Unexpected constant type: ");
      constantPoolGen0.lookupString("Unexpected constant type: ");
      try { 
        constantPool0.constantToString((-2013265910), (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -2013265910. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-743L));
      constantPoolGen0.size = 5150;
      constantPoolGen0.addInteger(1);
      ObjectType objectType0 = Type.CLASS;
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Type.getType(class0);
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.addString("#?^M2N(hzV7~cN");
      constantPoolGen0.lookupNameAndType("#?^M2N(hzV7~cN", "#?^M2N(hzV7~cN");
      constantPoolGen0.lookupString("#?^M2N(hzV7~cN");
      constantPoolGen0.lookupUtf8("\n");
      ConstantMethodref constantMethodref0 = new ConstantMethodref(7, (-1));
      constantMethodref0.setClassIndex((-1));
      constantMethodref0.setClassIndex(7);
      constantPoolGen0.setConstant(46, constantMethodref0);
      int int0 = constantPoolGen0.addString("#?^M2N(hzV7~cN");
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(256, 255);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("Unexpected constat type:");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.getFinalConstantPool();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.bcel.verfier.exc.StructuralCodeConstraintException");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(2);
      // Undeclared exception!
      try { 
        constantPoolGen2.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantString cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-22);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1187), (byte)0);
      Constant[] constantArray0 = new Constant[2];
      Boolean boolean0 = new Boolean(false);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2088, (byte)0);
      constantFieldref0.clone();
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addString("Unexpected constant type: ");
      constantPoolGen0.lookupString("Unexpected constant type: ");
      String string0 = ", reference_index = ";
      constantPoolGen0.addMethodref("Unexpected constant type: ", "sDS", ", reference_index = ");
      int int0 = Double.BYTES;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.addFieldref(", reference_index = ", "Unexpected constant type: ", ", reference_index = ");
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen(constantPool0);
      constantPoolGen4.addMethodref("Unexpected constant type: ", "sDS", ", reference_index = ");
      int int1 = Character.MIN_RADIX;
      ConstantPoolGen constantPoolGen5 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen6 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantArray0[1], constantPoolGen6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = -1187, reference_index = 0)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      String string0 = constantPool0.toString();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int1 = Member.PUBLIC;
      constantPoolGen0.addMethodref("^O- Ua4i7b:5KtaM1)c", "sDS:getStatic:&c", string0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int2 = constantPoolGen2.index;
      ConstantPool constantPool1 = constantPoolGen1.getConstantPool();
      Constant constant0 = constantPoolGen0.getConstant(6);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen();
      constantPoolGen4.lookupMethodref("T~M", "+9|B##m ", string0);
      constantPoolGen0.addFieldref(string0, "_:NwU", "^O- Ua4i7b:5KtaM1)c");
      ConstantPoolGen constantPoolGen5 = new ConstantPoolGen(constantPool1);
      constantPoolGen1.addConstant(constant0, constantPoolGen0);
      constantPoolGen5.addFieldref("_:NwU", "Class ", "Class ");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1763), 6);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constant0, constantPoolGen3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
