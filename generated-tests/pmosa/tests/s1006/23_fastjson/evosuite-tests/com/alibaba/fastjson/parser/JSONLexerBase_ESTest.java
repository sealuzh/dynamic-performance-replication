/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 06:59:37 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'S';
      charArray0[2] = ':';
      charArray0[3] = 'h';
      charArray0[4] = ';';
      charArray0[5] = '1';
      charArray0[6] = 't';
      charArray0[7] = '\\';
      charArray0[8] = '6';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      String string0 = jSONScanner0.tokenName();
      assertEquals("Unknown", string0);
      
      jSONScanner0.setToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanBoolean('5');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1,HjEKkri");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r&t63),4mn|ku6LIr +", 25);
      jSONScanner0.longValue();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(25);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 3;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 3);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 3;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 3);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      charArray0[2] = 'c';
      charArray0[3] = '5';
      charArray0[4] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      jSONReaderScanner0.matchStat = 2767;
      Locale.setDefault(locale_Category0, locale0);
      jSONReaderScanner0.locale = locale0;
      locale0.getDisplayScript(jSONReaderScanner0.locale);
      jSONReaderScanner0.pos = 1382;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('c');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      char char0 = 'i';
      charArray0[1] = 'i';
      char char1 = '`';
      charArray0[2] = '`';
      charArray0[3] = 't';
      charArray0[4] = 'v';
      charArray0[5] = 'A';
      JSONLexerBase.readString(charArray0, 0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1653);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      int int0 = Calendar.HOUR_OF_DAY;
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.sp = 0;
      jSONReaderScanner0.indexOf('R', 0);
      char[] charArray1 = new char[1];
      char[] charArray2 = new char[2];
      charArray2[0] = 'R';
      charArray2[1] = 'R';
      jSONReaderScanner0.charArrayCompare(charArray2);
      jSONReaderScanner0.stringDefaultValue = "";
      charArray1[0] = 'V';
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      JSONScanner jSONScanner0 = new JSONScanner(charArray2, 0);
      jSONScanner0.matchField(charArray2);
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1258, 1258);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[1];
      jSONReaderScanner0.matchField(charArray0);
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 7);
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner0.scanType("7?| X>x)_m~!9`");
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-94));
      jSONScanner0.scanIdent();
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 7);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 3);
      JSONScanner jSONScanner0 = new JSONScanner("S");
      SymbolTable symbolTable0 = new SymbolTable(51);
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qY");
      jSONReaderScanner0.scanFloat('s');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      SymbolTable symbolTable0 = new SymbolTable(71);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'S');
      boolean boolean0 = jSONReaderScanner0.scanBoolean('8');
      assertTrue(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 'p';
      charArray0[2] = '\\';
      charArray0[3] = 'o';
      charArray0[4] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 189);
      jSONReaderScanner0.scanBoolean('a');
      int int0 = jSONReaderScanner0.scanType("");
      assertEquals((-2), int0);
      
      SymbolTable symbolTable0 = new SymbolTable(59);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'M');
      assertEquals(189, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.stringDefaultValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.scanUUID('B');
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanBoolean('a');
      jSONReaderScanner0.scanUUID('a');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(365);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 7, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+`H");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      Feature feature0 = Feature.SupportArrayToBean;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = '1';
      charArray0[2] = 'N';
      charArray0[3] = '1';
      charArray0[4] = 'w';
      charArray0[5] = '2';
      charArray0[6] = '4';
      charArray0[7] = '\u0082';
      charArray0[8] = '|';
      jSONReaderScanner0.charArrayCompare(charArray0);
      char[] charArray1 = new char[7];
      charArray1[0] = '2';
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      jSONReaderScanner0.sub_chars(115, 115);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.config(feature0, true);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 3);
      jSONReaderScanner0.setToken(3);
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'Y';
      charArray0[2] = '=';
      charArray0[3] = '4';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.getTimeZone();
      int int0 = 3550;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 3550, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      jSONScanner0.longValue();
      jSONScanner0.resetStringPosition();
      char[] charArray0 = null;
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.scanDouble('4');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 3136;
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3136);
      jSONReaderScanner0.setToken(3136);
      jSONReaderScanner0.scanFieldLong(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(3136);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteClassName");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanBoolean('8');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.scanDouble('@');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.getLocale();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 3);
      jSONReaderScanner0.setToken(3);
      jSONReaderScanner0.putChar('Q');
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanDouble('F');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 3;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("U.<2[:r#U9M");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y_*k", 3);
      jSONReaderScanner0.scanDecimal('D');
      jSONReaderScanner0.setToken(3);
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2229, 2229);
      jSONReaderScanner0.scanDecimal(')');
      jSONReaderScanner0.scanBoolean('8');
      assertEquals(2229, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.pos = 92;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanBoolean('8');
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", (-1559));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 3);
      jSONReaderScanner0.setToken(3);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&>lhZAhe`;CZ[N", 3);
      jSONReaderScanner0.setToken(3);
      char[] charArray0 = new char[1];
      jSONReaderScanner0.skipWhitespace();
      charArray0[0] = ':';
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak", 869);
      jSONReaderScanner0.scanDate('@');
      jSONReaderScanner0.setToken((-1473));
      assertEquals((-1473), jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`");
      Locale locale0 = Locale.CHINA;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanDouble('@');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean(')');
      assertFalse(boolean0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 3);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.sub_chars(101, 59);
      int int0 = jSONReaderScanner0.token();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanDouble(';');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.scanBoolean('8');
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1,HjEKkri");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('S');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("doz>w</nnI[U");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanStringArray(arrayList0, '$');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      char char0 = 'Z';
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'Z');
      char char1 = ')';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal(')');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 869);
      jSONReaderScanner0.scanDate('x');
      jSONReaderScanner0.setToken((-274));
      assertEquals((-274), jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 3);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")FG{aFCIq><\">h7A", 3);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.getTimeZone();
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(1, jSONReaderScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      char char0 = ')';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 7, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 7);
      jSONReaderScanner0.setToken(7);
      int int0 = jSONReaderScanner0.scanInt('j');
      assertEquals(7, jSONReaderScanner0.token());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      char char0 = 'k';
      charArray0[1] = 'k';
      char char1 = '~';
      charArray0[2] = '~';
      charArray0[3] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56, 7);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1275, 1275);
      jSONReaderScanner0.setToken((-1466));
      jSONReaderScanner0.nextToken(1275);
      Class<Feature> class0 = Feature.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|N_N lpu+b({Q0xi+'!");
      jSONReaderScanner0.nextToken(0);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      char char0 = '.';
      charArray0[1] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78, 2111);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.nextToken(92);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      double double0 = jSONReaderScanner0.scanDouble('8');
      assertEquals(71.0, double0, 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = jSONReaderScanner0.scanLong('8');
      assertEquals(71L, long0);
      
      jSONReaderScanner0.sub_chars(1543, 1543);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      long long0 = jSONReaderScanner0.scanLong('h');
      assertEquals(2L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108, 667);
      jSONReaderScanner0.matchStat();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char[] charArray1 = new char[7];
      charArray1[0] = '8';
      charArray1[1] = '8';
      charArray1[2] = '8';
      charArray1[3] = '8';
      charArray1[4] = '8';
      charArray1[5] = 'M';
      charArray1[6] = '8';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(0, charArray1, (-711), 95);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|N_N lpu+b({Q0xiR'!");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("|N_N lpu+b({Q0xiR'!", 0);
      jSONReaderScanner1.nextToken();
      jSONReaderScanner1.stringVal();
      jSONReaderScanner0.getCurrent();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 55);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('R');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true", 0);
      jSONReaderScanner0.setToken(0);
      assertEquals(0, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      charArray0[8] = 'j';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner2.scanInt('%');
      assertEquals(989, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")FG{aFCIq><\">h7A", 3);
      jSONReaderScanner0.nextToken();
      char char0 = 'Y';
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'X';
      charArray0[5] = 'Y';
      SymbolTable symbolTable0 = new SymbolTable(70);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 3, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")F#{aFCIq><\">h7A", 3);
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      jSONReaderScanner0.scanLong('b');
      charArray0[1] = ':';
      charArray0[2] = '[';
      charArray0[3] = '\\';
      charArray0[4] = ';';
      charArray0[5] = '\\';
      charArray0[6] = '=';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('S');
      jSONReaderScanner0.scanBoolean('0');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")FG{aFCI<\">h7A", 115);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('s');
      assertEquals(115, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not", 80);
      jSONReaderScanner0.scanDate(';');
      jSONReaderScanner0.setToken(80);
      assertEquals(80, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      charArray0[7] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('j');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'cGsHo=h!v}", 66);
      jSONReaderScanner0.scanString('O');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanBoolean('>');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.scanBoolean('(');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.scanDouble('_');
      char[] charArray0 = jSONReaderScanner0.sub_chars(41, 41);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char", 7);
      jSONReaderScanner0.setToken(7);
      jSONReaderScanner0.scanLong('j');
      jSONReaderScanner0.scanInt('j');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|N_N lpu+b({Q0xi+'!");
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.nextToken((-2));
      int int0 = jSONReaderScanner0.intValue();
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak", 869);
      jSONReaderScanner0.matchStat = 869;
      jSONReaderScanner0.scanDate('@');
      SymbolTable symbolTable0 = new SymbolTable(869);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '@');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", 62);
      SymbolTable symbolTable0 = new SymbolTable(62);
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(62, jSONReaderScanner0.getFeatures());
      assertEquals(":", string0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanBoolean(';');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 7;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not", 7);
      SymbolTable symbolTable0 = new SymbolTable(99999999);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanDate('E');
      jSONReaderScanner0.setToken(114);
      assertEquals(114, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", (-1559));
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1265);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanBoolean(';');
      jSONReaderScanner0.sub_chars(127, 125);
      jSONReaderScanner0.setToken(127);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" H?p&z>m<fJF", 0);
      jSONReaderScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanDecimal(')');
      jSONReaderScanner0.scanBoolean(')');
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1,HjEKkri");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDate(';');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1,HjEKkri");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(4096);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - H, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '/');
      SymbolTable symbolTable0 = new SymbolTable(110);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]y+@I:[9-{U)", 2741);
      jSONReaderScanner0.bp = 2741;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      boolean boolean0 = jSONReaderScanner0.isEnabled(114);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDecimal(')');
      jSONReaderScanner0.scanBoolean(')');
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'p';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      charArray0[6] = ')';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONReaderScanner0.scanDecimal(')');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not", 80);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanDecimal('u');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanBoolean('~');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 10, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 7);
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken(7);
      assertEquals('|', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+v}p*D{ZAPI[{&cg?");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "set");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanDate('1');
      jSONReaderScanner0.stringVal();
      assertEquals('v', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|N_N lpu+b({Q0xiR'!", 66);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")FG{aFCIq><\">h7A", 3);
      jSONReaderScanner0.scanType(")FG{aFCIq><\">h7A");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('G');
      assertEquals(3, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanIdent();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(23, jSONReaderScanner0.token());
      assertEquals(7577903782L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not", 80);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.np = 2343;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      int int0 = Calendar.HOUR_OF_DAY;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      jSONReaderScanner0.scanLong('x');
      jSONReaderScanner0.intValue();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'x');
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", (-1559));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('M');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('>');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1637);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('P');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      assertEquals(6, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fVODp0.");
      char[] charArray0 = new char[3];
      jSONScanner0.resetStringPosition();
      charArray0[0] = 'w';
      charArray0[1] = '+';
      char[] charArray1 = new char[9];
      charArray1[0] = 'w';
      charArray1[1] = '+';
      charArray1[2] = 'w';
      charArray1[3] = 'w';
      jSONScanner0.next();
      charArray1[4] = '+';
      charArray1[5] = '+';
      charArray1[6] = 'w';
      charArray1[7] = 'w';
      charArray1[8] = '+';
      jSONScanner0.scanFieldBoolean(charArray1);
      charArray0[2] = '.';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.charAt(0);
      Feature feature0 = Feature.UseObjectArray;
      jSONScanner0.config(feature0, true);
      jSONScanner0.nextToken((-1861));
      jSONScanner0.getCalendar();
      JSONLexerBase.isWhitespace('=');
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.pos = 92;
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 92);
      jSONScanner0.scanInt('x');
      assertEquals(92, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")tJ94WVj,&We=S5y1", (-1215));
      jSONReaderScanner0.pos = (-1215);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanBoolean('Y');
      jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      jSONReaderScanner0.info();
      SymbolTable symbolTable0 = new SymbolTable(120);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '`');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('s');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.scanFloat('l');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7[1_Ak");
      jSONReaderScanner0.scanDouble('U');
      jSONReaderScanner0.scanFloat(',');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nl");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f.lse");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanBoolean('3');
      jSONReaderScanner0.stringVal();
      JSONScanner jSONScanner0 = new JSONScanner("f.lse", 78);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('3', '3', 'e');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B| B;Es", 115);
      jSONReaderScanner0.scanBoolean('');
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 3427, 115);
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|N_N lpu+b({Q0xi+'!");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("B5<3=?P<2\"S*~g+K;q", (-1973));
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      jSONReaderScanner1.sbuf = charArray0;
      char[] charArray1 = new char[0];
      jSONReaderScanner1.scanFieldDate(charArray1);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanDate('s');
      double double0 = jSONReaderScanner1.scanDouble('g');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")FG{aFCI<\">h7A");
      jSONReaderScanner0.nextToken(1228);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71O_k", 1642);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nl", (-3644));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('j');
      jSONReaderScanner0.isBlankInput();
      assertEquals((-3644), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 57);
      jSONReaderScanner0.isEnabled((-288), (-288));
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'i';
      charArray0[2] = '~';
      charArray0[3] = 'j';
      charArray0[4] = '-';
      char char0 = 'x';
      charArray0[5] = 'x';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1,HEZr[");
      jSONReaderScanner0.skipWhitespace();
      boolean boolean0 = jSONReaderScanner0.isEnabled(739, 739);
      assertTrue(boolean0);
      
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"Set\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.putChar('m');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"n\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.scanDouble('_');
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = '%';
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2", 45);
      jSONReaderScanner0.subString(45, 652);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      jSONReaderScanner0.scanFloat('a');
      SymbolTable symbolTable0 = new SymbolTable(105);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("doz>w</nnI[U");
      jSONReaderScanner0.nextToken(1911);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.integerValue();
      assertEquals('o', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      double double0 = jSONReaderScanner0.scanDouble('e');
      assertEquals(0.0, double0, 0.01);
      
      float float0 = jSONReaderScanner0.scanFloat('U');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 452, 452);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldInt(charArray0);
      char char0 = '.';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("string");
      jSONReaderScanner0.scanFieldInt(charArray0);
      int int0 = 731;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 731);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7? X>fx)_m!9`");
      jSONReaderScanner0.nextToken(3);
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanNumber();
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(15, number0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1,HjEKkri");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanInt('P');
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1,HjEKkri");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1,HjEKkri");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONReaderScanner0.scanDouble('e');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      JSONScanner jSONScanner0 = new JSONScanner("x=C^j", 92);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1992);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. =
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanDouble('x');
      jSONReaderScanner0.scanDate(':');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      JSONScanner jSONScanner0 = new JSONScanner("3>vjZEkx");
      jSONScanner0.nextToken(18);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. >
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J/k}Ow0");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J/k}Ow0");
      jSONReaderScanner0.scanType("I9,~6inE");
      jSONReaderScanner0.skipComment();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.nextToken(1911);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.integerValue();
      assertEquals('_', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("doz>w+/nIZ[U");
      jSONReaderScanner0.nextToken(1911);
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.setToken((-3877));
      assertEquals((-3877), jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.stringDefaultValue = "\":\"";
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanDate('E');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 62;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      char char0 = '6';
      jSONReaderScanner0.scanDate('6');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[O.oM");
      jSONReaderScanner0.nextToken();
      assertEquals('O', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", 62);
      SymbolTable symbolTable0 = new SymbolTable(62);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.setToken((-2253));
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      jSONReaderScanner0.scanString('Y');
      jSONReaderScanner0.scanDouble('e');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not", 80);
      jSONReaderScanner0.scanLong('B');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt(';');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      jSONReaderScanner0.scanDouble('x');
      jSONReaderScanner0.scanFloat('U');
      jSONReaderScanner0.scanIdent();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(6898, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1653);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.setToken(1653);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r&t63),4mn|ku6LIr +");
      jSONReaderScanner0.nextToken(8);
      assertEquals('&', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'J';
      charArray0[0] = 'J';
      charArray0[1] = 's';
      char char1 = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'i';
      char char2 = 'T';
      charArray0[4] = 'T';
      char char3 = 'J';
      charArray0[5] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      charArrayReader0.read();
      jSONReaderScanner0.scanType("iO\"FX6Rl~]`!");
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      jSONReaderScanner0.scanDouble('n');
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONException", 26);
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(2036);
      assertEquals('a', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'i';
      charArray0[4] = 't';
      charArray0[5] = 'y';
      charArray0[6] = 'c';
      charArray0[7] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1708, 15);
      jSONReaderScanner0.nextToken(15);
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.setToken(91);
      assertEquals(91, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[0] = 'n';
      charArray0[1] = 't';
      charArray0[2] = 'n';
      charArray0[3] = 'W';
      charArray0[4] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58, 83);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONReaderScanner0.ch = 'L';
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = 'i';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.nextToken((-1075));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      SymbolTable symbolTable0 = new SymbolTable(1915);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1915);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      SymbolTable symbolTable0 = new SymbolTable(1915);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1915);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanDouble('\'');
      jSONReaderScanner0.scanDate('\'');
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanString();
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = 'i';
      jSONReaderScanner0.scanDate('A');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("71");
      float float0 = jSONReaderScanner0.scanFloat('t');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[2] = '7';
      charArray0[3] = '/';
      charArray0[4] = '/';
      JSONScanner jSONScanner0 = new JSONScanner("jAeB2>iF;[|EbDs0r%");
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 2903);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 0);
      long long0 = jSONReaderScanner0.scanLong('|');
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      jSONReaderScanner0.subString(1138, 1992);
      jSONReaderScanner0.scanLong('N');
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner(" - ", 1138);
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r&t63),4mn|ku6LIr +");
      jSONReaderScanner0.nextToken(16);
      assertEquals('&', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'l';
      charArray0[2] = 'q';
      charArray0[3] = '$';
      charArray0[4] = 'e';
      charArray0[5] = '\'';
      charArray0[6] = '|';
      charArray0[7] = 'O';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 6);
      jSONScanner0.scanDate('O');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.nextToken(6);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r&t63),4mn|ku6LIr +");
      jSONReaderScanner0.nextToken(13);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      char char0 = '~';
      jSONReaderScanner0.scanBoolean('~');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 10, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      SymbolTable symbolTable0 = new SymbolTable(1169);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '!');
      jSONReaderScanner0.nextToken(120);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'l');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", (-2861));
      jSONScanner0.nextToken();
      jSONScanner0.longValue();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken((-2861));
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      jSONReaderScanner0.scanDate('C');
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanBoolean('`');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("not");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken(19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      int int0 = 1708;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15, 1708);
      jSONReaderScanner0.nextToken(4278);
      jSONReaderScanner0.scanString('W');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 39);
      jSONReaderScanner0.scanDate('A');
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'y';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 31);
      jSONReaderScanner0.nextIdent();
      assertEquals(20, jSONReaderScanner0.token());
      
      jSONReaderScanner1.scanLong('A');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("", 3);
      char[] charArray1 = new char[4];
      charArray1[0] = '[';
      charArray1[1] = 'y';
      charArray1[2] = 'A';
      charArray1[3] = '7';
      jSONReaderScanner2.charArrayCompare(charArray1);
      float float0 = jSONReaderScanner1.scanFloat('R');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"4f2se");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com");
      jSONReaderScanner0.scanDecimal('X');
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = '\u008D';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanBoolean('M');
      SymbolTable symbolTable0 = new SymbolTable(6315);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7Hd");
      char char0 = ')';
      SymbolTable symbolTable0 = new SymbolTable(16);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, ')');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"4f2se");
      jSONReaderScanner0.scanLong('/');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('e');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r&t63),4mn|ku6LIr +");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3392903, 292);
      jSONReaderScanner0.nextToken(11);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanString('W');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'J';
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanBoolean('<');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com");
      jSONReaderScanner0.scanDouble('{');
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONException", (-1));
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[2] = '{';
      jSONReaderScanner0.isEnabled(100, 0);
      jSONReaderScanner0.pos();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4flse");
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4flse");
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)39;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner1.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com");
      jSONReaderScanner0.scanDouble('{');
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 83, 1);
      Locale locale0 = jSONReaderScanner0.getLocale();
      locale0.getDisplayCountry();
      jSONReaderScanner1.locale = locale0;
      jSONReaderScanner1.nextToken(58);
      jSONReaderScanner1.scanFieldFloatArray(charArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"4f2se");
      jSONReaderScanner0.scanLong('/');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"4f2se", 58);
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.scanDouble('\"');
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r&t63),4mn|ku6LIr +", (-2203));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-osP[");
      jSONReaderScanner0.scanBoolean('e');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'i';
      charArray0[4] = 't';
      charArray0[5] = 'y';
      charArray0[6] = 'S';
      charArray0[7] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1724, 15);
      jSONReaderScanner0.subString(15, 1724);
      jSONReaderScanner0.nextToken(15);
      jSONReaderScanner0.scanString('S');
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.setToken(91);
      jSONReaderScanner0.scanIdent();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      int int0 = 91;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5, 36);
      int int1 = 10;
      jSONReaderScanner0.nextToken(10);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.scanString('c');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      jSONScanner0.nextToken();
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1.2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'J';
      charArray0[2] = '\u0014';
      charArray0[3] = '$';
      charArray0[4] = 'Q';
      charArray0[5] = '\u0014';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20);
      jSONReaderScanner0.scanBoolean('R');
      jSONReaderScanner0.nextToken(20);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 5);
      jSONScanner0.longValue();
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5, 2518);
      jSONReaderScanner0.scanFloat('W');
      jSONReaderScanner0.nextToken(3657);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken(5);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")FG{aFCIq><\">h7A");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '@';
      charArray0[2] = 'u';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r&t63),4mn|ku6LIr +", 25);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 38);
      jSONReaderScanner0.scanFloat('j');
      jSONReaderScanner0.nextToken(3958);
      jSONScanner0.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r&t63),4mn|ku6LIr +", 25);
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      jSONScanner0.scanBoolean(')');
      jSONScanner0.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      SymbolTable symbolTable0 = new SymbolTable(1169);
      jSONReaderScanner0.sp = 1169;
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '!');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 91, 1169);
      jSONReaderScanner0.nextToken(91);
      char char0 = '';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4flse");
      jSONReaderScanner1.scanString('^');
      jSONReaderScanner1.nextToken();
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("+|qm29", 3638);
      jSONReaderScanner1.floatValue();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      char[] charArray0 = new char[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)31;
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M;;Rs");
      jSONReaderScanner0.stringVal();
      double double0 = new Integer(0);
      jSONReaderScanner0.scanDate('y');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"4f2se");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanFloat('y');
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString('4');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanLong('j');
      jSONReaderScanner0.scanDouble('}');
      jSONReaderScanner0.scanBoolean('V');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("I5-Voq~sSA`.3");
      jSONReaderScanner1.skipWhitespace();
      jSONReaderScanner1.nextToken(9);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2518, 2518);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanString('!');
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.nextToken(17);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "2]\"j\\:<pQuL[I?F";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      SymbolTable symbolTable0 = new SymbolTable(1169);
      char char0 = '!';
      jSONReaderScanner0.sp = 1169;
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '!');
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.nextToken(120);
      jSONReaderScanner0.nextToken(12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan new error");
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", 0);
      jSONScanner0.nextToken();
      jSONScanner0.scanDouble('_');
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken((-295));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(623);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - e, info : pos 9, json : scan new error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      SymbolTable symbolTable0 = new SymbolTable(1182);
      jSONReaderScanner0.sp = 1182;
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '!');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 91, 1182);
      jSONReaderScanner0.nextToken(91);
      char char0 = '';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4!8`*E#{+7$+oaS&");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("71");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4flse");
      jSONReaderScanner1.scanString('^');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("'c{q?uXZ8*N");
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONReaderScanner1.scanType("4flse");
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '{');
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]\"j:<pQuL[I?F");
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      SymbolTable symbolTable0 = new SymbolTable('\'');
      jSONReaderScanner0.sp = (int) '\'';
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '!');
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.nextToken(120);
      jSONReaderScanner0.scanString('j');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("d?");
      jSONReaderScanner1.skipWhitespace();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 3379, 1);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextToken(34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[3] = 'O';
      charArray0[5] = 'O';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5, (-1514));
      jSONReaderScanner0.nextToken(13);
      jSONReaderScanner0.tokenName();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error", 5);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.scanUUID('I');
      jSONReaderScanner1.scanNumber();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanLong('j');
      jSONReaderScanner0.scanDouble('}');
      jSONReaderScanner0.scanBoolean('V');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("I5-Voq~sSA`.3");
      jSONReaderScanner1.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1,HjEKkr[");
      jSONReaderScanner0.isRef();
      int int0 = Calendar.MILLISECOND;
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = '>';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 57);
      jSONReaderScanner0.scanFloat('>');
      jSONReaderScanner1.nextToken(3657);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken(14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r&t63),4mn|ku6LIr +", 25);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7(JNW@X6P.");
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '6';
      charArray0[2] = '>';
      charArray0[3] = 'j';
      charArray0[4] = 'd';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("rror");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = '\"';
      charArray0[2] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 2032);
      jSONReaderScanner0.nextToken(4);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z+(/");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 28);
      jSONReaderScanner1.scanDecimal('B');
      char[] charArray1 = new char[3];
      charArray1[0] = 'J';
      charArray1[1] = 'B';
      charArray1[2] = 'J';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("Z+(/");
      jSONReaderScanner2.scanDouble('J');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("Set", 1);
      jSONReaderScanner3.scanDate('Z');
      jSONReaderScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      JSONScanner jSONScanner0 = new JSONScanner("4flse");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4flse");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4flse");
      char[] charArray0 = new char[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null", 0);
      jSONReaderScanner2.nextToken((-449));
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner3.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner3.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
