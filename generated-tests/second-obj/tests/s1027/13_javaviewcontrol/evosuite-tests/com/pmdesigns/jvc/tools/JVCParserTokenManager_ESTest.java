/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:18:48 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (String) null, 1167, 1167, 3183);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 3183);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3183. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, true);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(6, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals("\r", token0.toString());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\n");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3034, 3034);
      boolean boolean0 = SimpleCharStream.staticFlag;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-2800));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2800. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bsCd|N)Sp5");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)94, (int) (byte)94);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(96, simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F53o^fZ?@DrkP%x}NZv");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 27, 27);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(27, token0.endLine);
      assertEquals(27, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(27, token0.beginColumn);
      assertEquals(27, token0.beginLine);
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(27, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals("F", token0.toString());
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(28, token1.beginColumn);
      assertEquals(27, token1.beginLine);
      assertEquals(28, token1.endColumn);
      assertEquals(27, token1.endLine);
      assertEquals(16, token1.kind);
      assertNotSame(token1, token0);
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(28, simpleCharStream0.getEndColumn());
      assertEquals(28, simpleCharStream0.getColumn());
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals("5", token1.toString());
      assertFalse(token1.equals((Object)token0));
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(28, simpleCharStream0.getEndColumn());
      assertEquals(28, simpleCharStream0.getColumn());
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(27, token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(29, token2.endColumn);
      assertEquals(29, token2.beginColumn);
      assertEquals(27, token2.beginLine);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(29, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(29, simpleCharStream0.getEndColumn());
      assertEquals(29, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals("3", token2.toString());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = jVCParserTokenManager1.jjFillToken();
      assertNotNull(token3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(29, token3.endColumn);
      assertEquals(27, token3.beginLine);
      assertEquals(27, token3.endLine);
      assertEquals(29, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertEquals(29, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(29, simpleCharStream0.getEndColumn());
      assertEquals(29, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals("", token3.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      
      Token token4 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token4);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(16, token4.kind);
      assertEquals(30, token4.endColumn);
      assertEquals(27, token4.beginLine);
      assertEquals(30, token4.beginColumn);
      assertEquals(27, token4.endLine);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertEquals(30, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(30, simpleCharStream0.getEndColumn());
      assertEquals(30, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals("o", token4.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-R0[o6!/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2048, 2048);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(45, int0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-1), 2048);
      assertNotNull(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals((-1), token0.beginLine);
      assertEquals(2048, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(2048, token0.beginColumn);
      assertEquals((-1), token0.endLine);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(2048, simpleCharStream1.getColumn());
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals(2048, simpleCharStream1.getEndColumn());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals(2048, simpleCharStream1.getBeginColumn());
      assertEquals("R", token0.toString());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      stringReader0.reset();
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals((-1), token1.endLine);
      assertEquals((-1), token1.beginLine);
      assertEquals(16, token1.kind);
      assertEquals(2048, token1.beginColumn);
      assertEquals(2048, token1.endColumn);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
      assertEquals(2048, simpleCharStream1.getColumn());
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals(2048, simpleCharStream1.getEndColumn());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals(2048, simpleCharStream1.getBeginColumn());
      assertEquals("R", token1.toString());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      char char0 = simpleCharStream1.BeginToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals('0', char0);
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals(2049, simpleCharStream1.getEndColumn());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals(2049, simpleCharStream1.getBeginColumn());
      assertEquals(2049, simpleCharStream1.getColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream1.bufpos);
      assertEquals(16, token2.kind);
      assertEquals(2050, token2.endColumn);
      assertEquals((-1), token2.endLine);
      assertEquals((-1), token2.beginLine);
      assertEquals(2050, token2.beginColumn);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals(2050, simpleCharStream1.getBeginColumn());
      assertEquals(2050, simpleCharStream1.getColumn());
      assertEquals(2050, simpleCharStream1.getEndColumn());
      assertEquals("[", token2.toString());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\n");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 5, 5);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-2777), 3048);
      assertNotNull(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(3048, token0.endColumn);
      assertEquals(3048, token0.beginColumn);
      assertEquals((-2777), token0.beginLine);
      assertEquals(6, token0.kind);
      assertEquals((-2777), token0.endLine);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals((-2777), simpleCharStream1.getLine());
      assertEquals((-2777), simpleCharStream1.getBeginLine());
      assertEquals(3048, simpleCharStream1.getEndColumn());
      assertEquals(3048, simpleCharStream1.getBeginColumn());
      assertEquals(3048, simpleCharStream1.getColumn());
      assertEquals((-2777), simpleCharStream1.getEndLine());
      assertEquals("\n", token0.toString());
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-2777));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2777. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bsCd|N)Sp5");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3034, 3034);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      boolean boolean1 = SimpleCharStream.staticFlag;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(3034, token0.beginLine);
      assertEquals(3034, token0.endLine);
      assertEquals(3034, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(3034, token0.endColumn);
      assertEquals(3034, simpleCharStream0.getEndLine());
      assertEquals(3034, simpleCharStream0.getBeginColumn());
      assertEquals(3034, simpleCharStream0.getEndColumn());
      assertEquals(3034, simpleCharStream0.getColumn());
      assertEquals(3034, simpleCharStream0.getBeginLine());
      assertEquals(3034, simpleCharStream0.getLine());
      assertEquals("b", token0.toString());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (-1594));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1594. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bsCO|N)Sp5");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3034, 6);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip(6);
      assertEquals(6L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(6, token0.beginColumn);
      assertEquals(3034, token0.beginLine);
      assertEquals(3034, token0.endLine);
      assertEquals(3034, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(3034, simpleCharStream0.getBeginLine());
      assertEquals(3034, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(")", token0.toString());
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(390);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 390. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Avl&>p?^");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92}, byteArray0);
      assertEquals(4, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream1);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream1.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream1.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("", token0.toString());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bsCd|N)Sp5");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-67), (byte) (-89), (byte)61}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-67), (byte) (-89), (byte)61}, byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-67), (byte) (-89), (byte)61}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-67), (byte) (-89), (byte)61}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      jVCParserTokenManager0.curLexState = (int) (byte) (-89);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-67), (byte) (-89), (byte)61}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[!\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 24, 24);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(24, token0.beginLine);
      assertEquals(24, token0.beginColumn);
      assertEquals(26, token0.endColumn);
      assertEquals(5, token0.kind);
      assertEquals(24, token0.endLine);
      assertEquals(26, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(26, simpleCharStream0.getEndColumn());
      assertEquals("[[!", token0.toString());
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(5, token1.kind);
      assertEquals(26, token1.endColumn);
      assertEquals(24, token1.beginColumn);
      assertEquals(24, token1.beginLine);
      assertEquals(24, token1.endLine);
      assertNotSame(token1, token0);
      assertEquals(26, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(26, simpleCharStream0.getEndColumn());
      assertEquals("[[!", token1.toString());
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(27, token2.endColumn);
      assertEquals(24, token2.endLine);
      assertEquals(27, token2.beginColumn);
      assertEquals(24, token2.beginLine);
      assertEquals(16, token2.kind);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(27, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals("\"", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      stringReader0.reset();
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertNotNull(token3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(27, token3.beginColumn);
      assertEquals(27, token3.endColumn);
      assertEquals(24, token3.beginLine);
      assertEquals(24, token3.endLine);
      assertEquals(16, token3.kind);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals(27, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals("\"", token3.toString());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      
      char char0 = simpleCharStream0.BeginToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals('\"', char0);
      assertEquals(28, simpleCharStream0.getEndColumn());
      assertEquals(28, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getLine());
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(5, token4.kind);
      assertEquals(24, token4.endLine);
      assertEquals(24, token4.beginLine);
      assertEquals(31, token4.endColumn);
      assertEquals(29, token4.beginColumn);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertEquals(29, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(31, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(31, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals("[[!", token4.toString());
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[!\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 24, 24);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(5, token0.kind);
      assertEquals(26, token0.endColumn);
      assertEquals(24, token0.beginColumn);
      assertEquals(24, token0.endLine);
      assertEquals(24, token0.beginLine);
      assertEquals(26, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(26, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals("[[!", token0.toString());
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(24, token1.beginLine);
      assertEquals(24, token1.endLine);
      assertEquals(5, token1.kind);
      assertEquals(26, token1.endColumn);
      assertEquals(24, token1.beginColumn);
      assertNotSame(token1, token0);
      assertEquals(26, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(26, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals("[[!", token1.toString());
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(27, token2.endColumn);
      assertEquals(24, token2.beginLine);
      assertEquals(27, token2.beginColumn);
      assertEquals(24, token2.endLine);
      assertEquals(16, token2.kind);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(27, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(27, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals("\"", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      stringReader0.reset();
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(28, token3.endColumn);
      assertEquals(24, token3.beginLine);
      assertEquals(16, token3.kind);
      assertEquals(28, token3.beginColumn);
      assertEquals(24, token3.endLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(28, simpleCharStream0.getEndColumn());
      assertEquals(28, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals("\"", token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      
      char char0 = simpleCharStream0.BeginToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals('[', char0);
      assertEquals(29, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(29, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(29, simpleCharStream0.getBeginColumn());
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(16, token4.kind);
      assertEquals(30, token4.beginColumn);
      assertEquals(24, token4.beginLine);
      assertEquals(30, token4.endColumn);
      assertEquals(24, token4.endLine);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(30, simpleCharStream0.getBeginColumn());
      assertEquals(30, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(30, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals("[", token4.toString());
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dY){.2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 27, 27);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(27, token0.beginLine);
      assertEquals(27, token0.beginColumn);
      assertEquals(27, token0.endColumn);
      assertEquals(27, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getBeginColumn());
      assertEquals("d", token0.toString());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 0);
      assertNotNull(jVCParserTokenManager1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(27, simpleCharStream0.getColumn());
      assertEquals(27, simpleCharStream0.getEndColumn());
      assertEquals(27, simpleCharStream0.getBeginColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token1.kind);
      assertEquals(27, token1.beginLine);
      assertEquals(28, token1.beginColumn);
      assertEquals(28, token1.endColumn);
      assertEquals(27, token1.endLine);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(28, simpleCharStream0.getColumn());
      assertEquals(28, simpleCharStream0.getEndColumn());
      assertEquals("Y", token1.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      jVCParserTokenManager1.jjmatchedPos = 100;
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(28, simpleCharStream0.getColumn());
      assertEquals(28, simpleCharStream0.getEndColumn());
      
      Token token2 = jVCParserTokenManager1.jjFillToken();
      assertNotNull(token2);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(27, token2.beginLine);
      assertEquals(28, token2.endColumn);
      assertEquals(28, token2.beginColumn);
      assertEquals(27, token2.endLine);
      assertEquals(16, token2.kind);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(28, simpleCharStream0.getColumn());
      assertEquals(28, simpleCharStream0.getEndColumn());
      assertEquals("Y", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(27, token3.beginLine);
      assertEquals(29, token3.endColumn);
      assertEquals(27, token3.endLine);
      assertEquals(29, token3.beginColumn);
      assertEquals(16, token3.kind);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertEquals(27, simpleCharStream0.getLine());
      assertEquals(29, simpleCharStream0.getBeginColumn());
      assertEquals(27, simpleCharStream0.getBeginLine());
      assertEquals(27, simpleCharStream0.getEndLine());
      assertEquals(29, simpleCharStream0.getColumn());
      assertEquals(29, simpleCharStream0.getEndColumn());
      assertEquals(")", token3.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dY){.2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 24, 24);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.tabSize = (-1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(24, token0.beginColumn);
      assertEquals(24, token0.beginLine);
      assertEquals(24, token0.endColumn);
      assertEquals(24, token0.endLine);
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(24, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals("d", token0.toString());
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(24, token1.beginLine);
      assertEquals(25, token1.beginColumn);
      assertEquals(25, token1.endColumn);
      assertEquals(24, token1.endLine);
      assertEquals(16, token1.kind);
      assertNotSame(token1, token0);
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(25, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(25, simpleCharStream0.getColumn());
      assertEquals(25, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals("Y", token1.toString());
      assertFalse(token1.equals((Object)token0));
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(25, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(25, simpleCharStream0.getColumn());
      assertEquals(25, simpleCharStream0.getBeginColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(16, token2.kind);
      assertEquals(24, token2.endLine);
      assertEquals(26, token2.endColumn);
      assertEquals(26, token2.beginColumn);
      assertEquals(24, token2.beginLine);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(26, simpleCharStream0.getBeginColumn());
      assertEquals(26, simpleCharStream0.getEndColumn());
      assertEquals(24, simpleCharStream0.getBeginLine());
      assertEquals(24, simpleCharStream0.getEndLine());
      assertEquals(26, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getLine());
      assertEquals(")", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      MockFile mockFile0 = new MockFile("dY){.2");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("dY){.2", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("dY){.2", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "~rXS8P)$?P6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"~rXS8P)$?P6\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bsCd|N)Sp5");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte)0, (byte) (-89), (byte)92}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte)0, (byte) (-89), (byte)92}, byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte)0, (byte) (-89), (byte)92}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte)0, (byte) (-89), (byte)92}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte)0, (byte) (-89), (byte)92}, byteArray0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte)0, (byte) (-89), (byte)92}, byteArray0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bsCd|N)Sp5");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-89), (byte) (-89), (byte)92}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-89), (byte) (-89), (byte)92}, byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-89), (byte) (-89), (byte)92}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-89), (byte) (-89), (byte)92}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-89), (byte) (-89), (byte)92}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(3, token0.beginColumn);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("\uFFFD", token0.toString());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      jVCParserTokenManager0.SwitchTo(3);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-89), (byte) (-89), (byte)92}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-89), (byte) (-89), (byte) (-89), (byte)92}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token1, token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\uFFFD", token1.toString());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bsCd|N)Sp5");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3, 3);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(98, int0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(3, token0.endLine);
      assertEquals(3, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(3, token0.beginColumn);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("s", token0.toString());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertNotNull(jVCParserTokenManager1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      simpleCharStream0.tokenBegin = 98;
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4UAGjbN7;");
      assertFalse(boolean0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(3, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token2.kind);
      assertEquals(4, token2.beginColumn);
      assertEquals(3, token2.beginLine);
      assertEquals(3, token2.endLine);
      assertEquals(4, token2.endColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("C", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      StringReader stringReader1 = new StringReader("bsCd|N)Sp5");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token3 = jVCParserTokenManager1.jjFillToken();
      assertNotNull(token3);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token3.beginLine);
      assertEquals(4, token3.endColumn);
      assertEquals(16, token3.kind);
      assertEquals(4, token3.beginColumn);
      assertEquals(3, token3.endLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("C", token3.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      
      char char0 = simpleCharStream0.BeginToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals('d', char0);
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token4 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token4);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(3, token4.endLine);
      assertEquals(16, token4.kind);
      assertEquals(6, token4.beginColumn);
      assertEquals(6, token4.endColumn);
      assertEquals(3, token4.beginLine);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals("|", token4.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[+");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 6, 6);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(91, int0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token0.endColumn);
      assertEquals(6, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(6, token0.beginLine);
      assertEquals(6, token0.beginColumn);
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
      
      SimpleCharStream simpleCharStream1 = null;
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager((SimpleCharStream) null, (-204));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -204. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[+");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 6, 6);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(8, token0.endColumn);
      assertEquals(4, token0.kind);
      assertEquals(6, token0.beginColumn);
      assertEquals(6, token0.beginLine);
      assertEquals(6, token0.endLine);
      assertEquals(6, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals("[[+", token0.toString());
      
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, (-330));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -330. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[!\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2395), (-2395));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-2395), token0.beginLine);
      assertEquals((-2395), token0.beginColumn);
      assertEquals((-2395), token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals((-2395), token0.endLine);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals((-2395), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getEndColumn());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getBeginColumn());
      assertEquals("\"", token0.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = null;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token0.toString());
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token1.toString());
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token3.endColumn);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token3.toString());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      
      jVCParserTokenManager0.SwitchTo(2);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(5, token4.endColumn);
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(5, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertEquals("\uFFFD", token4.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      
      Token token5 = jVCParserTokenManager0.jjFillToken();
      assertNotNull(token5);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(5, token5.beginColumn);
      assertEquals(16, token5.kind);
      assertEquals(1, token5.beginLine);
      assertEquals(5, token5.endColumn);
      assertEquals(1, token5.endLine);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertEquals("\uFFFD", token5.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\uFFFD", token0.toString());
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\uFFFD", token1.toString());
      assertFalse(token1.equals((Object)token0));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 0);
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\uFFFD", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(4, token3.beginColumn);
      assertEquals(4, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals("\uFFFD", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      jVCParserTokenManager1.setDebugStream(jVCParserTokenManager0.debugStream);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89)}, byteArray0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[!\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2395), (-2395));
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertNotNull(jVCParserTokenManager1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2395), token0.endLine);
      assertEquals((-2393), token0.endColumn);
      assertEquals((-2395), token0.beginLine);
      assertEquals(5, token0.kind);
      assertEquals((-2395), token0.beginColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2393), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getBeginColumn());
      assertEquals((-2393), simpleCharStream0.getEndColumn());
      assertEquals("[[!", token0.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertNotNull(jVCParserTokenManager2);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2393), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getBeginColumn());
      assertEquals((-2393), simpleCharStream0.getEndColumn());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertNotNull(token1);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2392), token1.endColumn);
      assertEquals((-2395), token1.beginLine);
      assertEquals((-2392), token1.beginColumn);
      assertEquals((-2395), token1.endLine);
      assertEquals(16, token1.kind);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals((-2392), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2392), simpleCharStream0.getBeginColumn());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2392), simpleCharStream0.getEndColumn());
      assertEquals("\"", token1.toString());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2392), token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals((-2395), token2.endLine);
      assertEquals((-2395), token2.beginLine);
      assertEquals((-2392), token2.endColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals((-2392), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2392), simpleCharStream0.getBeginColumn());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2392), simpleCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token3.kind);
      assertEquals((-2395), token3.endLine);
      assertEquals((-2395), token3.beginLine);
      assertEquals((-2392), token3.beginColumn);
      assertEquals((-2392), token3.endColumn);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals((-2392), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2392), simpleCharStream0.getBeginColumn());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2392), simpleCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2395), token4.endLine);
      assertEquals((-2392), token4.beginColumn);
      assertEquals((-2395), token4.beginLine);
      assertEquals((-2392), token4.endColumn);
      assertEquals(0, token4.kind);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertEquals((-2392), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2392), simpleCharStream0.getBeginColumn());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2392), simpleCharStream0.getEndColumn());
      assertEquals("", token4.toString());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      
      Token token5 = jVCParserTokenManager0.jjFillToken();
      assertNotNull(token5);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2395), token5.endLine);
      assertEquals((-2395), token5.beginLine);
      assertEquals((-2392), token5.beginColumn);
      assertEquals((-2392), token5.endColumn);
      assertEquals(0, token5.kind);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertEquals((-2392), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2392), simpleCharStream0.getBeginColumn());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2392), simpleCharStream0.getEndColumn());
      assertEquals("", token5.toString());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      
      Token token6 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token6);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2395), token6.beginLine);
      assertEquals(0, token6.kind);
      assertEquals((-2392), token6.beginColumn);
      assertEquals((-2392), token6.endColumn);
      assertEquals((-2395), token6.endLine);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token3);
      assertNotSame(token6, token0);
      assertEquals((-2392), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2392), simpleCharStream0.getBeginColumn());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2392), simpleCharStream0.getEndColumn());
      assertEquals("", token6.toString());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      
      Token token7 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token7);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2395), token7.endLine);
      assertEquals(0, token7.kind);
      assertEquals((-2392), token7.endColumn);
      assertEquals((-2395), token7.beginLine);
      assertEquals((-2392), token7.beginColumn);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(token7, token4);
      assertNotSame(token7, token3);
      assertNotSame(token7, token2);
      assertNotSame(token7, token1);
      assertNotSame(token7, token5);
      assertNotSame(token7, token6);
      assertNotSame(token7, token0);
      assertEquals((-2392), simpleCharStream0.getColumn());
      assertEquals((-2395), simpleCharStream0.getEndLine());
      assertEquals((-2395), simpleCharStream0.getLine());
      assertEquals((-2392), simpleCharStream0.getBeginColumn());
      assertEquals((-2395), simpleCharStream0.getBeginLine());
      assertEquals((-2392), simpleCharStream0.getEndColumn());
      assertEquals("", token7.toString());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.ReInit(simpleCharStream0, (-2395));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2395. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }
}
