/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:36:45 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("OV");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : OV
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("aGfo=H");
      IdentityHashMap<MockHijrahDate, ChronoLocalDate> identityHashMap0 = new IdentityHashMap<MockHijrahDate, ChronoLocalDate>();
      defaultJSONParser0.checkMapResolve(identityHashMap0, "aGfo=H");
      Feature feature0 = Feature.SupportNonPublicField;
      defaultJSONParser0.config(feature0, true);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("kR2a3]rV'0");
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-:fp(M@\"(sG");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 1, json : -:fp(M@\"(sG
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Qu$SYt,a6I");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("YzdzL");
      defaultJSONParser0.setResolveStatus(18);
      assertEquals(18, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      defaultJSONParser0.checkListResolve(linkedList0);
      Feature feature0 = Feature.AllowArbitraryCommas;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"\"");
      defaultJSONParser0.parse();
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",iaOtcual;");
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S.Y");
      defaultJSONParser0.setDateFormat("SnakeCase");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 1, json : S.Y
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("rlOgZNZc*");
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = new Object();
      JSONObject jSONObject0 = JSON.parseObject("");
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";.1");
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;.1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";.1");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.throwException(3606);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"\"");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("\"\"");
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser1.accept(2, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect int, actual string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" ");
      HashMap<ChoiceFormat, MockJapaneseDate> hashMap0 = new HashMap<ChoiceFormat, MockJapaneseDate>();
      defaultJSONParser0.checkMapResolve(hashMap0, hashMap0);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateInstance(1);
      defaultJSONParser0.setDateFomrat(simpleDateFormat0);
      assertEquals("MMMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParserConfig parserConfig0 = new ParserConfig();
      defaultJSONParser0.setConfig(parserConfig0);
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")mfc,&Fe!?e&");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )mfc,&Fe!?e&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bE:z,7W");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(252);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getSymbolTable();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bE:z,7W");
      defaultJSONParser0.accept(1);
      defaultJSONParser0.handleResovleTask("bE:z,7W");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" [ T9>5Jmzl:8$N");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json :  [ T9>5Jmzl:8$N
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("=5)}-|lZ@ Ye");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyProcessable0).toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("oracle.sql.DATE");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : oracle.sql.DATE
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("AF==ws<(iCO", parserConfig0, (-147));
      defaultJSONParser0.getContext();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultJSONParser0.setContext((ParseContext) null, (Object) mockDateFormat0, (Object) parserConfig0);
      Long long0 = new Long((-147));
      ParseContext parseContext0 = new ParseContext((ParseContext) null, long0, mockDateFormat0);
      defaultJSONParser0.setContext(parseContext0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}4U_", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeAccept");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }4U_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4T1'A'ux");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer);
      defaultJSONParser2.parse();
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser2.getLexer();
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Integer integer0 = new Integer(0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("null");
      defaultJSONParser0.parse();
      BitSet bitSet0 = defaultJSONParser1.parseObject((Type) null);
      assertNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Qu$SYt,a6I");
      defaultJSONParser0.getObject("{Qu$SYt,a6I");
      Object object0 = defaultJSONParser0.resolveReference("{Qu$SYt,a6I");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":Z| SB)WQE*AqRv<h");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual :, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":Z| SB)WQE*AqRv<h");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :Z| SB)WQE*AqRv<h
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" ");
      defaultJSONParser0.setContext((Object) " ", (Object) " ");
      HashMap<ChoiceFormat, MockJapaneseDate> hashMap0 = new HashMap<ChoiceFormat, MockJapaneseDate>();
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("W7\"Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{uSYN,a6I");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6,iaOtcual;");
      Object object0 = defaultJSONParser0.parse();
      assertEquals(6, object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ", parserConfig0, (-2071244365));
      String string0 = defaultJSONParser0.getInput();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TreeSet<MockDate> treeSet0 = new TreeSet<MockDate>();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Vh2f7", parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.handleResovleTask(gridBagConstraints0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]!}S%\"4'E?DL^");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]!}S%\"4'E?DL^
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z]}C^G");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParserConfig parserConfig0 = new ParserConfig();
      char[] charArray0 = new char[2];
      charArray0[1] = ',';
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 1, parserConfig0, 92);
      defaultJSONParser1.getFieldTypeResolver();
      Class<Byte> class0 = Byte.TYPE;
      defaultJSONParser1.getInput();
      defaultJSONParser1.setDateFormat(" g;m?`");
      ArrayList<BigDecimal> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<BigDecimal>((-1933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1933
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      JSONScanner jSONScanner0 = new JSONScanner("{3uT1", (-448));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      defaultJSONParser0.setContext((Object) mockMinguoDate0, (Object) aSMDeserializerFactory0);
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.popContext();
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{3uT1");
      LinkedHashMap<PageAttributes, Long> linkedHashMap0 = new LinkedHashMap<PageAttributes, Long>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3pos 1, json : {3uT1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getResolveTaskList();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.handleResovleTask("4T1'A'ux");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("untrmiated json string, ");
      Object object0 = new Object();
      Object object1 = defaultJSONParser0.parseKey();
      assertEquals("untrmiated", object1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z]}G");
      char[] charArray0 = new char[3];
      JSON.setDefaultTypeKey("Z]}G");
      SymbolTable symbolTable0 = defaultJSONParser0.symbolTable;
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      defaultJSONParser0.setContext((Object) mockJapaneseDate0, (Object) null);
      defaultJSONParser0.getObject("NaN");
      defaultJSONParser0.parse();
      defaultJSONParser0.popContext();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(2);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "", (Object) "");
      ParseContext parseContext1 = defaultJSONParser0.setContext((Object) parseContext0, (Object) "");
      assertNotSame(parseContext0, parseContext1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      defaultJSONParser0.setContext((Object) mockJapaneseDate0, (Object) mockJapaneseDate0);
      defaultJSONParser0.getObject(",");
      Object object0 = defaultJSONParser0.resolveReference(",");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ");
      defaultJSONParser0.setContext((Object) ", actual ", (Object) ", actual ");
      defaultJSONParser0.resolveReference(", actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , actual 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("eN$KfnXo:K/iCX", parserConfig0, 938);
      defaultJSONParser0.close();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"\"");
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-GaayekuD", parserConfig0, 13);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z]}C^G");
      char[] charArray0 = new char[0];
      JSON.setDefaultTypeKey("Z]}C^G");
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) breakIterator0, (Object) charArray0);
      defaultJSONParser0.getSymbolTable();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "Z]}C^G");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Long long0 = new Long(0);
      HttpCookie httpCookie0 = new HttpCookie("Z]}C^G", "");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      defaultJSONParser0.handleResovleTask(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}4U_", parserConfig0);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      jSONObject0.getBigDecimal("fastjson.parser.deny");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 2, json : }4U_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}4U_", parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      Long long0 = new Long(1);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(long0, defaultJSONParser0.lexer, parserConfig1);
      parserConfig1.setAutoTypeSupport(true);
      defaultJSONParser1.accept(2, 0);
      assertNotSame(defaultJSONParser0, defaultJSONParser1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"\"");
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4T1'A'u=x");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser2.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 6, json : 4T1'A'u=x
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z]}C^G");
      JSON.setDefaultTypeKey("Z]}C^G");
      BreakIterator.getWordInstance();
      Long long0 = new Long((-1959L));
      HttpCookie httpCookie0 = new HttpCookie("gZJ/L[c%Ml4q", "");
      defaultJSONParser0.getExtraTypeProviders();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".I[DFuoY{pM,og4:", parserConfig0, (-16));
      Locale locale0 = Locale.CHINESE;
      MessageFormat messageFormat0 = new MessageFormat("UJiq|G_qWx+x/{3g-@{", locale0);
      defaultJSONParser0.setContext((Object) messageFormat0, (Object) ".I[DFuoY{pM,og4:");
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ., pos 1, json : .I[DFuoY{pM,og4:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4yT1'A'ux");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.parse((Object) jSONScanner0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser1.getDateFormat();
      Class<Double> class0 = Double.TYPE;
      defaultJSONParser1.getDateFormat();
      Class<Double> class1 = Double.TYPE;
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Qu$SYt,a6I");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{3uT1");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {3uT1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{u", parserConfig0);
      ClassLoader.getSystemClassLoader();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "{u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(Ljava/lang/Object;Ljava/lang/Object;)V");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("h:;aR1ext4rh'~y");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (Ljava/lang/Object;Ljava/lang/Object;)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("setter not found, class ", 11);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(object0, jSONReaderScanner0, parserConfig0);
      classLoader0.clearAssertionStatus();
      jSONReaderScanner0.setToken(0);
      Type[] typeArray0 = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{u", parserConfig0, 90);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";[.1");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : ;[.1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      Object object0 = defaultJSONParser0.parseArrayWithType((Type) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      defaultJSONParser0.parseObject(class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", actual ", parserConfig0);
      defaultJSONParser0.resolveReference("(0;c|Vr");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ", actual ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 9, json : , actual 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = ",";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",");
      IdentityHashMap<MockJapaneseDate, Float> identityHashMap0 = new IdentityHashMap<MockJapaneseDate, Float>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<MockCalendar> class0 = MockCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      defaultJSONParser0.setContext((Object) null, (Object) throwableDeserializer0);
      defaultJSONParser0.getObject("$");
      defaultJSONParser0.resolveReference(", actual ");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Quh$SYt,a6I");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{Quh$SYt,a6I", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z]}C^G");
      char[] charArray0 = new char[0];
      JSON.setDefaultTypeKey("Z]}C^G");
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) breakIterator0, (Object) charArray0);
      defaultJSONParser0.getSymbolTable();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "Z]}C^G");
      defaultJSONParser_ResolveTask0.ownerContext = parseContext0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Long long0 = new Long(0);
      JSON.DEFAULT_TYPE_KEY = "";
      HttpCookie httpCookie0 = new HttpCookie("Z]}C^G", "");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.stringDefaultValue = "";
      defaultJSONParser0.handleResovleTask(jSONReaderScanner0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";[.1");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Class<Time> class0 = Time.class;
      LinkedList<DateFormatSymbols> linkedList0 = new LinkedList<DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Class<?>) class0, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" [ T9>5Jmzl:8$N", parserConfig0);
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json :  [ T9>5Jmzl:8$N
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" [ T9>5Jmzl:8$N", parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";[.1");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : ;[.1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";[.1");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Type[] typeArray0 = new Type[1];
      Class<Byte> class0 = Byte.TYPE;
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ., pos 2, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("null");
      Type[] typeArray0 = new Type[0];
      defaultJSONParser1.parseArray(typeArray0);
      JSONObject jSONObject0 = JSON.parseObject("null");
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" [ T9>5Jmzl:8$N", parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[2];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json :  [ T9>5Jmzl:8$N
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
