/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:19:15 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantClass constantClass0 = new ConstantClass(2528);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2528, 2528);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString(2528);
      constantArray0[2] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2528, 254);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("!IGD%UjP*z<utw");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, 4458);
      constantArray0[5] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2528);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[6] = (Constant) constantMethodType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 254);
      constantArray0[7] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2093, 1);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((-889275714));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupLong((-1L));
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(5005, 5005);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant(5005);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5005
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.lookupInterfaceMethodref("' has ACC_STATIC unset.", "' has ACC_STATIC unset.", "' has ACC_STATIC unset.");
      assertEquals((-1), int0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.adjustSize();
      String string0 = "}";
      constantPoolGen0.lookupMethodref("}", "", "}");
      constantPoolGen0.toString();
      constantPoolGen0.adjustSize();
      constantPoolGen0.constants = null;
      constantPoolGen0.getConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("", "org.apache.bcel.generic.ConstantPoolGen", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupString((String) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addNameAndType((String) null, "rB_J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("GJ", "GJ", "GJ");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getConstantPool();
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2054114791), (-2054114791));
      ArrayType arrayType0 = new ArrayType("\nGPkYD", 1);
      int int0 = constantPoolGen0.addArrayClass(arrayType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0.0F);
      int int0 = constantPoolGen0.lookupClass("org.apache.bcel.generic.ConstantPoolGen");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addFieldref("NED<_Ur@", "NED<_Ur@", "NED<_Ur@");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-1L));
      constantPoolGen0.addLong((-1L));
      int int0 = constantPoolGen0.lookupString("Cannot push NULL onto OperandStack.");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.getFinalConstantPool();
      String string0 = "!wd(\\Pra";
      constantPoolGen0.lookupFieldref("!wd(Pra", "!wd(Pra", "!wd(Pra");
      String string1 = "aconst_null";
      constantPoolGen0.addString("<illegal type>");
      String string2 = "3A=ov@J'M2r>+e";
      constantPoolGen0.lookupFieldref("aconst_null", "Rg s", "3A=ov@J'M2r>+e");
      constantPoolGen0.addLong((-1));
      constantPoolGen0.addLong(2400L);
      constantPoolGen0.addInterfaceMethodref("8\"5hS=~", "!wd(Pra", "0y_fUTCsi[p\"X");
      BasicType basicType0 = null;
      try {
        basicType0 = new BasicType((byte)46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addString("`g9");
      constantPoolGen0.getConstantPool();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("f-", "f-", "f-");
      ConstantClass constantClass0 = new ConstantClass(1636);
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen((Constant[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1431655764), (-1431655764));
      Constant[] constantArray0 = new Constant[4];
      constantInvokeDynamic0.setClassIndex((-1431655764));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1431655764
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      int int0 = 0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantFloat constantFloat0 = new ConstantFloat(0);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      constantArray0[2] = (Constant) constantMethodHandle2;
      ConstantLong constantLong0 = new ConstantLong(0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantLong constantLong2 = new ConstantLong(0L);
      constantArray0[4] = (Constant) constantLong2;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(0, (-1079));
      constantArray0[5] = (Constant) constantMethodref0;
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[6] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(617);
      constantArray0[7] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantMethodHandle cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("", "", "");
      constantPoolGen0.addFloat(2.0F);
      constantPoolGen0.addInterfaceMethodref("Z!x;'Qhe&L", "Z!x;'Qhe&L", "gNED<_Ur/@");
      constantPoolGen0.addClass("");
      constantPoolGen0.toString();
      constantPoolGen0.lookupFloat((-1323.7F));
      constantPoolGen0.toString();
      int int0 = constantPoolGen0.addInterfaceMethodref(")", "", ")");
      assertEquals(13, constantPoolGen0.getSize());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(2515.7688F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getConstant(216);
      constantPoolGen0.addFloat(1254.067F);
      int int0 = constantPoolGen0.lookupFloat(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addString("`g9");
      constantPoolGen0.addUtf8(";F2*uEKGNc.qs");
      constantPoolGen0.lookupClass("K?LsVo]I!B");
      constantPoolGen0.addInteger(720);
      int int0 = constantPoolGen0.lookupMethodref("The filters must not be null", "`g9", "`w|");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addInteger((-1105));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(105);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(105, 105);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger(105);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      constantInteger1.setBytes(3934);
      ConstantString constantString0 = new ConstantString(3934);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3934, 105);
      ConstantDouble constantDouble0 = new ConstantDouble(105);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(121, 3934);
      Constant[] constantArray1 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray1);
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("L\"uAfNh\u0001m", "&/BiuNy{<#G$)b");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(218, 218);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(";F2*uEKGNc.qs");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(4458, 218);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2291);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(2034);
      Constant[] constantArray0 = new Constant[8];
      ConstantDouble constantDouble0 = new ConstantDouble(1839.0931490484);
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(2629);
      constantArray0[2] = (Constant) constantMethodType2;
      constantArray0[3] = (Constant) constantUtf8_1;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(2034, 1);
      constantArray0[6] = (Constant) constantNameAndType1;
      constantArray0[7] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("bUmHj:PTWw}n+z.H");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2093, 10);
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupDouble(10);
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      constantPoolGen0.addFieldref("", "", "\n");
      constantPoolGen0.addInterfaceMethodref(" uy", " uy", ")%d1MQNVJAr9I");
      constantPoolGen0.addUtf8(" uy");
      constantPoolGen0.addUtf8(")%d1MQNVJAr9I");
      constantPoolGen0.toString();
      constantPoolGen0.lookupString(" uy");
      constantPoolGen0.addInterfaceMethodref(")%d1MQNVJAr9I", " uy", "&");
      constantPoolGen0.lookupNameAndType(")%d1MQNVJAr9I", " uy");
      constantPoolGen0.addInteger(769);
      constantPoolGen0.lookupNameAndType("WiRK< EWe)$jYLL", "\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.addInterfaceMethodref(" (PUSH)", "\n", ")%d1MQNVJAr9I");
      constantPoolGen0.getSize();
      constantPoolGen0.lookupFloat(16);
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.addLong(687L);
      assertEquals(24, constantPoolGen0.getSize());
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantString constantString0 = new ConstantString(2209);
      constantPoolGen0.setConstant(2, constantString0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ALOAD aLOAD0 = new ALOAD(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Type type0 = aLOAD0.getType(constantPoolGen0);
      IFGE iFGE0 = new IFGE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFGE0);
      aLOAD0.copy();
      MethodGen methodGen0 = new MethodGen(10, type0, type0.NO_ARGS, (String[]) null, "Iu0^", "Iu0^", instructionList0, constantPoolGen0);
      aLOAD0.copy();
      Class<MockJapaneseDate>[] classArray0 = (Class<MockJapaneseDate>[]) Array.newInstance(Class.class, 1);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      classArray0[0] = class0;
      Type.getTypes(classArray0);
      methodGen0.removeExceptions();
      constantPoolGen0.lookupMethodref(methodGen0);
      constantPoolGen0.toString();
      constantPoolGen0.getSize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addString("");
      constantPoolGen0.lookupString("Unexpected constant type: ");
      constantPoolGen0.lookupDouble(10);
      int int0 = constantPoolGen0.lookupMethodref("Unknown constant type ", " uy# uy#)%d1MQNVJAr9I", "iaload");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("", "Illegal constant pool index '", ":");
      constantPoolGen0.lookupDouble(6);
      ObjectType objectType0 = ObjectType.getInstance("Illegal constant pool index '");
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.getConstant(2);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-2054114791), (-2054114791));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2054114791
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "f-";
      constantPoolGen0.addMethodref("f-", "f-", "f-");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, 4);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantClass constantClass0 = new ConstantClass(2528);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2528, 2528);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString(2528);
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInterfaceMethodref("}&=OhHNqrd*)#mwj1", "}&=OhHNqrd*)#mwj1", "}&=OhHNqrd*)#mwj1");
      ConstantInteger constantInteger0 = new ConstantInteger(2528);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantArray0[1], constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 2528, reference_index = 2528)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(322, 322);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantInteger constantInteger0 = new ConstantInteger(322);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addInteger(322);
      assertEquals(1, int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(2);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, 3);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2521, 3);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2521
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = (-277);
      ConstantClass constantClass0 = new ConstantClass((-277));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -277
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[4] = (Constant) constantFloat1;
      constantArray0[5] = (Constant) constantDouble0;
      constantArray0[6] = (Constant) constantDouble0;
      constantArray0[7] = (Constant) constantDouble0;
      constantArray0[8] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      assertEquals(9, constantPoolGen2.getSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.SIZE;
      constantPoolGen0.lookupInterfaceMethodref(";F2*uEKGNc.qs", "gNED<_Ur/@#Fc6=@m@O}|BC#Invalid number of dimensjons: ", "gNED<_Ur/@#Fc6=@m@O}|BC#Invalid number of dimensjons: ");
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantInteger0.clone();
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC();
      constantPoolGen1.addDouble(16);
      int int1 = constantPoolGen0.addInteger(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Character.SIZE;
      constantPoolGen0.addNameAndType("V%@T", "`+:OKz");
      constantPoolGen0.addDouble(16);
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.toString();
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      Constant[] constantArray0 = new Constant[0];
      constantPoolGen0.addDouble(0.0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("f-", "f-", "f-");
      assertEquals(5, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      int int0 = constantPoolGen1.addConstant(constantUtf8_0, constantPoolGen2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(12, 2093);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong(2093);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      int int0 = constantPoolGen0.addConstant(constantLong1, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantClass constantClass0 = new ConstantClass(2528);
      constantArray0[0] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString(2528);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2528
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = (-2093);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2093), (-2093));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2093
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
