/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:33:08 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMind;
import freemind.main.FreeMindApplet;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.SystemColor;
import java.awt.Window;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.accessibility.AccessibleContext;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRootPane;
import javax.swing.JToolTip;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.PanelUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GlyphView;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.util.SVGConstants;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      AccessibleContext accessibleContext0 = jDayChooser0.getAccessibleContext();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(accessibleContext0);
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      assertNotNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      assertNull(inputMethodListener2);
      
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
      
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      assertTrue(componentOrientation0.isLeftToRight());
      assertTrue(componentOrientation0.isHorizontal());
      assertNotNull(componentOrientation0);
      
      jDayChooser0.setComponentOrientation(componentOrientation0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(componentOrientation0.isLeftToRight());
      assertTrue(componentOrientation0.isHorizontal());
      
      HierarchyListener[] hierarchyListenerArray0 = jDayChooser0.getHierarchyListeners();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(hierarchyListenerArray0);
      
      jDayChooser0.keyTyped((KeyEvent) null);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.list();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      HierarchyBoundsListener hierarchyBoundsListener0 = AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      assertNull(hierarchyBoundsListener0);
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertNotNull(defaultTreeCellRenderer0);
      
      Font font0 = defaultTreeCellRenderer0.getFont();
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertNull(font0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(210, color0.getRed());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(238, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(228, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JDayChooser jDayChooser0 = new JDayChooser();
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(14, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertNotNull(jDayChooser0);
          
          Date date0 = jDayChooser0.getMinSelectableDate();
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(14, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
          assertNotNull(date0);
          
          jDayChooser0.setSelectableDateRange(date0, date0);
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(14, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
          
          Date date1 = jDayChooser0.setMinSelectableDate(date0);
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(14, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
          assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
          assertSame(date0, date1);
          assertSame(date1, date0);
          assertNotNull(date1);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      Color color0 = Color.blue;
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16776961), color0.getRGB());
      assertNotNull(color0);
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
      
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      
      SystemColor systemColor0 = SystemColor.window;
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getRed());
      
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jToolTip0.isFocusCycleRoot());
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
      assertFalse(jToolTip0.getIgnoreRepaint());
      assertFalse(jToolTip0.isFocusTraversalPolicySet());
      assertTrue(jToolTip0.getFocusTraversalKeysEnabled());
      assertNotNull(jToolTip0);
      
      jDayChooser0.setDecorationBordersVisible(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.transferFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setMonth(21);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(164, color0.getBlue());
      assertEquals(90, color0.getGreen());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      Color color0 = MapView.standardNodeTextColor;
      assertNull(color0);
      
      jDayChooser0.setWeekdayForeground((Color) null);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(210, color0.getRed());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(228, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(238, color0.getBlue());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&V8xVrwm\"~y,LN}";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.list();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      CardLayout cardLayout0 = new CardLayout(14, 45);
      assertEquals(45, cardLayout0.getVgap());
      assertEquals(14, cardLayout0.getHgap());
      assertNotNull(cardLayout0);
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-562), "8", 1789L, (-562));
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals((-562), actionEvent0.getID());
      assertEquals("8", actionEvent0.getActionCommand());
      assertEquals(1789L, actionEvent0.getWhen());
      assertEquals((-562), actionEvent0.getModifiers());
      assertNotNull(actionEvent0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.maxSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertTrue(date1.equals((Object)date0));
      assertNotSame(date1, date0);
      assertNotNull(date1);
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay(0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.maxSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      InputMap inputMap0 = jDayChooser0.getInputMap();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(inputMap0);
      
      boolean boolean0 = jDayChooser0.isDoubleBuffered();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 21, 41, 21, 41, 'r');
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(21, keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(41, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(21, keyEvent0.getModifiers());
      assertEquals('r', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(41L, keyEvent0.getWhen());
      assertEquals(1344, keyEvent0.getModifiersEx());
      assertNotNull(keyEvent0);
      
      int int0 = keyEvent0.getExtendedKeyCode();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(21, keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(41, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(21, keyEvent0.getModifiers());
      assertEquals('r', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(41L, keyEvent0.getWhen());
      assertEquals(1344, keyEvent0.getModifiersEx());
      assertEquals(0, int0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(21, keyEvent0.getID());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(41, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(21, keyEvent0.getModifiers());
      assertEquals('r', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(41L, keyEvent0.getWhen());
      assertEquals(1344, keyEvent0.getModifiersEx());
      
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("accessories.plugins.time.JDayChooser$6ecoratorButton");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertNotNull(mockSimpleDateFormat0);
      
      jDayChooser0.setYear(45);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setMaxDayCharacters(353);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      assertNotNull(styleContext0);
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      assertNotNull(defaultStyledDocument0);
      
      Element element0 = defaultStyledDocument0.getCharacterElement(557);
      assertNotNull(element0);
      
      GlyphView glyphView0 = new GlyphView(element0);
      assertNotNull(glyphView0);
      
      Color color0 = glyphView0.getForeground();
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDay(439);
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setMonth((-3236));
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SystemColor systemColor0 = SystemColor.control;
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertNotNull(systemColor0);
      
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(87);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(1, jYearChooser0.getStartYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertNotNull(jYearChooser0);
      
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(1, jYearChooser0.getStartYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getMinimum());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1327), 2183L, 87, (-3092), 'N');
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals((-1327), keyEvent0.getID());
      assertEquals((-3092), keyEvent0.getKeyCode());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(23, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals('N', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2183L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals((-1327), keyEvent0.getID());
      assertEquals((-3092), keyEvent0.getKeyCode());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals(23, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals('N', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2183L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertNotNull(mockSimpleDateFormat0);
      
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      jDayChooser0.setCalendar(calendar0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
      
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke('x');
      assertFalse(keyStroke0.isOnKeyRelease());
      assertEquals(0, keyStroke0.getModifiers());
      assertEquals(400, keyStroke0.getKeyEventType());
      assertEquals('x', keyStroke0.getKeyChar());
      assertEquals(0, keyStroke0.getKeyCode());
      assertNotNull(keyStroke0);
      
      int int0 = jDayChooser0.getConditionForKeyStroke(keyStroke0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(keyStroke0.isOnKeyRelease());
      assertEquals(0, keyStroke0.getModifiers());
      assertEquals(400, keyStroke0.getKeyEventType());
      assertEquals('x', keyStroke0.getKeyChar());
      assertEquals(0, keyStroke0.getKeyCode());
      assertEquals((-1), int0);
      
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setMaxDayCharacters((-1));
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(223.0, dimension0.getWidth(), 0.01);
      assertEquals(140.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      assertEquals(223, dimension0.width);
      assertEquals(140, dimension0.height);
      
      jDayChooser0.setMaxDayCharacters(8);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      MindMapMode mindMapMode0 = new MindMapMode();
      assertEquals("MindMap", mindMapMode0.toString());
      assertNotNull(mindMapMode0);
      
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate((-685), (-685), (-685));
      assertEquals("Sun Jan 15 00:00:00 GMT 1156", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = jDayChooser0.setMaxSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("Sun Jan 15 00:00:00 GMT 1156", mockDate0.toString());
      assertEquals("Sun Jan 15 00:00:00 GMT 1156", date0.toString());
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      assertNotNull(date0);
      
      JEditorPane jEditorPane0 = new JEditorPane("filter_-`exist", "k");
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertNotNull(jEditorPane0);
      
      Color color0 = jEditorPane0.getCaretColor();
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertFalse(jEditorPane0.getIgnoreRepaint());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(51, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(51, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(51, color0.getBlue());
      assertNotNull(color0);
      
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jEditorPane0.addAncestorListener(ancestorListener0);
      assertFalse(jEditorPane0.isFocusTraversalPolicyProvider());
      assertTrue(jEditorPane0.isFocusCycleRoot());
      assertTrue(jEditorPane0.isFocusTraversalPolicySet());
      assertTrue(jEditorPane0.getFocusTraversalKeysEnabled());
      assertFalse(jEditorPane0.getIgnoreRepaint());
      
      MenuElement[] menuElementArray0 = new MenuElement[9];
      JPopupMenu jPopupMenu0 = new JPopupMenu("31");
      assertFalse(jPopupMenu0.getIgnoreRepaint());
      assertFalse(jPopupMenu0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu0.isFocusCycleRoot());
      assertFalse(jPopupMenu0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu0.isFocusTraversalPolicySet());
      assertNotNull(jPopupMenu0);
      
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      Properties properties0 = FreeMindApplet.defaultProps;
      assertNull(properties0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("k", "filter_-`exist");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(boolean0);
      
      jDayChooser0.setDay(8);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = systemColor0.getComponents(floatArray0);
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray1, 0.01F);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 8);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(8, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(8, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      JPanel jPanel0 = jDayChooser0.dayPanel;
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertNotNull(jPanel0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      focusEvent0.setSource(locale_FilteringMode0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(8, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 8);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(focusEvent1.isTemporary());
      assertEquals(8, focusEvent1.getID());
      assertFalse(focusEvent1.equals((Object)focusEvent0));
      assertNotNull(focusEvent1);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser1.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(8, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(focusEvent0.equals((Object)focusEvent1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(focusEvent0, focusEvent1);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      SystemColor systemColor1 = SystemColor.controlDkShadow;
      assertEquals((-16777216), systemColor1.getRGB());
      assertEquals(1, systemColor1.getTransparency());
      assertEquals(255, systemColor1.getAlpha());
      assertEquals(0, systemColor1.getBlue());
      assertEquals(0, systemColor1.getGreen());
      assertEquals(0, systemColor1.getRed());
      assertSame(systemColor1, systemColor0);
      assertNotNull(systemColor1);
      
      MockDate mockDate0 = new MockDate(13);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = jDayChooser1.minSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      jDayChooser1.setDecorationBordersVisible(false);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      boolean boolean1 = jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jDayChooser0, jDayChooser1);
      
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      boolean boolean1 = jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertFalse(pDFDocument0.isEncryptionActive());
      assertTrue(pDFDocument0.isEncodingOnTheFly());
      assertEquals(2, pDFDocument0.getColorSpace());
      assertNotNull(pDFDocument0);
      
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertFalse(pDFDocument0.isEncryptionActive());
      assertTrue(pDFDocument0.isEncodingOnTheFly());
      assertEquals(2, pDFDocument0.getColorSpace());
      assertEquals(0, pDFInfo0.getGeneration());
      assertNull(pDFInfo0.getTitle());
      assertTrue(pDFInfo0.hasObjectNumber());
      assertNotNull(pDFInfo0);
      
      Date date0 = pDFInfo0.getCreationDate();
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertFalse(pDFDocument0.isEncryptionActive());
      assertTrue(pDFDocument0.isEncodingOnTheFly());
      assertEquals(2, pDFDocument0.getColorSpace());
      assertEquals(0, pDFInfo0.getGeneration());
      assertNull(pDFInfo0.getTitle());
      assertTrue(pDFInfo0.hasObjectNumber());
      assertNull(date0);
      
      Date date1 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Color color0 = jDayChooser0.selectedColor;
      assertEquals(1, color0.getTransparency());
      assertEquals(160, color0.getGreen());
      assertEquals(160, color0.getRed());
      assertEquals((-6250336), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(160, color0.getBlue());
      assertNotNull(color0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jDayChooser0.day = 31;
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.sundayForeground = color0;
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, color0.getTransparency());
      assertEquals(160, color0.getGreen());
      assertEquals(160, color0.getRed());
      assertEquals((-6250336), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(160, color0.getBlue());
      assertEquals(255, jDayChooser0.sundayForeground.getAlpha());
      assertEquals(160, jDayChooser0.sundayForeground.getGreen());
      assertEquals((-6250336), jDayChooser0.sundayForeground.getRGB());
      assertEquals(160, jDayChooser0.sundayForeground.getBlue());
      assertEquals(160, jDayChooser0.sundayForeground.getRed());
      assertEquals(1, jDayChooser0.sundayForeground.getTransparency());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JDayChooser jDayChooser0 = new JDayChooser(false);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(14, jDayChooser0.getDay());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertNotNull(jDayChooser0);
          
          JYearChooser jYearChooser0 = new JYearChooser();
          assertFalse(jYearChooser0.isFocusTraversalPolicySet());
          assertFalse(jYearChooser0.isFocusCycleRoot());
          assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
          assertEquals(292278994, jYearChooser0.getMaximum());
          assertEquals(2014, jYearChooser0.getValue());
          assertFalse(jYearChooser0.getIgnoreRepaint());
          assertEquals(1, jYearChooser0.getMinimum());
          assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser0.getStartYear());
          assertEquals(2014, jYearChooser0.getYear());
          assertEquals(292278994, jYearChooser0.getEndYear());
          assertNotNull(jYearChooser0);
          
          jYearChooser0.setBounds(2515, 2515, 2515, 2515);
          assertFalse(jYearChooser0.isFocusTraversalPolicySet());
          assertFalse(jYearChooser0.isFocusCycleRoot());
          assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
          assertEquals(292278994, jYearChooser0.getMaximum());
          assertEquals(2014, jYearChooser0.getValue());
          assertFalse(jYearChooser0.getIgnoreRepaint());
          assertEquals(1, jYearChooser0.getMinimum());
          assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser0.getStartYear());
          assertEquals(2014, jYearChooser0.getYear());
          assertEquals(292278994, jYearChooser0.getEndYear());
          
          jDayChooser0.setYearChooser(jYearChooser0);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertEquals(14, jDayChooser0.getDay());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jYearChooser0.isFocusTraversalPolicySet());
          assertFalse(jYearChooser0.isFocusCycleRoot());
          assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
          assertEquals(292278994, jYearChooser0.getMaximum());
          assertEquals(2014, jYearChooser0.getValue());
          assertFalse(jYearChooser0.getIgnoreRepaint());
          assertEquals(1, jYearChooser0.getMinimum());
          assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser0.getStartYear());
          assertEquals(2014, jYearChooser0.getYear());
          assertEquals(292278994, jYearChooser0.getEndYear());
          
          boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
          assertTrue(boolean0);
          
          jYearChooser0.repaint((long) 2515);
          assertFalse(jYearChooser0.isFocusTraversalPolicySet());
          assertFalse(jYearChooser0.isFocusCycleRoot());
          assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
          assertEquals(292278994, jYearChooser0.getMaximum());
          assertEquals(2014, jYearChooser0.getValue());
          assertFalse(jYearChooser0.getIgnoreRepaint());
          assertEquals(1, jYearChooser0.getMinimum());
          assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser0.getStartYear());
          assertEquals(2014, jYearChooser0.getYear());
          assertEquals(292278994, jYearChooser0.getEndYear());
          
          KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 38, (-1L), 2515, 38, '%');
          assertFalse(jYearChooser0.isFocusTraversalPolicySet());
          assertFalse(jYearChooser0.isFocusCycleRoot());
          assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
          assertEquals(292278994, jYearChooser0.getMaximum());
          assertEquals(2014, jYearChooser0.getValue());
          assertFalse(jYearChooser0.getIgnoreRepaint());
          assertEquals(1, jYearChooser0.getMinimum());
          assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser0.getStartYear());
          assertEquals(2014, jYearChooser0.getYear());
          assertEquals(292278994, jYearChooser0.getEndYear());
          assertEquals(38, keyEvent0.getKeyCode());
          assertEquals((-1L), keyEvent0.getWhen());
          assertEquals(0, keyEvent0.getKeyLocation());
          assertFalse(keyEvent0.isMetaDown());
          assertEquals(38, keyEvent0.getID());
          assertFalse(keyEvent0.isAltDown());
          assertEquals(19, keyEvent0.getModifiers());
          assertEquals(2496, keyEvent0.getModifiersEx());
          assertTrue(keyEvent0.isActionKey());
          assertTrue(keyEvent0.isControlDown());
          assertFalse(keyEvent0.isAltGraphDown());
          assertEquals('%', keyEvent0.getKeyChar());
          assertTrue(keyEvent0.isShiftDown());
          assertFalse(keyEvent0.isConsumed());
          assertNotNull(keyEvent0);
          
          keyEvent0.setKeyChar('%');
          assertFalse(jYearChooser0.isFocusTraversalPolicySet());
          assertFalse(jYearChooser0.isFocusCycleRoot());
          assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
          assertEquals(292278994, jYearChooser0.getMaximum());
          assertEquals(2014, jYearChooser0.getValue());
          assertFalse(jYearChooser0.getIgnoreRepaint());
          assertEquals(1, jYearChooser0.getMinimum());
          assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser0.getStartYear());
          assertEquals(2014, jYearChooser0.getYear());
          assertEquals(292278994, jYearChooser0.getEndYear());
          assertEquals(38, keyEvent0.getKeyCode());
          assertEquals((-1L), keyEvent0.getWhen());
          assertEquals(0, keyEvent0.getKeyLocation());
          assertFalse(keyEvent0.isMetaDown());
          assertEquals(38, keyEvent0.getID());
          assertFalse(keyEvent0.isAltDown());
          assertEquals(19, keyEvent0.getModifiers());
          assertEquals(2496, keyEvent0.getModifiersEx());
          assertTrue(keyEvent0.isActionKey());
          assertTrue(keyEvent0.isControlDown());
          assertFalse(keyEvent0.isAltGraphDown());
          assertEquals('%', keyEvent0.getKeyChar());
          assertTrue(keyEvent0.isShiftDown());
          assertFalse(keyEvent0.isConsumed());
          
          jDayChooser0.setDay((-3892));
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(1, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          
          FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 38);
          assertFalse(jYearChooser0.isFocusTraversalPolicySet());
          assertFalse(jYearChooser0.isFocusCycleRoot());
          assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
          assertEquals(292278994, jYearChooser0.getMaximum());
          assertEquals(2014, jYearChooser0.getValue());
          assertFalse(jYearChooser0.getIgnoreRepaint());
          assertEquals(1, jYearChooser0.getMinimum());
          assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser0.getStartYear());
          assertEquals(2014, jYearChooser0.getYear());
          assertEquals(292278994, jYearChooser0.getEndYear());
          assertFalse(focusEvent0.isTemporary());
          assertEquals(38, focusEvent0.getID());
          assertNotNull(focusEvent0);
          
          String string0 = focusEvent0.paramString();
          assertFalse(jYearChooser0.isFocusTraversalPolicySet());
          assertFalse(jYearChooser0.isFocusCycleRoot());
          assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
          assertEquals(292278994, jYearChooser0.getMaximum());
          assertEquals(2014, jYearChooser0.getValue());
          assertFalse(jYearChooser0.getIgnoreRepaint());
          assertEquals(1, jYearChooser0.getMinimum());
          assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser0.getStartYear());
          assertEquals(2014, jYearChooser0.getYear());
          assertEquals(292278994, jYearChooser0.getEndYear());
          assertFalse(focusEvent0.isTemporary());
          assertEquals(38, focusEvent0.getID());
          assertEquals("unknown type,permanent,opposite=null", string0);
          assertNotNull(string0);
          
          Boolean boolean1 = new Boolean("unknown type,permanent,opposite=null");
          assertFalse(boolean1.equals((Object)boolean0));
          assertFalse(boolean1);
          assertNotNull(boolean1);
          
          String string1 = SVGConstants.SVG_REQUIRED_FEATURES_ATTRIBUTE;
          assertFalse(string1.equals((Object)string0));
          assertEquals("requiredFeatures", string1);
          assertNotNull(string1);
          
          jDayChooser0.keyPressed(keyEvent0);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(1, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jYearChooser0.isFocusTraversalPolicySet());
          assertFalse(jYearChooser0.isFocusCycleRoot());
          assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
          assertEquals(292278994, jYearChooser0.getMaximum());
          assertEquals(2014, jYearChooser0.getValue());
          assertFalse(jYearChooser0.getIgnoreRepaint());
          assertEquals(1, jYearChooser0.getMinimum());
          assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
          assertEquals(1, jYearChooser0.getStartYear());
          assertEquals(2014, jYearChooser0.getYear());
          assertEquals(292278994, jYearChooser0.getEndYear());
          assertEquals(38, keyEvent0.getKeyCode());
          assertEquals((-1L), keyEvent0.getWhen());
          assertEquals(0, keyEvent0.getKeyLocation());
          assertFalse(keyEvent0.isMetaDown());
          assertEquals(38, keyEvent0.getID());
          assertFalse(keyEvent0.isAltDown());
          assertEquals(19, keyEvent0.getModifiers());
          assertEquals(2496, keyEvent0.getModifiersEx());
          assertTrue(keyEvent0.isActionKey());
          assertTrue(keyEvent0.isControlDown());
          assertFalse(keyEvent0.isAltGraphDown());
          assertEquals('%', keyEvent0.getKeyChar());
          assertTrue(keyEvent0.isShiftDown());
          assertFalse(keyEvent0.isConsumed());
          
          JMonthChooser jMonthChooser0 = new JMonthChooser(false);
          assertFalse(jMonthChooser0.isFocusCycleRoot());
          assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jMonthChooser0.hasSpinner());
          assertFalse(jMonthChooser0.getIgnoreRepaint());
          assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
          assertEquals(1, jMonthChooser0.getMonth());
          assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
          assertNotNull(jMonthChooser0);
          
          jDayChooser0.setMonthChooser(jMonthChooser0);
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(1, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertFalse(jMonthChooser0.isFocusCycleRoot());
          assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
          assertFalse(jMonthChooser0.hasSpinner());
          assertFalse(jMonthChooser0.getIgnoreRepaint());
          assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
          assertEquals(1, jMonthChooser0.getMonth());
          assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
          
          Color color0 = jDayChooser0.getDecorationBackgroundColor();
          assertEquals((-2956050), color0.getRGB());
          assertEquals(1, color0.getTransparency());
          assertEquals(238, color0.getBlue());
          assertEquals(228, color0.getGreen());
          assertEquals(255, color0.getAlpha());
          assertEquals(210, color0.getRed());
          assertFalse(jDayChooser0.getIgnoreRepaint());
          assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
          assertTrue(jDayChooser0.isDayBordersVisible());
          assertEquals(1, jDayChooser0.getDay());
          assertFalse(jDayChooser0.isDecorationBordersVisible());
          assertFalse(jDayChooser0.isFocusTraversalPolicySet());
          assertTrue(jDayChooser0.isDecorationBackgroundVisible());
          assertFalse(jDayChooser0.isFocusCycleRoot());
          assertEquals(0, jDayChooser0.getMaxDayCharacters());
          assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
          assertFalse(jDayChooser0.isWeekOfYearVisible());
          assertNotNull(color0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setBounds((-17), (-17), (-17), (-17));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1212), (-17), (-2550), 36, '>');
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals((-17L), keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals((-2560), keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('>', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals((-1212), keyEvent0.getID());
      assertEquals((-2147483638), keyEvent0.getModifiers());
      assertNotNull(keyEvent0);
      
      int int0 = keyEvent0.getExtendedKeyCode();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals((-17L), keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals((-2560), keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('>', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals((-1212), keyEvent0.getID());
      assertEquals((-2147483638), keyEvent0.getModifiers());
      assertEquals(0, int0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals((-17L), keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals((-2560), keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('>', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals((-1212), keyEvent0.getID());
      assertEquals((-2147483638), keyEvent0.getModifiers());
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertNotNull(jYearChooser0);
      
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      assertNull(jDayChooser1);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertNotNull(jPanel0);
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      assertNotNull(inputMethodListener1);
      
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      assertNull(inputMethodListener2);
      
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setMaxDayCharacters(1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(164, color0.getRed());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      KeyEvent keyEvent0 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setBounds((-32), (-32), (-32), (-32));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 94, (-1134L), (-32), 36, '>');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals((-64), keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-2147483616), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('>', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-1134L), keyEvent0.getWhen());
      assertEquals(36, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(94, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isShiftDown());
      assertNotNull(keyEvent0);
      
      String string0 = KeyEvent.getKeyText(10130);
      assertEquals("Unknown keyCode: 0x2792", string0);
      assertNotNull(string0);
      
      Insets insets0 = jDayChooser0.getInsets();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(insets0);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.right);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.bottom);
      
      insets0.top = 94;
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      int int0 = keyEvent0.getExtendedKeyCode();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals((-64), keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-2147483616), keyEvent0.getModifiers());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('>', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-1134L), keyEvent0.getWhen());
      assertEquals(36, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(94, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(0, int0);
      
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      MindMapMode mindMapMode0 = new MindMapMode();
      assertEquals("MindMap", mindMapMode0.toString());
      assertNotNull(mindMapMode0);
      
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertNotNull(jDayChooser0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertNotNull(jYearChooser0);
      
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, '%', (-1L), 2516, '%', '%');
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertEquals('%', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(37, keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(2496, keyEvent0.getModifiersEx());
      assertEquals(20, keyEvent0.getModifiers());
      assertEquals((-1L), keyEvent0.getWhen());
      assertNotNull(keyEvent0);
      
      keyEvent0.setKeyChar('%');
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertEquals('%', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(37, keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(2496, keyEvent0.getModifiersEx());
      assertEquals(20, keyEvent0.getModifiers());
      assertEquals((-1L), keyEvent0.getWhen());
      
      jDayChooser0.setDay((-3892));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = FreeMind.RESOURCES_ROOT_NODE_STYLE;
      assertEquals("standardrootnodestyle", string0);
      assertNotNull(string0);
      
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 2516);
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(2516, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      String string1 = focusEvent0.paramString();
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(2516, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertFalse(string1.equals((Object)string0));
      assertEquals("unknown type,permanent,opposite=null", string1);
      assertNotNull(string1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      String string2 = SVGConstants.SVG_REQUIRED_FEATURES_ATTRIBUTE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("requiredFeatures", string2);
      assertNotNull(string2);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertEquals('%', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(37, keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(2496, keyEvent0.getModifiersEx());
      assertEquals(20, keyEvent0.getModifiers());
      assertEquals((-1L), keyEvent0.getWhen());
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      int int0 = JRootPane.NONE;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertNotNull(jYearChooser0);
      
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      
      jYearChooser0.repaint((long) 2516);
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      
      PanelUI panelUI0 = jYearChooser0.getUI();
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertNotNull(panelUI0);
      
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 40, (-1L), 2516, 40, '%');
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals((-1L), keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals('%', keyEvent0.getKeyChar());
      assertEquals(2496, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(20, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(40, keyEvent0.getID());
      assertNotNull(keyEvent0);
      
      keyEvent0.setKeyChar('%');
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals((-1L), keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals('%', keyEvent0.getKeyChar());
      assertEquals(2496, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(20, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(40, keyEvent0.getID());
      
      jDayChooser0.setDay((-3892));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      String string0 = keyEvent0.paramString();
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals((-1L), keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals('%', keyEvent0.getKeyChar());
      assertEquals(2496, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(20, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(40, keyEvent0.getID());
      assertEquals("unknown type,keyCode=40,keyText=Down,keyChar='%',modifiers=Meta+Button1,extModifiers=Meta+Ctrl+Shift+Button2,keyLocation=KEY_LOCATION_UNKNOWN,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", string0);
      assertNotNull(string0);
      
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 40);
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(40, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      Boolean boolean0 = new Boolean("day");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string1 = SVGConstants.SVG_REQUIRED_FEATURES_ATTRIBUTE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("requiredFeatures", string1);
      assertNotNull(string1);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals((-1L), keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals('%', keyEvent0.getKeyChar());
      assertEquals(2496, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(20, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(40, keyEvent0.getID());
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(8, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      DebugGraphics debugGraphics0 = new DebugGraphics();
      assertNotNull(debugGraphics0);
      
      // Undeclared exception!
      try { 
        debugGraphics0.copyArea((-3892), (-3892), 40, 49, 5, 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      
      Window.Type window_Type0 = Window.Type.POPUP;
      assertEquals(Window.Type.POPUP, window_Type0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setFirstDayOfWeek(1749);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1749, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1749,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1749, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1749,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.grabFocus();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 1749);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertEquals(1749, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      jDayChooser1.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertEquals(1749, focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotSame(jDayChooser1, jDayChooser0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotNull(locale0);
      
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertEquals(2014, jYearChooser0.getValue());
      assertNotNull(jYearChooser0);
      
      jYearChooser0.setMinimum((-3367));
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals((-3367), jYearChooser0.getMinimum());
      assertEquals((-3367), jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertEquals(2014, jYearChooser0.getValue());
      
      jYearChooser0.setLayout((LayoutManager) null);
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(2014, jYearChooser0.getYear());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals((-3367), jYearChooser0.getMinimum());
      assertEquals((-3367), jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertEquals(2014, jYearChooser0.getValue());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNull(jButton0);
      
      jDayChooser1.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      jDayChooser0.setDecorationBordersVisible(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      assertNotNull(styleContext_NamedStyle0);
      
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle(styleContext_NamedStyle0);
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      assertNotNull(styleContext_NamedStyle1);
      
      Color color0 = styleContext0.getForeground(styleContext_NamedStyle1);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle1);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle0);
      assertNotNull(color0);
      
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(styleContext_NamedStyle0.equals((Object)styleContext_NamedStyle1));
      assertFalse(styleContext_NamedStyle1.equals((Object)styleContext_NamedStyle0));
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(styleContext_NamedStyle0, styleContext_NamedStyle1);
      assertNotSame(styleContext_NamedStyle1, styleContext_NamedStyle0);
      assertNotSame(jDayChooser1, jDayChooser0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1741, 965L, 39, 39, '%');
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(965L, keyEvent0.getWhen());
      assertEquals(8640, keyEvent0.getModifiersEx());
      assertEquals(1741, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('%', keyEvent0.getKeyChar());
      assertNotNull(keyEvent0);
      
      jDayChooser0.repaint((long) 39, 39, 39, 1741, 39);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setDay(1741);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      Boolean boolean0 = new Boolean("day");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = GVTAttributedCharacterIterator.TextAttribute.STRIKETHROUGH_ON;
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      jDayChooser0.setDay(1741);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(965L, keyEvent0.getWhen());
      assertEquals(8640, keyEvent0.getModifiersEx());
      assertEquals(1741, keyEvent0.getID());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(39, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('%', keyEvent0.getKeyChar());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertNotNull(jMonthChooser0);
      
      Color color0 = Color.white;
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton1.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton1.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton1.isFocusable());
      assertFalse(jDayChooser_DecoratorButton1.equals((Object)jDayChooser_DecoratorButton0));
      assertNotNull(jDayChooser_DecoratorButton1);
      
      boolean boolean2 = jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.equals((Object)jDayChooser_DecoratorButton1));
      assertFalse(boolean2);
      assertNotSame(jDayChooser_DecoratorButton0, jDayChooser_DecoratorButton1);
      
      boolean boolean3 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertNull(unmarshallingContext0.getDocumentName());
      assertNotNull(unmarshallingContext0);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(3, UnmarshallingContext.END_TAG);
      assertEquals(9, UnmarshallingContext.COMMENT);
      assertEquals(4, UnmarshallingContext.TEXT);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(2, UnmarshallingContext.START_TAG);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      
      HierarchyListener[] hierarchyListenerArray0 = jDayChooser1.getHierarchyListeners();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotNull(hierarchyListenerArray0);
      
      KeyStroke[] keyStrokeArray0 = jDayChooser0.getRegisteredKeyStrokes();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      assertNotNull(keyStrokeArray0);
      
      jDayChooser1.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      jDayChooser1.setMaxDayCharacters(4);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(4, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      
      Boolean boolean0 = new Boolean("day");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      assertFalse(boolean1);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 1, 5, 0, 33, 'R');
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(4, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertEquals(0, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(5L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('R', keyEvent0.getKeyChar());
      assertEquals(1, keyEvent0.getID());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(keyEvent0);
      
      String string0 = InputEvent.getModifiersExText(5);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jToolTip0.getFocusTraversalKeysEnabled());
      assertFalse(jToolTip0.isFocusTraversalPolicySet());
      assertFalse(jToolTip0.getIgnoreRepaint());
      assertFalse(jToolTip0.isFocusCycleRoot());
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
      assertNotNull(jToolTip0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, (-43), 34, 34, '/');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(8320, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isConsumed());
      assertEquals((-43L), keyEvent0.getWhen());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(34, keyEvent0.getModifiers());
      assertEquals(34, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(34, keyEvent0.getID());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals('/', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isMetaDown());
      assertNotNull(keyEvent0);
      
      int int0 = ResultSet.TYPE_SCROLL_INSENSITIVE;
      assertEquals(1004, int0);
      
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-43), (-43), 4, 36, '/', 2);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(keyEvent1.isAltGraphDown());
      assertEquals('/', keyEvent1.getKeyChar());
      assertFalse(keyEvent1.isControlDown());
      assertEquals(36, keyEvent1.getKeyCode());
      assertTrue(keyEvent1.isActionKey());
      assertEquals((-43L), keyEvent1.getWhen());
      assertFalse(keyEvent1.isAltDown());
      assertEquals(2, keyEvent1.getKeyLocation());
      assertEquals(4, keyEvent1.getModifiers());
      assertEquals(256, keyEvent1.getModifiersEx());
      assertEquals((-43), keyEvent1.getID());
      assertFalse(keyEvent1.isConsumed());
      assertFalse(keyEvent1.isShiftDown());
      assertTrue(keyEvent1.isMetaDown());
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertNotNull(keyEvent1);
      
      int int1 = keyEvent1.getExtendedKeyCode();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(keyEvent1.isAltGraphDown());
      assertEquals('/', keyEvent1.getKeyChar());
      assertFalse(keyEvent1.isControlDown());
      assertEquals(36, keyEvent1.getKeyCode());
      assertTrue(keyEvent1.isActionKey());
      assertEquals((-43L), keyEvent1.getWhen());
      assertFalse(keyEvent1.isAltDown());
      assertEquals(2, keyEvent1.getKeyLocation());
      assertEquals(4, keyEvent1.getModifiers());
      assertEquals(256, keyEvent1.getModifiersEx());
      assertEquals((-43), keyEvent1.getID());
      assertFalse(keyEvent1.isConsumed());
      assertFalse(keyEvent1.isShiftDown());
      assertTrue(keyEvent1.isMetaDown());
      assertFalse(keyEvent1.equals((Object)keyEvent0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(keyEvent1, keyEvent0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = InputEvent.getModifiersExText((-43));
      assertEquals("Meta+Ctrl+Alt+Shift+Alt Graph+Button1+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20", string0);
      assertNotNull(string0);
      
      String string1 = KeyEvent.getKeyModifiersText(2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ctrl", string1);
      assertNotNull(string1);
      
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(actionMap0);
      
      KeyStroke[] keyStrokeArray0 = jDayChooser0.getRegisteredKeyStrokes();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(keyStrokeArray0);
      
      boolean boolean0 = true;
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setMaxDayCharacters(2131);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      Boolean boolean1 = new Boolean("Ctrl");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      KeyEvent keyEvent2 = new KeyEvent(jToolTip0, 1582, 2, (-1773), 34, 'R');
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jToolTip0.getFocusTraversalKeysEnabled());
      assertFalse(jToolTip0.isFocusTraversalPolicySet());
      assertFalse(jToolTip0.getIgnoreRepaint());
      assertFalse(jToolTip0.isFocusCycleRoot());
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
      assertFalse(keyEvent2.isAltDown());
      assertFalse(keyEvent2.isAltGraphDown());
      assertEquals(34, keyEvent2.getKeyCode());
      assertTrue(keyEvent2.isControlDown());
      assertEquals(0, keyEvent2.getKeyLocation());
      assertFalse(keyEvent2.isConsumed());
      assertTrue(keyEvent2.isShiftDown());
      assertEquals((-1792), keyEvent2.getModifiersEx());
      assertEquals(1582, keyEvent2.getID());
      assertEquals(2L, keyEvent2.getWhen());
      assertFalse(keyEvent2.isMetaDown());
      assertTrue(keyEvent2.isActionKey());
      assertEquals((-2147483629), keyEvent2.getModifiers());
      assertEquals('R', keyEvent2.getKeyChar());
      assertFalse(keyEvent2.equals((Object)keyEvent1));
      assertFalse(keyEvent2.equals((Object)keyEvent0));
      assertNotNull(keyEvent2);
      
      String string2 = InputEvent.getModifiersExText((-676));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Meta+Shift+Alt Graph+Button1+Button2+Button3+Button4+Button5+Button6+Button7+Button8+Button9+Button10+Button11+Button12+Button13+Button14+Button15+Button16+Button17+Button18+Button19+Button20", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
