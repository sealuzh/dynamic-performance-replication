/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 01:47:03 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 's';
      charArray0[2] = 'd';
      charArray0[3] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 956);
      SymbolTable symbolTable0 = new SymbolTable(97);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-871));
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'x';
      charArray0[2] = ' ';
      charArray0[3] = 'p';
      charArray0[4] = ')';
      charArray0[5] = '_';
      charArray0[6] = 'K';
      charArray0[7] = 'O';
      charArray0[8] = 'f';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect {, actual ", 84);
      jSONScanner0.nextIdent();
      jSONScanner0.scanLong('S');
      jSONScanner0.isBlankInput();
      long long0 = jSONScanner0.longValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(7499362L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_7U$T1mx)V-4`@0z&t", (-1619176615));
      jSONScanner0.scanIdent();
      jSONScanner0.stringDefaultValue();
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '\'';
      charArray0[2] = 'T';
      charArray0[3] = 'O';
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      jSONScanner0.token = 2023;
      jSONScanner0.stringVal();
      jSONScanner0.scanISO8601DateIfMatch(true);
      char char0 = 'u';
      char char1 = '4';
      jSONScanner0.scanString('4');
      jSONScanner0.putChar('u');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-+M\u0001/#%_", 8);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanIdent();
      assertEquals(18, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(_&)/08@0V9';D<^F", 8);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(2950);
      jSONReaderScanner0.addSymbol(8, 2817, 2817, symbolTable0);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = (-1160);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fil=e", (-1160));
      char char0 = 'd';
      jSONReaderScanner0.scanBoolean('d');
      char char1 = 'w';
      jSONReaderScanner0.scanDecimal('w');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'J';
      charArray0[2] = '5';
      charArray0[3] = '*';
      charArray0[4] = 'K';
      charArray0[5] = 'h';
      charArray0[6] = 'M';
      charArray0[7] = '7';
      charArray0[8] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 367);
      jSONReaderScanner0.scanLong('K');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.setToken((-3678));
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.setToken(9);
      jSONReaderScanner0.locale = null;
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - J, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'", (-3819));
      char[] charArray0 = new char[3];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      charArray0[0] = '`';
      charArray0[1] = '2';
      SymbolTable symbolTable0 = new SymbolTable(102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.pos = 16;
      char[] charArray0 = new char[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 6, 16, 3167, 16, 2166);
      mockGregorianCalendar0.after("new");
      mockGregorianCalendar0.isLeapYear(16);
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      char char0 = '5';
      charArray0[0] = '5';
      charArray0[1] = '';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFloat('');
      mockGregorianCalendar0.setFirstDayOfWeek((-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-503));
      jSONReaderScanner0.scanBoolean('[');
      jSONReaderScanner0.isRef();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '@';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "new";
      Object object0 = new Object();
      objectArray0[3] = object0;
      jSONReaderScanner0.lexError("", objectArray0);
      jSONReaderScanner0.getTimeZone();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'E';
      charArray0[2] = '4';
      charArray0[3] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.isEOF();
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(15);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'd');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('n');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("type", (-1091259175));
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = 'G';
      charArray0[2] = 'Z';
      charArray0[3] = 'e';
      charArray0[4] = 'D';
      charArray0[5] = 'O';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oIdN");
      jSONReaderScanner0.tokenName();
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char char0 = 'n';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanDate('n');
      jSONScanner0.bytesValue();
      Class<Integer> class0 = Integer.class;
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oracle.sql.DATE");
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      jSONScanner0.scanFieldIntArray(charArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '!';
      objectArray0[1] = (Object) '!';
      objectArray0[2] = (Object) '!';
      objectArray0[3] = (Object) '!';
      objectArray0[4] = (Object) jSONScanner0;
      jSONScanner0.lexError("oracle.sql.DATE", objectArray0);
      charArray0[1] = '?';
      jSONScanner0.scanFieldLong(charArray0);
      charArray0[2] = '';
      jSONScanner0.nextToken(5);
      char char0 = '\\';
      charArray0[3] = '\\';
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5s4 !8x'N>-,uwz", 4046);
      jSONReaderScanner0.intValue();
      char char0 = '0';
      jSONReaderScanner0.scanInt('0');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'vO9Q;{U>cH%hJF-");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false", 16384);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Srs[HTFbp2[S*4pX\n");
      jSONReaderScanner0.nextToken(21);
      jSONReaderScanner0.skipWhitespace();
      assertEquals('[', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0SqN0'DX");
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      jSONScanner0.ch = 'R';
      jSONScanner0.scanBoolean('R');
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.matchField2(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed jsonArray", 1221);
      jSONReaderScanner0.info();
      jSONReaderScanner0.nextToken(1221);
      Locale locale0 = Locale.forLanguageTag("unclosed jsonArray");
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.intValue();
      Feature feature0 = Feature.DisableASM;
      char[] charArray0 = new char[1];
      char char0 = '6';
      charArray0[0] = '6';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.np = 4;
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.ready();
      jSONReaderScanner0.eofPos = 35;
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'c');
      jSONReaderScanner0.setToken(65);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t");
      jSONScanner0.scanBoolean('/');
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.indexOf('m', (-124));
      jSONScanner0.charAt(1442);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = '/';
      charArray0[2] = 'm';
      charArray0[3] = '\u001A';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      charArray0[7] = 'm';
      charArray0[8] = '/';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-1978), charArray0, (-1619), 3859);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = (-2339);
      JSONScanner jSONScanner0 = new JSONScanner("zt", (-2339));
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'p';
      charArray0[2] = 'P';
      charArray0[3] = 'S';
      int int1 = 2290;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2290);
      jSONReaderScanner0.close();
      jSONScanner0.scanIdent();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-2339));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '';
      charArray0[2] = '8';
      charArray0[3] = '\\';
      charArray0[4] = '|';
      charArray0[5] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 106);
      jSONReaderScanner0.scanLong('w');
      jSONReaderScanner0.putChar('w');
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "mbv";
      objectArray0[1] = (Object) "Set";
      jSONReaderScanner0.scanNumber();
      objectArray0[2] = (Object) "Set";
      objectArray0[3] = (Object) "Set";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "mbv";
      jSONReaderScanner0.lexError("mbv", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char char0 = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 92);
      SymbolTable symbolTable0 = new SymbolTable(120);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'q';
      int int0 = 14;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14);
      SymbolTable symbolTable0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'T';
      charArray0[2] = '6';
      charArray0[3] = 'l';
      charArray0[4] = '{';
      charArray0[5] = 'I';
      charArray0[6] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3053, 2185);
      jSONReaderScanner0.scanInt('_');
      Object[] objectArray0 = new Object[5];
      jSONReaderScanner0.charArrayCompare(charArray0);
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) 'l';
      objectArray0[2] = (Object) '{';
      objectArray0[3] = (Object) '6';
      objectArray0[4] = (Object) '6';
      jSONReaderScanner0.lexError((String) null, objectArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.pos = 3053;
      jSONReaderScanner0.matchField(charArray0);
      System.setCurrentTimeMillis(5347909877633654828L);
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = (-1160);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-1160));
      jSONReaderScanner0.isEOF();
      char char0 = 'c';
      jSONReaderScanner0.scanBoolean('c');
      char char1 = 'w';
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'w');
      jSONReaderScanner0.scanDecimal('w');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '6';
      charArray0[2] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1616);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(989, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "true";
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.isEOF();
      jSONScanner0.isEOF();
      int int0 = 196;
      jSONScanner0.nextToken(196);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '<';
      char char0 = 'J';
      charArray0[2] = 'J';
      char char1 = '&';
      charArray0[3] = '&';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1025, 1025);
      jSONReaderScanner0.info();
      jSONReaderScanner0.isEnabled(1025);
      jSONReaderScanner0.indexOf('c', 1025);
      JSONScanner jSONScanner0 = new JSONScanner("", (-1));
      char char2 = 'Y';
      char char3 = 'B';
      char[] charArray1 = new char[5];
      charArray1[0] = 'e';
      charArray1[1] = 'B';
      charArray1[2] = 'J';
      charArray1[3] = '&';
      charArray1[4] = 'Y';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      jSONScanner0.isRef();
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T:+Ezp1P0K]z.{k.", (-3094));
      Feature feature0 = Feature.AllowComment;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.longValue();
      char char0 = 'n';
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.putChar('n');
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 'C';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "-b VW(*c,Aw.y80nZn";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-b VW(*c,Aw.y80nZn");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDecimal('y');
      jSONScanner0.scanUUID(';');
      jSONScanner0.scanInt(';');
      char[] charArray0 = new char[2];
      jSONScanner0.putChar('v');
      charArray0[0] = ';';
      charArray0[1] = '|';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanLong('m');
      jSONScanner0.info();
      jSONScanner0.hasSpecial = true;
      char[] charArray1 = new char[2];
      charArray1[0] = 'm';
      charArray1[1] = 'm';
      jSONScanner0.scanFieldUUID(charArray1);
      jSONScanner0.intValue();
      jSONScanner0.isEOF();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanDouble('H');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char char0 = 'C';
      jSONScanner0.indexOf('C', 3444);
      SymbolTable symbolTable0 = new SymbolTable(336);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'C');
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = ')';
      charArray0[4] = 'C';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone(')', 'K', ')', 'v', ')');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-320);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-320));
      jSONReaderScanner0.nextIdent();
      int int1 = 1130;
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = '#';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 812, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'U';
      char char0 = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'F';
      charArray0[4] = 'N';
      char char1 = 'h';
      charArray0[5] = 'h';
      charArray0[6] = ' ';
      char char2 = '^';
      charArray0[7] = '^';
      charArray0[8] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66, 66);
      char char3 = '<';
      jSONReaderScanner0.scanDouble('<');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      jSONReaderScanner0.bp = (-1089595642);
      jSONReaderScanner0.isEnabled((-1680), (-1680));
      jSONReaderScanner0.token();
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '1';
      charArray0[2] = ',';
      charArray0[3] = '3';
      charArray0[4] = 'i';
      charArray0[5] = 'g';
      charArray0[6] = '_';
      charArray0[7] = 'o';
      charArray0[8] = ']';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat(charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 731;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 731);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2438, 2438);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      int int0 = 91;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 91);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'v';
      charArray0[3] = 'w';
      charArray0[4] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.tokenName();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('E');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D5B;uoHv%sF913@", (-1879406218));
      jSONReaderScanner0.token = 1749;
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'B';
      charArray0[2] = '/';
      charArray0[3] = '_';
      charArray0[4] = '6';
      charArray0[5] = 'j';
      charArray0[6] = 'a';
      charArray0[7] = 'h';
      charArray0[8] = 'E';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1087531780), 1749);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 107;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*", 107);
      char char0 = 'x';
      jSONReaderScanner0.scanFloat('x');
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "y11,4NuQ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y11,4NuQ", 117);
      Class<String> class0 = String.class;
      jSONReaderScanner0.nextToken(117);
      SymbolTable symbolTable0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'j';
      charArray0[2] = 'G';
      charArray0[3] = 'B';
      jSONReaderScanner0.scanDate('=');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 117, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n%,V&`~{@l]%e_|P");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray1 = new char[7];
      charArray1[0] = 'p';
      charArray1[1] = '=';
      charArray1[2] = 'K';
      charArray1[3] = '3';
      charArray1[4] = '-';
      charArray1[5] = 'a';
      charArray1[6] = 'N';
      jSONScanner0.scanFieldDate(charArray1);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'c';
      charArray0[2] = 'V';
      char char0 = 'f';
      charArray0[3] = 'f';
      charArray0[4] = '.';
      charArray0[5] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1067);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '9');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I\"m]s@h<(");
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'O';
      jSONReaderScanner0.scanType("l9c8QizvB+VP\rqYlz");
      charArray0[2] = '}';
      jSONReaderScanner0.scanString('I');
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanDate(')');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$OU'#b");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1551);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "&1&MQz(";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&1&MQz(", 84);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      char char0 = '3';
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = 'r';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanLong('3');
      char[] charArray1 = new char[3];
      int int0 = (-1213);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1213));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'a';
      charArray0[2] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, ';');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanDecimal(';');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.indexOf(';', 116);
      jSONReaderScanner0.skipWhitespace();
      char[] charArray1 = new char[4];
      charArray1[0] = '.';
      charArray1[1] = 'E';
      charArray1[2] = 'q';
      charArray1[3] = 'D';
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.charAt('D');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.stringVal();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")9>bM@^??-3~s", 87);
      jSONReaderScanner0.intValue();
      char[] charArray0 = jSONReaderScanner0.sub_chars(0, 0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.matchField(charArray1);
      jSONReaderScanner0.sbuf = charArray1;
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      jSONReaderScanner0.np = 512;
      JSONScanner jSONScanner0 = new JSONScanner("Set", (-2502));
      jSONScanner0.stringDefaultValue = "Set";
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldFloatArray2(jSONReaderScanner0.sbuf);
      jSONReaderScanner0.scanString('#');
      jSONScanner0.scanFieldDate(jSONReaderScanner0.sbuf);
      jSONScanner0.scanDate('P');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1286);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65);
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("]", 65);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(65, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "\"";
      int int0 = (-3552);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", (-3552));
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONReaderScanner0.config(feature0, true);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'z';
      charArray0[2] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g@`{^_216aBWxKK*74", 114);
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      jSONScanner0.info();
      charArray0[1] = 'k';
      charArray0[2] = '{';
      charArray0[3] = 'v';
      charArray0[4] = 'k';
      jSONScanner0.isRef();
      charArray0[5] = '_';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.bytesValue();
      jSONScanner0.tokenName();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Unknown");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 3600;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SupportNonPublicField", 3600);
      char[] charArray0 = new char[3];
      char char0 = 'd';
      charArray0[0] = 'd';
      jSONReaderScanner0.isRef();
      char char1 = ';';
      charArray0[1] = ';';
      char char2 = 'F';
      charArray0[2] = 'F';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.isBlankInput();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'z';
      charArray0[2] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'a';
      charArray0[2] = 'D';
      charArray0[0] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 25);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("illega str");
      linkedHashSet0.add((String) null);
      linkedHashSet0.add("undefined");
      jSONReaderScanner0.isBlankInput();
      linkedHashSet0.add("Set");
      jSONReaderScanner0.scanDecimal(';');
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'D');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.indexOf('.', 116);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.charAt(25);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.stringVal();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'E';
      charArray0[2] = '4';
      charArray0[3] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.isEOF();
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(15);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'd');
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('h');
      assertTrue(jSONReaderScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('?', char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'a';
      charArray0[2] = 'D';
      charArray0[3] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 25);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("illega str");
      linkedHashSet0.add((String) null);
      linkedHashSet0.add("undefined");
      jSONReaderScanner0.charArrayCompare(charArray0);
      linkedHashSet0.add("Set");
      jSONReaderScanner0.scanDecimal(';');
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'D');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.indexOf(';', 116);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.charAt(25);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.stringVal();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '&';
      charArray0[0] = '&';
      char char1 = 'Q';
      charArray0[1] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.arrayCopy(4, charArray0, 0, 0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed", 13);
      char[] charArray0 = new char[4];
      String string0 = "JtA7hj8K,~feX";
      jSONReaderScanner0.scanType("JtA7hj8K,~feX");
      charArray0[0] = 'O';
      charArray0[1] = 'o';
      charArray0[2] = 'a';
      charArray0[3] = '*';
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("unclosed", 13);
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONScanner0.bytesValue();
      locale0.getExtensionKeys();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.getMaximum((-3978));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3978
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 270, 0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(270, charArray0, (-3065), (-1742));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'g';
      charArray0[2] = 'J';
      charArray0[3] = 'n';
      charArray0[4] = 'c';
      charArray0[5] = 'v';
      charArray0[6] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4017, 4017);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.subString(4017, 4017);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      char[] charArray0 = new char[6];
      char char0 = 'F';
      int int0 = 1447;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1447);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "scan";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan");
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = '\'';
      charArray0[2] = 'e';
      charArray0[3] = 'K';
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2254));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "*vQ";
      int int0 = (-1731);
      JSONScanner jSONScanner0 = new JSONScanner("*vQ", (-1731));
      jSONScanner0.isBlankInput();
      char char0 = 'e';
      char char1 = 'P';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('e', 'e', ' ', 'P', ' ');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 1808);
      jSONReaderScanner0.hasSpecial = true;
      char char0 = 'T';
      jSONReaderScanner0.scanDecimal('T');
      char char1 = '1';
      jSONReaderScanner0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '$';
      charArray0[2] = 'T';
      charArray0[3] = '1';
      jSONReaderScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('1', 1808);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteSlashAsSpecial", 829);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'v';
      charArray0[2] = '%';
      charArray0[3] = 'w';
      charArray0[4] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('E');
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      char char0 = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '-';
      char char1 = '>';
      charArray0[3] = '>';
      char char2 = 'i';
      charArray0[4] = 'i';
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(3196, charArray0, 3196, 3196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = 'Y';
      charArray0[2] = 'j';
      charArray0[3] = 'q';
      charArray0[4] = ';';
      charArray0[5] = ']';
      charArray0[6] = 'M';
      charArray0[7] = '~';
      charArray0[8] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      double double0 = jSONReaderScanner0.scanDouble('M');
      assertEquals(5.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uJx{Ca0v7-e;^Kd/5", 66);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'F';
      charArray0[2] = 'N';
      charArray0[3] = '#';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.setToken(172);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'K';
      charArray0[2] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 64, 4096);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      char char0 = 'A';
      charArray0[1] = 'A';
      char char1 = '?';
      charArray0[2] = '?';
      char char2 = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'N';
      charArray0[5] = ']';
      charArray0[6] = 'E';
      char char3 = ',';
      charArray0[7] = ',';
      int int0 = 2630;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2630);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 2630, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      jSONReaderScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(59);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = 'G';
      charArray0[2] = 'D';
      charArray0[3] = 'N';
      int int0 = 56320;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56320, 56320);
      String string0 = "ORzFIkEP0n#yI@':(M";
      jSONReaderScanner0.stringDefaultValue = "ORzFIkEP0n#yI@':(M";
      jSONReaderScanner0.token = 56320;
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.bp = 56320;
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("prqsoCD3@UIJ1YMb");
      jSONScanner0.scanISO8601DateIfMatch();
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'L';
      charArray0[2] = '$';
      charArray0[3] = ']';
      charArray0[4] = '_';
      charArray0[5] = '3';
      charArray0[6] = '&';
      charArray0[7] = '!';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFloat('&');
      jSONScanner0.scanStringArray((Collection<String>) null, '<');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - p, info : pos 0, json : prqsoCD3@UIJ1YMb
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str", 13);
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'Z';
      charArray0[2] = '2';
      charArray0[3] = '@';
      charArray0[4] = 'O';
      charArray0[5] = 'W';
      charArray0[6] = 'F';
      charArray0[7] = '8';
      charArray0[8] = 'O';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'J';
      charArray0[0] = 'J';
      charArray0[1] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 26);
      int int0 = 8192;
      SymbolTable symbolTable0 = new SymbolTable(8192);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 699);
      jSONReaderScanner0.skipWhitespace();
      char char0 = '}';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '}');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3, 933);
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.scanUUID('y');
      jSONReaderScanner0.skipWhitespace();
      JSONScanner jSONScanner0 = new JSONScanner("M-.LpfI]{VkTc+8(M}", 8);
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-1261), 36, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6hjyWWV}#rzI59");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(651);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '=');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteNullListAsEmpty");
      jSONReaderScanner0.next();
      char[] charArray0 = null;
      int int0 = 36;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      int int0 = 46;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan", 40);
      char char0 = '9';
      jSONScanner0.scanDate('9');
      char char1 = '%';
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed", 84);
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.setTimeZone(timeZone0);
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONScanner0.config(feature0, false);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      int int0 = 91;
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '9';
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. u
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = '8';
      charArray0[2] = ' ';
      charArray0[3] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 67);
      jSONReaderScanner0.getTimeZone();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(125);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'f';
      charArray0[2] = '>';
      charArray0[3] = 'j';
      charArray0[4] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.np = 1027;
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.next();
      jSONReaderScanner0.close();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1487));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", (-2372));
      jSONReaderScanner0.pos = (-2372);
      jSONReaderScanner0.scanUUID('J');
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = 'n';
      charArray0[2] = 'K';
      charArray0[3] = ']';
      charArray0[4] = 'g';
      charArray0[5] = '{';
      charArray0[6] = 'w';
      charArray0[7] = '@';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 41;
      JSONScanner jSONScanner0 = new JSONScanner("", 41);
      Feature feature0 = Feature.DisableFieldSmartMatch;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanBoolean('A');
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = new JSONScanner(")afA\"k", (-1));
      jSONScanner0.sp = (-894);
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('A');
      jSONScanner0.indexOf('=', (-1));
      assertEquals('a', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      jSONReaderScanner0.copyTo(77, 0, charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = 'W';
      charArray0[2] = '\"';
      charArray0[3] = '<';
      charArray0[4] = '1';
      charArray0[5] = 'h';
      charArray0[6] = 'u';
      charArray0[7] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3275, 798);
      jSONReaderScanner0.scanString();
      assertEquals('<', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 11;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan", 11);
      char[] charArray0 = new char[5];
      jSONReaderScanner0.eofPos = 11;
      jSONReaderScanner0.pos = 11;
      charArray0[0] = 'k';
      charArray0[1] = 'n';
      charArray0[2] = 'K';
      charArray0[3] = ';';
      charArray0[4] = ',';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed", 3);
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.scanString('t');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-1785));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("cSUa,3f5Y|JTw'");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken();
      char char0 = 'r';
      jSONReaderScanner0.scanBoolean('r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-622);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-622));
      jSONReaderScanner0.nextToken();
      char char0 = '0';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '-';
      charArray0[0] = '-';
      charArray0[1] = 'A';
      char char1 = '';
      charArray0[2] = '';
      char char2 = 'H';
      charArray0[3] = 'H';
      char char3 = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      int int0 = 253;
      jSONReaderScanner0.nextToken(253);
      JSONScanner jSONScanner0 = new JSONScanner("SS;=77QXNj@");
      Class<String> class0 = String.class;
      int int1 = (-1720457744);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1720457744));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "NYN#O";
      int int0 = 94;
      JSONScanner jSONScanner0 = new JSONScanner("NYN#O", 94);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      char char0 = '_';
      charArray0[1] = '_';
      charArray0[2] = 'N';
      charArray0[3] = 'P';
      int int0 = 2269;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2269, 2269);
      Class<String> class0 = String.class;
      jSONReaderScanner0.ch = '_';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", 410);
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 'V';
      jSONScanner0.ch = 'R';
      charArray0[2] = 's';
      charArray0[3] = 'X';
      jSONScanner0.next();
      charArray0[4] = '4';
      charArray0[5] = '~';
      jSONScanner0.scanFieldIntArray(charArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldFloat(charArray1);
      jSONScanner0.scanFieldUUID(charArray1);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      arrayList0.add("error parse true");
      arrayList0.add("|,gT&VVsyHG]f:");
      char char0 = 'z';
      jSONScanner0.scanStringArray(arrayList0, 'z');
      jSONScanner0.pos();
      jSONScanner0.stringDefaultValue = "error parse true";
      char char1 = '^';
      jSONScanner0.scanDate('^');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('^');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ^ - e, info : pos 0, json : error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jQ", 20);
      jSONScanner0.putChar('T');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(20, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L2BS~ FV");
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      jSONReaderScanner0.matchField(charArray0);
      char[] charArray1 = new char[4];
      char char0 = '/';
      charArray1[0] = '/';
      char char1 = 'w';
      charArray1[1] = 'w';
      charArray1[2] = 'B';
      jSONReaderScanner0.stringVal();
      char char2 = 'b';
      charArray1[3] = 'b';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gnG.t_");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONReaderScanner0;
      char char0 = '*';
      jSONReaderScanner0.scanBoolean('*');
      objectArray0[1] = (Object) "gnG.t_";
      objectArray0[2] = (Object) "gnG.t_";
      objectArray0[3] = (Object) "gnG.t_";
      objectArray0[4] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("gnG.t_", objectArray0);
      jSONReaderScanner0.pos();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "&1&MQz(";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&1&MQz(", 84);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      char char0 = '3';
      jSONReaderScanner0.scanLong('3');
      char[] charArray0 = new char[3];
      int int0 = (-1213);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1213));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "9~[";
      int int0 = 93;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9~[", 93);
      char[] charArray0 = new char[1];
      char char0 = '~';
      jSONReaderScanner0.close();
      int int1 = 22;
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = (-343);
      JSONScanner jSONScanner0 = new JSONScanner("mo<h6W q{.^2]9~u|>", (-343));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('*');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match * - m, info : pos 0, json : mo<h6W q{.^2]9~u|>
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",O'[2qE)i", 66);
      jSONReaderScanner0.token = 66;
      jSONReaderScanner0.info();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ",O'[2qE)i");
      jSONReaderScanner0.timeZone = (TimeZone) simpleTimeZone0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DD%`b.G&xl@w#mUQ;4%", 2511);
      Feature feature0 = Feature.SupportNonPublicField;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.indexOf('>', 2511);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDate('M');
      assertEquals(2511, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L2BS~ FV");
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      jSONReaderScanner0.matchField(charArray0);
      char[] charArray1 = new char[4];
      char char0 = '/';
      charArray1[0] = '/';
      char char1 = 'w';
      charArray1[1] = 'w';
      charArray1[2] = 'B';
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('B');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match B - L, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.getLocale();
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'F';
      charArray0[2] = 'P';
      charArray0[3] = '^';
      charArray0[4] = 'A';
      charArray0[5] = ')';
      charArray0[6] = 'B';
      jSONScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      char[] charArray0 = new char[7];
      jSONScanner0.scanISO8601DateIfMatch(true);
      charArray0[0] = '_';
      charArray0[1] = ';';
      charArray0[2] = 'K';
      charArray0[3] = '';
      jSONScanner0.calendar = null;
      jSONScanner0.scanIdent();
      charArray0[4] = '-';
      charArray0[5] = '?';
      charArray0[6] = '2';
      jSONScanner0.scanNumber();
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.resetStringPosition();
      jSONScanner0.token();
      JSONLexerBase.isWhitespace('');
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldString(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanStringArray(linkedHashSet0, 'i');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error", 528);
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '4';
      charArray0[2] = ']';
      charArray0[3] = '%';
      charArray0[4] = 'k';
      charArray0[5] = 'A';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '{';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 12, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 58;
      JSONScanner jSONScanner0 = new JSONScanner("iD*~*N|hq*rDBwF", 58);
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.hasSpecial = false;
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone.setDefault(timeZone0);
      jSONScanner0.setTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : pos 0, json : iD*~*N|hq*rDBwF
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[1];
      jSONScanner0.intValue();
      jSONScanner0.hasSpecial = true;
      jSONScanner0.scanDecimal('o');
      jSONScanner0.scanLong('K');
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.sp = (-576);
      charArray0[0] = '5';
      char char0 = 'm';
      jSONScanner0.scanBoolean('m');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanStringArray((Collection<String>) null, '5');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('5', 'S', '^');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = ';';
      charArray0[2] = 'K';
      charArray0[4] = '-';
      charArray0[5] = '?';
      JSONLexerBase.isWhitespace('');
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 2300;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 2300);
      jSONReaderScanner0.scanDouble('P');
      char[] charArray0 = new char[8];
      char char0 = 'D';
      charArray0[0] = 'D';
      char char1 = 'H';
      charArray0[1] = 'H';
      char char2 = 'H';
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed single-quote string");
      char[] charArray0 = new char[3];
      jSONReaderScanner0.pos = 3787;
      charArray0[0] = 'H';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      Locale locale0 = Locale.GERMAN;
      jSONReaderScanner0.setLocale(locale0);
      charArray0[1] = 'f';
      charArray0[2] = 'Y';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.stringDefaultValue = "scan";
      jSONReaderScanner0.nextToken((-1751));
      jSONReaderScanner0.scanDate('[');
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-1751));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '/';
      charArray0[0] = '/';
      char char1 = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'i';
      charArray0[3] = '8';
      int int0 = 117;
      int int1 = 110;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117, 110);
      int int2 = 43;
      SymbolTable symbolTable0 = new SymbolTable(43);
      String string0 = "sPa0)0S*.x4";
      int int3 = (-3004);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, (-32), 407);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }
}
