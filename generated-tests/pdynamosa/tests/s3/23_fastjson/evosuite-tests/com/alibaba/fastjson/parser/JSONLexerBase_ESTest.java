/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 11:25:22 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.time.DateTimeException;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoEra;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DisableASM");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('\u0014');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0014';
      charArray0[1] = '\u0014';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('0');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1561);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Or)p!uiHJ6rL@FFQ/");
      SymbolTable symbolTable0 = new SymbolTable(9957);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'v');
      jSONScanner0.bp = 65;
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('_');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match _ - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(^#t6r)C0[Ao8Qfxr");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yfMdr\"r");
      JSONLexerBase.isWhitespace('k');
      SymbolTable symbolTable0 = new SymbolTable(91);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '1');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-3328));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yAMdr\"=", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONLexerBase.isWhitespace('/');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WcCviAbxG67", (-952));
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanInt('`');
      charArray0[0] = '/';
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "yAMdr\"=";
      objectArray0[2] = (Object) jSONScanner0;
      jSONScanner0.lexError("yAMdr\"=", objectArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$jUref");
      char[] charArray0 = new char[0];
      jSONScanner0.scanDouble('M');
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.isRef();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&u.rjyT<X<|j\"DJ2 `");
      jSONReaderScanner0.scanDecimal('2');
      jSONReaderScanner0.nextIdent();
      assertEquals('u', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b", 1003);
      boolean boolean0 = jSONScanner0.isEnabled(Integer.MAX_VALUE, 1003);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1003, jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5?T(!'[jK.R{9U$Xo|");
      jSONScanner0.nextToken();
      assertEquals('?', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$ref");
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '+';
      charArray0[2] = 'i';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.longValue();
      char char0 = '@';
      jSONScanner0.scanUUID('@');
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      jSONScanner0.matchField(charArray0);
      charArray0[1] = '@';
      charArray0[2] = '@';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      char[] charArray1 = new char[0];
      jSONScanner0.longValue();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2), "new", (-1947), 131, 131, (-5297), (-1536), (-1482), 1475, (-5297), 1475, 1158, (-1947));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1947
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "exepct '[', but ";
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("exepct '[', but ", 0);
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      char char0 = 'K';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.stringVal();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteNullBooleanAsFalse");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(45380);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '6');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken();
      assertEquals(9, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" s)<?]wh#N");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
      
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(711);
      jSONScanner0.scanEnum(class0, symbolTable0, 'A');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.token();
      Feature feature0 = Feature.CustomMapDeserializer;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(6, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(VJcq6u", (-346));
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. y
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SortFeidFastMatch");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("!2^K&Y:w9p4", (-2));
      char[] charArray1 = new char[6];
      charArray1[0] = '@';
      charArray1[1] = 'v';
      charArray1[2] = '!';
      charArray1[3] = 'P';
      charArray1[4] = '9';
      charArray1[5] = 'i';
      jSONScanner0.scanFieldFloatArray2(charArray1);
      jSONScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.putChar('O');
      jSONScanner0.isBlankInput();
      char[] charArray0 = null;
      jSONScanner0.close();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/S<PT");
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      jSONScanner0.scanFieldDecimal(charArray0);
      char char0 = 'f';
      jSONScanner0.scanType("/S<PT");
      jSONScanner0.scanDate('f');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("InternFieldNames");
      SymbolTable symbolTable0 = new SymbolTable(1823);
      char char0 = 'D';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'D');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = '^';
      charArray0[2] = '5';
      charArray0[3] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      char[] charArray1 = new char[7];
      charArray1[0] = 'w';
      charArray1[1] = '/';
      charArray1[2] = 'w';
      charArray1[3] = '/';
      charArray1[4] = '5';
      charArray1[5] = '/';
      charArray1[6] = '5';
      SymbolTable symbolTable0 = new SymbolTable(36);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray1, 101, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$ref");
      jSONScanner0.setToken((-1001));
      jSONScanner0.scanIdent();
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(18, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".class", 891);
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.eofPos = 891;
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanDate('{');
      jSONScanner0.pos = 91;
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      charArray0[7] = '{';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanDate('{');
      char[] charArray1 = new char[5];
      charArray1[0] = '{';
      charArray1[1] = '{';
      charArray1[2] = '{';
      charArray1[3] = '{';
      charArray1[4] = '{';
      jSONScanner0.scanFieldFloatArray2(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONLexerBase.isWhitespace('n');
      JSONScanner jSONScanner0 = new JSONScanner("Set", 885);
      jSONScanner0.scanBoolean('[');
      Feature feature0 = Feature.AllowISO8601DateFormat;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      assertEquals(885, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!fn:9aQ&B)OPwI");
      jSONScanner0.setToken(1592);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x0[d0(o");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      jSONScanner0.scanString('z');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PrettyFormat");
      JSONScanner jSONScanner1 = new JSONScanner("PrettyFormat");
      jSONScanner1.ch = '_';
      jSONScanner1.intValue();
      jSONScanner1.scanISO8601DateIfMatch(false);
      jSONScanner1.subString(0, 0);
      jSONScanner1.scanType("-7BJIk8_(&kvWQZ#P");
      jSONScanner1.nextToken(0);
      JSONScanner jSONScanner2 = new JSONScanner("");
      jSONScanner2.scanDate('f');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jaEa.awt.F\"t");
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = 'K';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanString();
      jSONScanner0.getLocale();
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.isEnabled((-2364), (-639));
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "yA\\Mdr\"=";
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      int int0 = 12;
      jSONScanner0.nextToken(8);
      int int1 = 2615;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = ';';
      charArray0[3] = '`';
      charArray0[4] = 'm';
      charArray0[5] = 'Z';
      charArray0[6] = ',';
      charArray0[7] = 'j';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 933);
      jSONReaderScanner0.nextToken(1914);
      assertEquals(';', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1561);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WcCviAbxG67'g");
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[2];
      charArray1[0] = 'm';
      charArray1[1] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 0, 0);
      SymbolTable symbolTable0 = new SymbolTable(11);
      jSONReaderScanner0.addSymbol(0, 167, 127, symbolTable0);
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('m');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match m - c, info : pos 1, json : WcCviAbxG67'g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WcCviAbxG67'g");
      jSONScanner0.scanUUID('b');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONScanner jSONScanner0 = new JSONScanner(" (x<C");
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanType(" (x<C");
      jSONScanner0.nextToken((-1205));
      Date date0 = null;
      try {
        date0 = new MockDate(" (x<C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      assertEquals(6, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.sp = (-892);
      jSONScanner0.longValue();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-892));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=", 512);
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals(512, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'2tJ]K1q+", (-175));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'S';
      charArray0[2] = ' ';
      charArray0[3] = '>';
      charArray0[2] = '&';
      charArray0[5] = 'T';
      charArray0[6] = '|';
      charArray0[7] = '\"';
      charArray0[8] = 'U';
      boolean boolean0 = JSONLexerBase.isWhitespace(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[QF2zWCvx'OaT{T&uT");
      jSONReaderScanner0.nextIdent();
      assertEquals(14, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("txSB");
      jSONScanner0.indexOf('O', (-1014));
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDouble('O');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("GGi5ICNT2:g*zq*x");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      jSONScanner0.scanStringArray((Collection<String>) null, '3');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextIdent();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONLexerBase.isWhitespace(' ');
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = '?';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, (-2753));
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 20);
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "5f7{-^";
      int int0 = (-1408);
      JSONScanner jSONScanner0 = new JSONScanner("5f7{-^", (-1408));
      char[] charArray0 = new char[3];
      char char0 = 'c';
      charArray0[0] = 'c';
      jSONScanner0.next();
      charArray0[1] = 'd';
      charArray0[2] = '~';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONLexerBase.isWhitespace('h');
      StringReader stringReader0 = new StringReader("EOF error");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      SymbolTable symbolTable0 = new SymbolTable(3313);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteSlashAsSpecial");
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONScanner0.scanStringArray(set0, ';');
      jSONScanner0.longValue();
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDate(';');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GGi5ICNT2:g*zq*x");
      int int0 = 75;
      jSONReaderScanner0.isEnabled(75);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '@');
      jSONReaderScanner0.indexOf('Q', 75);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("GGi5ICNT2:g*zq*x", (-612));
      jSONReaderScanner1.next();
      int int1 = (-2163);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 13);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('{');
      assertEquals(13, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-610));
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = 'M';
      charArray0[2] = '%';
      charArray0[3] = 'E';
      charArray0[4] = 'e';
      charArray0[5] = '`';
      charArray0[6] = '\"';
      charArray0[7] = '{';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanInt('2');
      char[] charArray1 = new char[6];
      charArray1[0] = '2';
      charArray1[1] = '2';
      charArray1[2] = '2';
      charArray1[3] = '2';
      charArray1[4] = '2';
      charArray1[5] = '2';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanType("null");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      JSONScanner jSONScanner1 = new JSONScanner("yAMdr\"=", 0);
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Fot");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanLong('>');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SkipTransientField", 111);
      jSONScanner0.scanString('!');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SortFeidFastMatch");
      char[] charArray0 = new char[0];
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-L(Dx3,`[");
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('N');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = ',';
      charArray0[0] = ',';
      charArray0[1] = 'Z';
      charArray0[2] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.matchStat();
      SymbolTable symbolTable0 = new SymbolTable(386);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("RQtm(Q", 23, 45, 34, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanBoolean('d');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WcCviAbxG67'g");
      JSONScanner jSONScanner1 = new JSONScanner("WcCviAbxG67'g", 120);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      jSONScanner1.scanFieldDouble(charArray0);
      jSONScanner1.matchStat = (-248);
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SkipTransientField", 111);
      jSONScanner0.scanString('4');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S");
      JSONScanner jSONScanner1 = new JSONScanner("S", 0);
      jSONScanner1.nextToken();
      assertEquals(18, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" u9k:");
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONLexerBase.isWhitespace('n');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wccviabxg67", 1911);
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('f');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match f - w, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hqLB8i/KYTZQHbBZ", 9988);
      char[] charArray0 = new char[3];
      jSONScanner0.np = 9988;
      jSONScanner0.eofPos = 119;
      charArray0[0] = '#';
      charArray0[1] = '3';
      jSONScanner0.putChar('#');
      jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.matchStat);
      
      charArray0[2] = 'i';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.token();
      int int0 = jSONScanner0.getFeatures();
      assertEquals(9988, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^:t-h`wHO%cW", 0);
      jSONReaderScanner0.bytesValue();
      JSONScanner jSONScanner0 = new JSONScanner("^:t-h`wHO%cW");
      char[] charArray0 = new char[1];
      char char0 = 'a';
      charArray0[0] = 'a';
      jSONScanner0.scanFieldString(charArray0);
      char char1 = 'X';
      String string0 = "_";
      int int1 = (-419);
      int int2 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "_", 0, 0, 0, 1220, (-419), 1220, 0, (-419), 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal daylight saving value: 0
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GGi5ICNT2:g*zq*x");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-479));
      jSONScanner0.nextToken();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'S';
      charArray0[2] = ' ';
      charArray0[3] = '>';
      charArray0[4] = '&';
      charArray0[5] = 'T';
      charArray0[6] = '|';
      charArray0[7] = '\"';
      charArray0[8] = 'U';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      String string0 = jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals("Unknown", string0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONLexerBase.isWhitespace('A');
      JSONScanner jSONScanner0 = new JSONScanner("zx", 6);
      jSONScanner0.scanDecimal('A');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-479));
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "'4kPyBmSt@e>`'VU";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'4kPyBmSt@e>`'VU", 102);
      jSONReaderScanner0.token();
      jSONReaderScanner0.close();
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('c', 110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/S<PT");
      JSONScanner jSONScanner1 = new JSONScanner("+");
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldFloatArray(charArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/S<PT");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'd';
      charArray0[2] = '6';
      charArray0[3] = '%';
      charArray0[4] = 'c';
      charArray0[5] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 93);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/S<PT");
      JSONScanner jSONScanner1 = new JSONScanner("+", 0);
      jSONScanner1.scanISO8601DateIfMatch(true);
      jSONScanner1.resetStringPosition();
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldFloatArray(charArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":");
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int[] intArray0 = JSONLexerBase.digits;
      jSONReaderScanner0.nextTokenWithColon();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Bq");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONLexerBase.isWhitespace('');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'S';
      charArray0[2] = ' ';
      char char0 = '>';
      charArray0[3] = '>';
      char char1 = '&';
      charArray0[4] = '&';
      charArray0[5] = 'T';
      charArray0[6] = '|';
      char char2 = '\"';
      charArray0[7] = 'S';
      charArray0[8] = 'U';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.tokenName();
      char char3 = ']';
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WcCviAbxG67'g");
      jSONScanner0.putChar('R');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SortFeidFastMatch");
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '*';
      charArray0[2] = 'l';
      charArray0[3] = 'u';
      charArray0[4] = '=';
      charArray0[5] = '1';
      charArray0[6] = 'x';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.subString(118, 91);
      jSONReaderScanner0.setToken(564);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tre");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('J');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = 'E';
      charArray0[2] = '9';
      charArray0[3] = '!';
      charArray0[4] = 'c';
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONScanner0.scanFieldStringArray(charArray0, 13, symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'B';
      charArray0[2] = 'N';
      charArray0[3] = 'l';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'c';
      charArray0[8] = 'N';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 9);
      jSONScanner0.nextToken();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000");
      jSONScanner0.nextToken();
      assertTrue(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDecimal('y');
      int int0 = 55296;
      jSONScanner0.features = 55296;
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zx~p!)");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zx~p!)", 1413);
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'W';
      jSONReaderScanner0.stringVal();
      charArray0[2] = '%';
      charArray0[3] = '3';
      charArray0[4] = 'K';
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"zx\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "java.time.ZoneId";
      JSONScanner jSONScanner0 = new JSONScanner("java.time.ZoneId");
      int int0 = 32;
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONScanner0.scanNumber();
      jSONScanner0.scanDouble('C');
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanDate('~');
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = '~';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, (-1), (-1), 104);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONLexerBase.isWhitespace('w');
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65279);
      jSONReaderScanner0.scanInt('n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tre");
      char char0 = '&';
      JSONLexerBase.isWhitespace('&');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONLexerBase.isWhitespace('C');
      JSONScanner jSONScanner0 = new JSONScanner("null", 121);
      jSONScanner0.info();
      jSONScanner0.nextToken();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u~e)");
      jSONScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.getCurrent();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IgnoreNotMatch");
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{VGRj((s)AqQH4F\"66P");
      SymbolTable symbolTable0 = new SymbolTable(1374);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("r[,H%4");
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'V';
      charArray0[2] = '[';
      charArray0[3] = '%';
      charArray0[4] = 'M';
      charArray0[5] = 'b';
      jSONScanner0.setToken(51068);
      charArray0[6] = 'M';
      jSONScanner0.scanFieldDecimal(charArray0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(75);
      jSONScanner0.scanEnum(class0, symbolTable0, '[');
      assertEquals(51068, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 7;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("54-7ki@:=Cy{ITx.^", 7);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(55232);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 5, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("y!Mdr r");
      jSONScanner0.nextToken(118);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GGi5ICNT2:g*zq*x");
      char[] charArray0 = new char[4];
      char char0 = '>';
      charArray0[0] = '>';
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      char char1 = '9';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. G
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support type ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%6pIO9E");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '\"');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/S<PT");
      jSONScanner0.scanISO8601DateIfMatch(false);
      char char0 = 'f';
      jSONScanner0.scanType("/S<PT");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      jSONScanner0.scanString();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONLexerBase.isWhitespace(',');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P-o+|5ZW%");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.scanDecimal('7');
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2639), "V");
      jSONScanner0.skipWhitespace();
      jSONScanner0.setTimeZone(simpleTimeZone0);
      JSONScanner jSONScanner1 = new JSONScanner("V", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace(')');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      jSONReaderScanner0.sp = 18;
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. )
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GGi5ICNT2:g*zq*x");
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '9';
      charArray0[2] = '!';
      charArray0[3] = ' ';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('N');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")w0aQ;`#8!,$.,=i");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(2053);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - w, info : pos 1, json : )w0aQ;`#8!,$.,=i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, Integer.MAX_VALUE);
      jSONReaderScanner0.np = Integer.MAX_VALUE;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ErxohW");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('}');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONLexerBase.isWhitespace('H');
      JSONScanner jSONScanner0 = new JSONScanner("2]3dUD_Yd:b", 1537);
      jSONScanner0.scanFloat('H');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("erxhw");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.lexError("eJ>xiSvx6q", (Object[]) null);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('=');
      jSONScanner0.isRef();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONLexerBase.isWhitespace('p');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yMdr\"r", (-1876));
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals((-1876), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMr\"=");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WcCviAbxG67'g");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('m');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match m - W, info : pos 0, json : WcCviAbxG67'g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONLexerBase.isWhitespace('7');
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19, 171);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("<_}", (-1615084098));
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", 68);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jSONScanner0.locale = locale0;
      jSONScanner0.scanNumber();
      jSONScanner0.bytesValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "yA\\Mdr\"=";
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("exVCF.F;>g\"C%");
      jSONScanner0.nextToken();
      jSONScanner0.scanNumber();
      boolean boolean0 = jSONScanner0.scanBoolean('[');
      assertEquals(2, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/S<PT");
      char[] charArray0 = new char[1];
      jSONScanner0.scanType("/S<PT");
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('f');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '+';
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WcCviAbxG67'g");
      jSONScanner0.putChar('v');
      jSONScanner0.longValue();
      PipedReader pipedReader0 = new PipedReader(67);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONLexerBase.isWhitespace(' ');
      StringReader stringReader0 = new StringReader("unclosed.str.lit");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 2037);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONScanner0.scanFloat('D');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WcCviAbxG67'g");
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = ')';
      charArray0[2] = ',';
      charArray0[3] = '%';
      charArray0[4] = 'W';
      charArray0[5] = 'F';
      charArray0[6] = '*';
      charArray0[7] = 'f';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      boolean boolean0 = JSONLexerBase.isWhitespace('4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", pos ", (-1807));
      char[] charArray0 = new char[8];
      jSONScanner0.matchField(charArray0);
      charArray0[0] = '(';
      charArray0[1] = '5';
      charArray0[2] = 'o';
      charArray0[3] = '';
      charArray0[4] = '|';
      charArray0[5] = 'z';
      charArray0[6] = '{';
      charArray0[7] = '*';
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONLexerBase.isWhitespace(' ');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*G ", 1413);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(1413);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'H');
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = '7';
      charArray0[2] = 'V';
      charArray0[3] = 'g';
      charArray0[4] = 'y';
      charArray0[5] = '\\';
      charArray0[6] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 121, 121);
      jSONReaderScanner0.scanLong('7');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(121, 121, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4u'eN}:q\"");
      jSONScanner0.scanString();
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g;]Zs(ST`C.y");
      jSONScanner0.next();
      jSONScanner0.nextToken();
      assertEquals(24, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ErxohW");
      Class<Object> class0 = Object.class;
      jSONScanner0.scanInt('i');
      SymbolTable symbolTable0 = new SymbolTable(1796);
      jSONScanner0.scanEnum(class0, symbolTable0, 'l');
      jSONScanner0.scanFloat('&');
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O)p!uHFVJ6rL@FF,/");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(120);
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '=';
      charArray0[2] = '!';
      charArray0[3] = '9';
      charArray0[4] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('9');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",N'wn*ON.M-g{Q");
      jSONScanner0.sp = 10;
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,N'wn*ON.M
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/S<PT");
      jSONScanner0.token = 232;
      jSONScanner0.scanType("/S<PT");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      jSONScanner0.token = 108;
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.getCurrent();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken();
      assertEquals(6, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONLexerBase.isWhitespace('i');
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      int int0 = 43;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      jSONReaderScanner0.scanBoolean('6');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(43, 43, 43, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wccviabg67");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('N');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support : ");
      JSONScanner jSONScanner1 = new JSONScanner("@}mCdR.3Y:]Y*A(D{", 46);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(118);
      jSONScanner1.scanEnum(class0, symbolTable0, '8');
      // Undeclared exception!
      try { 
        jSONScanner1.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-365);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-365));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SkipTransientField", 111);
      JSONScanner jSONScanner1 = new JSONScanner("K.1{][Z");
      jSONScanner1.scanString('f');
      jSONScanner0.scanType((String) null);
      jSONScanner1.scanDate('b');
      SymbolTable symbolTable0 = new SymbolTable(7);
      // Undeclared exception!
      try { 
        jSONScanner1.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GGi5ICNT2:g*zq*x");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[4];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      charArray0[0] = '>';
      charArray0[1] = '9';
      charArray0[2] = '!';
      charArray0[3] = ' ';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getTimeZone();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFloat('r');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wccviabxg67");
      JSONLexerBase.isWhitespace('S');
      boolean boolean0 = jSONScanner0.isEnabled((-2841));
      assertTrue(boolean0);
      
      jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("erxohw");
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanUUID('3');
      jSONScanner0.setToken(31);
      assertEquals(31, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONScanner jSONScanner0 = new JSONScanner(" (x<C");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.tokenName();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-1205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken((-3013));
      long long0 = jSONScanner0.longValue();
      assertEquals(23, jSONScanner0.token());
      assertEquals(7577903782L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanBoolean('y');
      jSONScanner0.features = 55296;
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'b';
      charArray0[2] = '^';
      charArray0[3] = '0';
      charArray0[4] = ' ';
      char char0 = '*';
      charArray0[5] = '*';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONLexerBase.isWhitespace('>');
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanDouble('2');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GGi5ICNT2:g*zq*x");
      jSONReaderScanner0.tokenName();
      char[] charArray0 = new char[4];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      jSONScanner0.putChar('\'');
      int int0 = jSONScanner0.intValue();
      assertEquals(73, int0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(73L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONLexerBase.isWhitespace('P');
      JSONScanner jSONScanner0 = new JSONScanner("wccviabxg67");
      jSONScanner0.eofPos = 288;
      assertEquals(0, jSONScanner0.matchStat());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = ']';
      charArray0[2] = '}';
      charArray0[3] = '@';
      charArray0[4] = '}';
      charArray0[5] = ')';
      charArray0[6] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 104, 101);
      double double0 = jSONReaderScanner0.scanDouble(';');
      assertEquals(101, jSONReaderScanner0.getFeatures());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = 7;
      PipedReader pipedReader0 = new PipedReader(7);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("j[@(u>s");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{VGRj((s)AqQH4F\"66P");
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'x';
      charArray0[2] = 'v';
      charArray0[3] = 'f';
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = '!';
      charArray0[2] = '6';
      charArray0[3] = '.';
      charArray0[4] = ')';
      charArray0[5] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 520, 520);
      SymbolTable symbolTable0 = new SymbolTable(4172);
      String string0 = jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(520, jSONReaderScanner0.getFeatures());
      assertEquals("W", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Or)p!uiHJ6rL@FFQ/");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = '0';
      charArray0[2] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65, 65);
      jSONReaderScanner0.scanNumber();
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 99;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("eW5cqs[Kg9Dver", 99);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - W, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF");
      jSONScanner0.tokenName();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|*h%b+");
      jSONScanner0.putChar('4');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = null;
      int int0 = 391;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~M");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1561);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("&BD6v)D0");
      jSONScanner0.stringDefaultValue();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/S<PT");
      jSONScanner0.scanType("/S<PT");
      jSONScanner0.scanDate('f');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      JSONScanner jSONScanner1 = new JSONScanner("'2v/z-VNv!", 0);
      // Undeclared exception!
      try { 
        jSONScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONLexerBase.isWhitespace('%');
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = '%';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1891);
      jSONReaderScanner0.scanInt(')');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%6pIO9E");
      JSONScanner jSONScanner1 = new JSONScanner("%6pIO9E");
      // Undeclared exception!
      try { 
        jSONScanner1.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.nextToken();
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$ref", 26);
      char char0 = '`';
      char char1 = 'I';
      char char2 = '*';
      SymbolTable symbolTable0 = new SymbolTable(21);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONLexerBase.isWhitespace('$');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      jSONReaderScanner0.scanFieldInt(charArray0);
      int int0 = (-4134);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('\u0014');
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not", 103);
      long long0 = jSONReaderScanner0.scanLong('\u0014');
      assertEquals(103, jSONReaderScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "PrettyFormat";
      JSONScanner jSONScanner0 = new JSONScanner("PrettyFormat");
      char char0 = '%';
      jSONScanner0.putChar('%');
      jSONScanner0.isBlankInput();
      char[] charArray0 = null;
      jSONScanner0.close();
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&u.rjyT<X<|j\"DJ2 `");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.np = (-517);
      jSONReaderScanner0.nextIdent();
      assertEquals('r', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q");
      SymbolTable symbolTable0 = new SymbolTable(119);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char");
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanType("yq");
      jSONScanner0.stringVal();
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.np = (-4407);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$J%)2JFIv^mv ");
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanBoolean('W');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanDecimal('j');
      jSONScanner0.token();
      jSONReaderScanner0.resetStringPosition();
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.next();
      jSONScanner0.pos();
      jSONScanner0.bytesValue();
      assertEquals('l', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WcCviAbxG67");
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jaEa.awt.F\"t");
      jSONScanner0.scanString();
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.nextToken((-515));
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")");
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WcCviAbxG67'g");
      jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('N');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.skip(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('Z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match Z - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONLexerBase.isWhitespace('\u0014');
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = '\u0014';
      charArray0[2] = '\u0014';
      charArray0[3] = '\u0014';
      charArray0[4] = '\u0014';
      charArray0[5] = '\u0014';
      charArray0[6] = '\u0014';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 113, 237);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WcCviAbxG67'g");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONLexerBase.isWhitespace('\u0012');
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0012';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1818);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanUUID('Z');
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Cz \"2#Ef/=( /T");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanString();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|'\"yG=79)C]7.");
      jSONScanner0.scanString();
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = 'c';
      charArray0[2] = 'U';
      charArray0[3] = '=';
      charArray0[4] = 'W';
      charArray0[5] = 'v';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.nextIdent();
      jSONScanner0.tokenName();
      assertEquals('=', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("exepct '[', but ", 0);
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      charArray0[0] = '5';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=`HhSXpS5gr");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanInt('7');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanString('s');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-732));
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      JSONScanner jSONScanner1 = new JSONScanner("scan true error");
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = ')';
      charArray0[2] = '\'';
      charArray0[3] = 'j';
      Class<Object> class0 = Object.class;
      jSONScanner1.scanEnum(class0, (SymbolTable) null, 't');
      charArray0[4] = 'i';
      charArray0[5] = 'v';
      Class<String> class1 = String.class;
      jSONScanner1.scanFieldStringArray(charArray0, class1);
      jSONScanner1.longValue();
      boolean boolean0 = JSONScanner.checkDate('u', '5', ',', 'u', 'w', 'w', (-2), 3681);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" (x<C");
      int int0 = (-1205);
      jSONReaderScanner0.isEnabled((-1205));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '@');
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '\\';
      charArray0[2] = 'u';
      charArray0[3] = '^';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state.  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONLexerBase.isWhitespace('w');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 234);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('w');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("exepct '[', but ", 0);
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      charArray0[0] = '5';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tre");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "tre");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      jSONScanner0.scanInt('`');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("InternFieldNames");
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanString('=');
      jSONScanner0.scanType("");
      jSONScanner0.scanDate('\u0000');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.Rectangle");
      jSONReaderScanner0.scanDate('A');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextIdent();
      assertEquals('.', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&u.rjyT<X<|j\"DJ2 `");
      jSONReaderScanner0.nextIdent();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      jSONScanner0.scanBoolean('w');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Jk", (-1744));
      jSONReaderScanner0.getFeatures();
      // Undeclared exception!
      try { 
        MinguoEra.of(424);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid era: 424
         //
         verifyException("java.time.chrono.MinguoEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("XiZ;f~R(eS~/tjC'8]");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'G');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/S<PT");
      jSONScanner0.bp = 105;
      jSONScanner0.scanString('f');
      jSONScanner0.scanType("/S<PT");
      jSONScanner0.scanDate('f');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Z\"&");
      jSONScanner0.sp = 1848;
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, (-393));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0XJ");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("exepct '[', but ", 0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      jSONReaderScanner0.scanStringArray(set0, '\u008A');
      int[] intArray0 = JSONLexerBase.digits;
      jSONReaderScanner0.charAt(0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Cz \"2#Ef/=( /T");
      JSONLexerBase.isWhitespace('!');
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Or)p!uHJ6r\"L@FFQ/");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale.forLanguageTag("Or)p!uHJ6r\"L@FFQ/");
      jSONScanner0.setLocale(locale0);
      jSONScanner0.nextToken();
      assertEquals('r', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wccviabg67");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 57);
      jSONReaderScanner0.scanDate('K');
      jSONReaderScanner0.stringVal();
      assertEquals(57, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale.lookup(linkedList0, arrayList0);
      jSONScanner0.setLocale((Locale) null);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-2513));
      Feature feature0 = Feature.OrderedField;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z,D]1KKNYV2");
      jSONReaderScanner0.scanInt('[');
      charArray0[1] = '';
      charArray0[2] = 'v';
      charArray0[3] = 'A';
      charArray0[4] = 'H';
      charArray0[5] = ':';
      charArray0[6] = '&';
      charArray0[7] = 'F';
      charArray0[8] = 'O';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" s)<?]wh#N");
      jSONScanner0.intValue();
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char char0 = 'd';
      JSONLexerBase.isWhitespace('d');
      char[] charArray0 = new char[4];
      charArray0[2] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      int int0 = 78;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('d');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match d - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONLexerBase.isWhitespace('d');
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78);
      jSONReaderScanner0.nextTokenWithChar('d');
      jSONReaderScanner0.setToken(78);
      jSONReaderScanner0.tokenName();
      assertEquals(78, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONLexerBase.isWhitespace('V');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G_\"}2+/aKz#'h+M+'!");
      jSONReaderScanner0.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = 'R';
      charArray0[2] = 'f';
      charArray0[3] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 112);
      jSONReaderScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{VGRj((s)AqQH4F\"66P");
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = 1526;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":UynU*", 1526);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. U
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DisabeASM");
      jSONScanner0.nextIdent();
      jSONScanner0.scanUUID('6');
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(111, 32, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Cz \"2#Ef/=( /T");
      jSONScanner0.scanString();
      assertEquals('2', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}T<dk{9F4dKL2!HTgI");
      jSONScanner0.scanIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals('<', jSONScanner0.getCurrent());
      assertEquals(806L, long0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WCviAbxG67'");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(6);
      jSONScanner0.scanEnum(class0, symbolTable0, '[');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'd';
      charArray0[2] = '6';
      charArray0[3] = '%';
      charArray0[4] = 'c';
      charArray0[5] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 93);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q@(ks8");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s4OO^QN");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xFXpwsy#=';");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. F
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-3706);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-3706));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/N?x_~]kX4U+", 83);
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(83, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<D<,'qb[\fe_%?C`GS");
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      JSONScanner jSONScanner0 = new JSONScanner(", pos ");
      jSONScanner0.info();
      charArray0[1] = 'y';
      charArray0[2] = 'a';
      charArray0[3] = 'x';
      charArray0[4] = 'y';
      charArray0[5] = '$';
      charArray0[6] = 'o';
      charArray0[7] = 'I';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1089), (-1089));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      char char0 = 'Q';
      JSONLexerBase.isWhitespace('Q');
      int int0 = 976;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Npk", 976);
      jSONReaderScanner0.scanLong('b');
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'Q';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 86, 976);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B");
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NevNia/7RRX$RQuz");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('~');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yAMdr\"=");
      jSONScanner0.nextIdent();
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(83, "");
      simpleTimeZone0.getOffset(180L);
      jSONScanner0.setTimeZone(simpleTimeZone0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('W', 'W', 'a', 'a', '%');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONLexerBase.isWhitespace('r');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}", (-136));
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = '.';
      jSONReaderScanner0.nextToken((-136));
      SymbolTable symbolTable0 = new SymbolTable(50900);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 39, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error");
      jSONReaderScanner0.setToken(0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isEnabled(74, 21);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GGi5ICNT2:g*zq*x");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.info();
      char[] charArray0 = new char[4];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eKek!;dN64W_Q");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
