/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 06:37:40 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CheckClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.functions.SGD;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.SimpleKMeans;
import weka.core.CheckScheme;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckClassifier_ESTest extends CheckClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      checkClassifier0.datasetIntegrity(false, true, false, false, false, false, 0, false, false);
      checkClassifier0.updatingEquality(true, false, false, false, false, true, 0);
      checkClassifier0.testToString();
      Random.setNextRandom(2494);
      RandomForest randomForest0 = new RandomForest();
      int int0 = 0;
      checkClassifier0.setNumInstances(0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.setClassifier(randomForest0);
      CheckClassifier checkClassifier2 = new CheckClassifier();
      checkClassifier0.getOptions();
      checkClassifier0.getClassifier();
      // Undeclared exception!
      try { 
        checkClassifier1.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      checkClassifier0.setDebug(true);
      checkClassifier0.printAttributeSummary(true, true, true, true, true, true, 39);
      checkClassifier0.printAttributeSummary(false, true, true, false, true, true, 2241);
      checkClassifier0.testToString();
      Random.setNextRandom(39);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.getOptions();
      String[] stringArray0 = new String[0];
      checkClassifier1.setOptions(stringArray0);
      int int0 = 1088;
      checkClassifier1.setNumNominal(39);
      int int1 = 2097;
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      checkClassifier0.datasetIntegrity(false, true, false, false, false, false, 0, false, false);
      checkClassifier0.updatingEquality(true, false, false, false, false, false, 0);
      checkClassifier0.setNumInstances(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      checkClassifier0.correctBuildInitialisation(false, false, false, true, true, true, 0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.declaresSerialVersionUID();
      checkClassifier1.getOptions();
      checkClassifier1.setWordSeparators(":");
      checkClassifier0.setNumNominal(1);
      Instances instances0 = checkClassifier0.makeTestDataset(1, 1, 210, 1088, 0, 2097, 0, 0, 2, false);
      checkClassifier0.getClassifier();
      checkClassifier1.getRevision();
      checkClassifier0.setNumDate(1088);
      checkClassifier0.testsPerClassType(1, true, false, false);
      checkClassifier1.getRevision();
      checkClassifier1.canTakeOptions();
      RandomForest randomForest0 = new RandomForest();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      try { 
        checkClassifier1.testWRTZeroR(randomForest0, evaluation0, instances1, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      checkClassifier0.setDebug(true);
      checkClassifier0.printAttributeSummary(true, true, true, true, true, true, 2);
      checkClassifier0.printAttributeSummary(false, false, false, false, true, false, 2241);
      checkClassifier0.testToString();
      Random.setNextRandom(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      checkClassifier0.datasetIntegrity(true, false, true, true, true, false, 2, false, true);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.getOptions();
      String[] stringArray0 = new String[0];
      checkClassifier1.setOptions(stringArray0);
      int int0 = 1088;
      checkClassifier1.setNumNominal(2);
      int int1 = 2097;
      int int2 = 1;
      int int3 = 26;
      int int4 = 24;
      int int5 = 40;
      int int6 = 645;
      checkClassifier0.setNumDate(2);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        checkClassifier1.testWRTZeroR((Classifier) null, evaluation0, instances0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      checkClassifier0.datasetIntegrity(true, true, false, false, false, true, 0, false, false);
      checkClassifier0.updatingEquality(true, true, true, false, true, false, 0);
      checkClassifier0.setNumInstances(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      boolean[] booleanArray0 = checkClassifier0.correctBuildInitialisation(true, false, false, true, true, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.declaresSerialVersionUID();
      checkClassifier1.setNumNumeric(34);
      String[] stringArray0 = checkClassifier1.getOptions();
      Instances instances0 = checkClassifier0.makeTestDataset(1, 1, 210, 1088, 0, 2097, 0, 0, 2, false);
      assertEquals(1, instances0.numInstances());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(3395, instances0.classIndex());
      
      Classifier classifier0 = checkClassifier0.getClassifier();
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      checkClassifier1.getRevision();
      checkClassifier0.testsPerClassType(1, true, false, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.getRevision();
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.setOptions(stringArray0);
      assertEquals(18, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      checkClassifier0.datasetIntegrity(true, true, false, false, false, true, 0, false, false);
      checkClassifier0.updatingEquality(true, true, true, false, true, false, 0);
      checkClassifier0.setNumInstances(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      checkClassifier0.correctBuildInitialisation(true, false, false, true, true, true, 0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.declaresSerialVersionUID();
      checkClassifier1.getOptions();
      checkClassifier0.makeTestDataset(1, 1, 210, 1088, 0, 2097, 0, 0, 2, false);
      checkClassifier1.canHandleZeroTraining(true, true, true, true, true, false, 0);
      checkClassifier0.getClassifier();
      checkClassifier1.getRevision();
      checkClassifier0.testsPerClassType(1, true, false, false);
      checkClassifier0.weightedInstancesHandler();
      String string0 = checkClassifier1.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      M5Rules m5Rules0 = new M5Rules();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.getOptions();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      checkClassifier2.setNumNominal(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      checkClassifier1.setClassifier((Classifier) null);
      checkClassifier0.setNumString(0);
      checkClassifier1.canTakeOptions();
      CheckClassifier checkClassifier3 = new CheckClassifier();
      checkClassifier1.getOptions();
      // Undeclared exception!
      try { 
        checkClassifier3.instanceWeights(false, false, true, false, false, true, 13);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '13' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier.main((String[]) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)4;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setDebug(true);
      checkClassifier0.getWordSeparators();
      checkClassifier0.printAttributeSummary(true, true, true, true, false, false, 2);
      checkClassifier0.testToString();
      Random.setNextRandom(2);
      boolean[] booleanArray0 = checkClassifier0.canHandleZeroTraining(false, true, true, true, true, false, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      CheckClassifier checkClassifier1 = new CheckClassifier();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      AbstractClassifier.runClassifier(randomSubSpace0, (String[]) null);
      randomSubSpace0.getOptions();
      randomSubSpace0.getOptions();
      checkClassifier1.getOptions();
      boolean[] booleanArray1 = checkClassifier1.canHandleZeroTraining(false, true, false, false, true, false, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      checkClassifier0.getClassifier();
      checkClassifier0.getRevision();
      checkClassifier0.testsPerClassType(0, true, true, false);
      boolean[] booleanArray2 = checkClassifier1.weightedInstancesHandler();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      checkClassifier0.testToString();
      checkClassifier0.updatingEquality(true, true, true, false, true, false, 0);
      checkClassifier0.setNumInstances(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      checkClassifier0.correctBuildInitialisation(true, false, false, true, true, true, 0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.declaresSerialVersionUID();
      checkClassifier0.updatingEquality(false, false, false, true, true, true, 0);
      checkClassifier0.weightedInstancesHandler();
      // Undeclared exception!
      try { 
        checkClassifier1.canPredict(true, false, true, true, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Random.setNextRandom(2);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumRelational(2597);
      Instances instances0 = checkClassifier0.makeTestDataset(2, 2, 1960, 4, 0, 2, 4, 4, 0, false);
      assertEquals(1970, instances0.classIndex());
      assertEquals(1, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2.0, instances0.sumOfWeights(), 0.01);
      
      Random.setNextRandom(96);
      boolean[] booleanArray0 = checkClassifier0.declaresSerialVersionUID();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      int int0 = 0;
      boolean boolean0 = false;
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean1 = true;
      checkClassifier0.testsPerClassType(0, true, false, false);
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, true, false, true, (-1061));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1061' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      checkClassifier0.canTakeOptions();
      CheckClassifier.main((String[]) null);
      checkClassifier0.testToString();
      checkClassifier0.setDebug(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2;
      checkClassifier0.printAttributeSummary(true, true, true, true, false, false, 2);
      Random.setNextRandom(2);
      RandomForest randomForest0 = new RandomForest();
      int int1 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      checkClassifier0.setClassifier(randomForest0);
      Utils.SMALL = 2993.7967;
      boolean boolean1 = true;
      checkClassifier0.getOptions();
      checkClassifier0.doTests();
      Instances instances0 = null;
      checkClassifier0.multiInstanceHandler();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckClassifier.main((String[]) null);
      RandomForest randomForest0 = new RandomForest();
      int int0 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.makeTestDataset(1236, 0, 0, 923, 923, 115, 35, 35, 0, true);
      String[] stringArray0 = checkClassifier0.getOptions();
      checkClassifier0.setOptions(stringArray0);
      boolean boolean0 = true;
      int int1 = 2816;
      checkClassifier0.makeTestDataset(0, 0, 0, 2816, 0, 2816, 2816, 2816, 30, 2816, false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      CheckClassifier.main((String[]) null);
      checkClassifier0.testToString();
      checkClassifier0.setDebug(true);
      int int0 = 2;
      checkClassifier0.printAttributeSummary(true, true, true, true, false, false, 2);
      Random.setNextRandom(2);
      RandomForest randomForest0 = new RandomForest();
      int int1 = 0;
      checkClassifier0.setNumNominal(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      checkClassifier0.setClassifier(randomForest0);
      Utils.SMALL = 2993.7967;
      boolean boolean1 = true;
      checkClassifier0.getOptions();
      checkClassifier0.doTests();
      Instances instances0 = null;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      ZeroR zeroR0 = new ZeroR();
      checkClassifier0.getClassifier();
      checkClassifier0.setNumInstances(0);
      checkClassifier0.instanceWeights(true, true, true, false, true, false, 0);
      String[] stringArray0 = checkClassifier0.getOptions();
      CheckClassifier.main(stringArray0);
      checkClassifier0.testsPerClassType(0, false, true, false);
      checkClassifier0.setOptions(stringArray0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      randomSubSpace0.setSeed(2032);
      randomSubSpace0.getOptions();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      CheckClassifier checkClassifier3 = new CheckClassifier();
      checkClassifier3.getOptions();
      // Undeclared exception!
      try { 
        checkClassifier1.updatingEquality(false, true, false, false, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier.main((String[]) null);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setDebug(true);
      checkClassifier0.printAttributeSummary(true, true, true, true, false, false, 2);
      checkClassifier0.testToString();
      Random.setNextRandom(2);
      RandomForest randomForest0 = new RandomForest();
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.setNumNominal(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      checkClassifier0.setClassifier(randomForest0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.canTakeOptions();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      checkClassifier0.canHandleNClasses(true, false, true, false, true, false, 2365);
      // Undeclared exception!
      try { 
        checkClassifier1.updatingEquality(true, true, false, false, false, true, 2365);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '2365' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier.main((String[]) null);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setDebug(true);
      checkClassifier0.printAttributeSummary(true, true, true, true, false, false, 2);
      checkClassifier0.testToString();
      Random.setNextRandom(2);
      RandomForest randomForest0 = new RandomForest();
      checkClassifier0.setClassifier(randomForest0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      CheckClassifier checkClassifier3 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier1.datasetIntegrity(false, false, true, false, true, true, (-1124), false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1124' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier.main((String[]) null);
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setDebug(true);
      checkClassifier0.printAttributeSummary(true, true, true, true, false, false, 2);
      checkClassifier0.testToString();
      Random.setNextRandom(2);
      RandomForest randomForest0 = new RandomForest();
      checkClassifier0.setNumNominal(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      checkClassifier0.setClassifier(randomForest0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.canTakeOptions();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      checkClassifier0.datasetIntegrity(true, false, true, true, true, false, 0, true, false);
      System.setCurrentTimeMillis((-3143L));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier.main((String[]) null);
      checkClassifier0.declaresSerialVersionUID();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      checkClassifier0.setDebug(true);
      int int0 = 2;
      checkClassifier0.printAttributeSummary(true, true, true, true, false, false, 2);
      checkClassifier0.testToString();
      Random.setNextRandom(2);
      RandomForest randomForest0 = new RandomForest();
      int int1 = 0;
      checkClassifier0.setNumNominal(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      checkClassifier0.setClassifier(randomForest0);
      checkClassifier0.canHandleZeroTraining(true, true, true, true, true, false, 2);
      checkClassifier0.printAttributeSummary(true, true, true, false, true, false, 2);
      Evaluation evaluation0 = null;
      CheckScheme.PostProcessor checkScheme_PostProcessor0 = new CheckScheme.PostProcessor();
      Instances instances0 = null;
      checkScheme_PostProcessor0.process((Instances) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-KjlP9QP2$,I");
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = checkClassifier0.getOptions();
      assertEquals(18, stringArray0.length);
      
      boolean[] booleanArray0 = checkClassifier0.declaresSerialVersionUID();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      checkClassifier0.updateableClassifier();
      Instances instances0 = checkClassifier0.makeTestDataset(110, 1, 1, 1, 42, 3, 42, 3, 1, 3, false);
      assertEquals(90, instances0.numAttributes());
      assertEquals(3, instances0.numClasses());
      assertEquals(3, instances0.classIndex());
      assertEquals(1, instances0.numInstances());
      
      checkClassifier0.listOptions();
      boolean[] booleanArray1 = checkClassifier0.updateableClassifier();
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      boolean[] booleanArray0 = checkClassifier0.updatingEquality(false, true, false, false, true, false, 0);
      String[] stringArray0 = new String[7];
      checkClassifier0.setNumString((-94));
      stringArray0[0] = "";
      checkClassifier0.setNumInstances(0);
      stringArray0[1] = "[";
      stringArray0[2] = "j";
      stringArray0[3] = "Premature end of line!";
      stringArray0[4] = "e-aeP?}{abi:p";
      stringArray0[5] = "AUC (area under the ROC curve - discrete class only)";
      stringArray0[6] = " and";
      CheckClassifier.main(stringArray0);
      boolean[] booleanArray1 = checkClassifier0.correctBuildInitialisation(false, false, false, false, false, false, 0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      checkClassifier0.getClassifier();
      checkClassifier0.setSilent(true);
      checkClassifier0.getClassifier();
      boolean boolean0 = false;
      checkClassifier0.instanceWeights(true, true, true, false, false, false, 0);
      String[] stringArray0 = checkClassifier0.getOptions();
      // Undeclared exception!
      try { 
        CheckClassifier.main(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      checkClassifier0.updatingEquality(false, true, false, false, true, false, 0);
      String[] stringArray0 = new String[7];
      checkClassifier0.setNumString((-94));
      stringArray0[0] = "";
      checkClassifier0.setNumInstances(0);
      stringArray0[1] = "";
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Illegal Capacity: -93
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.testToString();
      boolean boolean0 = true;
      boolean boolean1 = false;
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("numeric");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        checkClassifier0.testWRTZeroR(logitBoost0, evaluation0, instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't normalize array. Sum is zero.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      int int0 = 0;
      boolean boolean3 = false;
      boolean boolean4 = false;
      try { 
        checkClassifier0.makeTestDataset((-2537), (-2537), (-2537), (-2537), 0, 0, 18, 1008, (-1337), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -5055
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGD sGD0 = new SGD();
      sGD0.setLearningRate((-1033.36494));
      checkClassifier0.updatingEquality(true, false, true, false, false, true, 0);
      checkClassifier0.setNumInstancesRelational(2942);
      checkClassifier0.canHandleMissing(true, true, true, true, true, false, 1, false, false, 0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      try { 
        checkClassifier0.testWRTZeroR(serializedClassifier0, (Evaluation) null, (Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = (-152);
      checkClassifier0.printAttributeSummary(false, false, false, false, false, false, (-152));
      checkClassifier0.getRevision();
      checkClassifier0.getClassifier();
      checkClassifier0.getClassifier();
      CheckClassifier.main((String[]) null);
      int int1 = 148;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, false, true, true, true, 148);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '148' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGD sGD0 = new SGD();
      checkClassifier0.m_Classifier = (Classifier) sGD0;
      checkClassifier0.getOptions();
      checkClassifier0.testToString();
      checkClassifier0.datasetIntegrity(true, false, false, false, false, true, 3, true, true);
      checkClassifier0.multiInstanceHandler();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, false, false, false, true, false, 47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '47' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      checkClassifier0.m_Classifier = (Classifier) naiveBayesMultinomial0;
      checkClassifier0.getRevision();
      checkClassifier0.datasetIntegrity(false, true, true, false, false, false, 4, false, false);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, false, false, true, false, true, 27, false, true, 27);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '27' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGD sGD0 = new SGD();
      checkClassifier0.m_Classifier = (Classifier) sGD0;
      checkClassifier0.getOptions();
      checkClassifier0.testToString();
      checkClassifier0.datasetIntegrity(true, true, true, true, false, true, 2, false, true);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, true, false, true, true, 3041, true, true, (-2789));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '3041' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      checkClassifier0.canHandleZeroTraining(false, true, false, true, true, true, 0);
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, true, true, true, false, false, 100);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '100' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = checkClassifier0.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      checkClassifier0.m_Classifier = (Classifier) naiveBayesMultinomial0;
      checkClassifier0.getRevision();
      checkClassifier0.getRevision();
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      checkClassifier0.testsPerClassType(0, false, true, true);
      // Undeclared exception!
      try { 
        CheckClassifier.main(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGD sGD0 = new SGD();
      checkClassifier0.m_Classifier = (Classifier) sGD0;
      checkClassifier0.getOptions();
      checkClassifier0.testToString();
      checkClassifier0.doTests();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, true, false, true, true, (-9));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-9' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updateableClassifier();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      String[] stringArray0 = new String[0];
      checkClassifier1.setOptions(stringArray0);
      checkClassifier1.setOptions(stringArray0);
      checkClassifier0.setNumInstancesRelational((-218));
      checkClassifier1.testToString();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      checkClassifier2.getRevision();
      Random.setNextRandom(24);
      // Undeclared exception!
      try { 
        checkClassifier2.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updatingEquality(true, false, false, false, false, false, 0);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.testToString();
      CheckClassifier checkClassifier2 = new CheckClassifier();
      try { 
        checkClassifier2.makeTestDataset(16, (-822), 27, 10, 28, (-321), 28, 10, (-216), 36, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -227
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      checkClassifier0.weightedInstancesHandler();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      checkClassifier0.datasetIntegrity(true, true, false, false, false, false, 0, false, false);
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, true, false, false, true, true, 140);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '140' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 13;
      boolean boolean0 = false;
      boolean boolean1 = false;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        CheckClassifier.main(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      System.setCurrentTimeMillis(681L);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.doesntUseTestClassVal(true, false, false, false, false, false, 3);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier1.correctBuildInitialisation(false, false, false, false, false, false, 4);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = checkClassifier0.canTakeOptions();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier0.testToString();
      try { 
        checkClassifier1.makeTestDataset((-611), (-603), (-603), (-1346), 26, 100, 26, (-611), 26, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1796
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.weightedInstancesHandler();
      try { 
        checkClassifier0.makeTestDataset((-977), (-977), (-977), (-977), (-977), (-977), 33, 4, 33, 6, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3874
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = checkClassifier0.getOptions();
      checkClassifier0.weightedInstancesHandler();
      // Undeclared exception!
      try { 
        CheckClassifier.main(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.updateableClassifier();
      checkClassifier0.canHandleMissing(false, false, false, false, false, false, 4, false, false, 4);
      boolean[] booleanArray1 = checkClassifier0.canTakeOptions();
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      int int0 = 103;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, false, true, false, false, false, 103, false, true, 103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '103' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(false, true, true, true, true, false, 31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '31' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(false, false, true, true, false, false, 1940);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1940' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updateableClassifier();
      checkClassifier0.printAttributeSummary(true, true, true, true, true, true, 1940);
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, true, true, false, true, 3145, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '3145' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      checkClassifier1.updateableClassifier();
      checkClassifier1.getClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, true, false, true, true, true, 1205, false, true, (-1110));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1205' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      boolean[] booleanArray0 = checkClassifier0.canHandleClassAsNthAttribute(true, false, true, false, false, true, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      boolean[] booleanArray1 = checkClassifier0.weightedInstancesHandler();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Locale.getISOCountries();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      checkClassifier0.getRevision();
      boolean[] booleanArray0 = checkClassifier0.correctBuildInitialisation(true, false, false, false, false, false, 4);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = checkClassifier0.canTakeOptions();
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(true, true, false, false, false, 112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '112' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getClassifier();
      try { 
        checkClassifier0.makeTestDataset(5, (-75), 5, 5, (-3292), 31, (-477), (-75), 31, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canTakeOptions();
      checkClassifier0.updateableClassifier();
      checkClassifier0.getClassifier();
      CheckClassifier checkClassifier1 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier1.canHandleMissing(false, true, true, true, false, false, 1789, false, true, (-5724));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1789' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      System.setCurrentTimeMillis((-3738L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getWords();
      checkClassifier0.updateableClassifier();
      checkClassifier0.getClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, true, false, true, false, (-1110), false, false, (-1110));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1110' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      checkClassifier0.getRevision();
      checkClassifier0.correctBuildInitialisation(true, false, false, false, false, false, 4);
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, true, false, true, true, false, (-1324), 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1324' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(true, true, true, true, true, 38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '38' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SGD sGD0 = new SGD();
      sGD0.toString();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canHandleOnlyClass(false, false, false, true, true, 0);
      checkClassifier0.setClassifier(sGD0);
      assertEquals("The regularization constant. (default = 0.0001)", sGD0.lambdaTipText());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      try { 
        checkClassifier0.makeTestDataset(329, 68, (-3178), (-2197), (-3178), 68, (-2197), 3410, 3410, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      checkClassifier0.doesntUseTestClassVal(false, true, false, true, true, false, 0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(true, true, false, true, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updateableClassifier();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setSilent(true);
      CheckClassifier checkClassifier1 = new CheckClassifier();
      boolean boolean0 = false;
      checkClassifier1.instanceWeights(true, true, true, true, true, false, 0);
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = false;
      int int0 = 2;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, true, false, true, true, true, 2, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      int int0 = 0;
      boolean boolean0 = false;
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, true, false, true, (-1061));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1061' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Utils.SMALL = (-287.42752);
      checkClassifier0.canTakeOptions();
      checkClassifier0.declaresSerialVersionUID();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, false, false, true, false, true, 1013);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1013' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      try { 
        checkClassifier0.makeTestDataset(68, 68, 68, 68, 68, 11, 68, 68, 68, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute type '68' unknown!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = checkClassifier0.getOptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      checkClassifier0.m_Classifier = (Classifier) naiveBayesMultinomial0;
      checkClassifier0.getRevision();
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      checkClassifier0.correctBuildInitialisation(true, false, false, false, false, false, 0);
      checkClassifier0.setOptions(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      checkClassifier0.setClassifier(naiveBayesMultinomial0);
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, false, true, true, 1396);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1396' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      checkClassifier0.canTakeOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      int int0 = (-971);
      boolean boolean1 = true;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, true, true, true, true, (-2342), true, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2342' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      checkClassifier0.getRevision();
      int int0 = 0;
      boolean boolean0 = false;
      boolean boolean1 = false;
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      checkClassifier0.testsPerClassType(0, false, false, false);
      checkClassifier0.listOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, false, true, false, false, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(275);
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, false, false, false, false, 15, false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '15' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      checkClassifier0.updatingEquality(false, true, true, false, true, false, 0);
      try { 
        checkClassifier0.makeTestDataset(10, 32, 781, 10, 781, (-704), (-151), 781, (-216), 10, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumInstances(275);
      checkClassifier0.weightedInstancesHandler();
      try { 
        checkClassifier0.makeTestDataset((-216), 0, 0, 275, (-151), 781, 275, 275, 781, (-216), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute type '781' unknown!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "here are the datasets:\n";
      stringArray0[1] = "-delimiters";
      stringArray0[2] = "<|ZK})y{>";
      stringArray0[3] = "Ypg58Uf";
      stringArray0[4] = "import weka.filters.Filter;\n";
      stringArray0[5] = "";
      checkClassifier0.instanceWeights(false, false, false, false, false, false, 0);
      stringArray0[6] = "class0";
      stringArray0[7] = "3%qn";
      try { 
        checkClassifier0.makeTestDataset(71, 50, 0, 0, 50, 0, (-2715), (-1006), (-2715), 7, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGD sGD0 = new SGD();
      String[] stringArray0 = checkClassifier0.getOptions();
      checkClassifier0.m_Classifier = (Classifier) sGD0;
      checkClassifier0.getOptions();
      checkClassifier0.testToString();
      checkClassifier0.declaresSerialVersionUID();
      sGD0.setOptions(stringArray0);
      sGD0.toString();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, true, false, true, true, true, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 275;
      checkClassifier0.setNumInstances(275);
      int int1 = 0;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, false, true, false, false, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      checkClassifier0.m_Classifier = (Classifier) naiveBayesMultinomial0;
      checkClassifier0.getRevision();
      boolean boolean0 = false;
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      boolean boolean1 = true;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, true, false, false, false, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: weka.classifiers.bayes.NaiveBayesMultinomial: Cannot handle binary attributes!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(true);
      checkClassifier0.canPredict(false, false, false, false, true, false, 0);
      checkClassifier0.correctBuildInitialisation(true, true, false, false, false, false, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"y8#4U";
      stringArray0[1] = "Error setting up for tests: ";
      stringArray0[2] = "7[e:pK_NX;H5p9)vl";
      stringArray0[3] = "";
      stringArray0[4] = "Results don't differ between non-weighted and weighted instance models.";
      stringArray0[5] = "";
      checkClassifier0.setOptions(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      checkClassifier0.setClassifier(regressionByDiscretization0);
      regressionByDiscretization0.setMinimizeAbsoluteError(false);
      try { 
        checkClassifier0.makeTestDataset(0, 123, 113, 1, 961, 0, 0, (-631), (-631), 50, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute type '-631' unknown!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      int int0 = (-1900);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(true, true, false, true, false, false, (-1900));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1900' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updateableClassifier();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setSilent(true);
      checkClassifier0.instanceWeights(true, true, true, false, false, false, 0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, true, false, true, true, true, (-3308), (-3308));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-3308' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(false);
      checkClassifier0.declaresSerialVersionUID();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, true, false, true, false, 1675);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1675' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.testToString();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(false, true, false, false, true, (-2118));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-2118' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 840;
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(840, true, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '840' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int0 = 126;
      checkClassifier0.setNumNumeric(126);
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.listOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, true, false, true, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      checkClassifier0.m_Classifier = (Classifier) naiveBayesMultinomial0;
      checkClassifier0.getRevision();
      int int0 = 0;
      boolean boolean0 = false;
      boolean boolean1 = false;
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      checkClassifier0.testsPerClassType(0, false, false, false);
      boolean boolean2 = true;
      boolean boolean3 = true;
      boolean boolean4 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, true, false, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      int int0 = 1154;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, true, true, true, false, false, 1154, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1154' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.canHandleMissing(false, true, true, true, false, false, 0, false, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.canHandleMissing(true, true, false, true, true, false, 0, true, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = (-563);
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.setNumDate((-563));
      boolean boolean0 = false;
      checkClassifier0.multiInstanceHandler();
      int int1 = 452;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, false, false, false, false, false, 452, (-563));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '452' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = false;
      checkClassifier0.weightedInstancesHandler();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, false, false, false, false, false, 1214);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1214' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(true, true, true, false, false, true, 110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '110' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumString((-4800));
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.setNumNominal((-4800));
      checkClassifier0.printAttributeSummary(false, false, false, false, true, false, (-744));
      checkClassifier0.printAttributeSummary(false, false, false, false, true, false, 298);
      checkClassifier0.canHandleOnlyClass(false, false, true, false, true, 0);
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, true, false, true, 62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '62' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      boolean boolean0 = true;
      boolean boolean1 = true;
      checkClassifier0.doesntUseTestClassVal(true, true, false, true, true, false, 0);
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(true, true, false, true, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      checkClassifier0.printAttributeSummary(false, false, true, false, false, true, 3715);
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType((-1098), false, false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1098' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, false, true, true, true, true, (-1263));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1263' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGD sGD0 = new SGD();
      sGD0.getOptions();
      checkClassifier0.m_Classifier = (Classifier) sGD0;
      checkClassifier0.getOptions();
      checkClassifier0.testToString();
      checkClassifier0.declaresSerialVersionUID();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      try { 
        checkClassifier0.setOptions((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.setNumRelational(0);
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(true, false, false, false, false, true, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '16' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 275;
      checkClassifier0.setNumInstances(275);
      int int1 = 0;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, false, false, false, false, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(false, false, false, false, false, false, 84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = (-3842);
      checkClassifier0.setNumNumeric((-3842));
      int int1 = 0;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, true, false, false, true, false, 0, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Illegal Capacity: -3838
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setClassifier((Classifier) null);
      checkClassifier0.printAttributeSummary(false, false, false, true, true, true, (-225));
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, true, true, true, true, false, (-225));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-225' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      int int0 = 93;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(false, false, false, false, false, true, 93);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '93' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      int int0 = 0;
      boolean boolean1 = false;
      try { 
        checkClassifier0.makeTestDataset(0, 0, 0, 0, 0, 2786, 0, 2786, 2786, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute type '2786' unknown!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 0;
      int int1 = (-768);
      boolean boolean0 = true;
      try { 
        checkClassifier0.makeTestDataset(0, (-895), 0, (-895), (-768), (-895), 0, 0, (-895), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2557
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      int int0 = 48;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, true, true, true, true, 48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '48' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      int int0 = 0;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(true, true, true, true, false, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: null
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updateableClassifier();
      Utils.SMALL = (double) (-302);
      checkClassifier0.makeTestDataset((-302), 32, 32, 32, 0, 0, 0, 0, 0, 0, false);
      Utils.SMALL = (-2009.5178266);
      int int0 = 1508;
      checkClassifier0.canHandleNClasses(false, false, false, false, false, false, 1508);
      checkClassifier0.listOptions();
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, true, false, false, false, false, (-4044));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-4044' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(true, true, false, false, true, false, (-986));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: null
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getRevision();
      JRip jRip0 = new JRip();
      checkClassifier0.weightedInstancesHandler();
      AbstractClassifier.makeCopy(jRip0);
      checkClassifier0.setClassifier(jRip0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "b4LE%TC8k>j[L)A4AA";
      checkClassifier0.setOptions(stringArray0);
      assertEquals(10, checkClassifier0.getNumInstancesRelational());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.printAttributeSummary(false, false, true, true, true, true, 3158);
      assertEquals(2, checkClassifier0.getNumNominal());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = false;
      int int0 = 26;
      checkClassifier0.canHandleNClasses(false, false, true, false, false, false, 26);
      checkClassifier0.canTakeOptions();
      boolean boolean2 = false;
      boolean boolean3 = true;
      boolean boolean4 = true;
      checkClassifier0.testToString();
      checkClassifier0.multiInstanceHandler();
      boolean boolean5 = true;
      int int1 = 2024;
      // Undeclared exception!
      try { 
        checkClassifier0.setWords(" improved Akaike: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 2 words must be provided!
         //
         verifyException("weka.core.CheckScheme", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.testsPerClassType(0, false, false, false);
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, false, true, true, true, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "here are the datasets:\n";
      stringArray0[1] = "-delimiters";
      stringArray0[2] = "<|ZK})y{>";
      stringArray0[3] = "Ypg58Uf";
      stringArray0[4] = "import weka.filters.Filter;\n";
      stringArray0[5] = "";
      checkClassifier0.instanceWeights(false, false, false, false, false, false, 0);
      stringArray0[6] = "class0";
      stringArray0[7] = "3%qn";
      checkClassifier0.multiInstanceHandler();
      stringArray0[8] = "\tFull name of the classifier analysed.\n\teg: weka.classifiers.bayes.NaiveBayes\n\t(default weka.classifiers.rules.ZeroR)";
      checkClassifier0.setOptions(stringArray0);
      assertEquals(2, checkClassifier0.getNumNominal());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updateableClassifier();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"fe:S+";
      stringArray0[1] = "D|Z";
      checkClassifier0.setOptions(stringArray0);
      checkClassifier0.setOptions(stringArray0);
      checkClassifier0.setNumInstancesRelational((-218));
      checkClassifier0.testToString();
      checkClassifier0.getRevision();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, true, true, true, false, true, (-218), (-75));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-218' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(false, true, false, true, false, true, (-723));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-723' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sJ";
      stringArray0[1] = "";
      stringArray0[2] = "Y(=,G|";
      checkClassifier0.setClassifier((Classifier) null);
      stringArray0[3] = "\n\nClass attribute discretized into ";
      stringArray0[4] = "QJ|`iM^PBy";
      stringArray0[5] = "CZ1_6`7AQ|zG";
      CheckClassifier.main(stringArray0);
      boolean boolean0 = false;
      checkClassifier0.printAttributeSummary(true, false, false, false, true, true, (-100));
      boolean boolean1 = true;
      int int0 = 136;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, true, false, true, true, true, 136);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '136' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(true);
      checkClassifier0.canPredict(false, false, false, false, true, false, 0);
      checkClassifier0.correctBuildInitialisation(true, true, false, false, false, false, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"y8#4U";
      stringArray0[1] = "Error setting up for tests: ";
      stringArray0[2] = "7[e:pK_NX;H5p9)vl";
      stringArray0[3] = "";
      stringArray0[4] = "Results don't differ between non-weighted and weighted instance models.";
      stringArray0[5] = "";
      checkClassifier0.setOptions(stringArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      checkClassifier0.setClassifier(regressionByDiscretization0);
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, false, false, true, true, 104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '104' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 84;
      int int1 = 34;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, true, true, false, true, true, (-1115));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1115' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.setWords("Oz&2Kf9H#3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 2 words must be provided!
         //
         verifyException("weka.core.CheckScheme", e);
      }
  }
}
