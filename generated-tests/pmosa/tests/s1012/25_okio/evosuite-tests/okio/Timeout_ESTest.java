/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 21:49:00 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Timeout_ESTest extends Timeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      timeout0.throwIfReached();
      Timeout timeout1 = timeout0.clearDeadline();
      long long0 = (-3697L);
      timeout1.deadlineNanoTime((-3697L));
      long long1 = 501L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      timeout0.NONE.timeout(501L, timeUnit0);
      Timeout timeout2 = timeout0.NONE.clearDeadline();
      // Undeclared exception!
      try { 
        timeout2.NONE.waitUntilNotified((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        timeout0.deadline((-1829L), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration <= 0: -1829
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Timeout timeout0 = Timeout.NONE;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Timeout timeout1 = timeout0.deadline(1L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      Timeout timeout2 = timeout1.timeout(1L, timeUnit1);
      Timeout timeout3 = timeout2.deadlineNanoTime((-1L));
      timeout2.NONE.clearTimeout();
      Timeout timeout4 = timeout3.clearTimeout();
      Timeout timeout5 = timeout4.deadlineNanoTime(4699L);
      assertSame(timeout5, timeout0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      timeout0.timeout(2073L, timeUnit0);
      // Undeclared exception!
      try { 
        timeout0.waitUntilNotified("");
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      long long0 = 2086L;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Timeout timeout1 = timeout0.timeout(2086L, timeUnit0);
      Timeout timeout2 = timeout1.deadlineNanoTime(2086L);
      Object object0 = new Object();
      Timeout timeout3 = timeout2.clearDeadline();
      timeout3.NONE.deadlineNanoTime(2086L);
      // Undeclared exception!
      try { 
        timeout2.waitUntilNotified(object0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      // Undeclared exception!
      try { 
        timeout0.deadlineNanoTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No deadline
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Timeout timeout0 = Timeout.NONE;
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Timeout timeout1 = timeout0.deadline(1L, timeUnit0);
      timeout1.timeoutNanos();
      timeout1.throwIfReached();
      long long1 = 0L;
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        timeout0.NONE.deadline(0L, timeUnit2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duration <= 0: 0
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      timeout0.deadlineNanoTime((-487L));
      Object object0 = new Object();
      try { 
        timeout0.waitUntilNotified(object0);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Timeout timeout0 = new Timeout();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      timeout0.deadline(2115L, timeUnit0);
      timeout0.throwIfReached();
      assertTrue(timeout0.hasDeadline());
  }
}
