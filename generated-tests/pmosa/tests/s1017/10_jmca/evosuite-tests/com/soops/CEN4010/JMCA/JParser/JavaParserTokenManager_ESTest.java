/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:02:37 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 115, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      Token token0 = new Token();
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-3799));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3799. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      javaParserTokenManager0.curLexState = 0;
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("finally", token0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1361, (-1381));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1361, column -1381.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 122, 808);
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.next;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3488, 51, 3488);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(54, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 121, 41);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 124.  Encountered: <EOF> after : \"\\\"+)\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = ';';
      charArray0[2] = 'T';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 122, 808);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = 1278;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 122, 808);
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      token_GTToken0.image = null;
      javaCharStream0.readChar();
      Token token1 = token_GTToken0.next;
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("|=", token2.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-110);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-92), (byte)25, 51);
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(115, token0.kind);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 115, (byte)120);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.ReInit((JavaCharStream) null);
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("^", token0.toString());
      assertEquals(107, token0.kind);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 122, 808);
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 106, (-1188));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 115, (byte)120);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.ReInit((JavaCharStream) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(120, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-17);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)122;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte) (-17);
      byteArray1[4] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)122, 42);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(44, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 122, 808);
      Token token0 = new Token();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (byte)11, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (byte)105);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 105. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1666, (-3307), 183);
      Token token0 = new Token();
      byte[] byteArray0 = new byte[1];
      token0.beginLine = (int) (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 183, 21);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaCharStream0.readChar();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 183, column 22.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 122, 46, 46);
      Token token0 = new Token();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 0, 44);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2, 46);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 46. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("assert");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-543), 125, 44);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(6, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("assert");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4572), 122, 60);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(127, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1666, (-3307), 183);
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1666, column -3304.  Encountered: <EOF> after : \"\\\"+)\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)37, 1084);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.GetImage();
      javaCharStream0.readChar();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(37, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("assert");
      byte byte0 = (byte)92;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 115;
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)92, 3235);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 92, column 3236.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[7] = (byte)57;
      byteArray0[1] = (byte)94;
      byteArray0[3] = (byte)120;
      byteArray0[6] = (byte) (-9);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1666, (byte) (-9));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(66, token0.kind);
      assertEquals("9", token0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[7] = (byte)57;
      byteArray0[1] = (byte)92;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1666, (byte) (-9));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1666, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=<=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 87);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 87. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)65);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)37, 183, 183);
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      token_GTToken0.beginLine = (-1481);
      javaCharStream0.readChar();
      Token token1 = token_GTToken0.next;
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(186, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 10, (-1295));
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)74, (byte)110);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaCharStream1.GetImage();
      javaCharStream1.readChar();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vc>K<8K!1Qt\"O-aTD=b");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader(";ugq<X&jKac!RaU");
      stringReader1.reset();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 66, 36, 66);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0, 2);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=<=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 122, 46, 46);
      Token token0 = new Token();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.read();
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream1, 62, (byte)11);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curLexState = 1998;
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0);
      char char0 = javaParserTokenManager0.curChar;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=<=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 122, 46, 46);
      Token token0 = new Token();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream1, 62, (byte)11);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0);
      char char0 = javaParserTokenManager0.curChar;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 10, (-1295));
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)74, (byte)110);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char char0 = javaParserTokenManager0.curChar;
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0, (byte)81, 10);
      javaParserTokenManager0.ReInit(javaCharStream3);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1292), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vc>K<8K!1Qt\"O-aTD=b");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader(";ugq<X&jKac!RaU");
      stringReader1.reset();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 36, 36, 36);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 12);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.ReInit(javaCharStream0);
      Token token0 = new Token();
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(0, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("assert");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)92, (-162), 89);
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (byte) (-9), 4, 2688);
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-157), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1422, 1422);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1422, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vc>K<8K!1Qt\"O-aTD=b");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader(";ugq<X&jKac!RaU");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 66, 36, 66);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("Vc", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(';', char0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(66, javaCharStream1.getEndLine());
      assertEquals(36, javaCharStream1.getEndColumn());
      assertEquals(36, javaCharStream1.getBeginColumn());
      assertEquals(66, javaCharStream1.getLine());
      assertEquals(36, javaCharStream1.getColumn());
      assertEquals(66, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token_GTToken0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token_GTToken0));
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(">", token2.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(124, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream2, 1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, (byte)65);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)37, 183, 183);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      token0.endColumn = 24;
      assertNull(token0.toString());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      token_GTToken0.beginLine = (-1481);
      assertNull(token_GTToken0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(186, javaCharStream0.getEndColumn());
      assertEquals(186, javaCharStream0.getColumn());
      assertEquals(183, javaCharStream0.getBeginColumn());
      assertEquals("true", token1.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(186, token1.endColumn);
      assertEquals(37, token1.beginLine);
      assertEquals(61, token1.kind);
      assertEquals(37, token1.endLine);
      assertEquals(183, token1.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(186, javaCharStream0.getEndColumn());
      assertEquals(186, javaCharStream0.getColumn());
      assertEquals(183, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(186, javaCharStream0.getEndColumn());
      assertEquals(186, javaCharStream0.getColumn());
      assertEquals(183, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(186, javaCharStream0.getEndColumn());
      assertEquals(186, javaCharStream0.getColumn());
      assertEquals(183, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(24, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)65, (byte)37, (byte)65, (byte)37, (byte)65, (byte)90, (byte)100, (byte)37}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 50, (byte)65);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)45, (byte)65, (byte)37, (byte)65, (byte)37, (byte)65, (byte)90, (byte)100, (byte)37}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.ReInit(javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)45, (byte)65, (byte)37, (byte)65, (byte)37, (byte)65, (byte)90, (byte)100, (byte)37}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(186, javaCharStream0.getEndColumn());
      assertEquals(186, javaCharStream0.getColumn());
      assertEquals(183, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(186, javaCharStream0.getEndColumn());
      assertEquals(186, javaCharStream0.getColumn());
      assertEquals(183, javaCharStream0.getBeginColumn());
      assertEquals("-", token2.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token2.kind);
      assertEquals(65, token2.endColumn);
      assertEquals(50, token2.endLine);
      assertEquals(50, token2.beginLine);
      assertEquals(65, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Gp ;Ee\".EG<6>H&;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 42, (-2455), 52);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, 42, (-1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals("Gp", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals((-1), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(42, token0.endLine);
      assertEquals(42, token0.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-4050));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4050. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hnr Z%+=z^20K:{");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 101);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (-1478), 101, (byte)120);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("hnr", token1.toString());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(token0.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNull(token0.toString());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(12, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 10, (-1295));
      assertNotNull(javaCharStream0);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)54, (byte)110);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream1.GetImage();
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('Q', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(110, javaCharStream1.getEndColumn());
      assertEquals(54, javaCharStream1.getEndLine());
      assertEquals(110, javaCharStream1.getColumn());
      assertEquals(110, javaCharStream1.getBeginColumn());
      assertEquals(54, javaCharStream1.getBeginLine());
      assertEquals(54, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.jjmatchedKind = (-3887);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(110, javaCharStream1.getEndColumn());
      assertEquals(54, javaCharStream1.getEndLine());
      assertEquals(110, javaCharStream1.getColumn());
      assertEquals(110, javaCharStream1.getBeginColumn());
      assertEquals(54, javaCharStream1.getBeginLine());
      assertEquals(54, javaCharStream1.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("6", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(54, javaCharStream1.getEndLine());
      assertEquals(111, javaCharStream1.getEndColumn());
      assertEquals(111, javaCharStream1.getColumn());
      assertEquals(111, javaCharStream1.getBeginColumn());
      assertEquals(54, javaCharStream1.getBeginLine());
      assertEquals(54, javaCharStream1.getLine());
      assertEquals(66, token0.kind);
      assertEquals(54, token0.beginLine);
      assertEquals(111, token0.beginColumn);
      assertEquals(111, token0.endColumn);
      assertEquals(54, token0.endLine);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream1.getEndLine());
      assertEquals(111, javaCharStream1.getEndColumn());
      assertEquals(111, javaCharStream1.getColumn());
      assertEquals(111, javaCharStream1.getBeginColumn());
      assertEquals(54, javaCharStream1.getBeginLine());
      assertEquals(54, javaCharStream1.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, 17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-81);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)32;
      byteArray0[1] = (byte)84;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)84, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1103), (byte) (-81));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)84, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)84, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)84, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-79), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals((-79), javaCharStream0.getEndColumn());
      assertEquals((-81), javaCharStream0.getBeginColumn());
      assertEquals("TTT", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1103), token0.endLine);
      assertEquals((-79), token0.endColumn);
      assertEquals((-1103), token0.beginLine);
      assertEquals((-81), token0.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1103, column -78.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)70, (byte)77, (byte)77}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)70;
      byteArray1[5] = (byte)92;
      byteArray1[6] = (byte)77;
      byteArray1[7] = (byte)77;
      byteArray1[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)92, (byte)77, (byte)92, (byte)32, (byte)70, (byte)92, (byte)77, (byte)77, (byte)92}, byteArray1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 113, 66);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)70, (byte)77, (byte)77}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)70, (byte)77, (byte)77}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)70, (byte)77, (byte)77}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(113, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals("FMM", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(68, token0.endColumn);
      assertEquals(66, token0.beginColumn);
      assertEquals(113, token0.beginLine);
      assertEquals(113, token0.endLine);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)70, (byte)77, (byte)77}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(113, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-2547));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2547. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 122, 46, 46);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, 0, 1342);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals("sPb", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-81);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)32;
      byteArray0[1] = (byte)84;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)84;
      StringReader stringReader0 = new StringReader("cAQ0BK<B");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (byte)45, (byte)45);
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('c', char0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals("AQ0BK", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(45, token0.endLine);
      assertEquals(45, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(50, token0.endColumn);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(12, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(12, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("Q6", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = 'R';
      charArray0[2] = 'w';
      charArray0[3] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {' ', 'R', 'w', 'S'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1478, 1478);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {' ', 'R', 'w', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {' ', 'R', 'w', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {' ', 'R', 'w', 'S'}, charArray0);
      assertEquals(1479, javaCharStream0.getBeginColumn());
      assertEquals(1478, javaCharStream0.getLine());
      assertEquals(1478, javaCharStream0.getBeginLine());
      assertEquals(1478, javaCharStream0.getEndLine());
      assertEquals(1481, javaCharStream0.getColumn());
      assertEquals(1481, javaCharStream0.getEndColumn());
      assertEquals("RwS", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1478, token0.endLine);
      assertEquals(1478, token0.beginLine);
      assertEquals(1479, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1481, token0.endColumn);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertArrayEquals(new char[] {' ', 'R', 'w', 'S'}, charArray0);
      assertEquals(1479, javaCharStream0.getBeginColumn());
      assertEquals(1478, javaCharStream0.getLine());
      assertEquals(1478, javaCharStream0.getBeginLine());
      assertEquals(1478, javaCharStream0.getEndLine());
      assertEquals(1481, javaCharStream0.getColumn());
      assertEquals(1481, javaCharStream0.getEndColumn());
      assertEquals("RwS", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1478, token0.endLine);
      assertEquals(1478, token0.beginLine);
      assertEquals(1479, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1481, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)81;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 509, 20, (byte)81);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 20, (-975), 1075);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream0.available = 1075;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(509, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(509, javaCharStream0.getLine());
      assertEquals(509, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals("K", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(509, token1.beginLine);
      assertEquals(20, token1.beginColumn);
      assertEquals(20, token1.endColumn);
      assertEquals(509, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-81);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-81);
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'S', 'S');
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(83, javaCharStream0.getBeginLine());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(83, javaCharStream0.getLine());
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(83, javaCharStream0.getEndLine());
      assertEquals("S", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(83, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(83, token0.beginLine);
      assertEquals(83, token0.beginColumn);
      assertEquals(83, token0.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(83, javaCharStream0.getBeginLine());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(83, javaCharStream0.getLine());
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(83, javaCharStream0.getEndLine());
      assertEquals("S", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(83, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(83, token0.beginLine);
      assertEquals(83, token0.beginColumn);
      assertEquals(83, token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2203);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2203. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      StringReader stringReader0 = new StringReader("[@/7");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (byte)127, 228);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals(127, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(81, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(127, token1.beginColumn);
      assertEquals(127, token1.endColumn);
      assertEquals(0, token1.endLine);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('@', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(128, javaCharStream0.getColumn());
      assertEquals(127, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(128, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      Token token2 = token_GTToken0.next;
      assertNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(129, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(129, javaCharStream0.getEndColumn());
      assertEquals(129, javaCharStream0.getBeginColumn());
      assertEquals("/", token3.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endLine);
      assertEquals(129, token3.beginColumn);
      assertEquals(104, token3.kind);
      assertEquals(129, token3.endColumn);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.ReInit(javaCharStream0, 0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(129, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(129, javaCharStream0.getEndColumn());
      assertEquals(129, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      token0.kind = (int) (byte)127;
      assertNull(token0.toString());
      
      StringReader stringReader0 = new StringReader("[@/7");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (byte)127, (byte)127);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('[', char0);
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(127, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(127, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(128, javaCharStream0.getColumn());
      assertEquals(128, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(128, javaCharStream0.getEndColumn());
      assertEquals("@", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(128, token1.endColumn);
      assertEquals(128, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(86, token1.kind);
      assertEquals(0, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(129, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(129, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(129, javaCharStream0.getEndColumn());
      assertEquals("/", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(129, token2.endColumn);
      assertEquals(104, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(129, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-4), (byte) (-83), (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-4), (byte) (-83), (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, (-1157), (byte) (-83));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-4), (byte) (-83), (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-4), (byte) (-83), (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-4), (byte) (-83), (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-4), (byte) (-83), (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-83), javaCharStream0.getEndColumn());
      assertEquals((-83), javaCharStream0.getColumn());
      assertEquals((-83), javaCharStream0.getBeginColumn());
      assertEquals((-1157), javaCharStream0.getEndLine());
      assertEquals((-1157), javaCharStream0.getBeginLine());
      assertEquals((-1157), javaCharStream0.getLine());
      assertEquals("Z", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1157), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1157), token0.endLine);
      assertEquals((-83), token0.endColumn);
      assertEquals((-83), token0.beginColumn);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-4), (byte) (-83), (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-83), javaCharStream0.getEndColumn());
      assertEquals((-83), javaCharStream0.getColumn());
      assertEquals((-83), javaCharStream0.getBeginColumn());
      assertEquals((-1157), javaCharStream0.getEndLine());
      assertEquals((-1157), javaCharStream0.getBeginLine());
      assertEquals((-1157), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1666, (-3342), 183);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, (-1), 0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      String string0 = javaCharStream1.GetImage();
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-3342), javaCharStream0.getEndColumn());
      assertEquals(1666, javaCharStream0.getBeginLine());
      assertEquals((-3342), javaCharStream0.getBeginColumn());
      assertEquals(1666, javaCharStream0.getEndLine());
      assertEquals(1666, javaCharStream0.getLine());
      assertEquals((-3342), javaCharStream0.getColumn());
      assertEquals("+", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, token1.kind);
      assertEquals(1666, token1.beginLine);
      assertEquals((-3342), token1.beginColumn);
      assertEquals((-3342), token1.endColumn);
      assertEquals(1666, token1.endLine);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-3342), javaCharStream0.getEndColumn());
      assertEquals(1666, javaCharStream0.getBeginLine());
      assertEquals((-3342), javaCharStream0.getBeginColumn());
      assertEquals(1666, javaCharStream0.getEndLine());
      assertEquals(1666, javaCharStream0.getLine());
      assertEquals((-3342), javaCharStream0.getColumn());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1666, javaCharStream0.getBeginLine());
      assertEquals((-3341), javaCharStream0.getBeginColumn());
      assertEquals(1666, javaCharStream0.getEndLine());
      assertEquals(1666, javaCharStream0.getLine());
      assertEquals((-3341), javaCharStream0.getColumn());
      assertEquals((-3341), javaCharStream0.getEndColumn());
      assertEquals(")", token2.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(78, token2.kind);
      assertEquals(1666, token2.beginLine);
      assertEquals((-3341), token2.endColumn);
      assertEquals((-3341), token2.beginColumn);
      assertEquals(1666, token2.endLine);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1666, javaCharStream0.getBeginLine());
      assertEquals((-3341), javaCharStream0.getBeginColumn());
      assertEquals(1666, javaCharStream0.getEndLine());
      assertEquals(1666, javaCharStream0.getLine());
      assertEquals((-3341), javaCharStream0.getColumn());
      assertEquals((-3341), javaCharStream0.getEndColumn());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)55;
      byteArray0[2] = (byte)15;
      byteArray0[6] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-4), (byte)15, (byte)43, (byte)55, (byte)0, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1157), 3286);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-4), (byte)15, (byte)43, (byte)55, (byte)0, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-4), (byte)15, (byte)43, (byte)55, (byte)0, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-4), (byte)15, (byte)43, (byte)55, (byte)0, (byte)35}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-4), (byte)15, (byte)43, (byte)55, (byte)0, (byte)35}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3286, javaCharStream0.getBeginColumn());
      assertEquals(3286, javaCharStream0.getEndColumn());
      assertEquals(3286, javaCharStream0.getColumn());
      assertEquals((-1157), javaCharStream0.getLine());
      assertEquals((-1157), javaCharStream0.getBeginLine());
      assertEquals((-1157), javaCharStream0.getEndLine());
      assertEquals("}", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3286, token0.beginColumn);
      assertEquals(3286, token0.endColumn);
      assertEquals((-1157), token0.beginLine);
      assertEquals((-1157), token0.endLine);
      assertEquals(80, token0.kind);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("private");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-901), 183, 1819);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-901), javaCharStream0.getBeginLine());
      assertEquals((-901), javaCharStream0.getEndLine());
      assertEquals((-901), javaCharStream0.getLine());
      assertEquals(189, javaCharStream0.getColumn());
      assertEquals(183, javaCharStream0.getBeginColumn());
      assertEquals(189, javaCharStream0.getEndColumn());
      assertEquals("private", token0.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-901), token0.beginLine);
      assertEquals(189, token0.endColumn);
      assertEquals(47, token0.kind);
      assertEquals(183, token0.beginColumn);
      assertEquals((-901), token0.endLine);
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",gSgo-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"package\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(34, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 34, (-1493), 5214);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals((-1487), javaCharStream0.getColumn());
      assertEquals((-1493), javaCharStream0.getBeginColumn());
      assertEquals((-1487), javaCharStream0.getEndColumn());
      assertEquals("package", token0.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1487), token0.endColumn);
      assertEquals(34, token0.endLine);
      assertEquals(46, token0.kind);
      assertEquals((-1493), token0.beginColumn);
      assertEquals(34, token0.beginLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals((-1487), javaCharStream0.getColumn());
      assertEquals((-1493), javaCharStream0.getBeginColumn());
      assertEquals((-1487), javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)91;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-810), (byte)33);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('s', char0);
      assertEquals((-810), javaCharStream0.getEndLine());
      assertEquals((-810), javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals((-810), javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-810), javaCharStream0.getEndLine());
      assertEquals((-810), javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals((-810), javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-810), javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals((-810), javaCharStream0.getLine());
      assertEquals((-810), javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals("Pb", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(34, token0.beginColumn);
      assertEquals((-810), token0.endLine);
      assertEquals(35, token0.endColumn);
      assertEquals((-810), token0.beginLine);
      assertEquals(74, token0.kind);
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, 74, (byte) (-83), (-2145));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)66, (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)66, (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.line = (int) (byte)91;
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)66, (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)66, (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("BBB", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(91, token0.endLine);
      assertEquals(91, token0.beginLine);
      assertEquals(3, token0.endColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)66, (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)66, (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("BBB", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(91, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(91, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)66, (byte)43, (byte)91, (byte)15, (byte)35}, byteArray0);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals("+", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(91, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(91, token2.beginLine);
      assertEquals(91, token2.endLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(101, token2.kind);
      assertEquals(4, token2.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      StringReader stringReader0 = new StringReader("{5D)6GJvZ8,m]9C");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)57, (byte)57, 1711);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals("{", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(57, token0.beginLine);
      assertEquals(57, token0.endColumn);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, token0.endLine);
      assertEquals(79, token0.kind);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1711, (-1), 51);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      try { 
        javaCharStream1.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M]=F");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 122, 809);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("M", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("]", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1666, (-3342), 183);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)100, (byte)90, (byte)45, (byte)45, (byte)45, (byte)100}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)45, (byte)100);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)45, (byte)100, (byte)90, (byte)45, (byte)45, (byte)45, (byte)100}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)100, (byte)90, (byte)45, (byte)45, (byte)45, (byte)100}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("-", token1.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(100, token1.endColumn);
      assertEquals(102, token1.kind);
      assertEquals(45, token1.endLine);
      assertEquals(45, token1.beginLine);
      assertEquals(100, token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".E-c");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 46, 7, 10);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(46, javaCharStream1.getEndLine());
      assertEquals(46, javaCharStream1.getBeginLine());
      assertEquals(46, javaCharStream1.getLine());
      assertEquals(7, javaCharStream1.getColumn());
      assertEquals(7, javaCharStream1.getBeginColumn());
      assertEquals(7, javaCharStream1.getEndColumn());
      assertEquals(".", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(7, token0.endColumn);
      assertEquals(46, token0.endLine);
      assertEquals(85, token0.kind);
      assertEquals(46, token0.beginLine);
      assertEquals(7, token0.beginColumn);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream1.getEndLine());
      assertEquals(46, javaCharStream1.getBeginLine());
      assertEquals(46, javaCharStream1.getLine());
      assertEquals(7, javaCharStream1.getColumn());
      assertEquals(7, javaCharStream1.getBeginColumn());
      assertEquals(7, javaCharStream1.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Iw9?1^0p2kEjA-7B,");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 183);
      assertNotNull(bufferedReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      long long0 = stringReader1.skip((-456L));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 123, 10, 10);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(123, javaCharStream0.getEndLine());
      assertEquals(123, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(123, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals("Iw9", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(123, token0.endLine);
      assertEquals(123, token0.beginLine);
      assertEquals(10, token0.beginColumn);
      assertEquals(12, token0.endColumn);
      
      MockFile mockFile0 = new MockFile("hvX2tqF\"Ak6CI", "Uvk9");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("Uvk9", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/hvX2tqF\"Ak6CI", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/hvX2tqF\"Ak6CI/Uvk9", mockFile0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("Uvk9", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/hvX2tqF\"Ak6CI", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/hvX2tqF\"Ak6CI/Uvk9", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(123, javaCharStream0.getEndLine());
      assertEquals(123, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(123, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getColumn());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("Uvk9", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/hvX2tqF\"Ak6CI", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/10_jmca/hvX2tqF\"Ak6CI/Uvk9", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".E-c");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-431), 40, 15);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      stringReader0.reset();
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('.', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(40, javaCharStream1.getBeginColumn());
      assertEquals(40, javaCharStream1.getColumn());
      assertEquals((-431), javaCharStream1.getBeginLine());
      assertEquals(40, javaCharStream1.getEndColumn());
      assertEquals((-431), javaCharStream1.getLine());
      assertEquals((-431), javaCharStream1.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(41, javaCharStream1.getBeginColumn());
      assertEquals((-431), javaCharStream1.getBeginLine());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals((-431), javaCharStream1.getLine());
      assertEquals((-431), javaCharStream1.getEndLine());
      assertEquals("E", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-431), token1.endLine);
      assertEquals((-431), token1.beginLine);
      assertEquals(41, token1.beginColumn);
      assertEquals(41, token1.endColumn);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      assertNotNull(mockPrintStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(41, javaCharStream1.getBeginColumn());
      assertEquals((-431), javaCharStream1.getBeginLine());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals((-431), javaCharStream1.getLine());
      assertEquals((-431), javaCharStream1.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(41, javaCharStream1.getBeginColumn());
      assertEquals((-431), javaCharStream1.getBeginLine());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals((-431), javaCharStream1.getLine());
      assertEquals((-431), javaCharStream1.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("swSPb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 10, 85);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals("swSPb", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(13, token0.endLine);
      assertEquals(10, token0.beginColumn);
      assertEquals(14, token0.endColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("swSPb");
      assertNotNull(stringReader0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("swSPb", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(0, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cAQ0BK<B");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      lineNumberReader0.setLineNumber((-1595));
      assertEquals((-1595), lineNumberReader0.getLineNumber());
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      assertNotNull(lineNumberReader1);
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertEquals((-1595), lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)120, (byte)92, (byte)120, (byte)120, (byte)92}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)120, 27);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)120, (byte)92, (byte)120, (byte)120, (byte)92}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)120, (byte)92, (byte)120, (byte)120, (byte)92}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)120, (byte)92, (byte)120, (byte)120, (byte)92}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)120, (byte)92, (byte)120, (byte)120, (byte)92}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(120, javaCharStream0.getEndLine());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(120, javaCharStream0.getLine());
      assertEquals(120, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals("x", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(27, token0.endColumn);
      assertEquals(120, token0.endLine);
      assertEquals(27, token0.beginColumn);
      assertEquals(120, token0.beginLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)120, (byte)92, (byte)120, (byte)120, (byte)92}, byteArray0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(120, javaCharStream0.getEndLine());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(120, javaCharStream0.getLine());
      assertEquals(120, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)89;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)50, (byte)75, (byte)26, (byte)24, (byte)37, (byte)91, (byte)3, (byte)89}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1002, (byte)89);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)50, (byte)75, (byte)26, (byte)24, (byte)37, (byte)91, (byte)3, (byte)89}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (byte)24, (-737));
      assertNotNull(javaCharStream2);
      assertArrayEquals(new byte[] {(byte)50, (byte)75, (byte)26, (byte)24, (byte)37, (byte)91, (byte)3, (byte)89}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)50, (byte)75, (byte)26, (byte)24, (byte)37, (byte)91, (byte)3, (byte)89}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream1.GetImage();
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)50, (byte)75, (byte)26, (byte)24, (byte)37, (byte)91, (byte)3, (byte)89}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals('\"', char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)50, (byte)75, (byte)26, (byte)24, (byte)37, (byte)91, (byte)3, (byte)89}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)50, (byte)75, (byte)26, (byte)24, (byte)37, (byte)91, (byte)3, (byte)89}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("2K", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-736), javaCharStream2.getEndColumn());
      assertEquals(24, javaCharStream2.getEndLine());
      assertEquals((-737), javaCharStream2.getBeginColumn());
      assertEquals(24, javaCharStream2.getLine());
      assertEquals(24, javaCharStream2.getBeginLine());
      assertEquals((-736), javaCharStream2.getColumn());
      assertEquals(74, token1.kind);
      assertEquals(24, token1.endLine);
      assertEquals((-737), token1.beginColumn);
      assertEquals((-736), token1.endColumn);
      assertEquals(24, token1.beginLine);
      assertEquals(1, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.ReInit(javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)50, (byte)75, (byte)26, (byte)24, (byte)37, (byte)91, (byte)3, (byte)89}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-736), javaCharStream2.getEndColumn());
      assertEquals(24, javaCharStream2.getEndLine());
      assertEquals((-737), javaCharStream2.getBeginColumn());
      assertEquals(24, javaCharStream2.getLine());
      assertEquals(24, javaCharStream2.getBeginLine());
      assertEquals((-736), javaCharStream2.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(1, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("swSPb");
      assertNotNull(stringReader0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)50;
      token0.endLine = (int) (byte)42;
      assertNull(token0.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)89, (byte)4, (byte)5, (byte)50, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1840, 27);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)51, (byte)89, (byte)4, (byte)5, (byte)50, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)51, (byte)89, (byte)4, (byte)5, (byte)50, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)51, (byte)89, (byte)4, (byte)5, (byte)50, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1840, javaCharStream0.getLine());
      assertEquals(1840, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(1840, javaCharStream0.getEndLine());
      assertEquals("3Y", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(27, token1.beginColumn);
      assertEquals(1840, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1840, token1.beginLine);
      assertEquals(28, token1.endColumn);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cAQ0BK<B");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      assertNotNull(lineNumberReader1);
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader1, 32, 2826);
      assertNotNull(javaCharStream0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader1, 2826, (-1));
      assertNotNull(javaCharStream1);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertNotSame(lineNumberReader1, lineNumberReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      assertEquals(2831, javaCharStream0.getColumn());
      assertEquals(2831, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(2826, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals("cAQ0BK", token0.toString());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2831, token0.endColumn);
      assertEquals(32, token0.beginLine);
      assertEquals(2826, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(32, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(lineNumberReader0, lineNumberReader1);
      assertNotSame(lineNumberReader1, lineNumberReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      assertEquals(2832, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(2832, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(2832, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, token1.beginLine);
      assertEquals(2832, token1.beginColumn);
      assertEquals(2832, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(32, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)56, (byte)117, (byte)92, (byte)120, (byte)120}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1925), (-2447));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)56, (byte)117, (byte)92, (byte)120, (byte)120}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)56, (byte)117, (byte)92, (byte)120, (byte)120}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.jjimageLen = 46;
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)56, (byte)117, (byte)92, (byte)120, (byte)120}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)56, (byte)117, (byte)92, (byte)120, (byte)120}, byteArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)56, (byte)117, (byte)92, (byte)120, (byte)120}, byteArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1925), javaCharStream0.getLine());
      assertEquals((-1925), javaCharStream0.getEndLine());
      assertEquals((-2446), javaCharStream0.getColumn());
      assertEquals((-2446), javaCharStream0.getEndColumn());
      assertEquals((-1925), javaCharStream0.getBeginLine());
      assertEquals((-2447), javaCharStream0.getBeginColumn());
      assertEquals("8u", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2447), token0.beginColumn);
      assertEquals((-2446), token0.endColumn);
      assertEquals((-1925), token0.endLine);
      assertEquals((-1925), token0.beginLine);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "static");
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("static");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 17, 10, 10);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("static", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(52, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(6, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(6, token1.endColumn);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">R");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("static");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("static", token0.toString());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(52, token0.kind);
      assertEquals(6, token0.endColumn);
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, 1, 6, (-425));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"|=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)35, (byte)43, (byte)91, (byte)15, (byte)15}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)35, (byte)43, (byte)91, (byte)15, (byte)15}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)35, (byte)43, (byte)91, (byte)15, (byte)15}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)43, 48);
      assertArrayEquals(new byte[] {(byte)35, (byte)43, (byte)91, (byte)15, (byte)15}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 43, column 48.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)99, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)99, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)99, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)99, (byte)15, (byte)35}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("___", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)99, (byte)15, (byte)35}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("+", token1.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(101, token1.kind);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)99, (byte)15, (byte)35}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("___", "___");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ___
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X+l");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 1666, 1666);
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('X', char0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1666, javaCharStream0.getEndColumn());
      assertEquals(1666, javaCharStream0.getEndLine());
      assertEquals(1666, javaCharStream0.getLine());
      assertEquals(1666, javaCharStream0.getBeginColumn());
      assertEquals(1666, javaCharStream0.getBeginLine());
      assertEquals(1666, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1667, javaCharStream0.getColumn());
      assertEquals(1666, javaCharStream0.getEndLine());
      assertEquals(1667, javaCharStream0.getEndColumn());
      assertEquals(1666, javaCharStream0.getLine());
      assertEquals(1667, javaCharStream0.getBeginColumn());
      assertEquals(1666, javaCharStream0.getBeginLine());
      assertEquals("+", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1667, token0.endColumn);
      assertEquals(1666, token0.endLine);
      assertEquals(1666, token0.beginLine);
      assertEquals(1667, token0.beginColumn);
      assertEquals(101, token0.kind);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1667, javaCharStream0.getColumn());
      assertEquals(1666, javaCharStream0.getEndLine());
      assertEquals(1667, javaCharStream0.getEndColumn());
      assertEquals(1666, javaCharStream0.getLine());
      assertEquals(1667, javaCharStream0.getBeginColumn());
      assertEquals(1666, javaCharStream0.getBeginLine());
      assertEquals("+", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1667, token1.endColumn);
      assertEquals(1666, token1.beginLine);
      assertEquals(101, token1.kind);
      assertEquals(1667, token1.beginColumn);
      assertEquals(1666, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1668, javaCharStream0.getColumn());
      assertEquals(1668, javaCharStream0.getEndColumn());
      assertEquals(1668, javaCharStream0.getBeginColumn());
      assertEquals(1666, javaCharStream0.getEndLine());
      assertEquals(1666, javaCharStream0.getLine());
      assertEquals(1666, javaCharStream0.getBeginLine());
      assertEquals("l", token2.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1666, token2.beginLine);
      assertEquals(1666, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(1668, token2.endColumn);
      assertEquals(1668, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)11}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)11, 78);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)11}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)11}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)0, (byte)11}, byteArray0);
      assertEquals('\u0000', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)0, (byte)11}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 2);
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)0, (byte)11}, byteArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 11, column 80.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1666, (-3342), 183);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      javaParserTokenManager0.ReInit(javaCharStream0, 2);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream1.ReInit((InputStream) byteArrayInputStream0, 183, 2011);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1666, column -3341.  Encountered: \"+\" (43), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=<=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.curLexState = 3694;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)11, (byte)40, (byte)11, (byte)11}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 78, 14);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)11, (byte)40, (byte)11, (byte)11}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)11, (byte)40, (byte)11, (byte)11}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)11, (byte)40, (byte)11, (byte)11}, byteArray0);
      assertEquals('\u000B', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)11, (byte)40, (byte)11, (byte)11}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getLine());
      assertEquals("(", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(77, token0.kind);
      assertEquals(78, token0.beginLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(78, token0.endLine);
      assertEquals(15, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X+l");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 1666, 1666);
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 808, 122, 22);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(122, javaCharStream1.getBeginColumn());
      assertEquals(808, javaCharStream1.getLine());
      assertEquals(122, javaCharStream1.getEndColumn());
      assertEquals(808, javaCharStream1.getEndLine());
      assertEquals(122, javaCharStream1.getColumn());
      assertEquals(808, javaCharStream1.getBeginLine());
      assertEquals("X", token0.toString());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(808, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(122, token0.beginColumn);
      assertEquals(122, token0.endColumn);
      assertEquals(808, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vc>K<8K!1Qt\"O-aTD=b");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('V', char0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("c", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vc>K<8K!1Qt\"O-aTD=b");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-6L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 40, (-1475), 168);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      stringReader0.reset();
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('V', char0);
      assertEquals(40, javaCharStream0.getLine());
      assertEquals((-1475), javaCharStream0.getBeginColumn());
      assertEquals((-1475), javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals((-1475), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(40, javaCharStream0.getLine());
      assertEquals((-1474), javaCharStream0.getBeginColumn());
      assertEquals((-1474), javaCharStream0.getEndColumn());
      assertEquals((-1474), javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("c", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1474), token1.beginColumn);
      assertEquals((-1474), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(40, token1.beginLine);
      assertEquals(40, token1.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(40, javaCharStream0.getLine());
      assertEquals((-1474), javaCharStream0.getBeginColumn());
      assertEquals((-1474), javaCharStream0.getEndColumn());
      assertEquals((-1474), javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token_GTToken0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token_GTToken0));
      assertEquals(40, javaCharStream0.getLine());
      assertEquals((-1473), javaCharStream0.getColumn());
      assertEquals((-1473), javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals((-1473), javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(">", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(40, token2.beginLine);
      assertEquals(40, token2.endLine);
      assertEquals(124, token2.kind);
      assertEquals((-1473), token2.endColumn);
      assertEquals((-1473), token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hnr Z%+=z^20K:{");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 21, 21);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('h', char0);
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals("nr", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.endColumn);
      assertEquals(21, token0.beginLine);
      assertEquals(22, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals("nr", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, token1.beginLine);
      assertEquals(22, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(23, token1.endColumn);
      assertEquals(21, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals("Z", token2.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(25, token2.endColumn);
      assertEquals(21, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(21, token2.endLine);
      assertEquals(25, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"\n\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertEquals(0, lineNumberReader1.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 4, 4);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(lineNumberReader0.equals((Object)lineNumberReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 4, column 5.  Encountered: \"\\n\" (10), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      assertNotNull(lineNumberReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-22);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-1), (byte) (-22), (byte)23, (byte) (-22)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-1), (byte) (-22), (byte)23, (byte) (-22)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-1), (byte) (-22), (byte)23, (byte) (-22)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\\\"\\ufffd\\ufffd\\u0017\\ufffd\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 42, (byte) (-17));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals((-16), javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals((-16), javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals("--", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-17), token0.beginColumn);
      assertEquals(100, token0.kind);
      assertEquals((-16), token0.endColumn);
      assertEquals(42, token0.endLine);
      assertEquals(42, token0.beginLine);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals((-16), javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals((-16), javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals((-16), javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals((-16), javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals((-16), javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals((-16), javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z@");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 7, (-1), 117);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 509, (byte)127);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(127, javaCharStream2.getBeginColumn());
      assertEquals(509, javaCharStream2.getLine());
      assertEquals(127, javaCharStream2.getEndColumn());
      assertEquals(509, javaCharStream2.getBeginLine());
      assertEquals(509, javaCharStream2.getEndLine());
      assertEquals(127, javaCharStream2.getColumn());
      assertEquals("z", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(127, token0.beginColumn);
      assertEquals(509, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(127, token0.endColumn);
      assertEquals(509, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(128, javaCharStream2.getEndColumn());
      assertEquals(509, javaCharStream2.getLine());
      assertEquals(128, javaCharStream2.getBeginColumn());
      assertEquals(509, javaCharStream2.getBeginLine());
      assertEquals(509, javaCharStream2.getEndLine());
      assertEquals(128, javaCharStream2.getColumn());
      assertEquals("@", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(509, token1.beginLine);
      assertEquals(86, token1.kind);
      assertEquals(128, token1.endColumn);
      assertEquals(128, token1.beginColumn);
      assertEquals(509, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1666, (-3342), 183);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)90;
      byteArray0[5] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)100, (byte)100, (byte)90, (byte)0, (byte)45, (byte)45, (byte)100}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)100, (byte)100);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)100, (byte)100, (byte)90, (byte)0, (byte)45, (byte)45, (byte)100}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)100, (byte)100, (byte)90, (byte)0, (byte)45, (byte)45, (byte)100}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("ddZ", token1.toString());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(100, token1.beginLine);
      assertEquals(100, token1.endLine);
      assertEquals(100, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(102, token1.endColumn);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      Token token0 = Token.newToken(122);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 14, 122);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals("0", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
      assertEquals(14, token1.endLine);
      assertEquals(122, token1.beginColumn);
      assertEquals(14, token1.beginLine);
      assertEquals(122, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      Token token0 = Token.newToken(122);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-58);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)41, (byte)15, (byte) (-58)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 262, (byte) (-58));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)41, (byte)15, (byte) (-58)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)48, (byte)41, (byte)15, (byte) (-58)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)48, (byte)41, (byte)15, (byte) (-58)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(262, javaCharStream0.getBeginLine());
      assertEquals(262, javaCharStream0.getEndLine());
      assertEquals((-58), javaCharStream0.getColumn());
      assertEquals((-58), javaCharStream0.getEndColumn());
      assertEquals((-58), javaCharStream0.getBeginColumn());
      assertEquals(262, javaCharStream0.getLine());
      assertEquals("0", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(262, token1.endLine);
      assertEquals((-58), token1.beginColumn);
      assertEquals((-58), token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(262, token1.beginLine);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertArrayEquals(new byte[] {(byte)48, (byte)41, (byte)15, (byte) (-58)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(262, javaCharStream0.getBeginLine());
      assertEquals(262, javaCharStream0.getEndLine());
      assertEquals((-58), javaCharStream0.getColumn());
      assertEquals((-58), javaCharStream0.getEndColumn());
      assertEquals((-58), javaCharStream0.getBeginColumn());
      assertEquals(262, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vc>K<8K!1Qt\"O-aTD=b");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(5L);
      assertEquals(5L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 40, (-1475), 168);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)112, (byte)109, (byte) (-83), (byte)118, (byte)44, (byte)18}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)112, (-1475));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)112, (byte)109, (byte) (-83), (byte)118, (byte)44, (byte)18}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)112, (byte)109, (byte) (-83), (byte)118, (byte)44, (byte)18}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)112, (byte)109, (byte) (-83), (byte)118, (byte)44, (byte)18}, byteArray0);
      assertEquals('p', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1475), javaCharStream1.getBeginColumn());
      assertEquals(112, javaCharStream1.getBeginLine());
      assertEquals((-1475), javaCharStream1.getColumn());
      assertEquals(112, javaCharStream1.getEndLine());
      assertEquals(112, javaCharStream1.getLine());
      assertEquals((-1475), javaCharStream1.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)112, (byte)109, (byte) (-83), (byte)118, (byte)44, (byte)18}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(112, javaCharStream1.getBeginLine());
      assertEquals((-1474), javaCharStream1.getColumn());
      assertEquals(112, javaCharStream1.getEndLine());
      assertEquals(112, javaCharStream1.getLine());
      assertEquals((-1474), javaCharStream1.getEndColumn());
      assertEquals((-1474), javaCharStream1.getBeginColumn());
      assertEquals("m", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1474), token0.beginColumn);
      assertEquals(112, token0.endLine);
      assertEquals((-1474), token0.endColumn);
      assertEquals(112, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(dataInputStream0, 61, 123);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals('f', char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("inally", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("DgTR?Y,S*QhkH}2");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(40);
      assertEquals(15L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1475), 118, 40);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      stringReader0.reset();
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('D', char0);
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals("gTR", token1.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(119, token1.beginColumn);
      assertEquals((-1475), token1.endLine);
      assertEquals((-1475), token1.beginLine);
      assertEquals(121, token1.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals("?", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(91, token2.kind);
      assertEquals(122, token2.beginColumn);
      assertEquals((-1475), token2.endLine);
      assertEquals((-1475), token2.beginLine);
      assertEquals(122, token2.endColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=XI^YD4U|Y3/k1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sPb");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1858), 121, 32);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("=", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("XI", token1.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",gSgo-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"package\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(34, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, Integer.MAX_VALUE, (-1493), 5214);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = Token.newToken(34);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals((-1487), javaCharStream0.getColumn());
      assertEquals((-1493), javaCharStream0.getBeginColumn());
      assertEquals((-1487), javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals("package", token1.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token1.endLine);
      assertEquals((-1493), token1.beginColumn);
      assertEquals((-1487), token1.endColumn);
      assertEquals(Integer.MAX_VALUE, token1.beginLine);
      assertEquals(46, token1.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 103. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-4), (byte) (-126), (byte)23, (byte)45}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)118, 21);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-4), (byte) (-126), (byte)23, (byte)45}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-4), (byte) (-126), (byte)23, (byte)45}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-4), (byte) (-126), (byte)23, (byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals("v", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(21, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(21, token0.endColumn);
      assertEquals(118, token0.endLine);
      assertEquals(118, token0.beginLine);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-4), (byte) (-126), (byte)23, (byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)118, (byte) (-4), (byte) (-126), (byte)23, (byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)118, (byte) (-4), (byte) (-126), (byte)23, (byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '5', '5', '5', '5'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1024, 10, 3318);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '5', '5', '5', '5'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '5', '5', '5', '5'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '5', '5', '5', '5'}, charArray0);
      assertEquals(1024, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(1024, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(".5555", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(70, token0.kind);
      assertEquals(1024, token0.beginLine);
      assertEquals(14, token0.endColumn);
      assertEquals(10, token0.beginColumn);
      assertEquals(1024, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'.', '5', '5', '5', '5'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1024, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(1024, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1024, token1.beginLine);
      assertEquals(14, token1.beginColumn);
      assertEquals(14, token1.endColumn);
      assertEquals(1024, token1.endLine);
      assertEquals(0, token1.kind);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '5', '5', '5', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3318, (-1805));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', '5', '5', '5', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', '5', '5', '5', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', '5', '5', '5', '\u0000'}, charArray0);
      assertEquals(3318, javaCharStream0.getEndLine());
      assertEquals(3318, javaCharStream0.getBeginLine());
      assertEquals(3318, javaCharStream0.getLine());
      assertEquals((-1802), javaCharStream0.getEndColumn());
      assertEquals((-1802), javaCharStream0.getColumn());
      assertEquals((-1805), javaCharStream0.getBeginColumn());
      assertEquals(".555", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1805), token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(3318, token0.beginLine);
      assertEquals(3318, token0.endLine);
      assertEquals((-1802), token0.endColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'.', '5', '5', '5', '\u0000'}, charArray0);
      assertEquals(3318, javaCharStream0.getEndLine());
      assertEquals(3318, javaCharStream0.getBeginLine());
      assertEquals(3318, javaCharStream0.getLine());
      assertEquals((-1802), javaCharStream0.getEndColumn());
      assertEquals((-1802), javaCharStream0.getColumn());
      assertEquals((-1805), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-17);
      StringReader stringReader0 = new StringReader("!DN'/R$C@<");
      assertNotNull(stringReader0);
      
      int int0 = (-2546);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2546), 67, 594);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = Token.newToken(Integer.MAX_VALUE);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2546), javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals((-2546), javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals((-2546), javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals("!", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2546), token1.beginLine);
      assertEquals(67, token1.beginColumn);
      assertEquals(89, token1.kind);
      assertEquals(67, token1.endColumn);
      assertEquals((-2546), token1.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 1681);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1681. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)76, (byte)23}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)76, (byte)23}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)76, (byte)23}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)76, (byte)23}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("L", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)76, (byte)23}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)94, (byte)101, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)94, (byte)101, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)103, (byte)94, (byte)101, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, (-779), 25, 47);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream1.ReInit((InputStream) byteArrayInputStream0, (int) (byte)115, 2844);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)94, (byte)101, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)103, (byte)94, (byte)101, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("g", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new byte[] {(byte)103, (byte)94, (byte)101, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)103, (byte)94, (byte)101, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("^", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('f', char0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char1 = javaCharStream0.readChar();
      assertEquals('i', char1);
      assertFalse(char1 == char0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("nally", token1.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(7, token1.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.debugStream = javaParserTokenManager0.debugStream;
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(7, token2.beginColumn);
      assertEquals(7, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)25;
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = ':';
      charArray0[2] = '$';
      charArray0[3] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'p', ':', '$', '7'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)25, 1024, (byte)110);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'p', ':', '$', '7'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (byte)54, 0, 2007);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'p', ':', '$', '7'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'p', ':', '$', '7'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'p', ':', '$', '7'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("p", token0.toString());
      assertEquals(54, javaCharStream1.getEndLine());
      assertEquals(54, javaCharStream1.getLine());
      assertEquals(54, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, token0.beginColumn);
      assertEquals(54, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(54, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'p', ':', '$', '7'}, charArray0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(":", token1.toString());
      assertEquals(54, javaCharStream1.getEndLine());
      assertEquals(54, javaCharStream1.getLine());
      assertEquals(54, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(54, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(54, token1.beginLine);
      assertEquals(1, token1.endColumn);
      assertEquals(92, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)95, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)95, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)95, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)95, (int) (byte)95);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)95, (byte)15, (byte)35}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)95, (byte)15, (byte)35}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals("___", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(95, token0.beginLine);
      assertEquals(95, token0.beginColumn);
      assertEquals(97, token0.endColumn);
      assertEquals(95, token0.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)95, (byte)15, (byte)35}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)95, (byte)43, (byte)95, (byte)15, (byte)35}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals("+", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(98, token1.endColumn);
      assertEquals(98, token1.beginColumn);
      assertEquals(101, token1.kind);
      assertEquals(95, token1.endLine);
      assertEquals(95, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("truJe");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, 248, 64);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(252, javaCharStream0.getEndColumn());
      assertEquals(248, javaCharStream0.getBeginColumn());
      assertEquals(252, javaCharStream0.getColumn());
      assertEquals("truJe", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(18, token0.beginLine);
      assertEquals(252, token0.endColumn);
      assertEquals(18, token0.endLine);
      assertEquals(248, token0.beginColumn);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(252, javaCharStream0.getEndColumn());
      assertEquals(248, javaCharStream0.getBeginColumn());
      assertEquals(252, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("truJe");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 183);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, 3, 64);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("truJe", token1.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, token1.endColumn);
      assertEquals(18, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(18, token1.beginLine);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Gp ;Ee\".EG<6>H&;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-92);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1), 1103);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 13, (byte)52);
      assertNotNull(javaCharStream2);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream3 = new JavaCharStream(byteArrayInputStream0, 884, (-1), 344);
      assertNotNull(javaCharStream3);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaParserTokenManager0.curChar = 'a';
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream3);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertEquals('4', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(1103, javaCharStream1.getEndColumn());
      assertEquals(1103, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(1103, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream3);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(1104, javaCharStream1.getEndColumn());
      assertEquals(1104, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(1104, javaCharStream1.getColumn());
      assertEquals("4", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1104, token0.beginColumn);
      assertEquals(1104, token0.endColumn);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream3);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream3);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream3));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(1104, javaCharStream1.getEndColumn());
      assertEquals(1104, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(1104, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",gSgo-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("eH=cCnc9c{Xb");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1290), (-1290));
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.prevCharIsCR = false;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader0, 808, 1666, 122);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1290), javaCharStream0.getEndLine());
      assertEquals((-1290), javaCharStream0.getBeginLine());
      assertEquals((-1289), javaCharStream0.getColumn());
      assertEquals((-1289), javaCharStream0.getEndColumn());
      assertEquals((-1290), javaCharStream0.getLine());
      assertEquals((-1290), javaCharStream0.getBeginColumn());
      assertEquals("eH", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1290), token0.endLine);
      assertEquals((-1290), token0.beginLine);
      assertEquals((-1290), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1289), token0.endColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1290), javaCharStream0.getEndLine());
      assertEquals((-1290), javaCharStream0.getBeginLine());
      assertEquals((-1289), javaCharStream0.getColumn());
      assertEquals((-1289), javaCharStream0.getEndColumn());
      assertEquals((-1290), javaCharStream0.getLine());
      assertEquals((-1290), javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=XI^YD4U|Y3/k1");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'z';
      charArray0[2] = 'M';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      charArray0[5] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'7', 'z', 'M', 'p', '7', ':'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)110, (byte)25, 1024);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (byte)25, 255, (byte)81);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'7', 'z', 'M', 'p', '7', ':'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'7', 'z', 'M', 'p', '7', ':'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'7', 'z', 'M', 'p', '7', ':'}, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(259, javaCharStream1.getColumn());
      assertEquals(259, javaCharStream1.getEndColumn());
      assertEquals(255, javaCharStream1.getBeginColumn());
      assertEquals(25, javaCharStream1.getEndLine());
      assertEquals(25, javaCharStream1.getLine());
      assertEquals(25, javaCharStream1.getBeginLine());
      assertEquals("7zMp7", token0.toString());
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(25, token0.beginLine);
      assertEquals(259, token0.endColumn);
      assertEquals(255, token0.beginColumn);
      assertEquals(25, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte)25);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 25. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 122, 122, 122);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = Token.newToken((-1));
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 589);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('P', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(589, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(589, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(589, javaCharStream1.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(590, javaCharStream1.getEndColumn());
      assertEquals(590, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(590, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals("b", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(590, token1.endColumn);
      assertEquals((-1), token1.beginLine);
      assertEquals(590, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-1), token1.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 590);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 590. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("default");
      assertNotNull(stringReader0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      assertNotNull(mockFileReader0);
      assertFalse(fileDescriptor0.valid());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      assertNotNull(lineNumberReader0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1819), 183);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 122, 951, 76);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(122, javaCharStream1.getEndLine());
      assertEquals(957, javaCharStream1.getColumn());
      assertEquals(122, javaCharStream1.getLine());
      assertEquals(122, javaCharStream1.getBeginLine());
      assertEquals(957, javaCharStream1.getEndColumn());
      assertEquals(951, javaCharStream1.getBeginColumn());
      assertEquals("default", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream1.bufpos);
      assertEquals(122, token0.endLine);
      assertEquals(24, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals(951, token0.beginColumn);
      assertEquals(957, token0.endColumn);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(122, javaCharStream1.getEndLine());
      assertEquals(957, javaCharStream1.getColumn());
      assertEquals(122, javaCharStream1.getLine());
      assertEquals(122, javaCharStream1.getBeginLine());
      assertEquals(957, javaCharStream1.getEndColumn());
      assertEquals(951, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("default");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = Token.newToken((-453));
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("default", token1.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(24, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(7, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 24, 24);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-83), (byte)5, (byte)16, (byte)14, (byte)12, (byte)40, (byte)52}, byteArray0);
      assertEquals((-16), byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 18, (byte)14);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-83), (byte)5, (byte)16, (byte)14, (byte)12, (byte)40, (byte)52}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-16), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.ReInit(javaCharStream1, 0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-83), (byte)5, (byte)16, (byte)14, (byte)12, (byte)40, (byte)52}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals((-16), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Gp ;Ee\".EG<6>H&;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-92);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1), 1103);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 13, (byte)52);
      assertNotNull(javaCharStream2);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaCharStream javaCharStream3 = new JavaCharStream(byteArrayInputStream0, 43, 37, 34);
      assertNotNull(javaCharStream3);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream3.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream3));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream3);
      assertEquals('G', char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream3));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream3);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-110), (byte) (-92)}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream3));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(53, javaCharStream2.getColumn());
      assertEquals(53, javaCharStream2.getEndColumn());
      assertEquals(13, javaCharStream2.getEndLine());
      assertEquals(13, javaCharStream2.getLine());
      assertEquals(13, javaCharStream2.getBeginLine());
      assertEquals(52, javaCharStream2.getBeginColumn());
      assertEquals("44", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(13, token0.beginLine);
      assertEquals(53, token0.endColumn);
      assertEquals(13, token0.endLine);
      assertEquals(52, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte) (-92));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -92. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y\"8mU7(");
      assertNotNull(stringReader0);
      
      Token token0 = Token.newToken(24);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)41, (byte)48, (byte)41}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)41, (byte)48, (byte)41}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)41, (byte)48, (byte)41}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)41, (byte)48, (byte)41}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("00", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)41, (byte)48, (byte)41}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)40, (byte)87, (byte)11}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 37, (-1475));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)40, (byte)87, (byte)11}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)40, (byte)87, (byte)11}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)40, (byte)87, (byte)11}, byteArray0);
      assertEquals('(', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1475), javaCharStream0.getColumn());
      assertEquals((-1475), javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)40, (byte)87, (byte)11}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1474), javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-1474), javaCharStream0.getEndColumn());
      assertEquals((-1474), javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals("W", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1474), token0.beginColumn);
      assertEquals((-1474), token0.endColumn);
      assertEquals(37, token0.beginLine);
      assertEquals(37, token0.endLine);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y\"8mU7(");
      assertNotNull(stringReader0);
      
      Token token0 = Token.newToken(24);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)86;
      byteArray0[8] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)53, (byte)76, (byte)5, (byte)3, (byte) (-9), (byte)97, (byte)86, (byte)0, (byte)99}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 74, 128);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)53, (byte)76, (byte)5, (byte)3, (byte) (-9), (byte)97, (byte)86, (byte)0, (byte)99}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)53, (byte)76, (byte)5, (byte)3, (byte) (-9), (byte)97, (byte)86, (byte)0, (byte)99}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)53, (byte)76, (byte)5, (byte)3, (byte) (-9), (byte)97, (byte)86, (byte)0, (byte)99}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(129, javaCharStream0.getColumn());
      assertEquals(129, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(128, javaCharStream0.getBeginColumn());
      assertEquals("5L", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
      assertEquals(128, token1.beginColumn);
      assertEquals(74, token1.endLine);
      assertEquals(74, token1.beginLine);
      assertEquals(129, token1.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)53, (byte)76, (byte)5, (byte)3, (byte) (-9), (byte)97, (byte)86, (byte)0, (byte)99}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(129, javaCharStream0.getColumn());
      assertEquals(129, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(128, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vc>K<8K!1Qt\"O-aTD=b");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)80, (byte)107, (byte)13, (byte)111, (byte)9}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CtW");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1535, (byte)111);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)80, (byte)107, (byte)13, (byte)111, (byte)9}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)80, (byte)107, (byte)13, (byte)111, (byte)9}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)80, (byte)107, (byte)13, (byte)111, (byte)9}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(111, javaCharStream1.getBeginColumn());
      assertEquals(112, javaCharStream1.getColumn());
      assertEquals(112, javaCharStream1.getEndColumn());
      assertEquals(1535, javaCharStream1.getLine());
      assertEquals(1535, javaCharStream1.getEndLine());
      assertEquals(1535, javaCharStream1.getBeginLine());
      assertEquals("Pk", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1535, token0.beginLine);
      assertEquals(1535, token0.endLine);
      assertEquals(111, token0.beginColumn);
      assertEquals(112, token0.endColumn);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)80, (byte)107, (byte)13, (byte)111, (byte)9}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(111, javaCharStream1.getBeginColumn());
      assertEquals(112, javaCharStream1.getColumn());
      assertEquals(112, javaCharStream1.getEndColumn());
      assertEquals(1535, javaCharStream1.getLine());
      assertEquals(1535, javaCharStream1.getEndLine());
      assertEquals(1535, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)80, (byte)107, (byte)13, (byte)111, (byte)9}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1536, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1536, javaCharStream1.getEndLine());
      assertEquals(1536, javaCharStream1.getBeginLine());
      assertEquals("o", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1536, token1.beginLine);
      assertEquals(1536, token1.endLine);
      assertEquals(74, token1.kind);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)80, (byte)107, (byte)13, (byte)111, (byte)9}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1536, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1536, javaCharStream1.getEndLine());
      assertEquals(1536, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=XI^YD4U|Y3/k1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = Token.newToken(1963);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, (-1), 0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      stringReader0.reset();
      Token token1 = new Token();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('=', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals("XI", token2.toString());
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals("^", token3.toString());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(107, token3.kind);
      assertEquals(2, token3.endColumn);
      assertEquals(0, token3.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)99, (byte)99);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals(99, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getLine());
      assertEquals(99, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals("@", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(99, token0.endColumn);
      assertEquals(86, token0.kind);
      assertEquals(99, token0.beginColumn);
      assertEquals(99, token0.endLine);
      assertEquals(99, token0.beginLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals(99, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getLine());
      assertEquals(99, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals(99, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getLine());
      assertEquals(99, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals("@", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(99, token1.endLine);
      assertEquals(99, token1.beginColumn);
      assertEquals(86, token1.kind);
      assertEquals(99, token1.beginLine);
      assertEquals(99, token1.endColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(99, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(99, javaCharStream0.getBeginLine());
      assertEquals("cocc", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(99, token2.beginLine);
      assertEquals(100, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(99, token2.endLine);
      assertEquals(103, token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"|=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-2315), (-639));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("@", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-639), javaCharStream1.getColumn());
      assertEquals((-639), javaCharStream1.getBeginColumn());
      assertEquals((-2315), javaCharStream1.getEndLine());
      assertEquals((-639), javaCharStream1.getEndColumn());
      assertEquals((-2315), javaCharStream1.getLine());
      assertEquals((-2315), javaCharStream1.getBeginLine());
      assertEquals((-2315), token0.endLine);
      assertEquals(86, token0.kind);
      assertEquals((-2315), token0.beginLine);
      assertEquals((-639), token0.endColumn);
      assertEquals((-639), token0.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-639), javaCharStream1.getColumn());
      assertEquals((-639), javaCharStream1.getBeginColumn());
      assertEquals((-2315), javaCharStream1.getEndLine());
      assertEquals((-639), javaCharStream1.getEndColumn());
      assertEquals((-2315), javaCharStream1.getLine());
      assertEquals((-2315), javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      javaParserTokenManager1.ReInit(javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-639), javaCharStream1.getColumn());
      assertEquals((-639), javaCharStream1.getBeginColumn());
      assertEquals((-2315), javaCharStream1.getEndLine());
      assertEquals((-639), javaCharStream1.getEndColumn());
      assertEquals((-2315), javaCharStream1.getLine());
      assertEquals((-2315), javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertEquals("cocccccc", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-638), javaCharStream1.getBeginColumn());
      assertEquals((-2315), javaCharStream1.getEndLine());
      assertEquals((-631), javaCharStream1.getColumn());
      assertEquals((-2315), javaCharStream1.getLine());
      assertEquals((-2315), javaCharStream1.getBeginLine());
      assertEquals((-631), javaCharStream1.getEndColumn());
      assertEquals((-631), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals((-2315), token1.endLine);
      assertEquals((-638), token1.beginColumn);
      assertEquals((-2315), token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream1.bufpos);
      
      javaParserTokenManager2.MoreLexicalActions();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-638), javaCharStream1.getBeginColumn());
      assertEquals((-2315), javaCharStream1.getEndLine());
      assertEquals((-631), javaCharStream1.getColumn());
      assertEquals((-2315), javaCharStream1.getLine());
      assertEquals((-2315), javaCharStream1.getBeginLine());
      assertEquals((-631), javaCharStream1.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream1.bufpos);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 6648, 1456);
      assertNotNull(javaCharStream2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      javaParserTokenManager2.ReInit(javaCharStream2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertArrayEquals(new byte[] {(byte)64, (byte)99, (byte)111, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99, (byte)99}, byteArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-638), javaCharStream1.getBeginColumn());
      assertEquals((-2315), javaCharStream1.getEndLine());
      assertEquals((-631), javaCharStream1.getColumn());
      assertEquals((-2315), javaCharStream1.getLine());
      assertEquals((-2315), javaCharStream1.getBeginLine());
      assertEquals((-631), javaCharStream1.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y\"8mU7(");
      assertNotNull(stringReader0);
      
      Token token0 = Token.newToken(24);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)41;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1832, 121, 2029);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(1832, javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals(1832, javaCharStream0.getBeginLine());
      assertEquals(1832, javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals("y", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1832, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(121, token1.beginColumn);
      assertEquals(121, token1.endColumn);
      assertEquals(1832, token1.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1832, column 128.  Encountered: <EOF> after : \"\\\"8mU7(\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finalCy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "finally");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 183, 103);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("finalCy", token0.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(7, token1.beginColumn);
      assertEquals(7, token1.endColumn);
      assertEquals(1, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)39;
      byte byte0 = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte) (-111), (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)96, 41, (byte) (-63));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte) (-111), (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte) (-111), (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte) (-111), (byte)114}, byteArray0);
      assertEquals('`', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 122, 13, 1149);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte) (-111), (byte)114}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte) (-111), (byte)114}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".8D");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 96, column 44.  Encountered: \"$\" (36), after : \"\\'\\ufffd\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)96, 41, (byte) (-63));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertEquals('`', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 122, (byte)114, 1149);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte) (-18), (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".8D");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 96, column 44.  Encountered: \"$\" (36), after : \"\\'\\ufffd\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",gSgo-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"package\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)79, (byte) (-127), (byte)87}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte) (-124);
      byteArray1[4] = (byte)92;
      byteArray1[5] = (byte)92;
      byteArray1[6] = (byte)32;
      byteArray1[7] = (byte)87;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)79, (byte)87, (byte)32, (byte) (-124), (byte)92, (byte)92, (byte)32, (byte)87}, byteArray1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 50, (-4080));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)79, (byte)87, (byte)32, (byte) (-124), (byte)92, (byte)92, (byte)32, (byte)87}, byteArray1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)79, (byte)87, (byte)32, (byte) (-124), (byte)92, (byte)92, (byte)32, (byte)87}, byteArray1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte)87, (byte)32, (byte) (-124), (byte)92, (byte)92, (byte)32, (byte)87}, byteArray1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals((-4080), javaCharStream0.getBeginColumn());
      assertEquals((-4079), javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals((-4079), javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("OW", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(50, token0.beginLine);
      assertEquals((-4079), token0.endColumn);
      assertEquals((-4080), token0.beginColumn);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte)87, (byte)32, (byte) (-124), (byte)92, (byte)92, (byte)32, (byte)87}, byteArray1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals((-4080), javaCharStream0.getBeginColumn());
      assertEquals((-4079), javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals((-4079), javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(448);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 448. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",gSgo-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("eH=cCnc9c{Xb");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1290), (-1290));
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)30, (byte) (-101), (byte)73, (byte)35, (byte)21}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)96, (byte)30, (byte) (-101), (byte)73, (byte)35, (byte)21}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)96, (byte)30, (byte) (-101), (byte)73, (byte)35, (byte)21}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",gSgo-");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("eH=cCnc9c{Xb");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1290), (-1290));
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      int int0 = stringReader1.read(charArray0);
      assertNotSame(stringReader1, stringReader0);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertEquals(1, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParserTokenManager0.curChar = '?';
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1290), javaCharStream0.getEndLine());
      assertEquals((-1290), javaCharStream0.getEndColumn());
      assertEquals((-1290), javaCharStream0.getLine());
      assertEquals((-1290), javaCharStream0.getBeginColumn());
      assertEquals((-1290), javaCharStream0.getBeginLine());
      assertEquals((-1290), javaCharStream0.getColumn());
      assertEquals("H", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1290), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1290), token0.endColumn);
      assertEquals((-1290), token0.beginLine);
      assertEquals((-1290), token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-179));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -179. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[8] = (byte)101;
      byteArray0[3] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)101}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)101}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)101}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)101}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)101}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("gg", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",28*");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1290), 90);
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1290), javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals((-1290), javaCharStream0.getEndLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals((-1290), javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(",", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1290), token0.endLine);
      assertEquals(84, token0.kind);
      assertEquals((-1290), token0.beginLine);
      assertEquals(90, token0.beginColumn);
      assertEquals(90, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1290));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1290. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1654, (-3342), 183);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)100;
      javaParserTokenManager0.jjmatchedKind = 30;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(12, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)45, (byte)81);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("-", token1.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(102, token1.kind);
      assertEquals(81, token1.endColumn);
      assertEquals(81, token1.beginColumn);
      assertEquals(45, token1.beginLine);
      assertEquals(45, token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(125);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 125. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cAQ0BK<B");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      assertNotNull(lineNumberReader1);
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte) (-76);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-15), (byte) (-22), (byte) (-1), (byte)54, (byte)23, (byte)115, (byte) (-76)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-15), (byte) (-22), (byte) (-1), (byte)54, (byte)23, (byte)115, (byte) (-76)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-15), (byte) (-22), (byte) (-1), (byte)54, (byte)23, (byte)115, (byte) (-76)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\\\"\\ufffd\\ufffd\\ufffd6\\u0017s\\ufffd\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("DgTR?Y,S*QhkH}2");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(37);
      assertEquals(15L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1475), 118, 37);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      stringReader0.reset();
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('D', char0);
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals("gTR", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1475), token1.beginLine);
      assertEquals(121, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(119, token1.beginColumn);
      assertEquals((-1475), token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals("?", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(122, token2.beginColumn);
      assertEquals((-1475), token2.beginLine);
      assertEquals(122, token2.endColumn);
      assertEquals((-1475), token2.endLine);
      assertEquals(91, token2.kind);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(123, javaCharStream0.getEndColumn());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals(123, javaCharStream0.getColumn());
      assertEquals("Y", token3.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1475), token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals((-1475), token3.beginLine);
      assertEquals(123, token3.beginColumn);
      assertEquals(123, token3.endColumn);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("swSPb");
      assertNotNull(stringReader0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)118, 109);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118}, byteArray0);
      assertEquals('v', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(109, javaCharStream1.getBeginColumn());
      assertEquals(109, javaCharStream1.getColumn());
      assertEquals(109, javaCharStream1.getEndColumn());
      assertEquals(118, javaCharStream1.getEndLine());
      assertEquals(118, javaCharStream1.getLine());
      assertEquals(118, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("vvvvvvv", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(110, javaCharStream1.getBeginColumn());
      assertEquals(118, javaCharStream1.getEndLine());
      assertEquals(116, javaCharStream1.getColumn());
      assertEquals(116, javaCharStream1.getEndColumn());
      assertEquals(118, javaCharStream1.getLine());
      assertEquals(118, javaCharStream1.getBeginLine());
      assertEquals(110, token1.beginColumn);
      assertEquals(116, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(118, token1.beginLine);
      assertEquals(118, token1.endLine);
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118}, byteArray0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(110, javaCharStream1.getBeginColumn());
      assertEquals(118, javaCharStream1.getEndLine());
      assertEquals(116, javaCharStream1.getColumn());
      assertEquals(116, javaCharStream1.getEndColumn());
      assertEquals(118, javaCharStream1.getLine());
      assertEquals(118, javaCharStream1.getBeginLine());
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]F>`n{yB");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(']', char0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("F", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(74, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token_GTToken0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token_GTToken0));
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(">", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(124, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",gSgo-");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)85, (byte)67, (byte)36, (byte) (-1), (byte)65, (byte) (-82), (byte)3}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 34, (byte)65);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)85, (byte)67, (byte)36, (byte) (-1), (byte)65, (byte) (-82), (byte)3}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)85, (byte)67, (byte)36, (byte) (-1), (byte)65, (byte) (-82), (byte)3}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)85, (byte)67, (byte)36, (byte) (-1), (byte)65, (byte) (-82), (byte)3}, byteArray0);
      assertEquals('U', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(65, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals(65, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)85, (byte)67, (byte)36, (byte) (-1), (byte)65, (byte) (-82), (byte)3}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals("C$", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(34, token0.beginLine);
      assertEquals(66, token0.beginColumn);
      assertEquals(67, token0.endColumn);
      assertEquals(34, token0.endLine);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vc>K<8K!1Qt\"O-aTD=b");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('V', char0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      
      char char1 = javaCharStream0.readChar();
      assertEquals('c', char1);
      assertFalse(char1 == char0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token_GTToken1);
      assertNotSame(token1, token_GTToken0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token_GTToken1));
      assertFalse(token1.equals((Object)token_GTToken0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(">", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(124, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("K", token2.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("<", token3.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token3.endColumn);
      assertEquals(88, token3.kind);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 86, (byte)64);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals("@", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(64, token0.beginColumn);
      assertEquals(64, token0.endColumn);
      assertEquals(86, token0.kind);
      assertEquals(86, token0.beginLine);
      assertEquals(86, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager2.ReInit(javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(65, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals("o", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token1.beginLine);
      assertEquals(65, token1.endColumn);
      assertEquals(86, token1.endLine);
      assertEquals(65, token1.beginColumn);
      assertEquals(74, token1.kind);
      
      javaParserTokenManager2.MoreLexicalActions();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(65, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(65, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new byte[] {(byte)64, (byte)111, (byte)124, (byte)64}, byteArray0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getColumn());
      assertEquals("|", token2.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token2.beginColumn);
      assertEquals(86, token2.beginLine);
      assertEquals(66, token2.endColumn);
      assertEquals(106, token2.kind);
      assertEquals(86, token2.endLine);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)39;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte)0, (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)96, 41, (byte) (-63));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte)0, (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte)0, (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte)0, (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertEquals('`', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 122, (byte)114, 1149);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte)0, (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)96, (byte)39, (byte)0, (byte)36, (byte) (-63), (byte)96, (byte)114}, byteArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".8D");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 96, column 44.  Encountered: \"$\" (36), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)114, (byte) (-18), (-455));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)39, (-1095));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertEquals('$', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1095), javaCharStream1.getBeginColumn());
      assertEquals(39, javaCharStream1.getLine());
      assertEquals(39, javaCharStream1.getBeginLine());
      assertEquals(39, javaCharStream1.getEndLine());
      assertEquals((-1095), javaCharStream1.getEndColumn());
      assertEquals((-1095), javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (-1095), 96, 96);
      assertNotNull(javaCharStream2);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1095), javaCharStream1.getBeginColumn());
      assertEquals(39, javaCharStream1.getLine());
      assertEquals(39, javaCharStream1.getBeginLine());
      assertEquals(39, javaCharStream1.getEndLine());
      assertEquals((-1095), javaCharStream1.getEndColumn());
      assertEquals((-1095), javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(39, javaCharStream1.getLine());
      assertEquals((-1094), javaCharStream1.getBeginColumn());
      assertEquals(39, javaCharStream1.getBeginLine());
      assertEquals((-1093), javaCharStream1.getEndColumn());
      assertEquals(39, javaCharStream1.getEndLine());
      assertEquals((-1093), javaCharStream1.getColumn());
      assertEquals("$$", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(39, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1093), token0.endColumn);
      assertEquals(39, token0.endLine);
      assertEquals((-1094), token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)36}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(39, javaCharStream1.getLine());
      assertEquals(39, javaCharStream1.getBeginLine());
      assertEquals((-1093), javaCharStream1.getEndColumn());
      assertEquals(39, javaCharStream1.getEndLine());
      assertEquals((-1093), javaCharStream1.getBeginColumn());
      assertEquals((-1093), javaCharStream1.getColumn());
      assertEquals("", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(39, token1.endLine);
      assertEquals(39, token1.beginLine);
      assertEquals((-1093), token1.beginColumn);
      assertEquals((-1093), token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("DgTR?Y,S*QhkH}2");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(37);
      assertEquals(15L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1475), 118, 37);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      stringReader0.reset();
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals("DgTR", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1475), token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals((-1475), token1.beginLine);
      assertEquals(121, token1.endColumn);
      assertEquals(118, token1.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getLine());
      assertEquals("?", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(122, token2.endColumn);
      assertEquals(122, token2.beginColumn);
      assertEquals((-1475), token2.beginLine);
      assertEquals(91, token2.kind);
      assertEquals((-1475), token2.endLine);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 2);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals((-1475), javaCharStream0.getEndLine());
      assertEquals((-1475), javaCharStream0.getBeginLine());
      assertEquals((-1475), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1475, column 124.  Encountered: \",\" (44), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OnVcr)unDV");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      javaParserTokenManager0.jjnewStateCnt = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('O', char0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("nVcr", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      stringReader0.mark(0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(")", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.beginLine);
      
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",gSgo-");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)104;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)82, (byte)73, (byte) (-37), (byte)28, (byte)104}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 578, 2081);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)82, (byte)73, (byte) (-37), (byte)28, (byte)104}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)82, (byte)73, (byte) (-37), (byte)28, (byte)104}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char char0 = javaCharStream1.readChar();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(',', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals("gSgo", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager3);
      assertArrayEquals(new byte[] {(byte)28, (byte)0, (byte)82, (byte)73, (byte) (-37), (byte)28, (byte)104}, byteArray0);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager3.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 578, column 2081.  Encountered: \"\\u001c\" (28), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wSP");
      assertNotNull(stringReader0);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)118, 1326, 0);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118, (byte)118}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("wSP", token1.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("", token2.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P,~RP$g'PQpeN");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('P', char0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(",", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(84, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("~", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(90, token1.kind);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      assertNotNull(lineNumberReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(lineNumberReader1.equals((Object)lineNumberReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, lineNumberReader1.getLineNumber());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-1), (byte)34, (byte)34, (byte) (-1), (byte)34}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)34, 91, 43);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-1), (byte)34, (byte)34, (byte) (-1), (byte)34}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader2 = new StringReader("q|kw=fqA%5_k6");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, (byte)34, (byte) (-1));
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("q", token0.toString());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(34, javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals(34, javaCharStream1.getBeginLine());
      assertEquals(34, javaCharStream1.getEndLine());
      assertEquals((-1), token0.endColumn);
      assertEquals(34, token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 43. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OnVcr)unDV");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.curLexState = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      javaParserTokenManager0.jjnewStateCnt = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('O', char0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      stringReader0.mark(0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(0, token1.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"c\" (99), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("DgTR?Y,S*QhkH}2");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DgTR?Y,S*QhkH}2");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader1 = new StringReader("~<qr7,");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("~", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(90, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("<", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      
      Token token2 = javaParserTokenManager2.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("qr7", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sPb");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)43;
      StringReader stringReader1 = new StringReader("B>?z2{Mthonw)R^'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("B", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(">", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("?", token2.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(91, token2.kind);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cAQ0BK<B");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)94, (byte)115, (byte)115}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)94, (byte)115, (byte)115}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)48, (byte)94, (byte)115, (byte)115}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)48, (byte)94, (byte)115, (byte)115}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("0", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OUVGr)unDV");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OUVGr)unDV");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjnewStateCnt = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals('O', char0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("UVGr", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      
      stringReader0.mark(0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(")", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(6, token1.endColumn);
      assertEquals(6, token1.beginColumn);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      StringReader stringReader0 = new StringReader("|t>FqHY,Aw%N~*jshi");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("|", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("t", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(">", token2.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(124, token2.kind);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 26, (-1803));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals((-1803), javaCharStream0.getBeginColumn());
      assertEquals((-1800), javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals((-1800), javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals("pppp", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(26, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1800), token0.endColumn);
      assertEquals(26, token0.endLine);
      assertEquals((-1803), token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals((-1800), javaCharStream0.getColumn());
      assertEquals((-1800), javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals((-1800), javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(26, token1.beginLine);
      assertEquals((-1800), token1.beginColumn);
      assertEquals(26, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals((-1800), token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implements");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 1665, 1665);
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1674, javaCharStream0.getColumn());
      assertEquals(1674, javaCharStream0.getEndColumn());
      assertEquals(1665, javaCharStream0.getEndLine());
      assertEquals(1665, javaCharStream0.getBeginColumn());
      assertEquals(1665, javaCharStream0.getBeginLine());
      assertEquals(1665, javaCharStream0.getLine());
      assertEquals("implements", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(1665, token0.endLine);
      assertEquals(1665, token0.beginColumn);
      assertEquals(37, token0.kind);
      assertEquals(1665, token0.beginLine);
      assertEquals(1674, token0.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1665);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1665. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OnVcr)unDV");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)91, (byte)46, (byte)46}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)91, (byte)46, (byte)46}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream1.ReInit((InputStream) byteArrayInputStream0, 68, (int) (byte)46);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)91, (byte)46, (byte)46}, byteArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("OnVcr", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"u\" (117), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"+)");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)104;
      byteArray0[8] = (byte)101;
      byteArray0[3] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)104, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)101}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)104, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)101}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)103, (byte)104, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)101}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)103, (byte)104, (byte)0, (byte)115, (byte)0, (byte)0, (byte)0, (byte)0, (byte)101}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("gh", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l.Ec");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader0, (-1), 47, 47);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(46, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(46, javaCharStream1.getBeginColumn());
      assertEquals(46, javaCharStream1.getColumn());
      assertEquals("", token0.toString());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.endColumn);
      assertEquals(46, token0.beginColumn);
      assertEquals((-1), token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals((-1), token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("l", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
  }
}
