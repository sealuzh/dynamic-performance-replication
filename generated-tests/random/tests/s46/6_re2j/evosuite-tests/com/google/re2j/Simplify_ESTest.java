/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 07:33:11 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 1959;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp0.op = regexp_Op1;
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      regexp0.op = regexp_Op2;
      Object object0 = new Object();
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp1;
      regexp1.subs = regexpArray0;
      regexp0.equals(object0);
      Simplify.simplify(regexp1);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      assertSame(regexp0, regexp3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.toString();
      regexp0.max = (-3827);
      regexp1.reinit();
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp regexp4 = Simplify.simplify(regexp3);
      Regexp regexp5 = Simplify.simplify(regexp2);
      regexp4.max = 1743;
      regexp3.cap = 306;
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp0);
      Regexp regexp6 = Simplify.simplify(regexp4);
      Simplify.simplify(regexp1);
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp7;
      regexp6.subs = regexpArray0;
      regexp6.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp4.op = regexp_Op1;
      Simplify.simplify(regexp4);
      Regexp regexp8 = Simplify.simplify(regexp6);
      assertNotSame(regexp8, regexp5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 1;
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.min = 1;
      String string0 = "EMPTY_MATCH";
      regexp0.name = "EMPTY_MATCH";
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp0.op = regexp_Op1;
      Regexp regexp4 = Simplify.simplify(regexp3);
      Simplify.simplify(regexp3);
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_LINE;
      regexp4.op = regexp_Op2;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.name = "";
      regexp0.runes = null;
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp0);
      regexp2.reinit();
      regexp3.max = 0;
      regexp3.cap = 0;
      Regexp regexp4 = Simplify.simplify(regexp3);
      regexp3.flags = 477;
      Regexp regexp5 = Simplify.simplify(regexp2);
      Regexp regexp6 = Simplify.simplify(regexp1);
      regexp2.cap = 0;
      Regexp regexp7 = Simplify.simplify(regexp5);
      Simplify.simplify(regexp3);
      Simplify.simplify((Regexp) null);
      Regexp regexp8 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp5;
      regexpArray0[1] = regexp6;
      regexpArray0[2] = null;
      regexpArray0[3] = regexp7;
      regexp8.subs = regexpArray0;
      Simplify.simplify(regexp8);
      Simplify.simplify(regexp5);
      Simplify.simplify(regexp4);
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      Regexp regexp9 = new Regexp(regexp_Op1);
      Regexp regexp10 = new Regexp(regexp9);
      regexp10.reinit();
      Regexp regexp11 = Simplify.simplify(regexp10);
      assertNotSame(regexp11, regexp8);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[9];
      intArray0[0] = 920;
      intArray0[1] = 257;
      intArray0[2] = (-1098);
      intArray0[3] = 12589;
      intArray0[4] = (-153);
      intArray0[5] = 3;
      intArray0[6] = 1875;
      intArray0[7] = 1567;
      intArray0[8] = 2497;
      regexp0.runes = intArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertSame(regexp0, regexp2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp0.max = (-3827);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp1.op = regexp_Op1;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp1.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.subs = regexpArray0;
      regexp0.min = 41;
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp0);
      regexp3.subs = regexp2.subs;
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp2);
      regexp3.min = 41;
      Simplify.simplify(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp3);
      assertNotSame(regexp3, regexp4);
      assertFalse(regexp4.equals((Object)regexp3));
      
      Regexp regexp5 = Simplify.simplify(regexp2);
      assertFalse(regexp5.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      int[] intArray0 = new int[7];
      Object object0 = new Object();
      regexp0.equals(object0);
      intArray0[0] = (-926);
      intArray0[1] = 18;
      intArray0[2] = (-2982);
      intArray0[3] = 1121;
      regexp0.max = (-2283);
      intArray0[4] = (-3621);
      intArray0[5] = (-1927);
      regexp2.toString();
      intArray0[6] = (-1);
      regexp2.runes = intArray0;
      Simplify.simplify(regexp2);
      regexp0.toString();
      regexp0.reinit();
      Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp3);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexp4.name = "; ~+";
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp1.min = 37;
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp2);
      regexp1.reinit();
      Simplify.simplify(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp3);
      regexp4.max = 30;
      Simplify.simplify(regexp4);
      Regexp regexp5 = Simplify.simplify(regexp1);
      assertSame(regexp0, regexp5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 10792;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = (-2667);
      Regexp regexp2 = Simplify.simplify(regexp1);
      regexp2.cap = 214;
      Regexp regexp3 = Simplify.simplify(regexp2);
      int[] intArray0 = new int[3];
      intArray0[0] = 214;
      intArray0[1] = 10792;
      intArray0[2] = 214;
      regexp3.runes = intArray0;
      Regexp regexp4 = Simplify.simplify(regexp3);
      assertNotSame(regexp4, regexp0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      assertSame(regexp1, regexp2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp1.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = 41;
      Simplify.simplify(regexp1);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      regexp3.min = 41;
      Simplify.simplify(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp3);
      assertSame(regexp3, regexp4);
      
      Regexp regexp5 = Simplify.simplify(regexp0);
      assertFalse(regexp5.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      int[] intArray0 = new int[4];
      regexp2.equals(regexp0);
      intArray0[0] = 6;
      intArray0[1] = 39;
      regexp0.reinit();
      intArray0[2] = 4157;
      intArray0[3] = (-1916);
      regexp2.runes = intArray0;
      regexp2.op = regexp_Op0;
      Simplify.simplify(regexp2);
      Regexp regexp3 = Simplify.simplify(regexp0);
      regexp3.name = "com.google.re2j.Simplify$1";
      Simplify.simplify(regexp0);
      regexp3.min = (-1916);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp3.op = regexp_Op1;
      Regexp.Op regexp_Op2 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp3.op = regexp_Op2;
      Regexp regexp4 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp3);
      regexp4.flags = 10792;
      Simplify.simplify(regexp0);
      Regexp regexp5 = Simplify.simplify(regexp4);
      Regexp regexp6 = Simplify.simplify(regexp1);
      assertSame(regexp6, regexp5);
  }
}
