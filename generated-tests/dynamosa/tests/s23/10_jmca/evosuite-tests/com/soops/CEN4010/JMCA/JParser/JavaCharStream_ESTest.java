/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 11:43:12 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("k<jM61HBv3j");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1, (-1221), (-265), 564);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1221), javaCharStream0.getEndLine());
      assertEquals((-265), javaCharStream0.getEndColumn());
      assertEquals((-265), javaCharStream0.getColumn());
      assertEquals((-265), javaCharStream0.getBeginColumn());
      assertEquals((-1221), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals('k', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.UpdateLineColumn('k');
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1221), javaCharStream0.getEndLine());
      assertEquals((-264), javaCharStream0.getEndColumn());
      assertEquals((-264), javaCharStream0.getBeginColumn());
      assertEquals((-1221), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getBeginLine());
      assertEquals((-264), javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-358), 'k');
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char[] charArray0 = javaCharStream0.GetSuffix(564);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1221), javaCharStream0.getEndLine());
      assertEquals((-264), javaCharStream0.getEndColumn());
      assertEquals((-264), javaCharStream0.getBeginColumn());
      assertEquals((-1221), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getBeginLine());
      assertEquals((-264), javaCharStream0.getColumn());
      assertNotNull(charArray0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(564, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)91;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-54);
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-2565), 0, (-2565));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.backup(0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      pipedInputStream0.mark(54);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.Done();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn((-2565), 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.prevCharIsLF = false;
      javaCharStream0.ReInit((Reader) stringReader0, 0, 2135, 328);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, (-1), 78, (-1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        javaCharStream1.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(int1 == int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.bufpos = (-1929);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.available = (-1623);
      long long0 = stringReader0.skip((-1623));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-386), 2439);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((Reader) null, 1, (-1655), (-1655));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 1835);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte)0, (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte)0, (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte)0, (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)1, (byte)1);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte)0, (byte)1}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (-4085), (-3759));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte)0, (byte)1}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-4085), javaCharStream0.getLine());
      assertEquals((-4085), javaCharStream0.getEndLine());
      assertEquals((-3759), javaCharStream0.getColumn());
      assertEquals((-3759), javaCharStream0.getEndColumn());
      assertEquals((-4085), javaCharStream0.getBeginLine());
      assertEquals((-3759), javaCharStream0.getBeginColumn());
      assertEquals('\uFFFD', char0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte)0, (byte)1}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(char1 == char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-4085), javaCharStream0.getLine());
      assertEquals((-4085), javaCharStream0.getEndLine());
      assertEquals((-3759), javaCharStream0.getColumn());
      assertEquals((-3759), javaCharStream0.getEndColumn());
      assertEquals((-4085), javaCharStream0.getBeginLine());
      assertEquals((-3759), javaCharStream0.getBeginColumn());
      assertEquals('\u0000', char1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte)0, (byte)1}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      
      char char2 = javaCharStream0.readChar();
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-4085), javaCharStream0.getLine());
      assertEquals((-4085), javaCharStream0.getEndLine());
      assertEquals((-3758), javaCharStream0.getEndColumn());
      assertEquals((-3758), javaCharStream0.getColumn());
      assertEquals((-4085), javaCharStream0.getBeginLine());
      assertEquals((-3759), javaCharStream0.getBeginColumn());
      assertEquals('\u0001', char2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte)0, (byte)1}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      
      int int0 = javaCharStream0.getColumn();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-4085), javaCharStream0.getLine());
      assertEquals((-4085), javaCharStream0.getEndLine());
      assertEquals((-3758), javaCharStream0.getEndColumn());
      assertEquals((-3758), javaCharStream0.getColumn());
      assertEquals((-4085), javaCharStream0.getBeginLine());
      assertEquals((-3759), javaCharStream0.getBeginColumn());
      assertEquals((-3758), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-52), (byte)0, (byte)1}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)58, (-1076));
      assertEquals((-1076), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte)58, (byte)58}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream1, (byte)58, (-842));
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(bufferedInputStream0.equals((Object)bufferedInputStream1));
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertFalse(int1 == int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(bufferedInputStream0, bufferedInputStream1);
      assertNotSame(bufferedInputStream1, bufferedInputStream0);
      assertEquals(0, int1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IIo->K}~!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      stringReader0.close();
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = 0;
      int int1 = (-1484);
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, 0, (-587), (-1484));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char char0 = '3';
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 1779;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-5744), 1779, 117);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = JavaCharStream.hexval('5');
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-926), 72, (byte)91);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        javaCharStream1.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)7;
      StringReader stringReader0 = new StringReader("0i0e- 6<L$V8");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = ')';
      charArray0[4] = 'D';
      charArray0[6] = 'D';
      charArray0[7] = 'D';
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('0', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("");
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertNotNull(stringReader3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      javaCharStream0.bufpos = (int) 'n';
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      charArray0[3] = 'D';
      int int0 = stringReader3.read(charArray0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'n', 'n', '\u0000', 'D'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(int1 == int0);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertEquals(0, int1);
      assertEquals(110, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.backup(9);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(3859, 3859);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(3859, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getEndLine());
      assertEquals(3859, javaCharStream0.getBeginLine());
      assertEquals(3859, javaCharStream0.getLine());
      assertEquals(3859, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(0, 89);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertEquals('\u0000', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      StringReader stringReader0 = new StringReader("HK(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, (int) '0', (int) '0', 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.bufpos = 4062;
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4063
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("");
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertNotNull(stringReader3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'n';
      intArray0[1] = (int) 'n';
      intArray0[2] = (int) 'n';
      intArray0[3] = (-1);
      intArray0[4] = (int) 'n';
      intArray0[5] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'D';
      int int0 = stringReader3.read(charArray0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader2);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'n', 'n', 'n', 'D'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(int1 == int0);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertEquals(0, int1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(9);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(3859, 3859);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-54);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)48);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)91, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)91, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)91, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (byte) (-54), (byte)48);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)91, (byte)7, (byte) (-54)}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)48, (int) (byte)48);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)91, (byte)7, (byte) (-54)}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals('0', char0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)91, (byte)7, (byte) (-54)}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, (int) (byte)48, (int) (byte)0, (int) (byte)91);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)91, (byte)7, (byte) (-54)}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0, 3482, (-1355), 4246);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`");
      assertNotNull(stringReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rAVj!c.,");
      assertFalse(boolean0);
      
      int int0 = (-299);
      boolean boolean1 = stringReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = 3474;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-299), (-299), 3474);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int2 = (-758);
      stringReader0.reset();
      javaCharStream0.inBuf = (-758);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals((-299), javaCharStream0.getColumn());
      assertEquals((-299), javaCharStream0.getLine());
      assertEquals((-299), javaCharStream0.getEndLine());
      assertEquals((-299), javaCharStream0.getBeginLine());
      assertEquals((-299), javaCharStream0.getEndColumn());
      assertEquals((-299), javaCharStream0.getBeginColumn());
      assertEquals('`', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 2456, 2456);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("82>#ClK'");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 4088, 4088);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(978);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3117, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(2266, (-2161));
      assertEquals(2266, javaCharStream0.getLine());
      assertEquals((-2161), javaCharStream0.getEndColumn());
      assertEquals((-2161), javaCharStream0.getColumn());
      assertEquals(2266, javaCharStream0.getEndLine());
      assertEquals(2267, javaCharStream0.getBeginLine());
      assertEquals((-2161), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3117, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(2266, javaCharStream0.getLine());
      assertEquals((-2161), javaCharStream0.getEndColumn());
      assertEquals((-2161), javaCharStream0.getColumn());
      assertEquals(2266, javaCharStream0.getEndLine());
      assertEquals(2267, javaCharStream0.getBeginLine());
      assertEquals((-2161), javaCharStream0.getBeginColumn());
      assertEquals('\u0000', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3118, javaCharStream0.bufpos);
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertEquals(2266, javaCharStream0.getLine());
      assertEquals((-2161), javaCharStream0.getEndColumn());
      assertEquals((-2161), javaCharStream0.getColumn());
      assertEquals(2266, javaCharStream0.getEndLine());
      assertEquals(2266, javaCharStream0.getBeginLine());
      assertEquals((-2161), javaCharStream0.getBeginColumn());
      assertEquals('\u0000', char1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3119, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 1492;
      javaCharStream0.ReInit((Reader) stringReader0, (-1), (-1), 1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("");
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertNotNull(stringReader3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'D';
      int int0 = stringReader3.read(charArray0);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader1);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'n', 'n', 'n', 'D'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertEquals(0, int1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.remaining());
      assertEquals("nnnD", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'n', 'n', 'n', 'D'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int2 = stringReader0.read(charBuffer0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.remaining());
      assertEquals("nnnD", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'n', 'n', 'n', 'D'}, charArray0);
      assertEquals(4, charArray0.length);
      
      javaCharStream0.backup(9);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(3859, 3859);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(3860, javaCharStream0.getBeginLine());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(3859, javaCharStream0.getLine());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(3859, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getEndLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaCharStream0.adjustBeginLineColumn(0, 89);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertEquals('\u0000', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4087, javaCharStream0.bufpos);
      
      int int3 = javaCharStream0.getEndColumn();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertEquals(3859, int3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4087, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-2565), 0, (-2565));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(int1 == int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, int1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 308, 308, 1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = javaCharStream0.GetSuffix(12);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(12, charArray0.length);
      
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 12, 12, 15);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader(")3:^cXT");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn(12, 4184);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(4184, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(4184, javaCharStream0.getBeginColumn());
      assertEquals(')', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (-1), (byte)3, (byte)3);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals('\u0003', char0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArray0.length);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(char1 == char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals('\t', char1);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, byteArray0.length);
      
      int int1 = sequenceInputStream0.read();
      assertFalse(int1 == int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b@k%qF]39]LrW?z5@j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("b@k%qF]39]LrW?z5@j");
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertNotNull(stringReader3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      int int0 = stringReader3.read(charArray0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'b', '@', 'k', '%'}, charArray0);
      assertEquals(4, charArray0.length);
      
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertEquals(0, int1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(9);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(3859, 3859);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(3860, javaCharStream0.getBeginLine());
      assertEquals(3859, javaCharStream0.getEndLine());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(3859, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getLine());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(0, 89);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertEquals('\u0000', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4087, javaCharStream0.bufpos);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertTrue(char1 == char0);
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3859, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertEquals('\u0000', char1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4088, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(9, 0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4088, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F$");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47, 47);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = javaCharStream0.GetSuffix(47);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, charArray0.length);
      
      stringReader0.reset();
      int[] intArray0 = new int[6];
      intArray0[0] = 70;
      intArray0[1] = 47;
      intArray0[2] = 70;
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      javaCharStream0.adjustBeginLineColumn(350, 88);
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(351, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      char char0 = '8';
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
      
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q^BJo]~$yzm+");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2048, 98);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn(3, 3);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertNotNull(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(int1 == int0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, int1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader(string0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertNotNull(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix((-601));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        JavaCharStream.hexval('g');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 79);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)17, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)17, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)17, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, (-1), (byte)17, 2048);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)17, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      javaCharStream0.Done();
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)17, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      StringReader stringReader0 = new StringReader("HK(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0, (int) '0', (int) '0', 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.inBuf = 4062;
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(0, 4062);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.prevCharIsLF = false;
      javaCharStream0.available = (-1623);
      long long0 = stringReader0.skip((-1623));
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(1, 350);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("");
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertNotNull(stringReader3);
      
      char[] charArray0 = new char[4];
      int int0 = stringReader2.read(charArray0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader3);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {' ', 'U', 'G', ''}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, int1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int2 = (-1691);
      javaCharStream0.backup((-1691));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1690, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(0, 9);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1690, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(89, 57);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1690, javaCharStream0.bufpos);
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F$");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47, 47);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = javaCharStream0.GetSuffix(47);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, charArray0.length);
      
      stringReader0.reset();
      int[] intArray0 = new int[6];
      intArray0[0] = 70;
      intArray0[1] = 47;
      intArray0[2] = 70;
      intArray0[3] = 70;
      intArray0[4] = 70;
      intArray0[5] = 70;
      javaCharStream0.bufline = intArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 47, 47, 1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = JavaCharStream.hexval('3');
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('F', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int2 = javaCharStream0.getBeginLine();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.backup((-1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, (-1), 47, (-1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2885, 2885);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
      
      int int1 = JavaCharStream.hexval('2');
      assertTrue(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[JnaY(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1, 1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HK(");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("HK(");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
      
      StringReader stringReader0 = new StringReader("tA*(,YFC((4mp");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1326, 9);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = 0;
      int int1 = (-792);
      javaCharStream0.ReInit((Reader) null, (-792), 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("");
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertNotNull(stringReader3);
      
      char[] charArray0 = new char[14];
      charArray0[3] = 'D';
      int int0 = stringReader3.read(charArray0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertEquals((-1), int0);
      assertEquals(14, charArray0.length);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertEquals(0, int1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.backup(9);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(3859, 3859);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(3859, javaCharStream0.getBeginColumn());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(3859, javaCharStream0.getLine());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(3859, javaCharStream0.getEndLine());
      assertEquals(3860, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(0, 89);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertEquals('\u0000', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4087, javaCharStream0.bufpos);
      
      int int2 = javaCharStream0.getBeginColumn();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3859, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3859, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertEquals(89, int2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4087, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[JnaY(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      stringReader0.reset();
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals('[', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ExpandBuff(true);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn((-3319), (-3319));
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-3318), javaCharStream0.getEndLine());
      assertEquals((-3319), javaCharStream0.getBeginColumn());
      assertEquals((-3319), javaCharStream0.getBeginLine());
      assertEquals((-3318), javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = javaCharStream0.getColumn();
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-3318), javaCharStream0.getEndLine());
      assertEquals((-3319), javaCharStream0.getBeginColumn());
      assertEquals((-3319), javaCharStream0.getBeginLine());
      assertEquals((-3318), javaCharStream0.getLine());
      assertEquals(0, int0);
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 2456, 2456, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-282), (-282));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
      
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      int int1 = 98;
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = 81;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = 12;
      intArray0[6] = 12;
      javaCharStream0.bufline = intArray0;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(12);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4083, javaCharStream0.bufpos);
      
      char[] charArray0 = javaCharStream0.GetSuffix(12);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotNull(charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4083, javaCharStream0.bufpos);
      assertEquals(12, charArray0.length);
      
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2703);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      int int1 = JavaCharStream.hexval('3');
      assertTrue(int1 == int0);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)91;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-54);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)48);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (byte) (-54), (byte)48);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)48, (int) (byte)48);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals('0', char0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, (int) (byte)48, (int) (byte)0, (int) (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)7, (byte) (-54)}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[5];
      StringReader stringReader1 = new StringReader(";|Ot");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.inputStream = (Reader) stringReader1;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      charArray0[0] = 'k';
      charArray0[1] = 'n';
      charArray0[2] = '&';
      charArray0[3] = 'b';
      charArray0[4] = 'D';
      javaCharStream0.buffer = charArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read(charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'k', 'n', '&', 'b', 'D'}, charArray0);
      assertEquals(5, charArray0.length);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, int1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(9);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(4086, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn((-1), 1672);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1672, javaCharStream0.getBeginColumn());
      assertEquals(1672, javaCharStream0.getColumn());
      assertEquals(1672, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(4086, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int2 = javaCharStream0.getLine();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1672, javaCharStream0.getBeginColumn());
      assertEquals(1672, javaCharStream0.getColumn());
      assertEquals(1672, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1), int2);
      assertEquals(4086, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      StringReader stringReader0 = new StringReader("HK(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, (int) '0', (int) '0', 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 88, 81, 94);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream1.adjustBeginLineColumn(1075, 225);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(225, javaCharStream1.getBeginColumn());
      assertEquals(1076, javaCharStream1.getBeginLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      String string0 = javaCharStream1.GetImage();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(225, javaCharStream1.getBeginColumn());
      assertEquals(1076, javaCharStream1.getBeginLine());
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream1.ReInit((Reader) stringReader0, 225, (-2546));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 81);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream1.readChar();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(225, javaCharStream1.getLine());
      assertEquals(225, javaCharStream1.getEndLine());
      assertEquals((-2546), javaCharStream1.getColumn());
      assertEquals(225, javaCharStream1.getBeginLine());
      assertEquals((-2546), javaCharStream1.getEndColumn());
      assertEquals((-2546), javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('H', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      StringReader stringReader0 = new StringReader("]l");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, (int) '0', (int) '0', 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn((-1618), (-1618));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = 4;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = (-1355);
      javaCharStream0.ReInit((Reader) stringReader0, 4246, (-1355), 3482);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = 'e';
      int int3 = JavaCharStream.hexval('e');
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(14, int3);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HK(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals('H', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(char1 == char0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals('K', char1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1136);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1136, 1136);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@([NB &");
      assertNotNull(stringReader0);
      
      int int0 = 1003;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream(stringReader0, 1003, 1003, (-3235));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 13;
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 1138, 13);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.nextCharInd = 13;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byteArray0[5] = (byte)0;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)8;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 79, (byte)17, 3163);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("'Uw'O5BqnrWm");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1, (int) (byte)8, (-16), 75);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 4096, 79, (byte)0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char char0 = javaCharStream1.BeginToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(79, javaCharStream1.getBeginColumn());
      assertEquals(79, javaCharStream1.getColumn());
      assertEquals(79, javaCharStream1.getEndColumn());
      assertEquals(4096, javaCharStream1.getBeginLine());
      assertEquals(4096, javaCharStream1.getLine());
      assertEquals(4096, javaCharStream1.getEndLine());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('\'', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      javaCharStream1.UpdateLineColumn('=');
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(80, javaCharStream1.getBeginColumn());
      assertEquals(80, javaCharStream1.getEndColumn());
      assertEquals(4096, javaCharStream1.getBeginLine());
      assertEquals(4096, javaCharStream1.getLine());
      assertEquals(4096, javaCharStream1.getEndLine());
      assertEquals(80, javaCharStream1.getColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(80, javaCharStream1.getBeginColumn());
      assertEquals(80, javaCharStream1.getEndColumn());
      assertEquals(4096, javaCharStream1.getBeginLine());
      assertEquals(4096, javaCharStream1.getLine());
      assertEquals(4096, javaCharStream1.getEndLine());
      assertEquals(80, javaCharStream1.getColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[JnaY(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('[', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(2446, 2446);
      assertEquals(2446, javaCharStream0.getBeginColumn());
      assertEquals(2447, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(2446, javaCharStream0.getBeginColumn());
      assertEquals(2447, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.readChar();
      assertFalse(char1 == char0);
      assertEquals(2448, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(2448, javaCharStream0.getLine());
      assertEquals(2448, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals('J', char1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.ExpandBuff(true);
      assertEquals(2448, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4096, javaCharStream0.bufpos);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      int int1 = JavaCharStream.hexval('9');
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      javaCharStream0.ReInit((InputStream) mockFileInputStream0, 3, 3);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(fileDescriptor0.valid());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      javaCharStream0.ReInit((InputStream) mockFileInputStream0, 3, (-626), (-1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(fileDescriptor0.valid());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-2565), 0, (-2565));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.backup(0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      pipedInputStream0.mark(54);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 1492;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('T');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      String string0 = "9";
      StringReader stringReader0 = new StringReader("9");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("9");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 0, 0, 0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.prevCharIsLF = false;
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 2456, 2456);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(2456);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1639, javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      StringReader stringReader0 = new StringReader("HK(");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[JnaY(");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      javaCharStream0.ReInit((Reader) stringReader0, 4059, 4092, 2694);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      StringReader stringReader0 = new StringReader("'\"[QwQ]ZAU<");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = 'D';
      charArray0[3] = ')';
      charArray0[4] = 'D';
      charArray0[5] = 'T';
      charArray0[6] = 'U';
      charArray0[7] = 'D';
      charArray0[8] = 'O';
      int int1 = stringReader0.read(charArray0);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      assertArrayEquals(new char[] {'\'', '\"', '[', 'Q', 'w', 'Q', ']', 'Z', 'A'}, charArray0);
      assertEquals(9, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int2 = javaCharStream0.getBeginLine();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(9);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      javaCharStream0.adjustBeginLineColumn(0, (byte)7);
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int[] intArray0 = new int[7];
      stringReader0.reset();
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 358, (-1));
      assertEquals((-350), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte) (-34), (byte) (-1), (byte)58, (byte)58, (byte)58, (byte)61}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals((-350), byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte) (-34), (byte) (-1), (byte)58, (byte)58, (byte)58, (byte)61}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals((-350), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte) (-34), (byte) (-1), (byte)58, (byte)58, (byte)58, (byte)61}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 66, (-1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-350), byteArrayInputStream0.available());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte) (-34), (byte) (-1), (byte)58, (byte)58, (byte)58, (byte)61}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(8, byteArray0.length);
      
      int int0 = javaCharStream1.getBeginLine();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-350), byteArrayInputStream0.available());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte) (-34), (byte) (-1), (byte)58, (byte)58, (byte)58, (byte)61}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(8, byteArray0.length);
      
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[Jna=Y(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[5];
      StringReader stringReader1 = new StringReader(";|Ot");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.inputStream = (Reader) stringReader1;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      charArray0[0] = 'k';
      boolean boolean1 = stringReader1.ready();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringReader1, stringReader0);
      assertTrue(boolean1);
      
      charArray0[1] = 'n';
      charArray0[2] = '&';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      int int0 = stringReader0.read(charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'k', 'n', '&', 'b', 'b'}, charArray0);
      assertEquals(5, charArray0.length);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, int1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(9);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(4086, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn(1672, 0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1672, javaCharStream0.getLine());
      assertEquals(1673, javaCharStream0.getBeginLine());
      assertEquals(1672, javaCharStream0.getEndLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(4086, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn((-1), 9);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(4086, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals('\u0000', char0);
      assertEquals(4087, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int2 = javaCharStream0.getEndLine();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, int2);
      assertEquals(4087, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int3 = javaCharStream0.getEndLine();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, int3);
      assertEquals(4087, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[JnaY(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals('[', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn(1, 1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
      
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qd!Se99cI|RL");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ExpandBuff(false);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qnj\"9|0T,'%qa8Ty");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = 1138;
      javaCharStream0.inBuf = 1138;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.column = (-2510);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.mark(5086);
      javaCharStream0.backup((-1831));
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1830, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, (-1647), 0, (-3813));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-759), 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = javaCharStream0.GetSuffix(1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = 4;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 4);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 4, (-513));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int[] intArray0 = new int[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)114;
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, (-800), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F$");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47, 47);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = javaCharStream0.GetSuffix(47);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(47, charArray0.length);
      
      stringReader0.reset();
      int[] intArray0 = new int[6];
      intArray0[0] = 70;
      intArray0[1] = 47;
      intArray0[2] = 70;
      intArray0[3] = 70;
      intArray0[4] = 70;
      intArray0[5] = 70;
      javaCharStream0.ReInit((Reader) stringReader0, 70, 68, 47);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.bufline = intArray0;
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, 47, 47, 70);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = JavaCharStream.hexval('3');
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('F', char0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int2 = javaCharStream0.getBeginLine();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, int2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.backup((-1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, (-1), 47, (-1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      long long0 = 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)34;
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'D';
      charArray0[2] = '&';
      charArray0[3] = 'i';
      charArray0[4] = '<';
      charArray0[5] = '9';
      charArray0[6] = 'N';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byteArray0[4] = (byte)105;
      long long1 = bufferedInputStream0.skip((-1460L));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        bufferedInputStream0.read(byteArray0, (int) (byte)105, (int) (byte)105);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b@k%qF]39]LrW?z5@j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, (-1), (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, 1, 61);
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 79);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, (byte)8, 3411);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)17, 3411);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(3411, javaCharStream0.getColumn());
      assertEquals(3411, javaCharStream0.getEndColumn());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals('\u0011', char0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(char1 == char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(3411, javaCharStream0.getColumn());
      assertEquals(3411, javaCharStream0.getEndColumn());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals('\u0000', char1);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      javaCharStream0.ExpandBuff(true);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4096, javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      int int0 = javaCharStream0.getLine();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4096, javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4052, 4052);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(4052);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(43, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals('\u0000', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(44, javaCharStream0.bufpos);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 79);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 3, (byte)8);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals('\u0011', char0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(char1 == char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals('\u0000', char1);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      int int0 = javaCharStream0.getEndLine();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(string0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn(')');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2703);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn((-528), 2703);
      assertEquals(0, pipedInputStream0.available());
      assertEquals((-527), javaCharStream0.getBeginLine());
      assertEquals(2703, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-2565), 0, (-2565));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("HI[R<G@k=");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 1122, 0, 92);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1122, javaCharStream0.getLine());
      assertEquals(1122, javaCharStream0.getBeginLine());
      assertEquals(1122, javaCharStream0.getEndLine());
      assertEquals('H', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.UpdateLineColumn('4');
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1122, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1122, javaCharStream0.getBeginLine());
      assertEquals(1122, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1122, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1122, javaCharStream0.getBeginLine());
      assertEquals(1122, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = 4;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 4);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 4, (-513));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 79);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)19, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, int0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)7, (byte)19, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)7, (byte)19, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("KB6");
      assertNotNull(stringReader0);
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(75, int1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, (byte)19, (byte)7);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0, (int) (byte)7, (int) (byte) (-98), (int) (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals((-98), javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals((-98), javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getLine());
      assertEquals((-98), javaCharStream0.getColumn());
      assertEquals('B', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(char1 == char0);
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals((-97), javaCharStream0.getEndColumn());
      assertEquals((-97), javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getLine());
      assertEquals((-97), javaCharStream0.getColumn());
      assertEquals('6', char1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.UpdateLineColumn('6');
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals((-96), javaCharStream0.getEndColumn());
      assertEquals((-96), javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getLine());
      assertEquals((-96), javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals((-96), javaCharStream0.getEndColumn());
      assertEquals((-96), javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getLine());
      assertEquals((-96), javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 748, 1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, charArray0.length);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (-1), (-2836), (byte)3);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2836), javaCharStream0.getEndColumn());
      assertEquals((-2836), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals((-2836), javaCharStream0.getBeginColumn());
      assertEquals('\u0003', char0);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(char1 == char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2832), javaCharStream0.getBeginColumn());
      assertEquals((-2832), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals((-2832), javaCharStream0.getColumn());
      assertEquals('\t', char1);
      assertArrayEquals(new byte[] {(byte)3, (byte)9}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 79);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, (byte)8, 3411);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)17, 3411);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(3411, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(3411, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertEquals('\u0011', char0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, (int) (byte)0, (-1), (-1076));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 79);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, (byte)8, 3411);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      javaCharStream0.Done();
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)17, 3411);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertEquals(3411, javaCharStream0.getEndColumn());
      assertEquals(3411, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals('\u0011', char0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(char1 == char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertEquals(3411, javaCharStream0.getEndColumn());
      assertEquals(3411, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals('\u0000', char1);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      javaCharStream0.ExpandBuff(true);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      int int0 = javaCharStream0.getLine();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3411, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("%3wI0WQQI");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, 3160, 0, (-406));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      stringReader0.reset();
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1, 86, 0, 1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(' ', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.UpdateLineColumn(' ');
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 10, 0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-2565), (-2565), (-2565));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, charArray0.length);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b@k%qF]39]LrW?z5@j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("b@k%qF]39]LrW?z5@j");
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertNotNull(stringReader3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertEquals(0, int0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.backup(9);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+g");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2885, 2885);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ExpandBuff(false);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-2565), 0, (-2565));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = javaCharStream0.GetSuffix(0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('W');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, 0, 0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("HK(");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-924), (-1002));
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, 126, 0, 92);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      long long0 = stringReader0.skip((-1305L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(mockFileInputStream0, 15, (-46));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream1.adjustBeginLineColumn(102, (-2077));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(fileDescriptor0.valid());
      assertEquals((-2077), javaCharStream1.getBeginColumn());
      assertEquals(103, javaCharStream1.getBeginLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream1.GetImage();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(fileDescriptor0.valid());
      assertEquals((-2077), javaCharStream1.getBeginColumn());
      assertEquals(103, javaCharStream1.getBeginLine());
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        JavaCharStream.hexval('r');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = (-3039);
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, (-3039), 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      byte byte0 = (byte)58;
      byte byte1 = (byte)61;
      int int0 = 358;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)82, 699);
      assertEquals((-78), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte)61, (byte)61, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals((-78), byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte)61, (byte)61, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals((-78), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte)61, (byte)61, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)61, 699);
      assertEquals((-78), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte)61, (byte)61, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArray0.length);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(int1 == int0);
      assertEquals((-78), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)82, (byte)61, (byte)61, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArray0.length);
      
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 11, 11);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = javaCharStream0.GetSuffix(11);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = JavaCharStream.hexval('f');
      assertEquals(15, int0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(sequenceInputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byte byte0 = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)8;
      byte byte1 = (byte) (-54);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-190), 4090);
      assertEquals(197, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(197, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(4049);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pushbackInputStream0);
      assertEquals(197, byteArrayInputStream0.available());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byteArrayInputStream0.reset();
      assertEquals(197, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1, 4090);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((InputStream) pushbackInputStream0, (-1), (int) (byte) (-98));
      assertEquals(197, byteArrayInputStream0.available());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)17, (byte)0, (byte)7, (byte)8, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-3910), (-3910));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.inBuf = 54;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.line = (-3910);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'D';
      int int0 = stringReader0.read(charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'n', 'n', 'n', 'D'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int1 = JavaCharStream.hexval('D');
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      int int2 = javaCharStream0.getBeginLine();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertEquals(0, int2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn(0, 100);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(string0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 2456, 2456);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(2456);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1639, javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1639, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.adjustBeginLineColumn(0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[JnaY(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      javaCharStream0.getBeginLine();
      javaCharStream0.backup(9);
      javaCharStream0.adjustBeginLineColumn((-683), 1);
      javaCharStream0.readChar();
      javaCharStream0.BeginToken();
      javaCharStream0.adjustBeginLineColumn(1, (-683));
      javaCharStream0.GetImage();
      assertEquals(4089, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = (-2565);
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JavaCharStream.hexval('b');
      StringReader stringReader0 = new StringReader("LANMWP#");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup(57);
      javaCharStream0.UpdateLineColumn('v');
      javaCharStream0.AdjustBuffSize();
      try { 
        JavaCharStream.hexval('v');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char char0 = '0';
      JavaCharStream.hexval('0');
      StringReader stringReader0 = new StringReader("HK(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, 564, (int) '0', 0);
      javaCharStream0.readChar();
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = '0';
      charArray0[3] = 'H';
      javaCharStream0.GetImage();
      charArray0[4] = '0';
      charArray0[5] = 'H';
      charArray0[6] = '0';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-902), 3652);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[JnaY(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      javaCharStream0.getBeginLine();
      javaCharStream0.backup(9);
      javaCharStream0.adjustBeginLineColumn((-683), 1);
      javaCharStream0.readChar();
      javaCharStream0.GetImage();
      assertEquals(4088, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = JavaCharStream.hexval('C');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 4;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 4);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 4, (-513));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1087, (byte)58);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      int int1 = 264;
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 0;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 0, 0, (-4864));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 93, (byte)17);
      byteArrayInputStream0.read(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      StringReader stringReader0 = new StringReader("KB6");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 98, 90, 1);
      javaCharStream0.ReInit((Reader) stringReader0, 90, 98, 1007);
      javaCharStream0.BeginToken();
      javaCharStream0.UpdateLineColumn('3');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KB6");
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 60, 1863);
      javaCharStream1.AdjustBuffSize();
      javaCharStream0.adjustBeginLineColumn((-1), 447);
      // Undeclared exception!
      try { 
        javaCharStream1.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = (-82);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-82), 70);
      int int1 = 13;
      javaCharStream0.available = 13;
      javaCharStream0.bufsize = 13;
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 79);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      StringReader stringReader0 = new StringReader("KB6");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, (byte)7, (byte)0);
      javaCharStream0.ReInit((Reader) stringReader0, (int) (byte)7, (int) (byte) (-98), (int) (byte)8);
      javaCharStream0.BeginToken();
      javaCharStream0.UpdateLineColumn('K');
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader(".");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix((-500));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JavaCharStream.hexval('0');
      StringReader stringReader0 = new StringReader("H0+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      javaCharStream0.ReadByte();
      javaCharStream0.bufcolumn = null;
      // Undeclared exception!
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('3');
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 3, 1143);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 4096, 10);
      StringReader stringReader0 = new StringReader("s3$Ae5o(17HpG%J2:|v");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.readChar();
      javaCharStream0.ReInit((InputStream) pipedInputStream0, (-1076), 0, (-2346));
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char char0 = '0';
      JavaCharStream.hexval('0');
      StringReader stringReader0 = new StringReader("HK(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int int0 = 564;
      javaCharStream0.ReInit((Reader) stringReader0, 564, (int) '0', 0);
      javaCharStream0.inBuf = 4062;
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('3');
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2048, 98);
      javaCharStream0.adjustBeginLineColumn(3, 3);
      javaCharStream0.GetImage();
      assertEquals(3, javaCharStream0.getBeginColumn());
      
      int int0 = JavaCharStream.hexval('C');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b@k%qF]39]LrW?z5@j");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null, 92, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b@k%qF]39]LrW?z5@j");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      StringReader stringReader3 = new StringReader("b@k%qF]39]LrW?z5@j");
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      javaCharStream0.nextCharBuf = charArray0;
      javaCharStream0.getBeginLine();
      javaCharStream0.backup(9);
      javaCharStream0.ReInit((Reader) stringReader3, 3859, 6);
      javaCharStream0.adjustBeginLineColumn(3859, 3859);
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
      
      int int1 = JavaCharStream.hexval('a');
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JavaCharStream.hexval('0');
      StringReader stringReader0 = new StringReader("HK(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, (int) '0', (int) '0', 0);
      char char0 = javaCharStream0.readChar();
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals('H', char0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.GetImage();
      javaCharStream0.ReInit((Reader) stringReader0, 12, 2069, 12);
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byte byte1 = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)58, (byte)17);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, (byte)0, (-3026));
      javaCharStream0.getBeginLine();
      JavaCharStream.hexval('a');
      javaCharStream0.ReInit((InputStream) dataInputStream0, (int) (byte)17, 0, (int) (byte)7);
      byteArrayInputStream0.markSupported();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = JavaCharStream.hexval('7');
      assertEquals(7, int0);
      
      StringReader stringReader0 = new StringReader("wn)");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReadByte();
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 2456, 2456);
      javaCharStream0.backup(2456);
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3o{0vtdZpgAN>8(X");
      int int0 = 12;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 12);
      javaCharStream0.backup(12);
      javaCharStream0.readChar();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream.hexval('e');
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-2565), 0, (-2565));
      javaCharStream0.backup(0);
      pipedInputStream0.mark(54);
      javaCharStream0.adjustBeginLineColumn((-2565), 54);
      javaCharStream0.GetImage();
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)58, (byte)17);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, (byte)0, (-3026));
      javaCharStream0.getBeginLine();
      JavaCharStream.hexval('a');
      javaCharStream0.ReInit((InputStream) dataInputStream0, (int) (byte)17, 0, (int) (byte)7);
      javaCharStream0.ReInit((Reader) null, (-1183), (int) (byte)0, (int) (byte)8);
      byteArrayInputStream0.markSupported();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JavaCharStream.hexval('0');
      StringReader stringReader0 = new StringReader("HK(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, (int) '0', (int) '0', 0);
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q4*");
      stringReader0.read();
      int int0 = 2;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1208), 2);
      javaCharStream0.ReInit((Reader) stringReader0, 2, 4071, 81);
      stringReader0.ready();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaCharStream0.adjustBeginLineColumn(1232, 4070);
      javaCharStream0.prevCharIsLF = false;
      javaCharStream0.FillBuff();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)18;
      byteArray0[1] = (byte)48;
      byteArray0[4] = (byte)91;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-54);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)18, (byte)48);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (byte) (-54), (byte)0);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)0, (int) (byte)48);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JavaCharStream.hexval('4');
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 1535, 1535);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, (-918), 0);
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JavaCharStream.hexval('9');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)9;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 1, 338, (byte)3);
      javaCharStream0.backup(9);
      javaCharStream0.adjustBeginLineColumn((byte)3, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      StringReader stringReader3 = new StringReader("");
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'D';
      stringReader3.read(charArray0);
      javaCharStream0.getBeginLine();
      javaCharStream0.backup(9);
      javaCharStream0.adjustBeginLineColumn(3859, 3859);
      javaCharStream0.adjustBeginLineColumn(0, 89);
      javaCharStream0.readChar();
      assertEquals(89, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (byte) (-98), (byte) (-98), 0);
      javaCharStream0.backup((byte) (-98));
      javaCharStream0.GetImage();
      javaCharStream0.getEndColumn();
      assertEquals(97, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)14;
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O<qx0j)Ve+GN%");
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-3362), (-3362));
      javaCharStream0.column = (-1425);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.bufsize = (-3362);
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0);
      StringReader stringReader2 = new StringReader("");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      // Undeclared exception!
      try { 
        javaCharStream1.UpdateLineColumn('J');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)7;
      StringReader stringReader0 = new StringReader("0i0e- 6<L$V8");
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = ')';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      charArray0[7] = 'D';
      charArray0[8] = 'D';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.getBeginLine();
      javaCharStream0.backup(4042);
      javaCharStream0.adjustBeginLineColumn((byte)7, (-766));
      javaCharStream0.getLine();
      javaCharStream0.GetImage();
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      char[] charArray0 = new char[5];
      StringReader stringReader1 = new StringReader(";|Ot");
      javaCharStream0.inputStream = (Reader) stringReader1;
      charArray0[0] = 'k';
      charArray0[1] = 'n';
      charArray0[2] = '&';
      charArray0[3] = 'b';
      charArray0[4] = 'D';
      javaCharStream0.buffer = charArray0;
      stringReader0.read(charArray0);
      javaCharStream0.getBeginLine();
      javaCharStream0.backup(9);
      javaCharStream0.adjustBeginLineColumn(1672, 0);
      javaCharStream0.adjustBeginLineColumn((-1), 9);
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4087
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">7:`_t6");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, 1, 931, 931);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 372, 372);
      CharBuffer charBuffer0 = CharBuffer.allocate(372);
      stringReader0.read(charBuffer0);
      javaCharStream0.ReInit((Reader) stringReader0, 372, 372);
      try { 
        JavaCharStream.hexval('z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JavaCharStream.hexval('9');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      byteArrayInputStream0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (-1), (-2836), (byte)3);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, 9, (-2836));
      javaCharStream1.BeginToken();
      javaCharStream1.adjustBeginLineColumn(1, (byte)9);
      javaCharStream0.GetImage();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)55;
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1654), (-1654));
      javaCharStream0.Done();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b@k%qF]39]LrW?z5@j");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)17;
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("5Iywj6Rr:<t/#NSGx");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, 1, 1, 84);
      javaCharStream0.adjustBeginLineColumn(1, (-3051));
      javaCharStream0.getBeginColumn();
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-3051), javaCharStream0.getBeginColumn());
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-2565), 0, (-2565));
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
      
      javaCharStream0.getBeginColumn();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('8');
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.available = 91;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaCharStream0.ReInit((Reader) null, 91, 91, 91);
      javaCharStream0.getBeginLine();
      javaCharStream0.ReInit((Reader) null);
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E*\" Fjx4'");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3118, 3118);
      javaCharStream0.backup(973);
      assertEquals(3122, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JavaCharStream.hexval('7');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('4');
      JavaCharStream.hexval('4');
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 4, 4);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      try { 
        javaCharStream1.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z3Rnv:2");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2535), (byte)1);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)84, (byte)15);
      javaCharStream1.backup(978);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream2.adjustBeginLineColumn((-1), (byte)87);
      javaCharStream1.BeginToken();
      // Undeclared exception!
      try { 
        javaCharStream2.ReadByte();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      char char0 = '3';
      JavaCharStream.hexval('3');
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 308, 96, 1);
      javaCharStream0.GetSuffix(12);
      int int0 = JavaCharStream.hexval('F');
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b@k%qF]39]LrW?z5@j");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader(" UGm yWU7=6y+C");
      StringReader stringReader2 = new StringReader(" UGm yWU7=6y+C");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      javaCharStream0.BeginToken();
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, 1, 0, 1);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JavaCharStream.hexval('c');
      StringReader stringReader0 = new StringReader("");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("k<jM61HBv3j");
      javaCharStream0.ReInit((Reader) stringReader1, 589, (-265), 564);
      javaCharStream0.BeginToken();
      javaCharStream0.UpdateLineColumn('k');
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-358), 10);
      javaCharStream0.AdjustBuffSize();
      assertEquals(589, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 79);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.column = (int) (byte) (-125);
      javaCharStream0.readChar();
      javaCharStream0.readChar();
      javaCharStream0.BeginToken();
      javaCharStream0.UpdateLineColumn('\u0000');
      javaCharStream0.getEndLine();
      int int0 = javaCharStream0.getEndColumn();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-121), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y`)I|13lGCf%");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1835);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pipedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 79);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (-3759), 4279);
      javaCharStream0.readChar();
      javaCharStream0.ReadByte();
      javaCharStream0.readChar();
      javaCharStream0.getColumn();
      int int0 = javaCharStream0.getEndLine();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-3759), int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
  }
}
