/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:26:53 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?N[H");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error :");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[0];
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, 86, parserConfig0, 86);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = '8';
      Class<Long> class0 = Long.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.getDeserializer((Type) class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("P;", parserConfig0, 187);
      defaultJSONParser0.setResolveStatus(187);
      ParserConfig parserConfig1 = new ParserConfig();
      defaultJSONParser0.setConfig(parserConfig1);
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gzip", parserConfig0, 0);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":yhel;");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but :, pos 1, json : :yhel;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.awt.GridBagConstraints@119171f3");
      Class<HttpCookie> class0 = HttpCookie.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$.java.awt.GridBagConstraints@119171f3";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "p8";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("p8", (-1859));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Feature feature0 = Feature.SortFeidFastMatch;
      defaultJSONParser0.isEnabled(feature0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$.java.awt.GridBagConstraints@4062cc43");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Locale locale0 = Locale.ITALIAN;
      Stack<ImageCapabilities> stack0 = new Stack<ImageCapabilities>();
      defaultJSONParser0.checkListResolve(stack0);
      defaultJSONParser0.setDateFormat("$.java.awt.GridBagConstraints@4062cc43");
      defaultJSONParser0.getConfig();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.com.alibaba.fastjson.parser.ParserConfig@5");
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.com.alibaba.fastjson.parser.DefaultJSONParser@2");
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("$.com.alibaba.fastjson.parser.DefaultJSONParser@2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ., info : pos 1, json : $.com.alibaba.fastjson.parser.DefaultJSONParser@2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      String string0 = "$.java.awt.GridBagConstraints@62808543";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$.java.awt.GridBagConstraints@62808543");
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*k`A{dv3z^z5(qk");
      defaultJSONParser0.getInput();
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("K?T.m&UJycS");
      defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("illegal ref, ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : illegal ref, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parseKey();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("create instance error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("gA%.", parserConfig0, 2147483645);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : gA%.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'Y';
      charArray0[3] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.java.awt.GridBagConstraints@2682533d", parserConfig0, 456);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-lZ>QB5#0@}s");
      defaultJSONParser0.setResolveStatus(52);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4h6");
      defaultJSONParser0.parseKey();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(20, (-4265));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect EOF, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      String string0 = ";Ljava/lang/reflect/Tpe;Ljava/lang/Objec;Ljava/lang/Object;)Ljava/lang/Object;";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/reflect/Tpe;Ljava/lang/Objec;Ljava/lang/Object;)Ljava/lang/Object;");
      Hashtable<HttpCookie, BigDecimal> hashtable0 = new Hashtable<HttpCookie, BigDecimal>();
      defaultJSONParser0.checkMapResolve(hashtable0, hashtable0);
      defaultJSONParser0.getSymbolTable();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ;, pos 1, json : ;Ljava/lang/reflect/Tpe;Ljava/lang/Objec;Ljava/lang/Object;)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("j\"'");
      Integer integer0 = new Integer(1);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("u<h");
      defaultJSONParser0.parseKey();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unterminated json string, ", 3882);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      parserConfig0.setDefaultClassLoader(classLoader1);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "unterminated json string, ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      JSONScanner jSONScanner0 = new JSONScanner("getFieldType", 267);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(locale0, jSONScanner0, parserConfig0);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0E)i.-hC6WzScvd[");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 2, json : 0E)i.-hC6WzScvd[
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("zKYwBx!Z", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      Locale locale0 = Locale.ENGLISH;
      Object object0 = new Object();
      IsoEra isoEra0 = IsoEra.BCE;
      defaultJSONParser0.getFieldTypeResolver();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-100));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName -100
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("()Z");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) classLoader0, (Object) parameterizedTypeImpl0);
      parseContext0.toString();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.autoTypeAccept");
      defaultJSONParser0.checkMapResolve(properties0, parserConfig0);
      defaultJSONParser0.resolveReference("()Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("MiscCodec not support ");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.handleResovleTask((Object) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect int, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4h6");
      defaultJSONParser0.parseKey();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4h6");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4h6");
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unterminated json string, ", 3882);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.getLexer();
      defaultJSONParser0.close();
      defaultJSONParser0.getResolveStatus();
      defaultJSONParser0.setDateFormat("fastjson.parser.deny");
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      Feature feature0 = Feature.SupportArrayToBean;
      defaultJSONParser0.config(feature0, false);
      Class<Short> class0 = Short.TYPE;
      HashSet<PageAttributes> hashSet0 = new HashSet<PageAttributes>();
      defaultJSONParser0.getConfig();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) hashSet0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ,, pos 1, json : , pos 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2,plqKkS{DK*Eh)Yo6", parserConfig0);
      defaultJSONParser0.setContext((Object) class0, (Object) parserConfig0);
      defaultJSONParser0.popContext();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("agTIex", parserConfig0, 24180);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = '`';
      charArray0[2] = '^';
      charArray0[3] = '#';
      charArray0[4] = '%';
      charArray0[5] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 8);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$R)Cw`k*z", parserConfig0, 57);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      JSON.DEFAULT_GENERATE_FEATURE = 1436;
      defaultJSONParser0.resolveReference("$.java.awt.GridBagConstraints@2e61abbc");
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) null);
      assertNotNull(parseContext1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unterminated json string, ", 3910);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      defaultJSONParser0.getLexer();
      defaultJSONParser0.close();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 12, json : unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1&T", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.global = parserConfig0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2,plqKkS{DK*Eh)Yo6", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) class0, (Object) parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getLexer();
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) parserConfig0);
      assertNotSame(parseContext1, parseContext0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unterminated json string, ", 3882);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.classLoader.getParent();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<ImageCapabilities> stack0 = new Stack<ImageCapabilities>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.close();
      defaultJSONParser0.setDateFormat((String) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unterminated json string, ", 3882);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XfyF");
      JSONScanner jSONScanner1 = new JSONScanner("unterminated json string, ", 0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = ParserConfig.global;
      parserConfig0.setDefaultClassLoader(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("$.java.awt.GridBagConstraints@557d1b72");
      defaultJSONParser1.accept(1);
      defaultJSONParser1.getLexer();
      defaultJSONParser0.close();
      assertEquals(18, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lZGQB5#0@}s");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "lZGQB5#0@}s", (Object) "lZGQB5#0@}s");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      String string0 = File.pathSeparator;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$.`ava.awt.Grid;agonstrants@33b5b3e1");
      parseContext0.toString();
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask("$.`ava.awt.Grid;agonstrants@33b5b3e1");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      JSONScanner jSONScanner0 = new JSONScanner("getFieldType", 267);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(locale0, jSONScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "}");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2,plqKkS{DK*Eh)Yo6", parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, ParserConfig.global);
      ParserConfig parserConfig1 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      parserConfig1.setDefaultClassLoader(classLoader1);
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      IdentityHashMap<Method, MapDeserializer> identityHashMap0 = new IdentityHashMap<Method, MapDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 1, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      defaultJSONParser0.getExtraTypeProviders();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classLoader0.clearAssertionStatus();
      JSONObject jSONObject0 = new JSONObject(3874);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&rcuB/A:Y)fwi");
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("()Z", (-290));
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      Locale locale0 = Locale.ENGLISH;
      BreakIterator.getSentenceInstance(locale0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) parserConfig1, (Object) parserConfig0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParseContext parseContext1 = defaultJSONParser0.context;
      Object object0 = new Object();
      IsoEra isoEra0 = IsoEra.BCE;
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Long long0 = new Long(1502845958873959152L);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("()Z", (-290));
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()Z");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getInput();
      JSONObject jSONObject0 = new JSONObject();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ()Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("un(erminatd jso stringE ", false);
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.clearAssertionStatus();
      Class<Boolean> class0 = Boolean.TYPE;
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.setDefaultClassLoader(aSMDeserializerFactory0.classLoader);
      JSONObject jSONObject0 = new JSONObject(3882);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("un(erminatd jso stringE ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46", parserConfig0, 0);
      DateFormat dateFormat0 = DateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("$.java.awt.GridBagConstraints@33b5b3e1", parserConfig1, 860);
      Properties properties0 = new Properties();
      ParserConfig parserConfig2 = new ParserConfig();
      parserConfig2.configFromPropety(properties0);
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeSupport");
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      defaultJSONParser1.accept(1, 989);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : $.java.awt.GridBagConstraints@33b5b3e1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader.getSystemClassLoader();
      String string0 = "[dyZ";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[dyZ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [dyZ
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("()Z");
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      classLoader1.getParent();
      defaultJSONParser0.getResolveTaskList();
      JSON.setDefaultTypeKey("fastjson.parser.autoTypeSupport");
      Insets insets0 = new Insets(1, 0, 1, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classLoader0.getParent();
      defaultJSONParser0.getResolveTaskList();
      JSON.setDefaultTypeKey("fastjson.parser.deny");
      Properties properties0 = new Properties();
      jSONScanner0.nextToken();
      DateFormat.getInstance();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) properties0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ), pos 2, json : ()Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-lZ>QB5#0@}s");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "-lZ>QB5#0@}s", (Object) "-lZ>QB5#0@}s");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      parseContext0.toString();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$.java.awt.GridBagConstraints@33b5b3e1");
      Vector<PageAttributes> vector0 = new Vector<PageAttributes>();
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(defaultJSONParser0, vector0, 2147483645);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask("$.java.awt.GridBagConstraints@33b5b3e1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2147483645
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "lZGQB5#0@}s";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lZGQB5#0@}s");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "lZGQB5#0@}s", (Object) "lZGQB5#0@}s");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "lZGQB5#0@}s");
      Vector<PageAttributes> vector0 = new Vector<PageAttributes>();
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(defaultJSONParser0, vector0, 0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask("lZGQB5#0@}s");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "lZGQB5#0@}s";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("lZGQB5#0@}s");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "lZGQB5#0@}s", (Object) "lZGQB5#0@}s");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      parseContext0.toString();
      String string1 = "$.`ava.awt.Grid;agonstrants@33b5b3e1";
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$.`ava.awt.Grid;agonstrants@33b5b3e1");
      defaultJSONParser_ResolveTask0.ownerContext = parseContext0;
      Vector<PageAttributes> vector0 = new Vector<PageAttributes>();
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(defaultJSONParser0, vector0, 0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask("$.`ava.awt.Grid;agonstrants@33b5b3e1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("()Z");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      classLoader0.getParent();
      ClassLoader classLoader1 = classLoader0.getParent();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser0.getResolveTaskList();
      Properties properties0 = new Properties();
      jSONScanner0.nextToken();
      ClassLoader.getSystemClassLoader();
      Dimension dimension0 = new Dimension(1, 0);
      defaultJSONParser0.setContext((Object) classLoader1, (Object) parameterizedTypeImpl0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.popContext();
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : ()Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "un(erminated json stringE ";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.clearAssertionStatus();
      Class<Boolean> class0 = Boolean.TYPE;
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "un(erminated json stringE ");
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.setDefaultClassLoader(aSMDeserializerFactory0.classLoader);
      JSONObject jSONObject0 = new JSONObject(3882);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("un(erminated json stringE ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46", parserConfig0, 0);
      DateFormat dateFormat0 = DateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("unterminated", 63);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      jSONObject0.put("fastjson.parser.deny", (Object) decimalFormat0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[#bLoIq(&f>", parserConfig0, 2717);
      DateFormat.getInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      HashSet<MockJapaneseDate> hashSet0 = new HashSet<MockJapaneseDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [#bLoIq(&f>
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Stack<ImageCapabilities> stack0 = new Stack<ImageCapabilities>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}b*z27");
      IdentityHashMap<Boolean, Short> identityHashMap0 = new IdentityHashMap<Boolean, Short>();
      identityHashMap0.entrySet();
      Hashtable<Object, ChoiceFormat> hashtable0 = new Hashtable<Object, ChoiceFormat>();
      defaultJSONParser0.parseObject((Map) hashtable0, (Object) parserConfig0);
      defaultJSONParser0.getConfig();
      defaultJSONParser0.setResolveStatus(1903);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : }b*z27
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.com.alibaba.fastjson.parser.ParserConfig@5", parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      IdentityHashMap<ThrowableDeserializer, Method> identityHashMap0 = new IdentityHashMap<ThrowableDeserializer, Method>();
      Long long0 = new Long((-449L));
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : $.com.alibaba.fastjson.parser.ParserConfig@5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Stack<ImageCapabilities> stack0 = new Stack<ImageCapabilities>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}b*z27");
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.getObject("java.util.Optional");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      PageAttributes pageAttributes0 = new PageAttributes();
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Stack<ImageCapabilities> stack0 = new Stack<ImageCapabilities>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}b*z27");
      defaultJSONParser0.getExtraProcessors();
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[2] = 'K';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[3] = '4';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.nextToken();
      DateFormat.getInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      defaultJSONParser0.getExtraProcessors();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class sun.util.locale.provider.RuleBasedBreakIterator
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/reflect/Tpe;Ljava/lang/Objec;Ljava/lang/Object;)Ljava/lang/Object;");
      JSON.setDefaultTypeKey("fastjson.parser.autoTypeAccept");
      Hashtable<HttpCookie, BigDecimal> hashtable0 = new Hashtable<HttpCookie, BigDecimal>();
      defaultJSONParser0.checkMapResolve(hashtable0, hashtable0);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;Ljava/lang/reflect/Tpe;Ljava/lang/Objec;Ljava/lang/Object;)Ljava/lang/Object;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("()Z");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      classLoader0.setDefaultAssertionStatus(true);
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      classLoader0.setDefaultAssertionStatus(false);
      Properties properties0 = new Properties();
      jSONScanner0.nextToken();
      String string0 = File.pathSeparator;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) bufferCapabilities0, (Object) bufferCapabilities0);
      ParseContext parseContext1 = new ParseContext(parseContext0, parameterizedTypeImpl0, list0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext1, "$.`ava.awt.Grid;agonstrants@33b5b3e1");
      parseContext0.toString();
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask("$");
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      DecimalFormatSymbols.getInstance();
      Locale locale0 = Locale.CHINESE;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 2, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "()Z";
      JSONScanner jSONScanner0 = new JSONScanner("()Z");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{uaYS]WXUwD\"C[X07&L");
      JSON.setDefaultTypeKey("{uaYS]WXUwD\"C[X07&L");
      Hashtable<HttpCookie, BigDecimal> hashtable0 = new Hashtable<HttpCookie, BigDecimal>();
      DateFormatSymbols.getInstance();
      defaultJSONParser0.checkMapResolve(hashtable0, classLoader0);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale.getISOCountries();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      char[] charArray0 = new char[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[0] = '8';
      charArray0[1] = '/';
      charArray0[2] = '\u0014';
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]J%RHSL5,R0b~/");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]J%RHSL5,R0b~/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("zKYwBx!Z");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      Locale locale0 = Locale.ENGLISH;
      BreakIterator.getLineInstance();
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) defaultJSONParser0);
      ParseContext parseContext2 = defaultJSONParser0.setContext((Object) locale0, (Object) "zKYwBx!Z");
      parseContext1.toString();
      Locale locale1 = Locale.PRC;
      parseContext2.toString();
      String string0 = File.pathSeparator;
      ParseContext parseContext3 = defaultJSONParser0.context;
      Locale locale2 = Locale.PRC;
      Locale locale3 = new Locale("*YiKz2$_L", "zKYwBx!Z");
      BreakIterator.getCharacterInstance(locale3);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultJSONParser0.setContext(parseContext3, (Object) mockThaiBuddhistDate0, (Object) locale2);
      locale2.getDisplayLanguage();
      ParseContext parseContext4 = defaultJSONParser0.context;
      Object object0 = new Object();
      defaultJSONParser0.setResolveStatus((-349));
      Integer integer0 = new Integer(1689);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$ref");
      // Undeclared exception!
      try { 
        JSON.parseObject(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Stack<ImageCapabilities> stack0 = new Stack<ImageCapabilities>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}b*z27");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.setDefaultAssertionStatus(false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      Long long0 = new Long((-53L));
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      Insets insets0 = new Insets(105, 0, 1, 123);
      insets0.clone();
      insets0.clone();
      JobAttributes jobAttributes0 = new JobAttributes();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }b*z27
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("8TOqxu|", 2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8TOqxu|");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4[4", parserConfig0);
      String string0 = "$.com.alibaba.fastjson.parseA.ParserConfi@5";
      JSONScanner jSONScanner1 = new JSONScanner("$", 0);
      IdentityHashMap<ThrowableDeserializer, Method> identityHashMap0 = new IdentityHashMap<ThrowableDeserializer, Method>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      defaultJSONParser0.parse();
      Stack<ImageCapabilities> stack0 = new Stack<ImageCapabilities>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 21);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Rectangle rectangle1 = new Rectangle(rectangle0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) rectangle1, (Object) properties0);
      parseContext0.toString();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, (String) null);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept");
      defaultJSONParser0.checkMapResolve(properties0, httpCookie0);
      defaultJSONParser0.resolveReference("$");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "$", (Object) "$");
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$");
      Vector<PageAttributes> vector0 = new Vector<PageAttributes>();
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(defaultJSONParser0, vector0, 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask("$");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("zKYwBx!Z");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) defaultJSONParser0, (Object) defaultJSONParser0);
      Locale locale0 = Locale.ENGLISH;
      BreakIterator.getLineInstance();
      defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) defaultJSONParser0);
      defaultJSONParser0.setContext((Object) locale0, (Object) "zKYwBx!Z");
      locale0.getDisplayVariant();
      Locale locale1 = Locale.PRC;
      String string0 = File.pathSeparator;
      ParseContext parseContext1 = defaultJSONParser0.context;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Locale locale2 = Locale.PRC;
      parseContext1.toString();
      Locale locale3 = Locale.ENGLISH;
      parseContext1.toString();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultJSONParser0.setContext(parseContext1, (Object) mockThaiBuddhistDate0, (Object) locale2);
      locale2.getDisplayLanguage();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      defaultJSONParser0.getObject("@");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.setPackageAssertionStatus("$.com.alibaba.fastjson.parser.ParserConfig@5", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$.com.alibaba.fastjson.parser.DefaultJSONParser@2.zKYwBx!Z");
      // Undeclared exception!
      try { 
        JSON.parseObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to JSONObject.
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }
}
