/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 20:21:09 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformRow(4, vectorFunction0);
      //  // Unstable assertion: assertEquals(1035.405844, cRSMatrix1.max(), 0.01);
      //  // Unstable assertion: assertEquals(0.3055555555555556, cRSMatrix1.density(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformColumn(16, vectorFunction0);
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.select(intArray0, intArray0);
      //  // Unstable assertion: assertEquals((-3445.79507672), cRSMatrix2.min(), 0.01);
      //  // Unstable assertion: assertEquals(0.7777777777777778, cRSMatrix2.density(), 0.01);
      //  // Unstable assertion: assertEquals(0.11418685121107267, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformRow(0, vectorFunction0);
      double double0 = cRSMatrix1.max();
      //  // Unstable assertion: assertEquals(2126.5, double0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, cRSMatrix0.max(), 0.01);
      //  // Unstable assertion: assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      //  // Unstable assertion: assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[3];
      intArray0[0] = 1876;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 178, 178, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft(1876, 1876);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 27);
      Matrix matrix0 = cRSMatrix0.copyOfShape(13, 213);
      assertEquals(213, matrix0.columns());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(436, 436);
      double[] doubleArray0 = new double[9];
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(9);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(37);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, denseMatrix0, cRSMatrix1, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.random(956, 6, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[] doubleArray0 = new double[9];
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(747, 0, doubleArray0);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix1).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix2 = cRSMatrix0.to(matrixFactory0);
      assertEquals(747, cRSMatrix2.rows());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 1119);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix1 = cRSMatrix0.to(matrixFactory0);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      cRSMatrix0.nonZeroIteratorOfRow(17);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(17, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1363);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(1338);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(7.336757153338225E-4, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6533, Double.POSITIVE_INFINITY);
      double double0 = cRSMatrix0.getOrElse(5, 1, 1);
      assertEquals(Double.POSITIVE_INFINITY, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("  ");
      assertEquals(1, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-461.51963144900947);
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 2, doubleArray0);
      assertEquals((-461.51963144900947), cRSMatrix0.min(), 0.01);
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[3];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, 2251, (-345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -345.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-268), (-268), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -268x-268
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 13, 0);
      cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt((-1535), 28, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt((-3190), (-3190), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(0, 0, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 1119);
      cRSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(1119, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.set(7, 1, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 1119);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(1, 0, 1119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-863), (-2600), (-2600));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-863' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric((int) (byte)26, (double) (byte)0, (Random) mockRandom0);
      assertEquals(26, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(5010, (-1923.1781809), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2147483648.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 2312.98, (Random) mockRandom0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2845L));
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric((-3660), Double.POSITIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3660x-3660
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(16, 0, 0.0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-3469));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1927, (-1073741824));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1927
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((-5088), 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5088
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-346));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -346
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 17);
      cRSMatrix0.iteratorOfRow(0);
      assertEquals(17, cRSMatrix0.rows());
      assertEquals(17, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      cRSMatrix0.iteratorOfRow(16);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(17, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((-984));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -983
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(54, 54, 0);
      double double0 = cRSMatrix0.getOrElse(0, 0, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(20, 20);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-2493), (-2493), 1784.7310804765);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2493' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(25);
      assertEquals(17, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn((-1978));
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(17, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(0, (-2102), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-2102
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 32, (double[]) null);
      Vector vector0 = cRSMatrix0.getColumn(0);
      assertEquals(0, vector0.length());
      assertEquals(32, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(581, 581);
      cRSMatrix0.eachNonZeroInRow(8, (VectorProcedure) null);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow((-2271), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2271
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow((-1610612735), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1610612735
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.each((MatrixProcedure) null);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 0.0);
      cRSMatrix0.rowMajorIterator();
      assertEquals(3, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 1654.7);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.copyOfShape(530, 0);
      assertEquals(530, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(17, 17, 17);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape(17, (-326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 17x-326
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[6];
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      Matrix matrix0 = cRSMatrix0.blankOfShape(0, 15);
      assertEquals(15, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.blankOfShape(4689, 4689);
      assertEquals(4689, matrix0.rows());
      assertEquals(4689, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-316), (-316));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -316x-316
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(3608, 12, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(31, 1190);
      // Undeclared exception!
      cRSMatrix0.setAll(1190);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(0, 3, (-1549.81337546));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(20, 20);
      // Undeclared exception!
      try { 
        cRSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      int[] intArray0 = new int[9];
      intArray0[1] = 17;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(861, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(32);
      // Undeclared exception!
      CRSMatrix.random(5478, 191, 0.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, (-316), 0.0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(17, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(66, 66);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 743
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[4];
      CRSMatrix cRSMatrix0 = new CRSMatrix(972, 982, 982, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-3408));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3408
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow((-1959));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1959
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-2073432486));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(16, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(2307);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2308
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(17, 17, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[3];
      intArray0[1] = (-84);
      CRSMatrix cRSMatrix0 = new CRSMatrix(162, 162, 1, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(1, 1, 162.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Given vector should have the same length as number of columns in the given matrix: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("org.la4j.matrix.sparse.CRSMatrix$2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 643L;
      doubleArray0[1] = (double) 2011;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 2011;
      doubleArray0[4] = (double) 6;
      // Undeclared exception!
      CRSMatrix.from1DArray(2011, 13, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(8, 8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1095), 48, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1095x48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(2228, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2228
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-1541), (-2608.183676));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-1530), (-1530));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1530x-1530
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(11, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-3124), 408);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3124x408
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(1921, (-1111), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1921x-1111
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(17, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(161, byteArray0.length);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1017);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformRow(1013, vectorFunction0);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(1016, cRSMatrix1.cardinality());
      assertEquals(0.0019656014904925025, cRSMatrix1.density(), 0.01);
      assertEquals((-430.78985), cRSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(16, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      Matrix matrix0 = cRSMatrix0.rotate();
      assertEquals(2, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      double double0 = cRSMatrix0.minInRow(6);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(17, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      double double0 = cRSMatrix0.min();
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(8, vectorAccumulator0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(17, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[25];
      doubleArray1[4] = 4896.456;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      boolean boolean0 = cRSMatrix0.nonZeroAt(0, 0);
      assertEquals(0.04, cRSMatrix0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(7, vectorProcedure0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(17, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(1, vectorProcedure0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(17, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformRow(0, vectorFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
      //  // Unstable assertion: assertEquals(6, cRSMatrix1.rows());
      //  // Unstable assertion: assertEquals(6, cRSMatrix1.cardinality());
      //  // Unstable assertion: assertEquals(2126.5, cRSMatrix1.max(), 0.01);
      //  // Unstable assertion: assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformRow(0, vectorFunction0);
      cRSMatrix1.eachNonZero((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(581, 581);
      Matrix matrix0 = cRSMatrix0.copyOfShape(581, 6);
      assertEquals(6, matrix0.columns());
      assertEquals(581, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(16, 2011);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2011' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      cRSMatrix0.setAll(4896.456);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      cRSMatrix0.setAll(0.0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.setAll(3);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 2021161080, 49);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 16x-252645136
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1017);
      Matrix matrix0 = cRSMatrix0.copyOfShape(1017, 3);
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(38);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(29, 214);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(29, 4, mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1479);
      DenseMatrix denseMatrix0 = cRSMatrix1.toDenseMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, denseMatrix0, cRSMatrix1, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[25];
      doubleArray1[4] = 4896.456;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformColumn(0, vectorFunction0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.04, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(5, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 643L;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(2011, 13, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(32, 1.0, (Random) mockRandom0);
      assertEquals(0.02734375, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(578);
      // Undeclared exception!
      SparseMatrix.random(1005, 1005, 0.5, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.random(17, 167, Double.POSITIVE_INFINITY, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(6, 827, 0.0, (Random) mockRandom0);
      assertEquals(0.0012091898428053204, cRSMatrix0.density(), 0.01);
      assertEquals(0.5, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-276), (-226), (double) (-226), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      double double0 = cRSMatrix0.min();
      //  // Unstable assertion: assertEquals(1.0, cRSMatrix0.density(), 0.01);
      //  // Unstable assertion: assertEquals((-632.8537715), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1017);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toRowVector();
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(9.832841691248771E-4, compressedVector0.density(), 0.01);
      assertEquals(9.832841691248771E-4, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertEquals(0.07692307692307693, cRSMatrix1.density(), 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
  }
}
