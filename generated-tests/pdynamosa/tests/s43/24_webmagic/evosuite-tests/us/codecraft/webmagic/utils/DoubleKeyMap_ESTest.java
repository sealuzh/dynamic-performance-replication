/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 07:33:07 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String>();
      HashMap<Map<Object, Integer>, String> hashMap0 = new HashMap<Map<Object, Integer>, String>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, "!3e?,#P");
      Map<Object, String> map0 = doubleKeyMap0.remove(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Object>>();
      Map<HashMap<Map<Object, Integer>, String>, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String>(map0);
      HashMap<Map<Object, Integer>, String> hashMap0 = new HashMap<Map<Object, Integer>, String>();
      String string0 = doubleKeyMap1.remove(hashMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Map<String, Map<Integer, Object>>> hashMap0 = new HashMap<String, Map<String, Map<Integer, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Integer, Object>>(hashMap0, class0);
      Map<Integer, Object> map0 = doubleKeyMap0.remove((String) null, (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, Object, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Object, Map<Object, Integer>>();
      HashMap<Object, Map<String, Map<Integer, String>>> hashMap0 = new HashMap<Object, Map<String, Map<Integer, String>>>();
      DoubleKeyMap<Object, String, Map<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<Integer, String>>(hashMap0);
      Map<String, Map<Integer, String>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Map<String, Map<Integer, Object>>> hashMap0 = new HashMap<String, Map<String, Map<Integer, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Integer, Object>>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("E3W", (String) null, (Map<Integer, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((HashMap<String, Object>) null, "J7W=Ix~3", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Map<Map<Integer, Map<Object, Integer>>, Map<Object, HashMap<Object, Integer>>>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Map<Integer, Map<Object, Integer>>, Map<Object, HashMap<Object, Integer>>>, Object>();
      Map<Map<Integer, Map<Object, Integer>>, Map<Object, HashMap<Object, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Integer, Map<Object, Integer>>, Object, HashMap<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Map<Object, Integer>>, Object, HashMap<Object, Integer>>(map0);
      DoubleKeyMap<Integer, Map<Integer, Map<Object, Integer>>, HashMap<String, Integer>> doubleKeyMap2 = new DoubleKeyMap<Integer, Map<Integer, Map<Object, Integer>>, HashMap<String, Integer>>(class0);
      Map<Integer, Map<Object, Integer>> map1 = doubleKeyMap2.newMap();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap1 = doubleKeyMap1.put(map1, (Object) doubleKeyMap2, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap0.get((String) null, (Object) "TiQ;reoZCi&,3.y2%Rg");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Map<String, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Object>(map0, class0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = doubleKeyMap2.get((Object) doubleKeyMap1, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Map<String, Map<Object, String>>> hashMap0 = new HashMap<Object, Map<String, Map<Object, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<Object, String>>(hashMap0, class0);
      Object object0 = new Object();
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, Object, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Object, Map<Object, Integer>>();
      HashMap<Object, Map<HashMap<Integer, Map<Object, Integer>>, String>> hashMap0 = new HashMap<Object, Map<HashMap<Integer, Map<Object, Integer>>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Integer, Map<Object, Integer>>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, Map<Object, Integer>>, String>(hashMap0, class0);
      HashMap<Integer, Map<Object, Integer>> hashMap1 = new HashMap<Integer, Map<Object, Integer>>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, hashMap1, "]IFcl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, HashMap<String, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<String, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<Object, Object>>();
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String>();
      HashMap<Map<Object, Integer>, String> hashMap0 = new HashMap<Map<Object, Integer>, String>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, "i32nu,(tP");
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      hashMap1.put(doubleKeyMap0, integer0);
      String string0 = doubleKeyMap0.remove(hashMap0, (Object) hashMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<String, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, String>, String>(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String>();
      HashMap<Map<Object, Integer>, String> hashMap0 = new HashMap<Map<Object, Integer>, String>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, "");
      String string0 = doubleKeyMap0.put(hashMap0, (Object) hashMap0, "!3e?,#P");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, String, String>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(hashMap0, "", "{wx%hQ\"<M+g\",");
      String string0 = doubleKeyMap0.get(hashMap0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Map<Object, Map<Object, HashMap<String, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<String, Object>>(map0);
      HashMap<String, Object> hashMap0 = doubleKeyMap1.get((Object) map0, (Object) doubleKeyMap0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, Integer>, String>, Object, String>();
      HashMap<Map<Object, Integer>, String> hashMap0 = new HashMap<Map<Object, Integer>, String>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, "");
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      String string0 = doubleKeyMap0.remove(hashMap0, (Object) hashMap1);
      assertEquals("", string0);
  }
}
