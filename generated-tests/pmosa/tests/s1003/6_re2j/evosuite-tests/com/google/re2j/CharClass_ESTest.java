/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 23:45:29 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 6981;
      intArray0[0] = 6981;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass0.cleanClass();
      CharClass charClass3 = charClass1.appendLiteral(6981, 6981);
      int int1 = 3556;
      charClass2.appendFoldedRange((-3886), 3556);
      charClass0.toArray();
      int[] intArray1 = new int[2];
      intArray1[0] = int0;
      intArray1[1] = int1;
      charClass3.appendNegatedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(64, 64);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toArray();
      charClass0.toString();
      CharClass charClass1 = charClass0.appendFoldedRange(1892, 1892);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(1085875, 1085875);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][9];
      charClass0.appendTable(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.cleanClass();
      charClass0.toString();
      int[][] intArray0 = new int[9][7];
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      int[] intArray0 = charClass0.toArray();
      charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-307);
      intArray0[2] = (-759);
      intArray0[3] = 104;
      intArray0[4] = 64;
      intArray0[5] = 11516;
      intArray0[6] = (-32);
      intArray0[7] = 3404;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass3.appendFoldedClass(intArray1[2]);
      CharClass charClass5 = charClass4.appendNegatedClass(intArray1[3]);
      charClass5.cleanClass();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 194;
      intArray0[1] = 372;
      intArray0[2] = 167;
      intArray0[3] = 167;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      assertArrayEquals(new int[] {167, 167, 194, 372}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 194;
      intArray0[1] = 372;
      intArray0[2] = 167;
      intArray0[3] = 407;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      assertArrayEquals(new int[] {167, 407, 194, 372}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray0 = new int[6][9];
      charClass1.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      String string0 = charClass1.toString();
      assertEquals("[0x0-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharGroup charGroup0 = null;
      CharClass charClass0 = new CharClass();
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 722);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1159;
      intArray0[2] = 0;
      intArray0[3] = 91;
      intArray0[4] = 4;
      intArray0[5] = (-1085);
      intArray0[6] = 3813;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[0];
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 4);
      charClass1.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-538);
      intArray0[2] = 1903;
      intArray0[3] = 65;
      intArray0[4] = 0;
      intArray0[5] = 2106;
      intArray0[6] = (-1357);
      intArray0[7] = 1485;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange((-538), 1);
      int[] intArray1 = new int[0];
      CharClass charClass2 = charClass1.appendFoldedClass(intArray1);
      charClass2.appendClassWithSign(intArray0, 0);
      charClass0.appendFoldedClass(intArray0);
      charClass1.appendClass(intArray1);
      charClass0.appendFoldedClass(intArray0);
      charClass0.appendFoldedClass(intArray1);
      charClass1.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1121);
      intArray0[1] = (-1399);
      intArray0[2] = 0;
      intArray0[3] = (-233);
      intArray0[4] = 2837;
      intArray0[5] = 6106;
      intArray0[6] = 0;
      intArray0[7] = 1424;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[9];
      intArray2[0] = (-233);
      intArray2[1] = (-233);
      intArray2[2] = 6106;
      intArray2[3] = (-233);
      intArray2[4] = 0;
      intArray2[5] = (-1121);
      intArray2[6] = 0;
      intArray2[7] = 2837;
      intArray2[8] = (-1121);
      intArray1[5] = intArray2;
      charClass1.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.appendClass(intArray0);
      charClass3.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = new int[2];
      charClass0.cleanClass();
      charClass1.appendClassWithSign(intArray0, (-2255));
      intArray0[0] = (-2255);
      intArray0[1] = 8330;
      charClass1.appendNegatedClass(intArray0);
      charClass0.toString();
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[] intArray0 = charClass0.toArray();
      charClass1.appendClassWithSign(intArray0, 45);
      charClass1.appendClassWithSign(intArray0, (-1311));
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-307);
      intArray0[2] = 0;
      intArray0[3] = 104;
      intArray0[4] = 64;
      int int0 = 11516;
      intArray0[5] = 11516;
      intArray0[6] = (-32);
      intArray0[7] = 3404;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass3.appendFoldedClass(intArray1[2]);
      charClass3.toString();
      int int1 = (-3715);
      charClass3.appendFoldedRange(int1, int0);
      CharClass charClass5 = charClass4.appendNegatedClass(intArray1[3]);
      charClass5.cleanClass();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 605;
      intArray0[1] = 605;
      intArray0[2] = 605;
      intArray0[3] = (-1445);
      intArray0[4] = 605;
      intArray0[5] = 333;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 605);
      int[] intArray1 = charClass1.toArray();
      int[][] intArray2 = new int[6][8];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray0;
      intArray2[3] = intArray1;
      int[] intArray3 = new int[6];
      intArray3[0] = 605;
      intArray3[1] = 333;
      intArray3[2] = 605;
      intArray3[3] = 605;
      intArray3[4] = 1654;
      intArray3[5] = 333;
      intArray2[4] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = (-1445);
      intArray2[5] = intArray4;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 11516;
      int[] intArray0 = new int[9];
      intArray0[0] = (-32);
      intArray0[1] = (-1147);
      intArray0[2] = (-759);
      intArray0[3] = 64;
      intArray0[4] = 64;
      intArray0[5] = 3404;
      intArray0[6] = 11516;
      intArray0[7] = 11516;
      intArray0[8] = (-307);
      CharClass charClass1 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass1.cleanClass();
      int int1 = (-5619);
      int int2 = (-478);
      charClass3.appendFoldedRange(int1, int2);
      charClass3.toString();
      charClass2.appendTableWithSign(intArray1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 500;
      intArray0[1] = 1503;
      intArray0[2] = 2935;
      intArray0[3] = (-750);
      intArray0[4] = 500;
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[1][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass2 = new CharClass(intArray0);
      CharClass charClass3 = charClass0.appendNegatedTable(intArray1);
      charClass2.cleanClass();
      charClass3.appendFoldedRange(4256, 1632);
      charClass1.toString();
      charClass3.appendTableWithSign(intArray1, 2935);
      assertArrayEquals(new int[] {0, 1503, 2935, (-750), 500, 0, 2935, (-750)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (-332);
      intArray0[3] = 104;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[7][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[8];
      intArray2[0] = (-32);
      intArray2[1] = 1114089;
      intArray2[2] = 3404;
      intArray2[3] = (-332);
      intArray2[4] = (-332);
      intArray2[5] = (-332);
      intArray2[6] = (-332);
      intArray2[7] = 104;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray3 = new int[23][3];
      intArray3[0] = intArray0;
      intArray3[1] = intArray0;
      intArray3[2] = intArray2;
      intArray3[3] = intArray2;
      intArray3[4] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray3);
      CharClass charClass3 = charClass0.negateClass();
      charClass2.appendNegatedTable(intArray3);
      charClass1.toString();
      charClass0.negateClass();
      charClass3.appendTableWithSign(intArray3, intArray2[6]);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[8][7];
      int[] intArray1 = new int[8];
      intArray1[0] = 3268;
      intArray1[1] = 8257;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 12032;
      intArray1[7] = 8578;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 8257;
      intArray2[1] = 8578;
      intArray0[1] = intArray2;
      intArray0[2] = intArray1;
      int[] intArray3 = new int[12];
      intArray3[0] = 2513;
      intArray0[3] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = (-540);
      intArray4[1] = 1;
      intArray0[4] = intArray4;
      intArray0[5] = intArray2;
      int[] intArray5 = new int[8];
      intArray5[0] = 12032;
      intArray5[1] = 8578;
      intArray5[2] = (-540);
      intArray5[3] = 1;
      intArray5[4] = 8257;
      intArray5[5] = 3268;
      intArray5[6] = (-540);
      intArray5[7] = 1;
      intArray0[6] = intArray2;
      int[] intArray6 = new int[7];
      intArray6[0] = 1100108;
      intArray6[1] = 8257;
      intArray6[2] = 2513;
      intArray6[3] = 1;
      intArray6[4] = 3268;
      intArray6[5] = 1100108;
      intArray6[6] = (-540);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[0] = 1112003;
      intArray0[2] = 4808;
      intArray0[3] = 4808;
      intArray0[4] = (-404);
      CharClass charClass1 = charClass0.appendRange((-404), 4808);
      int[] intArray1 = new int[4];
      intArray1[1] = 1114041;
      intArray1[2] = 694;
      CharClass charClass2 = new CharClass(intArray1);
      charClass0.negateClass();
      CharClass charClass3 = new CharClass(intArray1);
      charClass1.appendFoldedRange(4808, 1700);
      int[][] intArray2 = new int[9][1];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      intArray2[3] = intArray0;
      intArray2[4] = intArray1;
      intArray2[5] = intArray0;
      intArray2[6] = intArray1;
      intArray2[7] = intArray0;
      intArray2[8] = intArray0;
      CharClass charClass4 = charClass3.appendNegatedTable(intArray2);
      charClass4.appendNegatedTable(intArray2);
      charClass4.appendRange(66639, 1700);
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
