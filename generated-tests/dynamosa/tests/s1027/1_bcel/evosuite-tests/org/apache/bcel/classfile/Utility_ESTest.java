/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:00:10 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("ACC_SUPER flag\t\t");
      Utility.compactClassName("%Q", "%Q", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("cJXl!", "? super ", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cJXl!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte)78;
      constantPool0.copy();
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "\t(wide)", "I:$0IV^ftV0t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$/>5<6n%", false);
      assertArrayEquals(new byte[] {(byte)0, (byte)62, (byte)53, (byte)60, (byte)54, (byte)110, (byte)37}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readInt();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals("fdiv", string0);
      
      String string1 = Utility.printArray((Object[]) null, true, true);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.reset();
      ConstantPool constantPool0 = null;
      byteSequence0.reset();
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)32, (byte)32, localVariableArray0, (ConstantPool) null);
      String string0 = "&onvYA*vb";
      boolean boolean0 = true;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(byteSequence1);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-85), (-1169));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-85));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-66);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(200);
      constantArray0[0] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("1b 6a 04 c9 10 be", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)78;
      byteArray0[8] = (byte)0;
      byteArray0[3] = (byte)37;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "{.I;#F7;DAdP{G{O";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      Utility.isJavaIdentifierPart('1');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)22;
      byteArray0[3] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-128);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%209\t50", string0);
      
      byte[] byteArray1 = Utility.decode("iinc\t\t%209\t50", false);
      assertEquals(13, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("lload\t\t%45");
      Utility.searchOpcode("lload\t\t%45");
      try { 
        Utility.methodSignatureReturnType("idiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `idiv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "P<_\"0AZQO$";
      Utility.convertString("P<_\"0AZQO$");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantUtf8.getInstance("P<_\"0AZQO$");
      ConstantUtf8.getInstance("P<_\"0AZQO$");
      ConstantClass constantClass0 = new ConstantClass((byte) (-115));
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-115), (-1381), localVariableArray0, constantPool0);
      try { 
        Utility.methodSignatureToString("P<_\"0AZQO$", "I)XD'KHY)GM1BWQ", "srB", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P<_\"0AZQO$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = Utility.searchOpcode("Warning: Padding byte != 0 in ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("d4", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iflt\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{<illegal type>, <illegal type>, <illegal type>, <illegal type>, boolean, char, float, double, byte, short, int, long, void, array, object, unknown, address}", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0, true, true);
      assertEquals("{\"<illegal type>\", \"<illegal type>\", \"<illegal type>\", \"<illegal type>\", \"boolean\", \"char\", \"float\", \"double\", \"byte\", \"short\", \"int\", \"long\", \"void\", \"array\", \"object\", \"unknown\", \"address\"}", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Utility.replace("O3'+}%i,UI9m/UY.", "O3'+}%i,UI9m/UY.", "O3'+}%i,UI9m/UY.");
      assertEquals("O3'+}%i,UI9m/UY.", string0);
      
      try { 
        Utility.methodSignatureReturnType("6)UI&,,Py:Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UI&,,Py:Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, 104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte) (-59));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte)118);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.reset();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), 1978, true);
      assertEquals("0:    monitorexit\n1:    nop\n2:    nop\n3:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.typeOfSignature("The FileFilter must not be null");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The FileFilter must not be null");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "5H";
      try { 
        Utility.typeOfSignature("5H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Th'y|*SAv;?31h6P");
      assertEquals("h'y|*SAv", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "nop", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "($?a8";
      try { 
        Utility.typeOfSignature("($?a8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ($?a8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Utility.signatureToString("L,;V");
      assertEquals(",", string0);
      
      String string1 = Utility.convertString("Vg=3hlZJOmv(}=S");
      assertEquals("Vg=3hlZJOmv(}=S", string1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ConstantPool constantPool0 = null;
      Utility.getSignature("acc_super flag\t\t");
      Utility.compactClassName("acc_super flag\t\t", "nzU", true);
      Utility.compactClassName("Na;(!", "c<Mn{6&3(;", false);
      Utility.printArray((Object[]) null, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)41, (int) (byte)41, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-87), true);
      try { 
        Utility.methodSignatureToString("%DFc?\"uMa", "", "#G!5!ei%", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %DFc?\"uMa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "-+=k;#rS\\!z_{c(S";
      try { 
        Utility.typeOfSignature("-+=k;#rS!z_{c(S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -+=k;#rS!z_{c(S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)23;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("aKS$5e$5d$Hj$X", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Utility.getSignature("The array of suffixes must not be null");
      assertEquals("LThe;", string0);
      
      Utility.convertString("The array of suffixes must not be null");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)29;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$Az$j", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "java.lang.%VlgNneu1L^DQd.";
      Utility.searchOpcode("java.lang.%VlgNneu1L^DQd.");
      String string1 = "k[sM(<^nna]NN8(vXBj";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString("java.lang.%VlgNneu1L^DQd.", "k[sM(<^nna]NN8(vXBj", "org.apache.bcel.classfile.RuntimeInvisibleAnnotations", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.%VlgNneu1L^DQd.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = ".Z;-nJ&jy7n$NB9.G?:";
      try { 
        Utility.typeOfSignature(".Z;-nJ&jy7n$NB9.G?:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .Z;-nJ&jy7n$NB9.G?:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.accessToString(525, false);
      Utility.getSignature("public protected static interface");
      Utility.setBit((-2533), (-2533));
      Utility.clearBit(525, (-2533));
      Utility.setBit(525, 91);
      try { 
        Utility.methodSignatureReturnType("public protected static interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public protected static interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.compactClassName("M=d$lQv\"se:J");
      try { 
        Utility.methodSignatureToString("M=d$lQv\"se:J", "M=d$lQv\"se:J", "M=d$lQv\"se:J", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M=d$lQv\"se:J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.compactClassName("w^7vw", "w^7vw", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid type: ");
      assertEquals((byte)10, byte0);
      
      short short0 = Utility.searchOpcode("Invalid type: ");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (short) (-1));
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.compactClassName("instanceof");
      assertEquals("instanceof", string1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("The array of suffixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)0, 3311, (LocalVariable[]) null, constantPool1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'@l_;[`JL!W", (String) null, (String) null, true, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.methodTypeToSignature("o9", (String[]) null);
      Utility.methodSignatureToString("()Lo9;", "o9", "()Lo9;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.signatureToString("()Lo9; o9 o9()", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `()Lo9; o9 o9()'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":c,[Qo]}z0^D)LMr)oxh";
      Utility.methodTypeToSignature(":c,[Qo]}z0^D)LMr)oxh", stringArray0);
      try { 
        Utility.methodSignatureReturnType(":c,[Qo]}z0^D)LMr)oxh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `oxh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("ZQ/*Q[1$p[v)A!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[1$p[v)A!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "Wy(6Qt9\\_\" -t:M2@34";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "PrI){G`o";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("PrI){G`o", "PrI){G`o", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PrI){G`o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)16;
      try { 
        Utility.typeOfSignature("8X#7v71Ukm[J!i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8X#7v71Ukm[J!i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)70;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$Qc$a7$iF", string0);
      
      boolean boolean0 = Utility.isSet((-1437851314), (-1437851314));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.format(136, 136, false, '0');
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000136", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$3az$3a$3a$3a", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.typeOfSignature("Deprecated");
      try { 
        Utility.methodSignatureReturnType("\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.getSignature("org.a|ach`.bcel.classfile.ConstantUtf8$1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte) (-102);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.replace("rwD6mi{:@", "<", "<");
      Utility.isJavaIdentifierPart('\\');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "G {}ye:-;o";
      stringArray0[1] = "rwD6mi{:@";
      stringArray0[2] = "<";
      stringArray0[3] = "rwD6mi{:@";
      stringArray0[4] = "<";
      stringArray0[5] = "rwD6mi{:@";
      stringArray0[6] = "rwD6mi{:@";
      stringArray0[7] = "<";
      Utility.methodTypeToSignature("rwD6mi{:@", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      Utility.getSignature("d~4>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G {}ye:-;o");
      Utility.methodTypeToSignature("?>...", stringArray0);
      Utility.isSet(328, 328);
      Utility.printArray((Object[]) stringArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "8x;2X5", "Unreachable default case reached!", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SV");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.classOrInterface(1495);
      boolean boolean0 = true;
      Utility.fillup("class", (-911), true, 't');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = ", npairs = ";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "X^9";
      Utility.methodTypeToSignature("class", stringArray0);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 136, true, 'r');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.|cel.classfil].CvystantUtf8$1", false);
      Utility.clearBit((byte)92, (byte)92);
      String string0 = Utility.compactClassName("org.apache.|cel.classfil].CvystantUtf8$1", false);
      assertEquals("org.apache.|cel.classfil].CvystantUtf8$1", string0);
      
      int int0 = Utility.clearBit((byte)92, (byte)92);
      assertEquals(92, int0);
      
      boolean boolean0 = Utility.isSet((-1077), (byte)92);
      assertTrue(boolean0);
      
      String string1 = Utility.format(1468, 92, true, 'a');
      assertEquals("1468aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("6f 72 67 2e 61 70 61 63 68 65 2e 7c 63 65 6c 2e 63 6c 61 73 73 66 69 6c 5d 2e 43 76 79 73 74 61 6e 74 55 74 66 38", string2);
      
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat((-756.4F));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(byteSequence0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1594), (-1396));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ddiv
         // 1:    frem
         // 2:    dsub
         // 3:    iaload
         // 4:    ladd
         // 5:    irem
         // 6:    ladd
         // 7:    dadd
         // 8:    imul
         // 9:    lsub
         // 10:   iaload
         // 11:   iushr
         // 12:   dadd
         // 13:   lsub
         // 14:   idiv
         // 15:   iaload
         // 16:   dadd
         // 17:   idiv
         // 18:   ladd
         // 19:   drem
         // 20:   drem
         // 21:   fsub
         // 22:   lmul
         // 23:   idiv
         // 24:   dup2_x1
         // 25:   iaload
         // 26:   fstore_0
         // 27:   fneg
         // 28:   lshl
         // 29:   drem
         // 30:   ineg
         // 31:   ladd
         // 32:   fdiv
         // 33:   ineg
         // 34:   castore
         // 35:   ineg
         // 36:   fsub
         // 37:   
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.getSignature("]fy");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      int int0 = 54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), 54, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)58;
      try { 
        Utility.typeOfSignature(".zip");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .zip
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[0] = (byte)49;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.getSignature("L,;V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, (int) (byte)102, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("83 09 ff 37 3f", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.printArray((Object[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-57);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (-653), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.getSignature("org.a|ach`.bcel.classfile.ConstantUtf8$1");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-35);
      byteArray0[8] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Utility.replace(">M", ">M", ">M");
      assertEquals(">M", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('T');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string1);
      
      String string2 = Utility.signatureToString("LAoP'Z'-;V", true);
      assertEquals("AoP'Z'-", string2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "putfield");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.compactClassName("+PJSg2DGDG4cRsy<");
      try { 
        Utility.typeOfSignature("+PJSg2DGDG4cRsy<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PJSg2DGDG4cRsy<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The array of suffixes must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "{.I;#F7;DAdP{G{O";
      stringArray0[3] = "The array of suffixes must not be null";
      Utility.methodTypeToSignature("The array of suffixes must not be null", stringArray0);
      Utility.isJavaIdentifierPart('l');
      Utility.isSet(43, 89);
      Utility.replace("The array of suffixes must not be null", "{.I;#F7;DAdP{G{O", "JX");
      Utility.signatureToString("JX", true);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      try { 
        Utility.methodSignatureReturnType("invokevirtual", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokevirtual'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-110);
      byteArray0[6] = (byte) (-85);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)97;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char char0 = '_';
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.isJavaIdentifierPart('5');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("anewarray", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("0=gpQ*", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3386), (int) (byte)84, false);
      assertEquals("0:    faload\n1:    istore_2\n2:    dsub\n3:    irem\n4:    fastore\n5:    aload_0\n", string0);
      
      String string1 = Utility.convertString("impdep1");
      assertEquals("impdep1", string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)50, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("goto\t\t#7168", string1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "($?a8";
      String string1 = "lload_0";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("($?a8", "lload_0", "($?a8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$?a8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Utility.compactClassName("]eTc");
      assertEquals("]eTc", string0);
      
      byte byte0 = Utility.typeOfSignature("CV");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "org.a|ache.bcel.classfile.ConstantUtD8$1";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-103);
      byteArray0[1] = (byte) (-109);
      byteArray0[4] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte) (-71);
      byteArray1[3] = (byte) (-109);
      byteArray1[4] = (byte) (-93);
      byteArray1[5] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-109), 830, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifeq\t\t#-8519
         // 3:    i2s
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X/*{v}Bv", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X/*{v}Bv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "E~?\\q82";
      try { 
        Utility.typeOfSignature("E~?q82");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E~?q82
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.decode("ior", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.convertString("P<_\"0AZQO$");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.convertString("<");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(",N%6.Eu@8W", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,N%6.Eu@8W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "!%Qe1";
      try { 
        Utility.typeOfSignature("!%Qe1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %Qe1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JHnUm/::_f`");
      assertEquals((byte)11, byte0);
      
      String string0 = Utility.methodSignatureReturnType("JHnUm/::_f`");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.replace(">M", ">M", ">M");
      assertEquals(">M", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)43;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ifnull\t\t#11264", string1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      Object object1 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "$/>5<6n%\\";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string1 = "4[.wZbP73%r(rq_q$";
      try { 
        Utility.typeOfSignature("4[.wZbP73%r(rq_q$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4[.wZbP73%r(rq_q$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = (byte)0;
      byte byte1 = (byte)49;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byte byte2 = (byte)98;
      byteArray0[1] = (byte)98;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)98;
      byteArray1[2] = (byte)98;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)4;
      Utility.equals(byteArray0, byteArray1);
      Utility.toHexString(byteArray1);
      String string0 = "eXUW^ZL?zh@ipS";
      // Undeclared exception!
      try { 
        Utility.getSignature("B2[rH p_1$|A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[rH p_1$|A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("short", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("r$4~>sow: ", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)50;
      byteArray0[6] = (byte)24;
      byteArray0[4] = (byte)65;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-15), (int) (byte) (-15), false);
      assertEquals("0:    nop\n1:    nop\n2:    fstore_0\n3:    sipush\t\t16640\n6:    dload\t\t%0\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    nop\n2:    fstore_0\n3:    sipush\t\t16640\n6:    dload\t\t%0\n");
      assertEquals("0:    nop\\n1:    nop\\n2:    fstore_0\\n3:    sipush\t\t16640\\n6:    dload\t\t%0\\n", string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Utility.replace(">M", ">M", ">M");
      assertEquals(">M", string0);
      
      String string1 = Utility.fillup("? extends ", 91, true, '[');
      assertEquals("? extends [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string1);
      
      Utility.fillup("? extends [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", 91, true, 'o');
      String string2 = Utility.compactClassName("pop2", true);
      assertEquals("pop2", string2);
      
      short short0 = Utility.searchOpcode("byte");
      assertEquals((short) (-1), short0);
      
      String string3 = Utility.convertString("z>kS\"~;u)HEMcA1");
      assertEquals("z>kS\\\"~;u)HEMcA1", string3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("H=M>38|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H=M>38|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.convertString("$/>5<6n%");
      assertEquals("$/>5<6n%", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.replace("O3'+}%i,UI9m/UY.", "daload", "aload_0");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)35;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-75);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)68;
      byteArray2[1] = (byte)89;
      byteArray2[2] = (byte)35;
      byteArray2[3] = (byte)89;
      byteArray2[4] = (byte)89;
      byteArray2[5] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("4e 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.replace(">M", ">M", ">M");
      Utility.fillup("? extends ", 80, true, 'T');
      Utility.replace(">M", "O3'+}%i,UI9m/UY.", "N}+K]6=beF,J~q");
      Utility.convertString("N}+K]6=beF,J~q");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)81, (-310));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 42785. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)50;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)100;
      byteArray1[5] = (byte) (-45);
      byteArray1[6] = (byte)50;
      byteArray1[7] = (byte) (-45);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.clearBit((-3295), 10);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.compactClassName(":7Od_atJzL?LT_", false);
      assertEquals(":7Od_atJzL?LT_", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)4);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 20000, 36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.compactClassName("7");
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(136);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("R1L@Fwa}7%Ogk{za", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R1L@Fwa}7%Ogk{za'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[20];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.encode(byteArray0, false);
      String string0 = "9V!";
      try { 
        Utility.typeOfSignature("7(]b'2iw.]`A ttA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7(]b'2iw.]`A ttA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-128);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("0J>/:U@^");
      try { 
        Utility.typeOfSignature("0J>/:U@^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0J>/:U@^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      try { 
        Utility.typeOfSignature("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('M');
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte)40;
      byteArray1[5] = (byte)40;
      byteArray1[6] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10280. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("%Q");
      Utility.compactClassName("\"G`q|@n,i;hI-", "\n", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", ", "org.apache.bcel.classfile.Field", "if_icmpgt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wide";
      short short0 = Utility.searchOpcode("The wildcard must not be null");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (byte)28);
      assertEquals("protected static final", string0);
      
      String string1 = Utility.compactClassName("The wildcard must not be null");
      assertEquals("The wildcard must not be null", string1);
      
      String string2 = Utility.fillup("if_icmple", (byte) (-89), true, '2');
      assertEquals("if_icmple", string2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[ NXD");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O3'+}%i,UI9m/UY.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O3'+}%i,UI9m/UY.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.getSignature("Frm\tTo\tHandler\tT,ye\n");
      assertEquals("LFrm;", string0);
      
      byte byte0 = Utility.typeOfSignature("Frm\tTo\tHandler\tT,ye\n");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Py:O[7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Py:O[7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RdB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RdB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "{.I;#F7;DAdP{G{O";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      Utility.isJavaIdentifierPart('1');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.decode("{.I;#F7;DAdP{G{O", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.classOrInterface(1467);
      Utility.fillup("class", (-911), true, 't');
      String[] stringArray0 = new String[9];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "\t\t%";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      stringArray0[5] = "\t\t%";
      stringArray0[6] = "class";
      stringArray0[7] = "class";
      stringArray0[8] = "\t\t%";
      String string0 = Utility.methodTypeToSignature("class", stringArray0);
      Utility.fillup("class", (byte)0, true, 't');
      Utility.compactClassName("f?", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.searchOpcode("ljg");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Utility.getSignature("e;@k`Yv^MIu");
      assertEquals("Le;@k`Yv^MIu;", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      int int0 = Utility.setBit((byte)114, (byte)114);
      assertEquals(262258, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[4] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-885), (-885), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    lstore\t\t%55
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 85, false, 'O');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((byte) (-55));
      ConstantLong constantLong0 = new ConstantLong(0L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-303), (-303), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    arraylength
         // 1:    jsr_w\t\t#-922691393
         // 6:    arraylength
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "?0B}(=";
      try { 
        Utility.typeOfSignature("?0B}(=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?0B}(=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("bastore", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("54", string1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.getSignature(" reaching EOF");
      assertEquals("Lreaching;", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      String string0 = Utility.signatureToString("F2'a~<=}pfeyh", false);
      assertEquals("float", string0);
      
      byte byte0 = Utility.typeOfSignature("F2'a~<=}pfeyh");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.methodTypeToSignature("+PJSg2DGDG4cRsy<", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("+PJSg2DGDG4cRsy<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+PJSg2DGDG4cRsy<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = Utility.getSignature("YUM=d$lQv\"se:7J");
      assertEquals("LYUM=d$lQv\"se:7J;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.methodSignatureReturnType("LYUM=d$lQv\"se:7J;", false);
      assertEquals("YUM=d$lQv\"se:7J", string1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.signatureToString("J@S-t,#}n,? ", true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "long";
      objectArray0[1] = (Object) "M=d$lQv\"se:J";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "long";
      objectArray0[4] = (Object) "long";
      Object object1 = new Object();
      objectArray0[5] = object1;
      byte[] byteArray0 = new byte[27];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-83);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-122), (byte) (-83));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-83), 457);
      assertEquals("0:    lreturn\n1:    lreturn\n2:    lreturn\n3:    lreturn\n4:    lreturn\n5:    lreturn\n6:    lreturn\n7:    lreturn\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n24:   nop\n25:   nop\n26:   nop\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte byte0 = (byte)47;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte1 = (byte) (-67);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte)113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        byteSequence1.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":c,[Qo]}z0^D)LMr)oxh";
      try { 
        Utility.typeOfSignature(":c,[Qo]}z0^D)LMr)oxh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :c,[Qo]}z0^D)LMr)oxh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = Utility.setBit(1635, 1635);
      assertEquals(1643, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.fillup("L,;V", 71, false, 'T');
      Utility.signatureToString("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTL,;V", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.setBit((byte) (-119), (byte) (-119));
      String string0 = "";
      boolean boolean0 = false;
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Code code0 = null;
      try {
        code0 = new Code((byte) (-119), 102, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-101);
      byteArray1[1] = (byte) (-101);
      try { 
        Utility.typeOfSignature("*b4]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: b4]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char char0 = '4';
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "The array of suffixes must not be null";
      objectArray0[1] = (Object) "The array of suffixes must not be null";
      objectArray0[2] = (Object) "The array of suffixes must not be null";
      objectArray0[3] = (Object) "The array of suffixes must not be null";
      objectArray0[4] = (Object) "The array of suffixes must not be null";
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The array of suffixes must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.compactClassName("java.lang.");
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("YUM=d$lQv\"{&e:7b");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)28;
      String[] stringArray0 = new String[9];
      String string0 = " [,";
      stringArray0[0] = " [,";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[1] = "short";
      stringArray0[4] = "short";
      stringArray0[5] = "short";
      stringArray0[6] = "short";
      stringArray0[7] = "short";
      stringArray0[8] = "short";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("short", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type:  [,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "rwD6mi{:@";
      objectArray0[1] = (Object) "rwD6mi{:@";
      objectArray0[2] = (Object) "rwD6mi{:@";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.ConstantUtf8$1";
      objectArray0[4] = (Object) "org.apache.bcel.classfile.ConstantUtf8$1";
      objectArray0[5] = (Object) "rwD6mi{:@";
      Utility.printArray(objectArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)21, (int) (byte)29, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Utility.convertString("java.lang.");
      assertEquals("java.lang.", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.compactClassName("PMGClass(");
      short short0 = Utility.searchOpcode("'");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString(45);
      assertEquals("public protected static synchronized", string0);
      
      String string1 = Utility.compactClassName("org.apache.commons.io.filefilter.DelegateFileFilter");
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", string1);
      
      byte byte0 = Utility.typeOfSignature("[,hrL$_1TW");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-24), 512, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "nzUc<Mn{6&3(;", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "The array of suffixes must not be null";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" (", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("", stringArray0);
      Utility.isJavaIdentifierPart('l');
      Utility.isSet(643, 43);
      Utility.replace(".Co'/9-.p*,Em$", ".Co'/9-.p*,Em$", (String) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("putfield", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `putfield'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.searchOpcode("e'R9DOLHcw/%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|8_kk");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "|8_kk";
      objectArray0[2] = (Object) "|8_kk";
      objectArray0[3] = (Object) "|8_kk";
      objectArray0[4] = (Object) "e'R9DOLHcw/%";
      objectArray0[5] = (Object) "e'R9DOLHcw/%";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("JV");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.signatureToString("InnerClasses(");
      try { 
        Utility.typeOfSignature("$w#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $w#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("goto\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, true);
      Utility.getSignature("\t\t%");
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.methodTypeToSignature("+PJSg2DGDG4cRsy<", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Ljava/lang/Cloneable;Ljava/io/Serializable;)L+PJSg2DGDG4cRsy<;", "(Ljava/lang/Cloneable;Ljava/io/Serializable;)L+PJSg2DGDG4cRsy<;", "+PJSg2DGDG4cRsy<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ljava/lang/Cloneable;Ljava/io/Serializable;)L+PJSg2DGDG4cRsy<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "%VlgNneu1L^DQd/";
      try { 
        Utility.typeOfMethodSignature("%VlgNneu1L^DQd/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %VlgNneu1L^DQd/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte) (-6);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, 344);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[2] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
      
      byte[] byteArray1 = Utility.decode("($?a8", false);
      assertEquals(4, byteArray1.length);
      
      String string1 = Utility.compactClassName("l2d");
      assertEquals("l2d", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      try { 
        Utility.typeOfSignature("3jG2XS7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3jG2XS7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.clearBit(207, 207);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1482, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ltr^Nu6eP|K$`#p+");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte)96;
      byteArray1[3] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "H-";
      try { 
        Utility.methodSignatureReturnType("H-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("lload", stringArray0);
      assertEquals("()Llload;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-92), 65, true);
      assertEquals("0:    if_icmple\t\t#0\n3:    nop\n4:    nop\n", string1);
      
      String string2 = Utility.convertString("org.a|ache.bcel.classfile.ConstantUtf8$1");
      assertEquals("org.a|ache.bcel.classfile.ConstantUtf8$1", string2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.convertString("<");
      Utility.signatureToString("V", false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "<";
      objectArray0[1] = (Object) "void";
      objectArray0[2] = (Object) "<";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[0] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("5d 00 5d 5d 5d", string0);
      
      String string1 = Utility.accessToString((int) (byte)93);
      assertEquals("public protected static final volatile", string1);
      
      int int0 = Utility.setBit(342, (byte)93);
      assertEquals(536871254, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("07:Z?]vI;");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 0 and got CONSTANT_Utf8[1](\"07:Z?]vI;\")
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.replace(">M", ">M", ">M");
      assertEquals(">M", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)3;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("u$K_u$c0$96$D$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.a|ache.bcel.classfile.ConstantUtf8$1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(38, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(38, byteArray0.length);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 00 00", string0);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.signatureToString("B", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("9$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.replace(">M", ">M", ">M");
      String string1 = Utility.compactClassName(">M");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.classOrInterface((-835));
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("1d 77 1d 70 c1", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-89);
      objectArray0[1] = (Object) (byte) (-89);
      objectArray0[2] = (Object) (byte) (-89);
      objectArray0[3] = (Object) (byte)0;
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-89), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("breakpoint");
      assertEquals("breakpoint", string0);
      
      short short0 = Utility.searchOpcode("breakpoint");
      assertEquals((short)202, short0);
      
      byte byte0 = Utility.typeOfSignature("Frm");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("bipush\t\t80", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      Utility.encode(byteArray0, true);
      Utility.fillup("$l$8b$I$A$A$A$A$A$A$A", (byte) (-105), false, 'Z');
      try { 
        Utility.methodSignatureReturnType("$l$8b$I$A$A$A$A$A$A$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.replace("h}E9/=ec!5EwI9GYK", "P<_\"0AZQO$", "h}E9/=ec!5EwI9GYK");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "The array of suffixes must not be null";
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "The array of suffixes must not be null";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "The array of suffixes must not be null";
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "The array of suffixes must not be null";
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte byte0 = (byte)47;
      byte byte1 = (byte) (-67);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-83));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        byteSequence1.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.getSignature("#i");
      try { 
        Utility.methodSignatureReturnType("K7N=#|E}4]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K7N=#|E}4]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)7;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L7YG|'P");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      short short0 = Utility.searchOpcode("invokevirtual");
      assertEquals((short)182, short0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)21;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#5376", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload\t\t%25", string0);
      
      byte[] byteArray1 = Utility.decode("aload\t\t%25", false);
      assertArrayEquals(new byte[] {(byte)97, (byte)108, (byte)111, (byte)97, (byte)100, (byte)9, (byte)9, (byte)37, (byte)50, (byte)53}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H5_}iFNtF2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H5_}iFNtF2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.typeOfSignature("Invalid type: ");
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("dload_2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = Utility.replace(">M", ">M", ">M");
      String string1 = Utility.replace(">M", "O3'+}%i,UI9m/UY.", ">M");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("CONSTANT_Long", false);
      byte byte0 = Utility.typeOfSignature("CONSTANT_Long");
      assertEquals((byte)5, byte0);
      
      String string3 = Utility.compactClassName("char", false);
      assertTrue(string3.equals((Object)string2));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)18;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L{NX.0<~lQ,KE$TBP");
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("=|?UN0BTUZn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =|?UN0BTUZn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      byte byte0 = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "{.I;#F7;DAdP{G{O";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      Utility.isJavaIdentifierPart('1');
      int int0 = (-3633);
      Utility.isSet((-3633), (-3633));
      String string0 = "$!b+2v";
      Utility.replace("LT<3G#uSY", "$!b+2v", "bz;dQf._;VK_h");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LT<3G#uSY", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LT<3G#uSY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)10, (int) (byte)76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(12, byteSequence0.getIndex());
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)47;
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-83);
      byteArray0[5] = (byte) (-67);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    nop
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WVzHa;}H");
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString((int) (byte)64);
      assertEquals("volatile", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.format(194, 0, false, 'I');
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-11);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte) (-11);
      byteArray1[2] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("iflt\t\t#-2816", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Lorg/apache/bcel/util/ClassPath$Zip;istore_0");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-20);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-97);
      objectArray0[1] = (Object) (byte) (-20);
      objectArray0[2] = (Object) (byte) (-20);
      objectArray0[3] = (Object) (byte) (-97);
      objectArray0[4] = (Object) "9f ec 00";
      objectArray0[5] = (Object) (byte) (-20);
      objectArray0[6] = (Object) "9f ec 00";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Xms!T(Qwp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xms!T(Qwp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.searchOpcode("WG){`y{c),3~");
      try { 
        Utility.typeOfSignature("'Z*[]o!d)sunJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'Z*[]o!d)sunJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.compactClassName("O3'+}%i,UI9m/UY.");
      Utility.compactClassName("O3'+}%i,UI9m/UY.", "O3'+}%i,UI9m/UY.", true);
      Utility.convertString("nY;ih9Q?");
      Utility.typeOfSignature("Z21%ngy^b}");
      try { 
        Utility.typeOfMethodSignature("6$H@g7RP%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6$H@g7RP%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      Utility.classOrInterface(3493);
      String string0 = "+PJSg2DGDG4cRsy<";
      try { 
        Utility.typeOfSignature("+PJSg2DGDG4cRsy<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PJSg2DGDG4cRsy<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.signatureToString("D", true);
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "Eoid";
      try { 
        Utility.typeOfSignature("Eoid");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eoid
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Utility.accessToString(0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[3] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Utility.methodTypeToSignature("", stringArray0);
      char char0 = '4';
      Utility.isJavaIdentifierPart('4');
      int int0 = 72;
      Utility.isSet(72, 57);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("lAnd");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 64, 62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = Utility.getSignature("ifgt");
      assertEquals("Lifgt;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)74;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)58;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.replace(">M", ">M", ">M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[0] = (byte)125;
      byteArray0[3] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WVzHa;}H");
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-62);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte)64;
      byteArray1[3] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.accessToString((int) (byte)64);
      assertEquals("volatile", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Utility.replace("O3'+}%i,UI9m/UY.", "daload", "aloar_0");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)35;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte)89;
      byteArray0[0] = (byte)68;
      byteArray1[3] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = ")";
      Utility.getSignature(")");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      boolean boolean0 = true;
      Utility.compactClassName(")", true);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) ")", (-3027), (-3027));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = Utility.replace(">M", ">M", ">M");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "? extends ";
      objectArray0[2] = (Object) ">M";
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ">M";
      objectArray0[5] = (Object) ">M";
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = Utility.replace("Invalid signature: ", "iDIV6lM!nUE", "Invalid signature: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Invalid signature: ";
      Utility.printArray(objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "Invalid signature: ";
      objectArray1[1] = (Object) "Invalid signature: ";
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "Invalid signature: ";
      objectArray1[4] = (Object) "Invalid signature: ";
      objectArray1[5] = (Object) "{Invalid signature: }";
      objectArray1[6] = (Object) "{Invalid signature: }";
      objectArray1[7] = (Object) "{Invalid signature: }";
      objectArray1[8] = (Object) "Invalid signature: ";
      String string1 = Utility.printArray(objectArray1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-67), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)11;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "u^'GFMX86V&R!GKV5bY", "u^'GFMX86V&R!GKV5bY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.replace("k#K1Kz/ixAX~n Na%U0", "k#K1Kz/ixAX~n Na%U0", "");
      try { 
        Utility.methodSignatureReturnType("arraylength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `arraylength'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.getSignature("O3'+}%i,UI9m/UY.");
      // Undeclared exception!
      try { 
        Utility.signatureToString("O3'+}%i,UI9m/UY.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O3'+}%i,UI9m/UY.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)120, (int) (byte)120, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-=k;#rS!zW_{c(S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -=k;#rS!zW_{c(S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("land");
      Utility.compactClassName("8W#ew8", "putstatic", true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte) (-53);
      byteArray1[4] = (byte) (-106);
      byteArray1[5] = (byte)6;
      Utility.encode(byteArray1, true);
      Utility.compactClassName("", "lshl", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "mBtt\"", "Invalid type: ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)84;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-114), (int) (byte) (-93));
      assertEquals("0:    d2i\n1:    if_icmpgt\t\t#-29041\n4:    bastore\n5:    d2i\n6:    d2i\n7:    bastore\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-111), 59, (LocalVariable[]) null, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("\"NK", "\"NK", "\"NK", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"NK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.signatureToString("GURg#eo_iidO=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GURg#eo_iidO='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-63);
      String string0 = "K1yc=mFv5,$";
      try { 
        Utility.typeOfSignature("K1yc=mFv5,$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K1yc=mFv5,$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The aXray of suffixes must not be4null");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.accessToString((int) (byte)14);
      assertEquals("private protected static", string0);
      
      String string1 = Utility.convertString("The aXray of suffixes must not be4null");
      assertEquals("The aXray of suffixes must not be4null", string1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = true;
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("land");
      Utility.compactClassName("8W#ew8", "putstatic", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("h}>", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-57);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-8);
      byteArray0[4] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-8);
      byteArray1[5] = (byte)81;
      byteArray1[6] = (byte) (-57);
      byteArray1[7] = (byte) (-100);
      byteArray1[8] = (byte) (-86);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('n');
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface((byte)8);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("static", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 5, 1005, true);
      assertEquals("5:    dadd\n", string0);
      
      String string1 = Utility.convertString("int");
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("athrow", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "lrem";
      Utility.compactClassName("lrem");
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.getSignature("org.a|ach`.bcel.classfile.ConstantUtf8$1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)21;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("@qV@!Ns");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @qV@!Ns
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = Utility.replace(">M", ">M", ">M");
      String string1 = Utility.fillup("? extends ", 80, true, 'T');
      assertEquals("? extends TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string1);
      
      String string2 = Utility.replace(">M", "O3'+}%i,UI9m/UY.", "z>kS\"~;u)HEMcA1");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.signatureToString("CONSTANT_Long", false);
      assertEquals("char", string3);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)8;
      Utility.encode(byteArray0, true);
      Utility.accessToString(4034);
      // Undeclared exception!
      try { 
        Utility.signatureToString("private volatile transient native interface abstract strictfp", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private volatile transient native interface abstract strictfp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.a|ache.bcel.classfile.ConstantUtf8$1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2126, 1113);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("if_icmpne");
      assertEquals((short)160, short0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.convertString("YUM=d$lQv\"{&e:7b");
      assertEquals("YUM=d$lQv\\\"{&e:7b", string0);
      
      String string1 = Utility.compactClassName("invokeinterface");
      assertEquals("invokeinterface", string1);
      
      byte[] byteArray0 = Utility.decode("YUM=d$lQv\"{&e:7b", false);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = Utility.replace("rwD6mi{:@", "<", "<");
      assertEquals("rwD6mi{:@", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) "rwD6mi{:@";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "<";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.ConstantUtf8$1";
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-55);
      byteArray0[2] = (byte)16;
      byteArray0[5] = (byte) (-66);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(200);
      constantArray0[0] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)27, 1120, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = Utility.classOrInterface(695);
      assertEquals("interface", string0);
      
      String string1 = Utility.format(695, 109, true, 'K');
      assertEquals("695KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lconst_0", string2);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Utility.searchOpcode("Jcu6GH ?Y0ZBO");
      Utility.replace("O_1nz]v9uZ", "Jcu6GH ?Y0ZBO", "O_1nz]v9uZ");
      String string0 = "idiv";
      Utility.replace("O_1nz]v9uZ", "idiv", "O_1nz]v9uZ");
      String string1 = "Zt~4sm6?]F-";
      // Undeclared exception!
      try { 
        Utility.replace("Zt~4sm6?]F-", (String) null, "O_1nz]v9uZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Utility.searchOpcode("Jcu6GH ?Y0ZBO");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Jcu6GH ?Y0ZBO";
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@9b9ad64, java.lang.Object@576e13bd, Jcu6GH ?Y0ZBO, java.lang.Object@576e13bd", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "_d1 Fb<C5qN9nP7", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = "The FileFilter must not be null";
      Utility.typeOfSignature("The FileFilter must not be null");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The FileFilter must not be null");
      Utility.format((byte)14, (-1114), false, 'C');
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.getSignature("E;sFF");
      Utility.setBit(161, 161);
      Utility.clearBit((byte)0, 161);
      Utility.setBit(0, (byte)0);
      Utility.methodSignatureReturnType("Illegal type: ");
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.methodTypeToSignature("+PJSg2DGDG4cRsy<", stringArray0);
      try { 
        Utility.methodSignatureReturnType("(Ljava/lang/Cloneable;Ljava/io/Serializable;)L+PJSg2DGDG4cRsy<;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L+PJSg2DGDG4cRsy<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = Utility.getSignature("f");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string1 = Utility.compactClassName("Lf;");
      assertTrue(string1.equals((Object)string0));
      
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string2 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ret\t\t%169", string2);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.searchOpcode("5P-ixfwidR|p><");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "YUM=d$lQv\"se:7J";
      objectArray0[1] = (Object) "YUM=d$lQv\"se:7J";
      objectArray0[2] = (Object) "YUM=d$lQv\"se:7J";
      Object object2 = new Object();
      objectArray0[3] = object2;
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 34, (int) (short) (-1), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = "M=d$lQv\"se:J";
      Utility.compactClassName("M=d$lQv\"se:J");
      try { 
        Utility.typeOfSignature("M=d$lQv\"se:J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M=d$lQv\"se:J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<I#@MDd-h~=`6#J6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <I#@MDd-h~=`6#J6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)99;
      byteArray0[13] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("dadd");
      try { 
        Utility.methodSignatureArgumentTypes("\t\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-5);
      byteArray0[2] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = Utility.decode("areturn", false);
      assertArrayEquals(new byte[] {(byte)97, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Utility.signatureToString("Dk");
      Utility.compactClassName("J`{Txra= Rt3M Gw0");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-109);
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      constantArray0[0] = (Constant) constantFloat0;
      int int0 = 4;
      int int1 = 113;
      File file0 = MockFile.createTempFile("8t^hGLd", "J`{Txra= Rt3M Gw0");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 28);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.convertString("kM;TA^UKZ[51%_u-|b");
      assertEquals("kM;TA^UKZ[51%_u-|b", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), 426, true);
      assertEquals("0:    l2i\n1:    l2i\n2:    i2s\n3:    i2s\n4:    i2s\n", string0);
      
      String string1 = Utility.methodTypeToSignature("0:    l2i\n1:    l2i\n2:    i2s\n3:    i2s\n4:    i2s\n", (String[]) null);
      assertEquals("()L0:;", string1);
      
      Utility.getSignature("()L0:;");
      String string2 = Utility.getSignature("impdep2");
      assertEquals("Limpdep2;", string2);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Utility.methodTypeToSignature("lload", (String[]) null);
      Utility.methodSignatureToString("()Llload;", "()Llload;", "lload");
      try { 
        Utility.methodSignatureReturnType("lload lload ()Llload;()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Utility.replace(">M", ">M", ">M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)10;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+GrqRJ[%?HP9A(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GrqRJ[%?HP9A(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M=d$lQv\"se:J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M=d$lQv\"se:J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int int0 = Utility.clearBit(71, 2486);
      assertEquals(71, int0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)41;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3908), (int) (byte)41, false);
      assertEquals("0:    dload_3\n1:    baload\n2:    baload\n3:    dload_3\n4:    dload_3\n5:    baload\n6:    dload_3\n7:    dload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, 92, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      String string0 = Utility.methodTypeToSignature("+PJSg2DGDG4cRsy<", stringArray0);
      assertEquals("(Ljava/lang/Cloneable;Ljava/io/Serializable;)L+PJSg2DGDG4cRsy<;", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{java.lang.Cloneable, java.io.Serializable}", string1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = Utility.decode("dneg", false);
      assertArrayEquals(new byte[] {(byte)100, (byte)110, (byte)101, (byte)103}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = Utility.replace("zOhHW", "<", "<");
      assertEquals("zOhHW", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = Utility.clearBit((-329), 191);
      assertEquals(2147483319, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('<');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)21;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.decode("v$8^|", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G7 ?]N|F![ EIWMG~z@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G7 ?]N|F![ EIWMG~z@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("wide\t(wide)", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-60));
      assertEquals("protected volatile transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Utility.getSignature("dreturn");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-60);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-1), 86);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.format((byte) (-89), (byte) (-89), true, 'g');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.getSignature("$b7.9{KA");
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("]5Tk[\"N<s5 pgx;");
      String string0 = Utility.compactClassName("q5NYAN,i>:3l8k", ":.zM(q", true);
      assertEquals("q5NYAN,i>:3l8k", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Utility.compactClassName("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",Y";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L,Y;L;L;)L;", string0);
      
      String string1 = Utility.convertString("GjmbZ8");
      assertEquals("GjmbZ8", string1);
      
      String string2 = Utility.compactClassName("", true);
      assertEquals("", string2);
      
      int int0 = Utility.clearBit(211, 0);
      assertEquals(210, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      boolean boolean1 = Utility.isJavaIdentifierPart('6');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(35, 91, false, ':');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("e;6@k`Yv^MIu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `e;6@k`Yv^MIu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte) (-99);
      byteArray1[4] = (byte)94;
      byteArray1[5] = (byte) (-64);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.accessToString(525, false);
      Utility.getSignature("public protected static interface");
      Utility.setBit((-2533), (-2533));
      Utility.clearBit(525, (-2533));
      Utility.setBit(0, 91);
      try { 
        Utility.methodSignatureReturnType("public protected static interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public protected static interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$/>5<6n%", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)62, (byte)53, (byte)60, (byte)54, (byte)110, (byte)37}, byteArray0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[3] = (byte)30;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$/>5<6n%");
      byteArray1[2] = (byte)51;
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte) (-123);
      byteArray1[5] = (byte)122;
      byteArray1[6] = (byte) (-66);
      byteArray1[8] = (byte) (-37);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1626), 3068, false);
      assertEquals("0:    nop\n1:    nop\n2:    baload\n3:    istore_1\n4:    i2l\n5:    ishr\n6:    arraylength\n7:    nop\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = Utility.replace("static", "static", "static");
      assertEquals("static", string0);
      
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "instanceofinstanceof");
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.setBit((byte)60, 189);
      assertEquals(536870972, int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%GmrccZ\"Z33=0|/D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %GmrccZ\"Z33=0|/D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.compactClassName("");
      String string0 = Utility.methodSignatureReturnType("Limpdep2;V");
      assertEquals("impdep2", string0);
      
      String string1 = Utility.replace("Warning: Padding byte != 0 in ", "HYO9Wugk;T~=myJBx", "{RcXY");
      assertEquals("Warning: Padding byte != 0 in ", string1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.accessToString(136);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.compactClassName("", true);
      boolean boolean0 = false;
      Utility.compactClassName("{java.lang.Object@3b3d6a24, java.lang.Object@5099a0d1, java.lang.Object@59e7a130, java.lang.Object@48c0ddf1, java.lang.Object@18fcf287, java.lang.Object@57e4661}", "_d1 Fb<C5qN9nP7", false);
      try { 
        Utility.methodSignatureArgumentTypes("CRt`s|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CRt`s|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">M";
      Utility.methodTypeToSignature(">M", stringArray0);
      Utility.isJavaIdentifierPart('z');
      Utility.isSet(1178, 1178);
      // Undeclared exception!
      try { 
        Utility.signatureToString(">M", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte byte0 = (byte)92;
      String string0 = "org.apache.bcel.classfile.ConstantUtf8$1";
      String string1 = "rwD6mi{:@";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[1] = "rwD6mi{:@";
      stringArray0[2] = "AoP'Z'-";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ladd
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      Utility.printArray((Object[]) null, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 512, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-4);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), 184);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byte byte1 = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byte byte2 = (byte)112;
      byteArray0[2] = (byte)112;
      byte byte3 = (byte)95;
      byteArray0[3] = (byte)95;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true, true);
      Utility.clearBit((byte)95, (byte)2);
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte) (-39);
      byteArray1[4] = (byte)67;
      byteArray1[5] = (byte)20;
      byteArray1[6] = (byte)93;
      byteArray1[7] = (byte)67;
      byteArray1[8] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)93, false, 'i');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(136);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-83);
      byte byte0 = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte) (-83));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a5 97 97 97 97", string0);
      
      String string1 = Utility.accessToString((-3185));
      assertEquals("public private protected static transient native interface synthetic annotation enum", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "public private protected static transient native interface synthetic annotation enum";
      stringArray0[1] = "a5 97 97 97 97";
      stringArray0[2] = "public private protected static transient native interface synthetic annotation enum";
      stringArray0[3] = "if_acmpeq\t\t#-26729";
      String string2 = Utility.methodTypeToSignature("if_acmpeq\t\t#-26729", stringArray0);
      assertEquals("(Lpublic;La5;Lpublic;Lif_acmpeq;)Lif_acmpeq;", string2);
      
      String string3 = Utility.getSignature("");
      assertEquals("L;", string3);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      int int0 = Utility.clearBit(10, 10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$/>5<6n%", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, 103, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Object@1158b60f, java.lang.Object@4bacd2c2, java.lang.Object@4c57a39d, java.lang.Object@e58f4a2, java.lang.Object@5a64c3a8, java.lang.Object@777330e4, java.lang.Object@6493edc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@1158b60f, java.lang.Object@4bacd2c2, java.lang.Object@4c57a39d, java.lang.Object@e58f4a2, java.lang.Object@5a64c3a8, java.lang.Object@777330e4, java.lang.Object@6493edc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-57);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = "Wy(6Qt9\\_\" -t:M2@34";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("Wy(6Qt9_\" -t:M2@34", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1005, 144, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(184, 254, false, 'C');
      byte byte0 = (byte)9;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Utility.convertString("");
      Utility.compactClassName("]Dy`6|atG&J");
      byte[] byteArray0 = Utility.decode("", false);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Ljava/lang/Cloneable;V");
      assertEquals("Cloneable", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Utility.compactClassName(";A~^Tyz_<H=Dd@'f");
      try { 
        Utility.typeOfSignature(";A~^Tyz_<H=Dd@'f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;A~^Tyz_<H=Dd@'f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("lload", stringArray0);
      assertEquals("()Llload;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_icmple\t\t#-7079", string1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "+PJSg2DGDG4cRsy<";
      stringArray0[1] = "+PJSg2DGDG4cRsy<";
      stringArray0[2] = "}I^thWP,-$q";
      stringArray0[3] = "+PJSg2DGDG4cRsy<";
      stringArray0[4] = "+PJSg2DGDG4cRsy<";
      stringArray0[5] = "+PJSg2DGDG4cRsy<";
      stringArray0[6] = "+PJSg2DGDG4cRsy<";
      Utility.methodTypeToSignature("+PJSg2DGDG4cRsy<", stringArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "+PJSg2DGDG4cRsy<";
      objectArray0[1] = (Object) "+PJSg2DGDG4cRsy<";
      objectArray0[2] = (Object) "+PJSg2DGDG4cRsy<";
      objectArray0[3] = (Object) constantPool0;
      objectArray0[4] = (Object) "}I^thWP,-$q";
      objectArray0[6] = (Object) constantPool0;
      objectArray0[8] = (Object) "+PJSg2DGDG4cRsy<";
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2396));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("P{^}%=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P{^}%='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifgt\t\t#-166", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[2] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("e 27Iw>bSxu", "e 27Iw>bSxu", "e 27Iw>bSxu", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e 27Iw>bSxu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("ior");
      assertEquals((short)128, short0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Utility.convertString("<");
      boolean boolean0 = false;
      Utility.signatureToString("V", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)84;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "V";
      stringArray0[1] = "77GU==\"]&|L>G%(";
      stringArray0[2] = "void";
      stringArray0[3] = "<";
      stringArray0[4] = "77GU==\"]&|L>G%(";
      stringArray0[5] = "V";
      stringArray0[6] = "77GU==\"]&|L>G%(";
      try { 
        Utility.methodTypeToSignature("77GU==\"]&|L>G%(", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pCo<x&\"n~Av+");
      byteArray0[0] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = Utility.replace("rwD6mi{:@", "<", "<");
      assertEquals("rwD6mi{:@", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      String string1 = Utility.methodSignatureReturnType("Z$qRPi", true);
      assertEquals("boolean", string1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Eoid", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      int int0 = byteSequence1.readUnsignedByte();
      assertEquals(69, int0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skipBytes((byte)63);
      byte[] byteArray1 = Utility.decode("lstore_0", false);
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("6c 73 74 6f 72 65 5f 30", string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Utility.convertString("YUM=d$lQv\"{&e:7b");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)13;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)11;
      objectArray0[2] = (Object) "$L$N";
      objectArray0[3] = (Object) "YUM=d$lQv\"{&e:7b";
      objectArray0[4] = (Object) null;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) (byte)11;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[2] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.convertString("Da,E6Ew%/TlscUKmvHp");
      try { 
        Utility.typeOfSignature("Unrecognized attribute type tag parsed: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unrecognized attribute type tag parsed: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)55;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[1] = "rwD6mi{:@";
      stringArray0[2] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[3] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[4] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[5] = ">\t";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[6] = "AoP'Z'-";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      Utility.isJavaIdentifierPart('d');
      Utility.isSet((byte)7, 4077);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)34, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",; length = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,; length = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-2301), (int) (byte) (-75), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = "[ NXD";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)30;
      byteArray0[4] = (byte) (-127);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      // Undeclared exception!
      try { 
        Utility.signatureToString("[ NXD", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` NXD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A X!?%ws _buIX";
      stringArray0[1] = "A X!?%ws _buIX";
      stringArray0[2] = "A X!?%ws _buIX";
      stringArray0[3] = "A X!?%ws _buIX";
      stringArray0[4] = "A X!?%ws _buIX";
      stringArray0[5] = "A X!?%ws _buIX";
      String string0 = Utility.methodTypeToSignature("A X!?%ws _buIX", stringArray0);
      assertEquals("(LA;LA;LA;LA;LA;LA;)LA;", string0);
      
      String string1 = Utility.methodSignatureToString("(LA;LA;LA;LA;LA;LA;)LA;", "ifnonnull", "? super ");
      assertEquals("? super  A ifnonnull(A arg1, A arg2, A arg3, A arg4, A arg5, A arg6)", string1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(":c,[Qo]}z0^D)LMr)oxh", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e?.}^=^tkZlE3W");
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("5h,2)", "5h,2)", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)106;
      byteArray0[3] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean boolean0 = false;
      char char0 = 'P';
      Utility.fillup("<illegal opcode>", 34, false, 'P');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<illegal opcode>";
      stringArray0[1] = "sAZCD%C-<\"[H}k3\",l\"";
      stringArray0[2] = "PPPPPPPPPPPPPPPPPP<illegal opcode>";
      stringArray0[3] = "PPPPPPPPPPPPPPPPPP<illegal opcode>";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(", npairs = ", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[H}k3\",l\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte byte0 = (byte)127;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Tx,@\"L8lv;m\"m9\"W");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)127, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Utility.replace("`|J", "`|J", "Yq{89XwARcwoK7vr");
      try { 
        Utility.decode("Yq{89XwARcwoK7vr", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IaFjFD_oVNSo3";
      stringArray0[1] = "IaFjFD_oVNSo3";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.replace("5c e3 b1 b8 20 50 00 00 00", (String) null, "QVFx+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$a7$A$A$A$A$A$A$A$A$A$A$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.isJavaIdentifierPart('}');
      Utility.isSet((-3633), 223);
      String string0 = "bz;dQf._;VK_h";
      String string1 = "LT<3G#uSY";
      Utility.replace("\n", "boolean", "}Hd7xN2$mSqx");
      // Undeclared exception!
      try { 
        Utility.signatureToString("\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte)78;
      Utility.equals(byteArray0, byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-80);
      byteArray2[1] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      Utility.fillup(")Y[kc(|52DLEK(]:", 451, false, '.');
      Utility.searchOpcode("dup");
      // Undeclared exception!
      try { 
        Utility.signatureToString("double", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(38);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1126, 28);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 27, 27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.replace("0", "0", "0");
      try { 
        Utility.decode("0", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = Utility.replace(">M", ">M", ">M");
      assertEquals(">M", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("b1 b1 7d b1 41", string1);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-97), (int) (byte) (-97), false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "long";
      String string0 = Utility.methodTypeToSignature("long", stringArray0);
      assertEquals("(J)J", string0);
      
      String string1 = Utility.methodSignatureToString("(J)J", "long", "long");
      assertEquals("long long long(long arg1)", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$94$A$A$A$A$A", string2);
      
      String string3 = Utility.compactClassName("EHH1fs<Xah-P", "$94$A$A$A$A$A", true);
      assertEquals("EHH1fs<Xah-P", string3);
      
      byte byte0 = Utility.typeOfMethodSignature("(J)J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.convertString("00 00 00 00 00 00 00 00 00 00 00 00 00");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("4c 97 20 97 0a 97 97 97 97", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)62;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("$a7$i$A$I$o$A$Ac$3e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $a7$i$A$I$o$A$Ac$3e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)90;
      byteArray0[3] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (-4938), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      byteSequence0.reset();
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)32, (byte)0, localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("&onvYA*vb", "&onvYA*vb", "&onvYA*vb", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &onvYA*vb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)61;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)55;
      String string0 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore\t\t%61", string1);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = Utility.replace("'", "\"", "'");
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wy(6Qt9_\" -t:M2@34");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wy(6Qt9_\" -t:M2@34'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = Utility.fillup("? extends ", 80, true, 'T');
      assertEquals("? extends TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string0);
      
      String string1 = Utility.replace("<", "O3'+}%i,UI9m/UY.", "z>kS\"~;u)HEMcA1");
      assertEquals("<", string1);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.replace(">M", ">M", ">M");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "{.I;#F7;DAdP{G{O";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      Utility.isJavaIdentifierPart('1');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockFile mockFile0 = new MockFile("{.I;#F7;DAdP{G{O", "imul");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "fconst_0", (Object[]) stringArray0);
      Utility.printArray(printStream0, (Object[]) stringArray0);
      assertEquals(57L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "nvokOH`especil";
      stringArray0[1] = "nvokOH`especil";
      stringArray0[2] = "org.apache.bcel.classfile.ConstantUtf8$1";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      Utility.isJavaIdentifierPart('1');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockFile mockFile0 = new MockFile("org.apache.bcel.classfile.ConstantUtf8$1", "imul");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "fconst_0", (Object[]) stringArray0);
      Utility.printArray(printStream0, (Object[]) stringArray0);
      assertEquals(83L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("Illegal type: ", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-1268);
      Utility.clearBit((-1268), (-1268));
      Utility.accessToString((-5364), false);
      Utility.compactClassName("XU@GS", "protected static native interface strictfp annotation enum", false);
      Utility.accessToString((-5364), false);
      try { 
        Utility.methodSignatureReturnType("XU@GS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XU@GS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      try { 
        Utility.decode("dup_x2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      String string0 = Utility.methodSignatureReturnType("SRwM*;haqyZs&e`(Q.");
      assertEquals("short", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("66 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpeq\t\t#-26729", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("a5 97 97 97 97", string1);
      
      String string2 = Utility.accessToString((-3185));
      assertEquals("public private protected static transient native interface synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.getSignature("dup2_x1");
      assertEquals("Ldup2_x1;", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lload_2", "lload_2", "lload_2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2495), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Byte code error: ");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifge\t\t#19018", string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String string0 = Utility.classOrInterface(1467);
      String string1 = Utility.fillup("class", (-911), true, 't');
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "\t\t%";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      stringArray0[5] = "\t\t%";
      stringArray0[6] = "class";
      stringArray0[7] = "class";
      stringArray0[8] = "\t\t%";
      String string2 = Utility.methodTypeToSignature("class", stringArray0);
      assertEquals("(Lclass;Lclass;L%;Lclass;Lclass;L%;Lclass;Lclass;L%;)Lclass;", string2);
      
      Utility.fillup("class", (byte)0, true, 't');
      String string3 = Utility.compactClassName("f?", true);
      assertEquals("f?", string3);
      
      short short0 = Utility.searchOpcode("invokedynamic");
      assertEquals((short)186, short0);
      
      String string4 = Utility.convertString("\t\t%");
      assertEquals("\t\t%", string4);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      Utility.replace("Ty%l)$my#[;ax<Wn", "", "");
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-57);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-8);
      byteArray1[5] = (byte)81;
      byteArray1[6] = (byte) (-57);
      byteArray1[7] = (byte) (-100);
      byteArray1[8] = (byte) (-86);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("O3'+}%i$UI9mcOUY.", false);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = "=X(n";
      try { 
        Utility.typeOfSignature("=X(n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =X(n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.fillup("L,;V", 80, false, 'T');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTL,;V", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("D>1X`HEf'RmY\"6^|");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.replace("rwD6mi{:@", "<", "<");
      Utility.isJavaIdentifierPart('\\');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "rwD6mi{:@";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "<";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.ConstantUtf8$1";
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `null'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      int int0 = Utility.clearBit((-32768), 180);
      assertEquals((-1081344), int0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.accessToString((int) (byte)0);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)106);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WVzHa;}H");
      Utility.accessToString((int) (byte)49);
      // Undeclared exception!
      try { 
        Utility.signatureToString("WVzHa;}H", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WVzHa;}H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85));
      String string0 = Utility.compactClassName("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "rwD6mi{:@";
      objectArray0[2] = (Object) "rwD6mi{:@";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, 91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)103;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-865), (-865));
      assertEquals("0:    if_icmpne\t\t#25742\n3:    <illegal opcode>\n4:    lstore_3\n5:    dsub\n", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = Utility.accessToString(175);
      assertEquals("public private protected static synchronized transient", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = Utility.compactClassName(";A~^Tyz_<H=Dd@'f");
      assertEquals(";A~^Tyz_<H=Dd@'f", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fload\t\t%191", string1);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = " is no interface";
      stringArray0[1] = " is no interface";
      stringArray0[2] = " is no interface";
      stringArray0[3] = " is no interface";
      stringArray0[4] = " is no interface";
      stringArray0[5] = " is no interface";
      String string0 = Utility.methodTypeToSignature(" is no interface", stringArray0);
      assertEquals("(Lis;Lis;Lis;Lis;Lis;Lis;)Lis;", string0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      short short0 = Utility.searchOpcode("Jcu6GH ?Y0ZBO");
      assertEquals((short) (-1), short0);
      
      Utility.replace("O_1nz]v9uZ", "Jcu6GH ?Y0ZBO", "O_1nz]v9uZ");
      String string0 = Utility.replace("O_1nz]v9uZ", "idiv", "idiv");
      assertEquals("O_1nz]v9uZ", string0);
      
      String string1 = Utility.methodSignatureReturnType("Jcu6GH ?Y0ZBO");
      assertEquals("long", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Jcu6GH ?Y0ZBO";
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{Jcu6GH ?Y0ZBO}", string2);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("jsr_w\t\t#-483640064", string0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      int int0 = (-2697);
      Utility.isSet((-1), (-2697));
      Utility.replace("<", "$!b+2v", "Constant pool at index ");
      Utility.signatureToString("V", false);
      try { 
        Utility.methodSignatureReturnType("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      byte[] byteArray1 = Utility.decode("J%8[5bD@glBt", false);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Utility.isJavaIdentifierPart('Z');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)29;
      byteArray0[2] = (byte)73;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, (int) (byte) (-107), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.toHexString(byteArray0);
      String string0 = "dreturn";
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ConstantLong constantLong0 = new ConstantLong((byte) (-55));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-55), (int) (byte)16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Utility.searchOpcode("Jcu6GH ?Y0ZBO");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Jcu6GH ?Y0ZBO";
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, 34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)83;
      byteArray1[4] = (byte) (-92);
      byteArray1[5] = (byte)18;
      byteArray1[6] = (byte) (-110);
      byteArray1[7] = (byte) (-33);
      byteArray1[8] = (byte)84;
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.decode("astore\t\t%32", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      try { 
        Utility.methodSignatureReturnType("X=mJ,@Ltquz$f_Hsy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X=mJ,@Ltquz$f_Hsy'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.compactClassName("O3'+}%i,UI9m/UY.");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      Utility.typeOfSignature("F0D'-:{0c");
      try { 
        Utility.typeOfMethodSignature("F0D'-:{0c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F0D'-:{0c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "LsIS~ic+}}cuiFGG;V";
      stringArray0[1] = "LsIS~ic+}}cuiFGG;V";
      stringArray0[2] = "LsIS~ic+}}cuiFGG;V";
      stringArray0[3] = "LsIS~ic+}}cuiFGG;V";
      stringArray0[4] = "LsIS~ic+}}cuiFGG;V";
      stringArray0[5] = "LsIS~ic+}}cuiFGG;V";
      Utility.methodTypeToSignature("LsIS~ic+}}cuiFGG;V", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(LLsIS~ic+}}cuiFGG;V;LLsIS~ic+}}cuiFGG;V;LLsIS~ic+}}cuiFGG;V;LLsIS~ic+}}cuiFGG;V;LLsIS~ic+}}cuiFGG;V;LLsIS~ic+}}cuiFGG;V;)LLsIS~ic+}}cuiFGG;V;", "ifnonnull", "? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;LLsIS~ic+}}cuiFGG;V;LLsIS~ic+}}cuiFGG;V;LLsIS~ic+}}cuiFGG;V;LLsIS~ic+}}cuiFGG;V;LLsIS~ic+}}cuiFGG;V;)LLsIS~ic+}}cuiFGG;V;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":c,[Qo]}z0^D)LMr)oxh";
      Utility.methodTypeToSignature(":c,[Qo]}z0^D)LMr)oxh", stringArray0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("([L:c,;)[L:c,;", false);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = Utility.accessToString((-714), true);
      assertEquals("private protected final native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("Xj~<G<%yB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xj~<G<%yB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.compactClassName("ubl");
      try { 
        Utility.typeOfSignature("NMk_.13:M`<#,R;e?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NMk_.13:M`<#,R;e?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3386, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2423), 92, false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
      assertEquals("0:    nop\\n1:    nop\\n2:    nop\\n3:    nop\\n4:    nop\\n5:    nop\\n6:    nop\\n7:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Utility.compactClassName("ypC");
      try { 
        Utility.methodSignatureReturnType("ypC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ypC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Utility.accessToString((-674));
      try { 
        Utility.typeOfSignature("1]-!{&0[.m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1]-!{&0[.m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 909, (int) (byte)119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPool0.setConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)83, 32, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      Utility.decode("$bf$A$A", false);
      try { 
        Utility.methodSignatureReturnType("$bf$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$bf$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Utility.getSignature("dreturn");
      Utility.searchOpcode("java.lang.Long");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)41;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte)55;
      byteArray1[3] = (byte)55;
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "96Qd'2E04-k");
      byte[] byteArray0 = new byte[6];
      try { 
        Utility.typeOfSignature("96Qd'2E04-k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 96Qd'2E04-k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0MMY");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      String string0 = Utility.compactClassName("<w2NK8a", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("dreturn", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = "PrI){G`o";
      String string1 = "";
      Utility.clearBit((-4743), (-4743));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "n0hh-h3", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = Utility.fillup("@T8o&oT", (-1177), true, 'x');
      assertEquals("@T8o&oT", string0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = "$/>5<6n%\\";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-13);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$3d$9b$fb$c1$t$e6$f3", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-33);
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("($?a8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$?a8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String string0 = Utility.replace("h}E9/=ec!5EwI9GYK", "P<_\"0AZQO$", "h}E9/=ec!5EwI9GYK");
      assertEquals("h}E9/=ec!5EwI9GYK", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string1 = Utility.accessToString((int) (byte)86, true);
      assertEquals("private protected final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Utility.replace("zOhHW", "<", "<");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-120);
      byteArray1[1] = (byte) (-120);
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("l2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = "*'?ZIzM";
      try { 
        Utility.typeOfSignature("*'?ZIzM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '?ZIzM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 584, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) constantPool0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) constantPool0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) (byte)0;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray(objectArray0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String string0 = "QiW-0.HxNg<";
      try { 
        Utility.typeOfSignature("QiW-0.HxNg<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QiW-0.HxNg<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = Utility.replace("zOhHW", "<", "<");
      assertEquals("zOhHW", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("8d 8d 8d", string1);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Utility.getSignature("<illegal opcode>");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("77 70 1d c1", string0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "{.I;#F7;DAdP{G{O";
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      assertEquals("(Linvokespecial;Linvokespecial;L{/I;#F7;DAdP{G{O;)Lorg/apache/bcel/classfile/ConstantUtf8$1;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      boolean boolean1 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.getSignature("From\tTo\tHandler\tType\n");
      assertEquals("LFrom;", string1);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[10] = (byte) (-105);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   dcmpl\n11:   nop\n12:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Utility.signatureToString("L,;V");
      byte[] byteArray0 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Utility.signatureToString("Synthetic", true);
      String string0 = Utility.getSignature("V");
      assertEquals("LV;", string0);
      
      String string1 = Utility.compactClassName("Synthetic", true);
      assertEquals("Synthetic", string1);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(2);
      Utility.accessToString(2);
      Utility.searchOpcode("private");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 153, (int) (byte)95, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String string0 = Utility.format(584, 136, true, 'g');
      assertEquals("584ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string1 = Utility.getSignature("$b7.9{KA");
      assertEquals("L$b7/9{KA;", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)58;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("z$3a", string2);
      
      short short0 = Utility.searchOpcode("putfield");
      assertEquals((short)181, short0);
      
      String string3 = Utility.compactClassName("putfield", "", false);
      assertEquals("putfield", string3);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, (int) (byte)97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("Sv)3RnGjz");
      assertEquals("Sv)3RnGjz", string1);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte)108;
      byteArray1[3] = (byte) (-14);
      byteArray1[4] = (byte) (-14);
      byteArray1[5] = (byte)67;
      String string0 = Utility.codeToString(byteArray1, constantPool0, 1, 11, true);
      assertEquals("1:    monitorexit\n2:    idiv\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    fstore_0\n", string0);
      
      String string1 = Utility.convertString("1:    monitorexit\n2:    idiv\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    fstore_0\n");
      assertEquals("1:    monitorexit\\n2:    idiv\\n3:    <illegal opcode>\\n4:    <illegal opcode>\\n5:    fstore_0\\n", string1);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-64), 512, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":c,[Qo]}03D)LMr)ox~";
      stringArray0[1] = ":c,[Qo]}03D)LMr)ox~";
      stringArray0[2] = ":c,[Qo]}03D)LMr)ox~";
      stringArray0[3] = ":c,[Qo]}03D)LMr)ox~";
      stringArray0[4] = ":c,[Qo]}03D)LMr)ox~";
      stringArray0[5] = ":c,[Qo]}03D)LMr)ox~";
      stringArray0[6] = ":c,[Qo]}03D)LMr)ox~";
      Utility.methodTypeToSignature(":c,[Qo]}03D)LMr)ox~", stringArray0);
      String string0 = "CONSTANT_MethodType";
      Utility.methodSignatureReturnType("CONSTANT_MethodType");
      try { 
        Utility.methodSignatureReturnType(":c,[Qo]}03D)LMr)ox~", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ox~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[wxe", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [wxe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "long";
      String string0 = Utility.methodTypeToSignature("long", stringArray0);
      assertEquals("(J)J", string0);
      
      String string1 = Utility.methodSignatureToString("(J)J", "long", "long");
      assertEquals("long long long(long arg1)", string1);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.fillup("monitorenter", 80, true, 'T');
      assertEquals("monitorenterTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string0);
      
      String string1 = Utility.replace("monitorenterTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "8hVB)dG", "Wy(6Qt9_\" -t:M2@34");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("O3'+}%i,UI9m/UY.");
      assertEquals("O3\\'+}%i,UI9m/UY.", string2);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":c,[Qo]}03D)LMr)ox~";
      stringArray0[1] = ":c,[Qo]}03D)LMr)ox~";
      String string0 = Utility.methodTypeToSignature(":c,[Qo]}03D)LMr)ox~", stringArray0);
      assertEquals("([L:c,;[L:c,;)[L:c,;", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.methodSignatureReturnType("([L:c,;[L:c,;)[L:c,;");
      assertEquals(":c,[]", string1);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byte[] byteArray1 = Utility.decode("org.apache.bcel.classfile.ParameterAnnotations", false);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `00'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)73;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      String string0 = "]fJx=y";
      Utility.getSignature("]fJx=y");
      Utility.typeOfSignature("L]fJx=y;");
      Utility.accessToString((int) (byte)14);
      Utility.convertString("fload_3");
      try { 
        Utility.methodSignatureReturnType("]fJx=y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]fJx=y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("F");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.getSignature("YUM=d$lQv\"se:7J");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Utility.accessToString(187);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("public private static final synchronized transient", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String string0 = Utility.compactClassName("YUM=d$lQv\"se:7J");
      assertEquals("YUM=d$lQv\"se:7J", string0);
      
      String string1 = "EnclosingMethod";
      // Undeclared exception!
      try { 
        Utility.signatureToString("YUM=d$lQv\"se:7J", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YUM=d$lQv\"se:7J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)21;
      String string0 = Utility.codeToString(byteArray0, constantPool0, 7, (int) (byte) (-2), false);
      assertEquals("", string0);
      
      String string1 = Utility.convertString("");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Utility.replace(">M", ">M", ">M");
      String string0 = "? extends ";
      boolean boolean0 = true;
      Utility.isJavaIdentifierPart('T');
      try { 
        Utility.methodSignatureReturnType("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wide'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("$/>5<6n%", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)62, (byte)53, (byte)60, (byte)54, (byte)110, (byte)37}, byteArray1);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[1] = (byte)30;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$/>5<6n%");
      byteArray2[2] = (byte)51;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)60;
      ByteSequence byteSequence2 = new ByteSequence(byteArray3);
      ByteSequence byteSequence3 = new ByteSequence(byteArray3);
      Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      String string0 = Utility.accessToString((int) (byte)30);
      assertEquals("private protected static final", string0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AoP'Z'-";
      stringArray0[1] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[2] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[3] = ">\t";
      stringArray0[4] = "AoP'Z'-";
      stringArray0[5] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[6] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[7] = "AoP'Z'-";
      stringArray0[8] = ">\t";
      Utility.methodTypeToSignature(">\t", stringArray0);
      char char0 = '*';
      Utility.isJavaIdentifierPart('*');
      Utility.isSet(4077, 4077);
      // Undeclared exception!
      try { 
        Utility.signatureToString("AoP'Z'-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `AoP'Z'-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.convertString("-P$@H8`p=(DJB");
      assertEquals("-P$@H8`p=(DJB", string0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Utility.compactClassName("E~?q82");
      try { 
        Utility.typeOfSignature("0]]lIghbv!CYB?O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0]]lIghbv!CYB?O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-11);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte) (-11);
      byteArray1[2] = (byte) (-101);
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)127;
      byteArray1[5] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ifgt\t\t#-2661", string0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "rwD6mi{:@";
      objectArray0[1] = (Object) "rwD6mi{:@";
      objectArray0[2] = (Object) "rwD6mi{:@";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.ConstantUtf8$1";
      objectArray0[4] = (Object) "org.apache.bcel.classfile.ConstantUtf8$1";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("97", string0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)90;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)49;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("eXUW^ZL?zh@ipS", "0a 5c 22 2c a2 d0 00 31", "eXUW^ZL?zh@ipS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eXUW^ZL?zh@ipS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      String string0 = Utility.classOrInterface(1531);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature(">0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      stringArray0[4] = "short";
      stringArray0[5] = "short";
      Utility.methodTypeToSignature("short", stringArray0);
      Utility.isJavaIdentifierPart('4');
      Utility.isJavaIdentifierPart('~');
      Utility.isSet((byte)0, (-160));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.compactClassName("{java.lang.Object@418a6547, java.lang.Object@2eb5eaf5, java.lang.Object@51607dba, java.lang.Object@5aa41d8c, java.lang.Object@4896ebc2, java.lang.Object@49f55267}", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Utility.clearBit(207, 207);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1655, 512, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      String string0 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{<illegal type>, <illegal type>, <illegal type>, <illegal type>, Z, C, F, D, B, S, I, J, V, <illegal type>, <illegal type>, <illegal type>}", string0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "rwD6mi{:@";
      objectArray0[1] = (Object) "org.apache.bcel.classfile.ConstantUtf8$1";
      objectArray0[0] = (Object) "rwD6mi{:@";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.ConstantUtf8$1";
      objectArray0[4] = (Object) "org.apache.bcel.classfile.ConstantUtf8$1";
      objectArray0[5] = (Object) "rwD6mi{:@";
      Utility.printArray(objectArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      Utility.accessToString((int) (byte) (-53));
      Utility.compactClassName("Linvokespecial;V");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 240, (int) (byte) (-53));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)76;
      byteArray1[5] = (byte) (-22);
      byteArray1[6] = (byte)76;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.setBit(0, 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Utility.compactClassName("H)fX(OtQfvIiUN+W!$ ", true);
      try { 
        Utility.typeOfSignature("H)fX(OtQfvIiUN+W!$ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H)fX(OtQfvIiUN+W!$ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      Utility.replace("", "", "{java.lang.Object@463eba01, java.lang.Object@23810240, java.lang.Object@4aac3bb1, java.lang.Object@46e49633, java.lang.Object@75b9c25c, java.lang.Object@5e014da9}");
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      byte byte0 = (byte)92;
      Utility.decode("org.apache.bcel.classfile.ConstantUtf8$1", false);
      Utility.compactClassName("org.apache.bcel.classfile.ConstantUtf8$1");
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, true, false);
      String string0 = "E<)$";
      String string1 = "multianewarray";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.apache.bcel.classfile.ConstantUtf8$1", "org.apache.bcel.classfile.ConstantUtf8$1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.bcel.classfile.ConstantUtf8$1
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Utility.compactClassName("%VlgNneu1L^DQd/");
      try { 
        Utility.typeOfSignature("%VlgNneu1L^DQd.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %VlgNneu1L^DQd.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 4c e1 53 59 75 41 f0 30", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)83;
      objectArray0[1] = (Object) (byte)76;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)89;
      objectArray0[4] = (Object) (byte)65;
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{83, 76, null, 89, 65}", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$AL$e1SYuA$f00", string2);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[1] = "short";
      stringArray0[3] = "short";
      stringArray0[1] = "short";
      Utility.getSignature("short");
      // Undeclared exception!
      try { 
        Utility.compactClassName(stringArray0[2], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      String string0 = "<";
      // Undeclared exception!
      try { 
        Utility.signatureToString("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      try { 
        Utility.methodSignatureReturnType("Dont call getValueLong() on a non LONG ElementValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` on a non LONG ElementValue'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      try { 
        Utility.typeOfSignature("c0qwKCH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c0qwKCH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Utility.isSet((-3633), (-3633));
      Utility.compactClassName("ireturn");
      try { 
        Utility.typeOfSignature("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("2~Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2~Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      String string0 = Utility.getSignature("org.a|ach`.bcel.classfile.ConstantUtf8$1");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      try { 
        Utility.methodSignatureReturnType(",mL;8=)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.signatureToString("L;");
      assertEquals("", string1);
      
      String string2 = Utility.convertString(", high = ");
      assertEquals(", high = ", string2);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Utility.methodTypeToSignature("o9", (String[]) null);
      Utility.methodSignatureToString("()Lo9;", "o9", "()Lo9;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte) (-82), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("//c/z:1?J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: //c/z:1?J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Utility.getSignature("<illegal opcode>");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)112;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)84;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("9$e8$QcpuT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9$e8$QcpuT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = "4&(";
      try { 
        Utility.typeOfSignature("4&(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4&(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Utility.getSignature("org.a|ach`.bcel.classfile.ConstantUtf8$1");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      String string0 = Utility.getSignature("From\tTo\tHandler\tType\n");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      Utility.getSignature("553H7X");
      try { 
        Utility.typeOfSignature("553H7X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 553H7X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L,;V");
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = Utility.getSignature("byte");
      assertEquals("B", string0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SRwM*;hadyZs&e`(Q.");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String string0 = Utility.accessToString(483, false);
      assertEquals("public private synchronized volatile transient native", string0);
      
      String string1 = Utility.accessToString((-1400));
      assertEquals("static transient interface strictfp synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("ab 55 00 3c d4 5d 00 00 00", string2);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.signatureToString("V", false);
      Utility.accessToString((-2021));
      Utility.typeOfSignature("V");
      Utility.getSignature("void");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      String string0 = Utility.format(686, 686, true, 'I');
      assertEquals("686IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string0);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z*~[");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString((int) (byte) (-80));
      assertEquals("final synchronized transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = "#[-7(=v$.|.|i]@<:";
      try { 
        Utility.typeOfSignature("#[-7(=v$.|.|i]@<:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #[-7(=v$.|.|i]@<:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("\t\t%", stringArray0);
      Utility.accessToString((int) (byte)8);
      Utility.compactClassName("\t\t%");
      Utility.clearBit((byte)0, (byte)28);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("]", "static", "\t\t%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("O3'+}%i,UI9m/UY.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O3'+}%i,UI9m/UY.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      Utility.getSignature("k2C6XJw#^u^h$s");
      try { 
        Utility.decode("$0E", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("60", string0);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.replace("[", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 734, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[5] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.decode("", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte) (-89));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    goto\t\t#5\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n", string0);
      
      String string1 = Utility.fillup("", (-986), false, '1');
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      int int0 = 1495;
      Utility.classOrInterface(1495);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "ubl";
      Utility.methodTypeToSignature("ubl", stringArray0);
      Utility.accessToString((-2594));
      Utility.convertString("8\"9~");
      Utility.methodTypeToSignature("8\"9~", stringArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readUnsignedByte();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-124);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M=d$lQv\"se");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M=d$lQv\"se'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode("%CC]dT$En/,g", false);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Utility.typeOfSignature("Invalid type: ");
      Utility.searchOpcode("Invalid type: ");
      Utility.accessToString((int) (short) (-1));
      Utility.compactClassName("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("?0B}(=", "?0B}(=", "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?0B}(=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "U(@W[`Ft33EOj |\\<D";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U(@W[`Ft33EOj |<D", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U(@W[`Ft33EOj |<D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      try { 
        Utility.methodSignatureReturnType("The array of suffixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      String string0 = "y0@T+[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("y0@T+[", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("WIi$p3?<&A", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2545), 144, false);
      assertEquals("0:    pop\n1:    dstore_2\n2:    lmul\n3:    fload_1\n4:    baload\n5:    lstore_0\n6:    istore_1\n7:    dload_0\n8:    lstore_2\n", string0);
      
      String string1 = Utility.convertString("0:    pop\n1:    dstore_2\n2:    lmul\n3:    fload_1\n4:    baload\n5:    lstore_0\n6:    istore_1\n7:    dload_0\n8:    lstore_2\n");
      assertEquals("0:    pop\\n1:    dstore_2\\n2:    lmul\\n3:    fload_1\\n4:    baload\\n5:    lstore_0\\n6:    istore_1\\n7:    dload_0\\n8:    lstore_2\\n", string1);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Utility.replace(">M", ">M", ">M");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, (int) (byte) (-75), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "<illegal opcode>";
      // Undeclared exception!
      try { 
        Utility.signatureToString("EnclosingMethod", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EnclosingMethod'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Utility.clearBit((-4743), (-4743));
      Utility.isJavaIdentifierPart('9');
      try { 
        Utility.methodSignatureReturnType("Dont call getValueLong() on a non LONG ElementValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` on a non LONG ElementValue'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FBa\"9TJ>*M");
      assertEquals("float", string0);
      
      String string1 = Utility.compactClassName("FBa\"9TJ>*M", true);
      assertEquals("FBa\"9TJ>*M", string1);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Utility.format(77, (-1615606891), true, 'g');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.getSignature("77");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)122;
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("\n");
      Utility.compactClassName("\n", "... (truncated)", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", ", "tableswitch", "Mdo_iF&Bvmd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      try { 
        Utility.decode("q7VJ$7ayL)4JV67", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      String string0 = "@S2Q<&'4gr6%uC?y";
      try { 
        Utility.typeOfSignature("@S2Q<&'4gr6%uC?y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @S2Q<&'4gr6%uC?y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("LAoP'Z'-;V");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "LAoP'Z'-;V";
      objectArray0[1] = (Object) "LAoP'Z'-;V";
      objectArray0[2] = (Object) "LAoP'Z'-;V";
      objectArray0[3] = (Object) "LAoP'Z'-;V";
      objectArray0[4] = (Object) "LAoP'Z'-;V";
      objectArray0[5] = (Object) "LAoP'Z'-;V";
      Utility.printArray(objectArray0, true, true);
      int int0 = (-1340);
      Utility.accessToString((-1340), true);
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)21;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int1 = 2611;
      try { 
        constantPool0.getConstantString(16, (byte) (-122));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      String string0 = "LY{{.#r;";
      try { 
        Utility.typeOfMethodSignature("LY{{.#r;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LY{{.#r;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("jsr\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte)108;
      byteArray1[3] = (byte) (-14);
      byteArray1[4] = (byte) (-14);
      byteArray1[5] = (byte)67;
      Utility.codeToString(byteArray1, constantPool0, 1, 11, true);
      String string0 = Utility.signatureToString("Byte code error: ");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.invokeinterface", "java.lang.invokeinterface", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)44;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[1] = "rwD6mi{:@";
      stringArray0[2] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[3] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[4] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[5] = ">\t";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[6] = "AoP'Z'-";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      char char0 = 'd';
      Utility.isJavaIdentifierPart('d');
      Utility.isSet((byte)10, 4077);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString(">\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Utility.compactClassName("XP>`R");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)63;
      byte byte0 = (byte)78;
      byteArray0[5] = (byte)78;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L$zG$I$3fN", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L$zG$I$3fN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      String string0 = Utility.signatureToString("V<69i<NlEZhuoV@Tf ");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      Object object1 = new Object();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " QFt1x;D9@<wtQFW";
      stringArray0[1] = " QFt1x;D9@<wtQFW";
      stringArray0[2] = " QFt1x;D9@<wtQFW";
      stringArray0[3] = " QFt1x;D9@<wtQFW";
      String string0 = Utility.methodTypeToSignature(" QFt1x;D9@<wtQFW", stringArray0);
      assertEquals("(LQFt1x;D9@<wtQFW;LQFt1x;D9@<wtQFW;LQFt1x;D9@<wtQFW;LQFt1x;D9@<wtQFW;)LQFt1x;D9@<wtQFW;", string0);
      
      String string1 = Utility.fillup("", (byte)83, false, ']');
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string1);
      
      String string2 = Utility.compactClassName(" QFt1x;D9@<wtQFW", true);
      assertEquals(" QFt1x;D9@<wtQFW", string2);
      
      short short0 = Utility.searchOpcode(" QFt1x;D9@<wtQFW");
      assertEquals((short) (-1), short0);
      
      String string3 = Utility.convertString("*0vPBs-y4&~(XB5_y9");
      assertEquals("*0vPBs-y4&~(XB5_y9", string3);
      
      int int0 = Utility.clearBit(9, 818);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      Utility.setBit((-2533), (-2533));
      Utility.clearBit(525, (-2533));
      Utility.setBit(0, 91);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "r;&iUkS0^2;\"}KB";
      objectArray0[4] = (Object) "r;&iUkS0^2;\"}KB";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("volatile", stringArray0);
      try { 
        Utility.methodSignatureReturnType("5q58!=JP!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5q58!=JP!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The array of suffixes must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      String string0 = "PrI){G`o";
      String string1 = "";
      int int0 = (-4743);
      Utility.clearBit((-4743), (-4743));
      Utility.isJavaIdentifierPart('i');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "n0hh-h3", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)90;
      try { 
        Utility.methodSignatureReturnType("QjB*f\"cuN|l O4JW;T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QjB*f\"cuN|l O4JW;T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byte[] byteArray1 = new byte[16];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte) (-92);
      byteArray1[3] = (byte) (-92);
      byteArray1[4] = (byte) (-92);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)108;
      byteArray1[8] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[ NXD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` NXD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(11);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "acc_super");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // acc_super
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_0", string0);
      
      byte[] byteArray1 = Utility.decode("dload_0", false);
      assertArrayEquals(new byte[] {(byte)100, (byte)108, (byte)111, (byte)97, (byte)100, (byte)95, (byte)48}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "{.I;#F7;DAdP{G{O";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      Utility.isJavaIdentifierPart('1');
      Utility.isSet((-3633), (-3633));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)1, (-3633));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2808, 1534);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
      
      byte[] byteArray1 = Utility.decode("Invalid method signature: ", false);
      assertEquals(26, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String string0 = Utility.convertString("1F@tt5%X#+tjiGcJW'");
      assertEquals("1F@tt5%X#+tjiGcJW\\'", string0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)119;
      byteArray0[2] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1685, (int) (byte)112, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore\t\t%55", string0);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      Utility.replace(">M", ">M", ">M");
      Utility.replace(">M", "O3'+}%i,UI9m/UY.", ">M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-75);
      byteArray0[8] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)40, 96, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      Utility.format(136, 48, false, 'C');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 92, 92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String string0 = "zOhHW";
      String string1 = "O3'+}%i,UI9m/UY.";
      Utility.replace("{.I;#F7;DAdP{G{O", "O3'+}%i,UI9m/UY.", "<");
      // Undeclared exception!
      try { 
        Utility.signatureToString("K+4du3bm@F_:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K+4du3bm@F_:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String string0 = Utility.convertString("P<_\"0AZQO$");
      assertEquals("P<_\\\"0AZQO$", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h}E9/=ec!5EwI9GYK");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fadd", string1);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("true", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      try { 
        Utility.typeOfSignature("WK*$QRq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WK*$QRq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)2, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      Utility.decode("$/>5<6n%", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "$/>5<6n%";
      objectArray0[1] = (Object) "$/>5<6n%";
      objectArray0[2] = (Object) "$/>5<6n%";
      objectArray0[3] = (Object) "$/>5<6n%";
      Utility.printArray(objectArray0, false);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-210));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("int");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("$/>5<6n%");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantClass constantClass0 = new ConstantClass((-210));
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-210), (-210), localVariableArray0, constantPool1);
      try { 
        Utility.methodSignatureToString("$/>5<6n%", "$/>5<6n%, $/>5<6n%, $/>5<6n%, $/>5<6n%", "$/>5<6n%", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $/>5<6n%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("1]!~{&*[.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      String string0 = Utility.accessToString(3774, true);
      assertEquals("private protected static final transient abstract strictfp", string0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E~?q82");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E~?q82'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WVzHa;}H");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      String string0 = Utility.replace(">M", ">M", ">M");
      assertEquals(">M", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("lneg", string1);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("arraylength", (String[]) null);
      boolean boolean0 = true;
      Utility.compactClassName("()Larraylength;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("g'MIc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `g'MIc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LocalVariableTypeTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object0;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "Kx7c`T$5Dr}msQ9k";
      try { 
        Utility.typeOfSignature("Kx7c`T$5Dr}msQ9k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kx7c`T$5Dr}msQ9k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      Utility.getSignature("]fJx=y");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-84);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 256;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 64, 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 44032. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      String string0 = "R+;H#7k25{tT9IF~\\T";
      try { 
        Utility.typeOfSignature("R+;H#7k25{tT9IF~T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R+;H#7k25{tT9IF~T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantUtf8$1";
      stringArray0[1] = "rwD6mi{:@";
      stringArray0[2] = "AoP'Z'-";
      Utility.methodTypeToSignature("=K7", stringArray0);
      Utility.isJavaIdentifierPart('5');
      Utility.isSet((byte)92, 1993);
      Utility.replace("rwD6mi{:@", "AoP'Z'-", "sn2Mur!w8mLS");
      Utility.signatureToString("ZW\"t5", false);
      try { 
        Utility.methodSignatureReturnType("rwD6mi{:@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `rwD6mi{:@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("AU2|3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AU2|3&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      Utility.replace("O3'+}%i,UI9m/UY.", "Nq5{&wvA}", "Nq5{&wvA}");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nq5{&wvA}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nq5{&wvA}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      Utility.printArray((Object[]) null, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 512, true);
      assertEquals("0:    goto\t\t#7168\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)119, 187, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("boolean", "arraylength", "d2i", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1636, (int) (byte) (-13));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      Utility.isJavaIdentifierPart('7');
      Utility.isSet(2712, (-3974));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(58);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Utility.convertString("y7p4VP.bP4=V\"%PsZ");
      try { 
        Utility.methodSignatureArgumentTypes("dreturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("YUM=d$lQv\"{&e:7b", "YUM=d$lQv\"{&e:7b", "YUM=d$lQv\"{&e:7b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YUM=d$lQv\"{&e:7b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      Utility.classOrInterface(1495);
      boolean boolean0 = true;
      Utility.fillup("class", (-911), true, 't');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = ", npairs = ";
      stringArray0[2] = "class";
      stringArray0[3] = "sAZCD%C-<\"[H}k3\",l\"";
      stringArray0[4] = "X^9";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("class", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[H}k3\",l\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SRwM*;hadyZs&e`(Q.");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("ifne\t\t#5761");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifne\t\t#5761
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q@/lBCQK|jP$iJdzjr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q@/lBCQK|jP$iJdzjr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      ConstantPool constantPool0 = null;
      int int0 = 185;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 185, 137);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(44, 44);
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean1 = true;
      Utility.printArray((Object[]) stringArray0, false, true);
      String string0 = "E<)$";
      String string1 = "multianewarray";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("38J,^}wWTOO5;x", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Long");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifne\t\t#9", string0);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      Utility.getSignature("dreturn");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("dload_1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "invokespecial";
      stringArray0[1] = "invokespecial";
      stringArray0[2] = "{.I;#F7;DAdP{G{O";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantUtf8$1", stringArray0);
      Utility.isJavaIdentifierPart('1');
      Utility.isJavaIdentifierPart('2');
      int int0 = 89;
      int int1 = 1504;
      Utility.isSet(1504, 365);
      Utility.replace("invokespecial", "{.I;#F7;DAdP{G{O", "invokespecial");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2962), (-2962));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = Utility.typeOfSignature("Zj7JX:w`8{");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte) (-55));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, (int) (byte) (-55), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "invokestatic");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      Utility.isSet(1923, 0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(0, 65);
      constantArray0[1] = (Constant) constantMethodHandle2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("<Any exception>(0)");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)29;
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_0", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("c1 3b 1d 00", string1);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NMk_.13:M`<#,R;e?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NMk_.13:M`<#,R;e?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-63);
      int int0 = (-2638);
      // Undeclared exception!
      try { 
        Utility.signatureToString("P<_\".AZQOt<n-", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P<_\".AZQOt<n-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      String string0 = "WK*$QRq";
      try { 
        Utility.typeOfSignature("WK*$QRq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WK*$QRq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      String string0 = "YUM=d$lQv\"se:7J";
      Utility.compactClassName("YUM=d$lQv\"se:7J");
      try { 
        Utility.typeOfSignature("YUM=d$lQv\"se:7J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YUM=d$lQv\"se:7J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "ubl";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lmyyk2%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lmyyk2%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)49;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.getSignature("eXUW^ZL?zh@ipS");
      String string0 = "VQSSat4*;qQXp";
      String string1 = "NhUwCUp&%XKMC+b%>9";
      boolean boolean0 = false;
      int int0 = 0;
      int int1 = 255;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 34
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      Utility.compactClassName("Ljava/lang/Cloneable;V");
      try { 
        Utility.typeOfSignature("8dqujipp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8dqujipp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      Utility.classOrInterface(1497);
      try { 
        Utility.typeOfSignature("#eFp,@c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #eFp,@c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Pd*aitpL~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pd*aitpL~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      String string0 = Utility.convertString("YUM=d$lQv\"{&e:7b");
      assertEquals("YUM=d$lQv\\\"{&e:7b", string0);
      
      String string1 = Utility.compactClassName("invokeinterface");
      assertEquals("invokeinterface", string1);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("wide", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("()Lwide;");
      MockPrintStream mockPrintStream0 = new MockPrintStream("wide");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "wide");
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0, true);
      Utility.printArray((PrintStream) mockPrintStream2, (Object[]) stringArray0);
      assertNotSame(mockPrintStream1, mockPrintStream2);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7D9v##}G,v9oeo3=v");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), 62, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      String string0 = "6QY:XKDETS,";
      try { 
        Utility.typeOfSignature("6QY:XKDETS,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6QY:XKDETS,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      Utility.getSignature(")");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String string0 = "";
      boolean boolean0 = true;
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "", (-3032), (-3032));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.printArray((Object[]) constantArray0);
      Utility.printArray((Object[]) constantArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      int int0 = 584;
      int int1 = 136;
      boolean boolean0 = true;
      Utility.accessToString(3122, true);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Ileally estedbrackes:");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload\t\t%130", string0);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      Utility.compactClassName("PdDiP|[*Fw{QH%", true);
      Utility.fillup("XUT4iGaP{}#AJ1", 5823, true, 'O');
      // Undeclared exception!
      Utility.fillup("-a!x&}:", 5823, true, '&');
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      String string0 = Utility.fillup("Warning: Padding byte != 0 in ", (-1392), false, '|');
      assertEquals("Warning: Padding byte != 0 in ", string0);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readChar();
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-74);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      Utility.replace(">M", ">M", ">M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.decode("dup2_x2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      Utility.getSignature("]fJx=y");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-73);
      byte byte0 = (byte)64;
      byteArray0[2] = (byte)64;
      byte byte1 = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-60);
      byte byte2 = (byte)72;
      byteArray0[5] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string0 = "org.apache.bcel.util.ClassPath$PathEntry";
      String string1 = null;
      int int0 = 184;
      int int1 = 328;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      CodeException codeException0 = null;
      try {
        codeException0 = new CodeException(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      Utility.compactClassName(";A~^Tyz_<H=Dd@'f");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("istore\t\t%106", string0);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IaFjFD_oVNSo3";
      stringArray0[1] = "IaFjFD_oVNSo3";
      stringArray0[2] = "IaFjFD_oVNSo3";
      stringArray0[3] = "ubl";
      String string0 = Utility.methodTypeToSignature("ubl", stringArray0);
      assertEquals("(LIaFjFD_oVNSo3;LIaFjFD_oVNSo3;LIaFjFD_oVNSo3;Lubl;)Lubl;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string1);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      Utility.replace("zOhHW", "<", "<");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('v');
      Utility.accessToString(2684);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "UQ1:NJ/";
      stringArray0[1] = "protected static final synchronized volatile interface strictfp";
      stringArray0[2] = "UQ1:NJ/";
      stringArray0[3] = "UQ1:NJ/";
      stringArray0[4] = "protected static final synchronized volatile interface strictfp";
      stringArray0[5] = "UQ1:NJ/";
      Utility.methodTypeToSignature("UQ1:NJ/", stringArray0);
      Utility.convertString("UQ1:NJ/");
      try { 
        Utility.typeOfSignature("UQ1:NJ/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UQ1:NJ/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y`bQ. ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y`bQ. 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      Utility.accessToString(1488);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1]!~{&*[.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1]!~{&*[.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)110;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("0e 10 3d 70 6e", string0);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      try { 
        Utility.methodTypeToSignature("+PJSg2DGDG4cRsy<", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
