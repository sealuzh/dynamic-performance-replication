/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:50:03 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.isIdentifierStartChar('>');
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.isIdentifierChar('>');
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken((Token) null);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      xPathLexer0.setXPath("");
      xPathLexer0.setXPath("");
      xPathLexer0.setXPath("!\"JK6gFJe8{<NeC@");
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.star();
      xPathLexer0.at();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.consume((-531));
      xPathLexer0.setPreviousToken((Token) null);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.plus();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.setXPath("y2:+xhIw6O*x_#ZN");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(4, token0.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.setXPath("E d^,z");
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("E", token6.getTokenText());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals(" ", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.comma();
      assertEquals("d", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
      
      xPathLexer0.div();
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertNull(token10);
      
      Token token11 = xPathLexer0.identifier();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer0.whitespace();
      assertEquals("", token12.getTokenText());
      assertEquals((-2), token12.getTokenType());
      
      Token token13 = xPathLexer0.dots();
      assertEquals(",", token13.getTokenText());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.slashes();
      xPathLexer0.setXPath("X");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("zC%dZ?654{0LB7");
      xPathLexer0.setXPath("zC%dZ?654{0LB7");
      xPathLexer0.identifier();
      xPathLexer0.isIdentifierStartChar('Z');
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.currentPosition();
      xPathLexer0.consume(11);
      xPathLexer0.plus();
      xPathLexer0.consume();
      xPathLexer0.consume((-2467));
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('w');
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer0.colon();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.currentPosition();
      xPathLexer0.setXPath("");
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.consume();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer0.setXPath("  #B8l]Yz.NRv");
      Token token11 = xPathLexer0.literal();
      assertNotNull(token11);
      assertEquals("", token11.getTokenText());
      assertEquals(27, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer0.dots();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.isIdentifierChar('-');
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      
      int int1 = xPathLexer0.currentPosition();
      assertEquals(19, int1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.setXPath("E d^,z");
      XPathLexer xPathLexer1 = new XPathLexer("CPycl8Z");
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("C", token7.getTokenText());
      
      Token token8 = xPathLexer1.minus();
      assertEquals("P", token8.getTokenText());
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer1.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.comma();
      assertEquals("E", token10.getTokenText());
      assertEquals(32, token10.getTokenType());
      
      xPathLexer0.div();
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertNull(token11);
      
      Token token12 = xPathLexer1.identifier();
      assertEquals("ycl8Z", token12.getTokenText());
      
      Token token13 = xPathLexer1.whitespace();
      assertEquals((-2), token13.getTokenType());
      
      Token token14 = xPathLexer0.dots();
      assertEquals(" ", token14.getTokenText());
      assertEquals(13, token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.or();
      xPathLexer0.and();
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer2.setXPath("b;*qZ");
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer2.minus();
      assertEquals("b", token8.getTokenText());
      
      Token token9 = xPathLexer1.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer2.div();
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertNull(token11);
      
      Token token12 = xPathLexer2.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.whitespace();
      assertEquals((-2), token13.getTokenType());
      
      Token token14 = xPathLexer0.dots();
      assertEquals(13, token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.leftParen();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("7j+s");
      Token token7 = xPathLexer1.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("7", token7.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.leftParen();
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("j", token8.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals(1, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("a$HMX9");
      xPathLexer1.dots();
      xPathLexer1.slashes();
      xPathLexer1.hasMoreChars();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.dots();
      xPathLexer2.leftParen();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer3 = new XPathLexer("a$HMX9");
      xPathLexer3.dots();
      xPathLexer3.rightBracket();
      xPathLexer1.rightParen();
      xPathLexer2.dollar();
      xPathLexer1.identifierOrOperatorName();
      Token token0 = xPathLexer1.star();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer3.at();
      xPathLexer0.or();
      xPathLexer3.and();
      xPathLexer3.slashes();
      XPathLexer xPathLexer4 = new XPathLexer("E d^,z");
      xPathLexer4.plus();
      xPathLexer2.not();
      xPathLexer0.setXPath("a$HMX9");
      Token token1 = xPathLexer4.rightParen();
      xPathLexer3.minus();
      xPathLexer2.number();
      xPathLexer3.relationalOperator();
      xPathLexer4.comma();
      xPathLexer0.div();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer4.identifier();
      xPathLexer0.whitespace();
      Token token2 = xPathLexer2.dots();
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      xPathLexer0.whitespace();
      xPathLexer0.plus();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.setXPath(") (");
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("^*q0dM'Pn%-");
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      xPathLexer1.nextToken();
      xPathLexer1.at();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      Token token0 = xPathLexer0.star();
      assertEquals("_", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("f", token2.getTokenText());
      
      xPathLexer0.mod();
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("5", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("d`!");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("d", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("d`!");
      Token token1 = xPathLexer2.literal();
      assertNull(token1);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftParen();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.consume();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'`=");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("'", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("`", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("=", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.plus();
      assertEquals("6", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("z]", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("`", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("n", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      xPathLexer1.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer3 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      Token token6 = xPathLexer3.number();
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.endPosition();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      assertEquals("z6`%z]`n>fhh}V3iTy", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      Token token0 = xPathLexer0.star();
      assertEquals("_", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("f", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("S", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals("5", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("X", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(6, int0);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierStartChar('r');
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("z6", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.star();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("%", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("z", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("]", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("`", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!DbS#&/mXes,'vqS#BA_");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d`!");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("d", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(23, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.endPosition();
      xPathLexer1.consume();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      Token token0 = xPathLexer0.star();
      assertEquals("_", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(31, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.leftParen();
      boolean boolean0 = xPathLexer0.isIdentifierChar('[');
      assertFalse(boolean0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.mod();
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d`!");
      xPathLexer0.div();
      xPathLexer0.div();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("d", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dd7->^:<^");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("_", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("fS5X", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("_.fS5X");
      xPathLexer2.endPosition();
      xPathLexer0.consume();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`>fhh}V)(w3iTy");
      Token token0 = xPathLexer0.star();
      assertEquals("z", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("%z]`>fhh}V)(w3iTy", token3.getTokenText());
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("%", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      Token token0 = xPathLexer0.star();
      assertEquals("_", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(13, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      xPathLexer0.endPosition();
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
      
      xPathLexer0.consume();
      char char0 = xPathLexer0.LA(6);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.literal();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.plus();
      token0.toString();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierStartChar('<');
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.hasMoreChars();
      xPathLexer0.equals();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.setXPath("?,7~");
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.star();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rS_{tL`^uO");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.doubleColon();
      xPathLexer1.consume();
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d`!");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("d", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      Token token1 = xPathLexer0.dots();
      assertEquals("`", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JWLD*]<ueT");
      Token token0 = xPathLexer0.star();
      assertEquals("J", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("WLD", token1.getTokenText());
      
      xPathLexer0.endPosition();
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
      
      xPathLexer0.consume();
      char char0 = xPathLexer0.LA(10);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kA\"ujQdz?@u=H<AE%.");
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.getPreviousToken();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("6");
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.and();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U~F+`!");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("U", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("F", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x(Oez?q i.E");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("x(", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.star();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("z", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("?q i.E", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token12 = xPathLexer1.identifier();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer1.whitespace();
      assertEquals("", token13.getTokenText());
      
      Token token14 = xPathLexer1.at();
      assertEquals("(", token14.getTokenText());
      assertEquals(16, token14.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('J');
      assertTrue(boolean0);
      
      Token token15 = xPathLexer0.whitespace();
      assertEquals((-2), token15.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.setXPath("_.fS5X");
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("_.fS5X", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.setXPath("_.fS5X");
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")@{5 y7V0DkaRrj*");
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.currentPosition();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      assertEquals(")@{5 y7V0DkaRrj*", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b~cNhR");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.slashes();
      assertEquals("b", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.star();
      assertEquals("c", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("N", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("hR", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")@{5 y70DkrRrj*");
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.or();
      xPathLexer0.equals();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      String string0 = null;
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x(Oez?q i.E");
      Token token0 = xPathLexer0.star();
      assertEquals("x", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("ez", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.star();
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      char char0 = xPathLexer0.LA(2005);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Pk5Q{`cLw");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("P", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("5", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("Q", token3.getTokenText());
      
      xPathLexer0.setXPath("Pk5Q{`cLw");
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("P", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")@{5 y7V0DkrRrj*");
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("{", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("5", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.number();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.plus();
      assertEquals("y", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("7", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("x(Oez?q i.E");
      xPathLexer0.notEquals();
      xPathLexer0.hasMoreChars();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("a$HMX9");
      xPathLexer1.dots();
      xPathLexer1.slashes();
      xPathLexer1.hasMoreChars();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.dots();
      xPathLexer2.leftParen();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer3 = new XPathLexer("a$HMX9");
      Token token0 = xPathLexer3.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("a", token0.getTokenText());
      
      Token token1 = xPathLexer3.rightBracket();
      assertEquals("$", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      xPathLexer1.rightParen();
      Token token2 = xPathLexer2.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertEquals("MX9", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      xPathLexer1.setPreviousToken(token4);
      Token token5 = xPathLexer3.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("H", token5.getTokenText());
      
      xPathLexer0.or();
      xPathLexer3.and();
      Token token6 = xPathLexer3.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("E d^,z");
      Token token7 = xPathLexer4.plus();
      assertEquals("E", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer0.setXPath("a$HMX9");
      Token token9 = xPathLexer4.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals(" ", token9.getTokenText());
      
      Token token10 = xPathLexer3.minus();
      assertEquals(6, token10.getTokenType());
      assertEquals("X", token10.getTokenText());
      
      xPathLexer2.number();
      xPathLexer3.relationalOperator();
      Token token11 = xPathLexer4.comma();
      assertEquals(32, token11.getTokenType());
      
      xPathLexer0.div();
      Token token12 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      assertNotNull(token12);
      
      xPathLexer4.identifier();
      Token token13 = xPathLexer3.nextToken();
      assertEquals(30, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kA\"ujQdz?@u=H<AE%.");
      xPathLexer0.dollar();
      xPathLexer0.getPreviousToken();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("6");
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("6", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")@{5 y7V0DkrRrj*");
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals("{", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("y7V0DkrRrj", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("aS0O?y63{Oa@\"\"|O+");
      xPathLexer1.and();
      xPathLexer0.literal();
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("a", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      boolean boolean0 = xPathLexer0.isIdentifierChar('$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b~cNhR");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.dollar();
      String string0 = token0.toString();
      assertEquals("[ (26) (b)", string0);
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("b~cNhR");
      xPathLexer0.or();
      Token token2 = xPathLexer0.equals();
      assertEquals("~", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("N", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer2.setXPath("NIm!Y/mM)kLe");
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("h", token6.getTokenText());
      
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("N", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      Token token10 = xPathLexer2.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("I", token10.getTokenText());
      
      Token token11 = xPathLexer1.whitespace();
      assertEquals((-2), token11.getTokenType());
      
      Token token12 = xPathLexer1.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.identifier();
      assertEquals(15, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
      
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("z", token2.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer("2bz,NTr}j<");
      Token token3 = xPathLexer1.rightBracket();
      assertEquals("2", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals("bz", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      char char0 = xPathLexer1.LA(2572);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N0[qNjG{bziu U");
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.isIdentifierStartChar('J');
      String string0 = ";7\"9[f/\\uym'U}/1oYk";
      XPathLexer xPathLexer3 = new XPathLexer(string0);
      xPathLexer3.whitespace();
      xPathLexer3.endPosition();
      Token token0 = xPathLexer3.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kA\"ujQdz?@u=H<AE%.");
      xPathLexer0.dollar();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("u", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("jQdz", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.setXPath("6");
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.and();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("a$HMX9");
      Token token0 = xPathLexer1.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("a", token0.getTokenText());
      
      Token token1 = xPathLexer1.slashes();
      assertEquals("$", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("HMX9", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer2.endPosition();
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      
      char char0 = xPathLexer2.LA(3327);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`>fhh}V)(w3iTy");
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      xPathLexer2.and();
      xPathLexer2.slashes();
      XPathLexer xPathLexer3 = new XPathLexer("H1tS*|#)R0");
      xPathLexer2.plus();
      xPathLexer3.not();
      xPathLexer1.setXPath(")");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.minus();
      xPathLexer1.number();
      xPathLexer2.relationalOperator();
      xPathLexer5.comma();
      xPathLexer3.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer4.identifier();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer4.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kA\"ujQdz?@u=H<AE%.");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("kA", token1.getTokenText());
      
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.star();
      assertEquals("\"", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
      
      xPathLexer1.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.consume();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierChar('T');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("_", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(13, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer3 = new XPathLexer("8IKzkNTCzh /d ");
      Token token2 = xPathLexer3.number();
      assertEquals("8", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_.fS5X");
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("_.fS5X");
      Token token0 = xPathLexer1.dots();
      xPathLexer1.rightBracket();
      xPathLexer1.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.at();
      xPathLexer1.or();
      xPathLexer0.and();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("_.fS5X");
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      xPathLexer0.setXPath("NRID,M5L#f_~d)]:hW");
      xPathLexer3.rightParen();
      xPathLexer2.minus();
      xPathLexer2.number();
      xPathLexer0.relationalOperator();
      xPathLexer2.comma();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer3.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      assertFalse(xPathLexer5.equals((Object)xPathLexer3));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("a$HMX9");
      xPathLexer1.dots();
      xPathLexer1.slashes();
      xPathLexer1.hasMoreChars();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.dots();
      xPathLexer2.leftParen();
      xPathLexer2.nextToken();
      xPathLexer0.at();
      xPathLexer0.setXPath("a$HMX9");
      xPathLexer1.leftBracket();
      xPathLexer0.plus();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kA\"ujQdz?@u=H<AE%.");
      Token token0 = xPathLexer0.pipe();
      assertEquals("k", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("", token2.getTokenText());
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("");
      int int0 = xPathLexer2.endPosition();
      assertEquals(0, int0);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.consume();
      Token token3 = xPathLexer3.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")@{5 y7V0DkrRrj*");
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer0.nextToken();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.isIdentifierStartChar('s');
      XPathLexer xPathLexer3 = new XPathLexer(")");
      xPathLexer1.whitespace();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N0[qNjG{bziu U");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("N0", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.leftParen();
      Token token2 = xPathLexer0.equals();
      assertEquals("[", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("qNjG", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer1.rightParen();
      xPathLexer1.getPreviousToken();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("{bziu U", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("aS0O?y63{Oa@\"\"|O+");
      xPathLexer2.and();
      xPathLexer1.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.dots();
      assertEquals(13, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'`=");
      XPathLexer xPathLexer1 = new XPathLexer("aS0O?y63{Oa@\"\"|O+");
      xPathLexer1.operatorName();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.hasMoreChars();
      xPathLexer0.pipe();
      xPathLexer1.identifier();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N0[qNjG{bziu U");
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("N0[qNjG{bziu U");
      xPathLexer1.leftBracket();
      xPathLexer1.nextToken();
      xPathLexer1.colon();
      xPathLexer0.equals();
      xPathLexer1.identifier();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Pk5Q{`cLw");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.dollar();
      assertEquals("5", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Q", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("{", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("k", token0.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals("`", token4.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("Pk5Q{`cLw");
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("P", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Pk5Q{`cLw");
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("P", token6.getTokenText());
      
      Token token7 = xPathLexer2.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.rightParen();
      Token token8 = xPathLexer2.minus();
      assertEquals("5", token8.getTokenText());
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer2.relationalOperator();
      xPathLexer3.div();
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertNull(token10);
      
      Token token11 = xPathLexer0.identifier();
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer4.nextToken();
      assertEquals((-1), token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.or();
      xPathLexer0.equals();
      xPathLexer1.slashes();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer0.setXPath("b;*qZ");
      xPathLexer1.rightParen();
      xPathLexer2.minus();
      xPathLexer1.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer2.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("b;*qZ");
      Token token1 = xPathLexer3.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")@{5 y7V0DkrRrj*");
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals("{", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("aS0O?y63{Oa@\"\"|O+");
      Token token7 = xPathLexer1.literal();
      assertNotNull(token7);
      assertEquals(27, token7.getTokenType());
      
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      assertEquals("@", token8.getTokenText());
      
      xPathLexer1.and();
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("\"", token10.getTokenText());
      
      Token token11 = xPathLexer1.star();
      assertEquals("\"", token11.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`>fhh}V)(w3iTy");
      Token token0 = xPathLexer0.star();
      assertEquals("z", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("6", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.colon();
      assertEquals("%", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals("z", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      String string0 = token4.toString();
      assertEquals("[ (20) (])", string0);
      
      xPathLexer0.setPreviousToken(token4);
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("`", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      xPathLexer2.and();
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("H1tS*|#)R0");
      Token token7 = xPathLexer2.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer3.relationalOperator();
      xPathLexer1.setXPath(")");
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer4.equals();
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer1.identifier();
      Token token9 = xPathLexer6.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals(")", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer2.doubleColon();
      assertEquals(19, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kA\"ujQdz?@u=H<AE%.");
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dollar();
      xPathLexer1.leftBracket();
      xPathLexer0.setXPath("Gq_Y*o.99QM");
      xPathLexer1.leftBracket();
      xPathLexer1.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N0[qNjG{bziu U");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("N", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.star();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("N0[qNjG{bziu U");
      Token token2 = xPathLexer1.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("N", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("qNjG", token3.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer0.endPosition();
      Token token4 = xPathLexer1.notEquals();
      assertEquals("0[", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("N0[qNjG{bziu U");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("q", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Pk5Q{`cLw");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("P", token0.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("5", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("Q", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("{", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("`c", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("Lw", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U~F+`!");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("U", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("~", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("F", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("+", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kA\"ujQdz?@u=H<AE%.");
      Token token0 = xPathLexer0.dollar();
      assertEquals("k", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("\"", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("?", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("@", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("u", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("a$HMX9");
      Token token0 = xPathLexer1.dots();
      assertEquals("a", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("$", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.and();
      Token token2 = xPathLexer2.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer2.endPosition();
      Token token3 = xPathLexer2.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("HMX9", token4.getTokenText());
      
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JWLD*]<ueT");
      xPathLexer0.star();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("W", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("D", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer1.endPosition();
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar(':');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("a$HMX9");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token0 = xPathLexer2.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("a", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer3.setXPath("");
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.not();
      assertEquals(23, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U~F+`!");
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("U~F+`!");
      xPathLexer0.rightParen();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JWLD*]<ueT");
      xPathLexer0.star();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer("JWLD*]<ueT");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("JWLD*]<ueT");
      xPathLexer4.and();
      xPathLexer3.not();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kA\"ujQdz?@u=H<AE%.");
      Token token0 = xPathLexer0.dollar();
      assertEquals("k", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("kA\"ujQdz?@u=H<AE%.");
      xPathLexer1.getPreviousToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("A", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.and();
      Token token2 = xPathLexer0.not();
      assertEquals("\"", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      Token token3 = xPathLexer2.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JWLD*]<ueT");
      xPathLexer0.star();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("WLD", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
      
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("JWLD*]<ueT");
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("<", token2.getTokenText());
      assertEquals(7, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("u", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("[", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.star();
      assertEquals("(", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(3, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      char char0 = xPathLexer0.LA(3);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aS0O?y63{Oa@\"\"|O+");
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("S", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("O", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Pk5Q{`cLw");
      XPathLexer xPathLexer1 = new XPathLexer("Pk5Q{`cLw");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Pk5Q", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.star();
      assertEquals(20, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U~F+`!");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("U", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("~F+`!", token1.getTokenText());
      
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("~", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("F", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(5, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("hUQ<Ff S");
      Token token5 = xPathLexer1.dollar();
      assertEquals("h", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("UQ", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b`S4xaoz}p2h VM\"");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("`", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("S", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("4", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Jl3rV y#D8");
      xPathLexer0.or();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.minus();
      assertEquals("2", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("J", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("l3rV", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b`S4xaoz}p2h VM\"");
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      String string0 = xPathLexer0.getXPath();
      assertEquals("b`S4xaoz}p2h VM\"", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%1]q_xA`@Y&WRT:vB(");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("1", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?,o&/`~,3");
      Token token0 = xPathLexer0.equals();
      assertEquals("?", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      xPathLexer0.whitespace();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("&", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (30) ()", string0);
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertNotNull(token5);
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.notEquals();
      assertEquals("`~", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals(32, token7.getTokenType());
      assertEquals(",", token7.getTokenText());
      
      Token token8 = xPathLexer0.at();
      assertEquals("3", token8.getTokenText());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer0.consume();
      Token token13 = xPathLexer0.leftParen();
      assertEquals(1, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sypwfeic`mC`T");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("s", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("y", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.comma();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("wfeic", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.setXPath("sypwfeic`mC`T");
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("s", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("y", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("p", token6.getTokenText());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.slashes();
      assertEquals("w", token7.getTokenText());
      
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b`S4xaoz}p2h VM\"");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("b", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("`", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("S4xaoz", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("p", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("2", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B!{7!NfcE3i");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("B", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":'I<Ys#R[D9.K*");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(":", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("'", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]Y5");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      assertEquals("]Y5", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B!{7!NfcE3i");
      xPathLexer0.setXPath("8Sx");
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":'I<Ys#R[D9.K*");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D=Dv#CXe%&;#|t?@1i^");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("D=", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("v", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V0U4Ky0'oX[J0<y% ");
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-E;V] ^16B,XS'RO5A");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.identifier();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(";", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("V", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("] ", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("^16B,XS'RO5A", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("^", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("|6,2zo6rXyjqEJpd fm");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(17, token2.getTokenType());
      assertEquals("|", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C!h`zdWd8)");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("C", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath("tx-qRH]E");
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("t", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z[fRx,{!c");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-4EV\"/\">Yh?_RU");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("-", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&B?/l:0Q',A*");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("&B?/l:0Q',A*", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4$hrJ_5To/nhFWJ4");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("4$", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("h", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("rJ_5To", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("/n", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4$hrJ_5To/nhFWJ4");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("4$", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("h", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("r", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("J_5To", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":'I<Ys#R[D9.K*");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.dollar();
      assertEquals("'", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(7, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4$hrJ_5To/nhFWJ4");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("4$", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("h", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("rJ_5To", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(11, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m2QT?-v+NRd| 'Ctug");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("m2QT", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V0U4Ky0'oX[J0<y% ");
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("0", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("U4Ky0", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("'", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("oX[J0<y% ", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";daO/X\"k~$Ucuk#");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(";daO/X\"k~$Ucuk#", token0.getTokenText());
      
      xPathLexer0.setXPath("7$%[AZ7");
      Token token1 = xPathLexer0.dollar();
      assertEquals("7", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("3Se)DV86hjz(YfY");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("$", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("%", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D=Dv#CXe%&;#|t?@1i^");
      Token token0 = xPathLexer0.slashes();
      assertEquals("D", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(21, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("D", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token3 = xPathLexer2.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("v", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`\"z]`n>fhh}%V3iTy");
      Token token0 = xPathLexer0.star();
      Token token1 = xPathLexer0.dollar();
      assertEquals("6", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("tV");
      xPathLexer0.setPreviousToken(token0);
      assertEquals("z", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("tV", token3.getTokenText());
      
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("\"", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`\"z]`n>fhh}%V3iTy");
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("`\"z]`n>fhh}%V3iTy", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("`", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("\"", token2.getTokenText());
      
      xPathLexer0.star();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("]`", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("n", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(">", token5.getTokenText());
      assertEquals(9, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("fhh", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aS0O?y63{Oa@\"\"|O+");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.dots();
      assertEquals("a", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("S", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer1.setPreviousToken(token2);
      assertEquals(19, token2.getTokenType());
      assertEquals("0O", token2.getTokenText());
      
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ns2,b?L4D01WSox<0E");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("N", token0.getTokenText());
      
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals(",b", token2.getTokenText());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.colon();
      char char0 = xPathLexer0.LA(24);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.isIdentifierStartChar('\uFFFF');
      xPathLexer0.and();
      xPathLexer0.setXPath("Ns2,b?L4D01WSox<0E");
      Token token5 = xPathLexer0.colon();
      assertEquals("N", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.nextToken();
      assertNotSame(token6, token4);
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals("s", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.equals();
      assertEquals("2", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(",", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals("b", token11.getTokenText());
      assertEquals(20, token11.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.and();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%]qR_FA`@Y&RTvB(");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("%]qR_FA`@Y&RTvB(", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("%", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("]", token2.getTokenText());
      
      xPathLexer0.star();
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("R_FA`@Y&RTvB(", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals("R", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.literal();
      xPathLexer0.div();
      xPathLexer0.div();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":!pb\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":'I<Ys#R[D9.K*");
      xPathLexer0.and();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.dollar();
      assertEquals("'", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Ys", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('5');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4AhrJ_5ToWJ4");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lpQS");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      String string0 = xPathLexer0.getXPath();
      assertEquals("lpQS", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V0U4Ky0'oX[J0<y% ");
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("0", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("U", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("4", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("Ky0'oX[J0<y% ", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c*_j4ZEj");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.setXPath("Hc");
      assertEquals("Hc", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      token1.toString();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      token1.toString();
      xPathLexer0.leftBracket();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (17) ())", string0);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.getXPath();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.getXPath();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('{');
      xPathLexer0.slashes();
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertTrue(boolean1 == boolean0);
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.getPreviousToken();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[elg`E o");
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.minus();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      token0.toString();
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      token0.toString();
      xPathLexer0.or();
      String string0 = token0.toString();
      assertEquals("[ (6) ([)", string0);
      
      xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.whitespace();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(9, int0);
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.notEquals();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.equals();
      xPathLexer0.mod();
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yTM#)$r(P^");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mTwR,fzKK=");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".8{LrSYg#D5*(WS");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$HM9");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("/7m/yU:!=k&n)7");
      Token token1 = xPathLexer1.pipe();
      assertEquals("/", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer1.slashes();
      assertEquals("m/", token4.getTokenText());
      assertEquals(12, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token4);
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.getPreviousToken();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.dots();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.literal();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath(";3oE3=^njvZ$nd");
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals(";", token8.getTokenText());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      Token token12 = xPathLexer0.nextToken();
      assertNotSame(token12, token11);
      
      Token token13 = xPathLexer0.star();
      assertEquals(20, token13.getTokenType());
      assertEquals("E", token13.getTokenText());
      
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
      assertEquals("3=", token14.getTokenText());
      
      xPathLexer0.consume(307);
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("//rqqQ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("//", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      xPathLexer0.star();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("q", token2.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.div();
      Token token3 = xPathLexer0.star();
      assertEquals("Q", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.and();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.identifier();
      char char0 = xPathLexer0.LA(1422);
      assertEquals('\uFFFF', char0);
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("orB4qM");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$fJ<X1'H`kxOf");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
      
      Token token1 = new Token(28, (String) null, 0, (-112));
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("fJ", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8mvq@vu*Ar=8U{");
      Token token0 = xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".2Sl*&11jyk?!");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".2", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>=wH4ZN$ ]");
      Token token0 = xPathLexer0.slashes();
      assertEquals(".", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(">=", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("wH4ZN", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }
}
