/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:37:15 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      int int0 = classWriter0.newField("]Ws\f8", "]Ws\f8", "]Ws\f8");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(13, "value ", "value ", "value ", (String[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4933);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, Integer.MAX_VALUE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      Double double0 = new Double(Integer.MAX_VALUE);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(Integer.MAX_VALUE, "Signature", "WF]*qJiBxrSZ}WVI(~", "Signature", double0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConst(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@41637a90
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      Item item0 = classWriter0.newFloat((-18));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1498);
      classWriter0.newDouble(1498);
      Byte byte0 = new Byte((byte)20);
      int int0 = classWriter0.newConst(byte0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      Long long0 = new Long(1);
      Item item0 = classWriter0.newConstItem(long0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassWriter classWriter0 = new ClassWriter(3649);
      String string0 = classWriter0.getCommonSuperClass("java/lang/Throwable", "wheel.asm.Frame");
      assertEquals("java/lang/Object", string0);
      
      Item item0 = classWriter0.newLong(2102L);
      Item item1 = classWriter0.newLong(2102L);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(267);
      classWriter0.addType("]:h8@%?~T)_|&hxk");
      int int0 = classWriter0.addType("bbF");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      classWriter0.getCommonSuperClass("wheel.asm.Frame", "wheel.asm.Frame");
      int int0 = classWriter0.newConst("wheel.asm.Frame");
      assertEquals(302, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      classWriter0.visitOuterClass("MKw", "MKw", "MKw");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(55);
      Item[] itemArray0 = new Item[1];
      Item item0 = classWriter0.newDouble(1863.907);
      itemArray0[0] = item0;
      classWriter0.typeTable = itemArray0;
      classWriter0.addType("AWn|5J7");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      Item item0 = classWriter0.newLong(1);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      classWriter0.visitOuterClass("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "LineNumberTable", "LineNumberTable");
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2837));
      classWriter0.visitAnnotation("><\bo)''0Tn!", true);
      classWriter0.toByteArray();
      System.setCurrentTimeMillis((-2837));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      Short short0 = new Short((short)35);
      classWriter0.newConstItem(short0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(377);
      int int0 = Short.SIZE;
      Float float0 = new Float((double) 377);
      classWriter0.newConst(float0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      classWriter0.visitAnnotation("org.apache.commons.io.filefilter.FalseFileFilter", false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newMethod("", "", "", false);
      classWriter0.newNameType("", "");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      classWriter0.visitInnerClass("", "", "", (-13));
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      classWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      String[] stringArray0 = new String[0];
      classWriter0.visit(15, 168, "}", "}", "}", stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2241);
      Double double0 = new Double(2241);
      classWriter0.newConstItem(double0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      classWriter0.newDouble(47);
      classWriter0.newDouble(47);
      classWriter0.newFloat(47);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(47, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4893));
      classWriter0.visitOuterClass("", (String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      Character character0 = new Character('X');
      classWriter0.newConst(character0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      classWriter0.visitOuterClass("3-ne $zDI@fQ6pXQ", "3-ne $zDI@fQ6pXQ", (String) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      classWriter0.visitInnerClass("(%,/)vB", "(%,/)vB", "", 213);
      classWriter0.visitInnerClass("].{|", "", "6Jg][?Bl", 1);
      classWriter0.newMethod("", "_l:69:Mi-(|QuMM<Z,", "_l:69:Mi-(|QuMM<Z,", false);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-2524);
      ClassWriter classWriter0 = new ClassWriter((-2524));
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1565);
      Item item0 = new Item();
      Boolean boolean0 = Boolean.FALSE;
      classWriter0.newConstItem(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      byte[] byteArray0 = ClassWriter.TYPE;
      Type type0 = Type.DOUBLE_TYPE;
      classWriter0.newConstItem(type0);
      classWriter0.newConstItem(type0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(267);
      Type type0 = Type.getObjectType("o[DK");
      classWriter0.newConst(type0);
      int int0 = Frame.BASE_VALUE;
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      classWriter0.newMethod("", "", "", false);
      classWriter0.newInteger(4);
      classWriter0.newInteger(4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource((String) null, "\"lPlgm M4.+Jw2_");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-606));
      classWriter0.visitSource("boolean", (String) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The size must be non-negative";
      classWriter0.visit(Integer.MAX_VALUE, Integer.MAX_VALUE, "The size must be non-negative", "The size must be non-negative", "wheel.asm.Label", stringArray0);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      classWriter0.visitSource("7pr_J#>7", "7pr_J#>7");
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      classWriter0.visitSource("<-Nr12[IqdKT", "<-Nr12[IqdKT");
      classWriter0.addType("v(PP J");
      String[] stringArray0 = new String[0];
      classWriter0.visitMethod(24, "<-Nr12[IqdKT", "v(PP J", "!O$&st", stringArray0);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      classWriter0.visitAnnotation("wn(DG0B", false);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1565);
      classWriter0.addUninitializedType("", 1565);
      classWriter0.newConst("");
      classWriter0.addType("");
      classWriter0.newConstItem("");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(993);
      classWriter0.newFloat(15);
      Item item0 = classWriter0.key3;
      classWriter0.newFloat(15);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      classWriter0.newConstItem("InnerClasses");
      classWriter0.addType("InnerClasses");
      classWriter0.newMethod("InnerClasses", "=", "InnerClasses", true);
      classWriter0.newMethod("L!MV4>3pEE", "", "", false);
      Boolean boolean0 = Boolean.TRUE;
      classWriter0.newConstItem(boolean0);
      System.setCurrentTimeMillis(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      classWriter0.visit(9, (-3267), "g>)/~?j/m}^|", "mmYz", "g>)/~?j/m}^|", (String[]) null);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(39);
      classWriter0.visit(1570, 34, ",:DahQ7Kv(xK8", "wO8CtOH^I_FY&cjz<", (String) null, (String[]) null);
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(267);
      classWriter0.visitField(3187, "", "", "Z_(i ", "Z_(i ");
      classWriter0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      classWriter0.cr = classReader0;
      Attribute[] attributeArray0 = new Attribute[0];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 384);
      classWriter0.invalidFrames = true;
      classWriter0.getCommonSuperClass("wheel.asm.Frame", "java/lang/Throwable");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1994);
      classWriter0.newField("]Ws\f8", "]Ws\f8", "]Ws\f8");
      classWriter0.newField("]Ws\f8", "]Ws\f8", "]Ws\f8");
      // Undeclared exception!
      try { 
        classWriter0.newField("]Ws\f8", "org.apache.commons.io.filefilter.CanReadFileFilter", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      classWriter0.visitOuterClass("", "", "");
      classWriter0.newClass("");
      classWriter0.addUninitializedType("", 14);
      classWriter0.addUninitializedType("", 14);
      Item item0 = classWriter0.key2;
      classWriter0.newNameType("", "");
      Attribute attribute0 = new Attribute("");
      classWriter0.toByteArray();
      classWriter0.addUninitializedType("", 1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FalseFileFilter", "org.apache.commons.io.filefilter.FalseFileFilter");
      classWriter0.addType("org.apache.commons.io.filefilter.FalseFileFilter");
      classWriter0.getMergedType(1, 1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      classWriter0.getCommonSuperClass("wheel.asm.Frame", "java/lang/Throwable");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      classWriter0.getCommonSuperClass("java/lang/Throwable", "java/lang/Object");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3649;
      ClassWriter classWriter0 = new ClassWriter(3649);
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.FalseFileFilter");
      classWriter0.visitAttribute(attribute0);
      classWriter0.newMethod("g4?0aX6gl$;/{,y", "org.apache.commons.io.filefilter.FalseFileFilter", "", false);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      classWriter0.newLong(0L);
      classWriter0.newMethod("", "", "", false);
      classWriter0.newMethod("", "", "", false);
      classWriter0.newClass("");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      classWriter0.newMethod("", "java/lang/Throwable", "java/lang/Throwable", false);
      classWriter0.visitInnerClass("", "wg&^)X2", "", 47);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanWriteFileFilter", "java/lang/Throwable");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      Attribute attribute0 = new Attribute("Gb<T>&#g#or/HJ[;$f)");
      classWriter0.visitAttribute(attribute0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      classWriter0.newClass("#0Y,$[5q -N");
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-100);
      attribute0.value = byteArray0;
      classWriter0.newClass("=5S5.Hl]f gk~");
      classWriter0.toByteArray();
      ClassWriter classWriter1 = new ClassWriter(1495);
      classWriter1.visitAnnotation("=5S5.Hl]f gk~", true);
      classWriter1.visitAnnotation("Gb<T>&#g#or/HJ[;$f)", true);
  }
}
