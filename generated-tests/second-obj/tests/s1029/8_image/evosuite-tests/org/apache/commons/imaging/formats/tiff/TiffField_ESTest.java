/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:02:49 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(124, 124, fieldTypeRational0, 124, 124, byteArray0, byteOrder0, 124);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Lorg.apache.commons.imaging.common.RationalNumber; cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(32, 32, fieldTypeDouble0, 32, (-1161L), (byte[]) null, byteOrder0, 32);
      int int0 = tiffField0.getOffset();
      assertEquals((-1161), int0);
      
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0x20)", string0);
      assertEquals(32, tiffField0.getSortHint());
      assertEquals(32, tiffField0.getDirectoryType());
      assertFalse(tiffField0.isLocalValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField((-10), (-10), fieldTypeDouble0, (-10), (-10), byteArray0, (ByteOrder) null, 2140772739);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals((-10), tiffField0.getOffset());
      assertEquals(2140772739, tiffField0.getSortHint());
      assertEquals((-10), tiffField0.getTag());
      assertEquals((-10), tiffField0.getDirectoryType());
      assertNull(tiffElement0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-32);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(333, (-4993), fieldTypeDouble0, 2923L, 333, byteArray0, byteOrder0, (byte)20);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [D@302128fa
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50972, 50972, fieldTypeDouble0, 50972, 50972, byteArray0, byteOrder0, 413);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals(50972, tiffField0.getOffset());
      assertEquals(50972L, tiffField0.getCount());
      assertEquals(50972, tiffField0.getDirectoryType());
      assertEquals(413, tiffField0.getSortHint());
      assertEquals("50972 (0xc71c: RawImageDigest): ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(12, 12, fieldTypeDouble0, 12, 12, byteArray0, (ByteOrder) null, 2140772761);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNotNull(tiffElement0);
      
      int int0 = tiffField0.getTag();
      assertFalse(tiffField0.isLocalValue());
      assertEquals(12, int0);
      assertEquals(12L, tiffField0.getCount());
      assertEquals(12, tiffField0.getOffset());
      assertEquals(96, tiffField0.getBytesLength());
      assertEquals(2140772761, tiffField0.getSortHint());
      assertEquals(12, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte) (-21);
      byteArray0[1] = (byte) (-21);
      byte byte1 = (byte)4;
      int int0 = 0;
      byteArray0[3] = (byte) (-21);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte) (-21), 0, fieldTypeShort0.BYTE, (byte)4, (byte)0, byteArray0, byteOrder0, (byte) (-21));
      tiffField0.getValueDescription();
      int int1 = 1647;
      try { 
        FieldType.getFieldType((-5461));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type -5461 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(50715, 50715, (FieldType) null, 0L, (-766L), byteArray0, (ByteOrder) null, 7);
      String string0 = tiffField0.getTagName();
      assertEquals(0L, tiffField0.getCount());
      assertEquals(7, tiffField0.getSortHint());
      assertEquals(50715, tiffField0.getDirectoryType());
      assertEquals("BlackLevelDeltaH", string0);
      assertEquals(50715, tiffField0.getTag());
      assertEquals((-766), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)0, (-2145232615), fieldTypeRational0, (-2145232615), (byte)0, byteArray0, byteOrder0, (byte)0);
      int int0 = tiffField0.getSortHint();
      assertEquals(0, int0);
      
      tiffField0.getIntArrayValue();
      int int1 = tiffField0.getDirectoryType();
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-2145232615L), tiffField0.getCount());
      assertEquals(18008264, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertEquals((-2145232615), int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(2473, 2473, fieldTypeRational0, 2473, 2L, byteArray0, byteOrder0, 2473);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(2473, tiffField0.getTag());
      assertEquals(2, tiffField0.getOffset());
      assertEquals(2473L, tiffField0.getCount());
      assertEquals(0, int0);
      assertEquals(2473, tiffField0.getSortHint());
      assertEquals(2473, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[5] = (byte)0;
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeShort0, 65535, 0L, byteArray0, (ByteOrder) null, (byte) (-91));
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals((-91), tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-23131), int0);
      assertEquals(65535, tiffField0.getDirectoryType());
      assertEquals(65535, tiffField0.getTag());
      assertEquals(65535L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(50999, 50999, fieldTypeLong0, 675L, 50999, byteArray0, byteOrder0, 50999);
      tiffField0.getSortHint();
      tiffField0.getIntValueOrArraySum();
      try { 
        FieldType.getFieldType(50999);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type 50999 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2147407948, (-531), fieldTypeAscii0, 323L, (-531), byteArray0, byteOrder0, (byte)0);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [Ljava.lang.String;@96dc2eb for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[175];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(20, "FlashpixVer^sion");
      TiffField tiffField0 = new TiffField(1607, 42032, fieldTypeRational0, 1607, 4L, byteArray0, byteOrder0, 1607);
      tiffField0.getDoubleArrayValue();
      assertEquals(1607, tiffField0.getSortHint());
      assertEquals(42032, tiffField0.getDirectoryType());
      assertEquals(1607L, tiffField0.getCount());
      assertEquals(1607, tiffField0.getTag());
      assertEquals(4, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[21];
      ByteOrder.nativeOrder();
      String string0 = File.separator;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1426), 10, fieldTypeShort0, 30L, 1L, byteArray0, byteOrder0, 10);
      tiffField0.getDoubleArrayValue();
      assertEquals((-1426), tiffField0.getTag());
      assertEquals(30L, tiffField0.getCount());
      assertEquals(10, tiffField0.getSortHint());
      assertEquals(10, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(33, ": ");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(33, 50, fieldTypeDouble0, 33, 50, byteArray0, byteOrder0, 50);
      tiffField0.getDoubleArrayValue();
      int int0 = tiffField0.getSortHint();
      assertEquals(33, tiffField0.getTag());
      assertEquals(33L, tiffField0.getCount());
      assertEquals(50, tiffField0.getOffset());
      assertEquals(50, int0);
      assertEquals(50, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((-238), "z>2p1n5;ze\"]N");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(34264, 34264, fieldTypeAscii0, 34264, 34264, byteArray0, byteOrder0, 75);
      ByteOrder.nativeOrder();
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value:  for: 34264 (0x85d8: ModelTransformationTag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)15;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeRational0, 65535, 65535, byteArray0, byteOrder0, (byte)124);
      String string0 = tiffField0.getValueDescription();
      assertEquals("", string0);
      assertEquals(65535, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(65535L, tiffField0.getCount());
      assertEquals(65535, tiffField0.getTag());
      assertEquals(124, tiffField0.getSortHint());
      assertEquals(65535, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[2];
      TiffField tiffField0 = new TiffField((byte)30, (-2145232615), fieldTypeShort0, 1L, 3524L, byteArray0, (ByteOrder) null, 2498);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-1982292621), (byte)30);
      Integer integer0 = new Integer((-2145232615));
      tiffField0.getDoubleArrayValue();
      assertEquals(3524, tiffField0.getOffset());
      assertEquals((-2145232615), tiffField0.getDirectoryType());
      assertEquals(2498, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(30, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort((-1686), "");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)55;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-435), 50728, fieldTypeShort0, 50728, (-642L), byteArray0, byteOrder0, (byte)10);
      String string0 = tiffField0.getValueDescription();
      assertEquals(50728, tiffField0.getDirectoryType());
      assertEquals((-435), tiffField0.getTag());
      assertEquals((-642), tiffField0.getOffset());
      assertEquals(10, tiffField0.getSortHint());
      assertEquals(50728L, tiffField0.getCount());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[51];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(4727, (byte) (-66), fieldTypeAscii0, 4L, (-1206L), byteArray0, byteOrder0, (byte) (-66));
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Ljava.lang.String; cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-881), (-762), fieldTypeAscii0, (-881), (-881), byteArray0, byteOrder0, (-582));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte)14, 1);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: ASCII", string0);
      assertEquals((-881), tiffField0.getTag());
      assertEquals((-582), tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals((-881), tiffField0.getOffset());
      assertEquals((-762), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(12, 12, fieldTypeDouble0, 12, 12, byteArray0, (ByteOrder) null, 12);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@7656725c for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-3254), 65535, fieldTypeLong0, 65535, (-3254), byteArray0, byteOrder0, (byte)102);
      tiffField0.getIntArrayValue();
      System.setCurrentTimeMillis(65535);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-881), (-762), fieldTypeAscii0, (-881), (-881), byteArray0, byteOrder0, (-582));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((byte)14, 1);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals((-881), tiffField0.getOffset());
      assertNull(string0);
      assertEquals((-582), tiffField0.getSortHint());
      assertEquals((-881), tiffField0.getTag());
      assertEquals((-762), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[38];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)25, (byte)25, fieldTypeShort0.IFD, (byte)25, 408056L, byteArray0, byteOrder0, (byte)25);
      tiffField0.getValueDescription();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[312];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      int int0 = 31;
      ByteOrder byteOrder3 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(31, 31, fieldTypeShort0.DOUBLE, 31, 31, byteArray0, byteOrder2, 31);
      tiffField0.getValueDescription();
      int int1 = (-1565);
      int int2 = 17;
      try { 
        FieldType.getFieldType(17);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type 17 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(291, "'");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)35;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-35), 291, fieldTypeShort0, 304L, (-1640L), byteArray0, byteOrder0, 20);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertArrayEquals(new int[] {46805}, intArray0);
      assertEquals(20, tiffField0.getSortHint());
      assertEquals(291, tiffField0.getDirectoryType());
      assertEquals(304L, tiffField0.getCount());
      assertEquals((-35), tiffField0.getTag());
      assertEquals((-1640), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-25);
      byteArray0[5] = (byte)70;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1106, 65535, fieldTypeLong0, 1106, 1452L, byteArray0, byteOrder0, (byte)50);
      tiffField0.getDoubleArrayValue();
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(1452, tiffField0.getOffset());
      assertEquals(1106, tiffField0.getTag());
      assertEquals(1106L, tiffField0.getCount());
      assertEquals(65535, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)2;
      int int0 = 0;
      long long0 = 3210L;
      TiffField tiffField0 = new TiffField((-2899), 799, fieldTypeRational0, 3210L, 3210L, byteArray0, byteOrder0, (byte)2);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(432, "z>2p1n5;ze\"]N");
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(34252, 34252, fieldTypeAscii0, 2470L, 2470L, byteArray0, byteOrder0, 75);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      tiffField0.getValueDescription();
      try { 
        FieldType.getFieldType(2167);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type 2167 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((-193), "z>2p1n5;ze\"]N");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(34252, 34252, fieldTypeAscii0, 4L, 4L, byteArray0, byteOrder0, (-193));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder.nativeOrder();
      tiffField0.getValueDescription();
      try { 
        FieldType.getFieldType((-1565));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type -1565 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((-197), "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-88);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(11, 11, fieldTypeAscii0, 11, 11, byteArray0, byteOrder0, (-543));
      String string0 = tiffField0.getStringValue();
      assertEquals((-543), tiffField0.getSortHint());
      assertEquals(11, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(11, tiffField0.getTag());
      assertEquals(11, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(3590, "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)9;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)111);
      ByteBuffer byteBuffer1 = byteBuffer0.putLong(48, (-2141L));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)118;
      byteArray1[2] = (byte)111;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte)19;
      ByteBuffer byteBuffer2 = byteBuffer1.put(byteArray1);
      ByteOrder byteOrder0 = byteBuffer2.order();
      TiffField tiffField0 = new TiffField(8, 3590, fieldTypeFloat0, 255L, 2327L, byteArray0, byteOrder0, 50713);
      tiffField0.getDoubleArrayValue();
      assertEquals(2327, tiffField0.getOffset());
      assertEquals(50713, tiffField0.getSortHint());
      assertEquals(8, tiffField0.getTag());
      assertEquals(255L, tiffField0.getCount());
      assertEquals(3590, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[8];
      ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      int int0 = 0;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2147148992, (-2163), fieldTypeRational0, 1967L, 2710L, byteArray0, byteOrder0, 737);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[8];
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField((byte)25, (-555), fieldTypeFloat0, 272237L, (byte)25, byteArray0, byteOrder0, (byte)25);
      tiffField0.dump();
      assertEquals(25, tiffField0.getTag());
      assertEquals((-555), tiffField0.getDirectoryType());
      assertEquals(25, tiffField0.getSortHint());
      assertEquals(272237L, tiffField0.getCount());
      assertEquals(25, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(50, ": ");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 50, fieldTypeDouble0, 0, 50, byteArray0, byteOrder0, 50);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "XQM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte) (-21);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(6, (byte) (-21), fieldTypeShort0, 1L, (byte) (-21), byteArray0, byteOrder0, 50932);
      String string0 = tiffField0.getValueDescription();
      assertEquals((-21), tiffField0.getOffset());
      assertEquals((-21), tiffField0.getDirectoryType());
      assertEquals(50932, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertNotNull(string0);
      assertEquals(6, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[39];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldType.getFieldType(12);
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(3, 3, fieldTypeShort0, 1L, 1L, byteArray0, byteOrder1, 2146179772);
      tiffField0.getSortHint();
      tiffField0.getIntValueOrArraySum();
      try { 
        fieldTypeShort0.writeData(fieldTypeAscii0, byteOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid data: org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii@3 (org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[143];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldType.getFieldType(1);
      TiffField tiffField0 = new TiffField(1, (-3146), fieldTypeShort0, 1, (-1630L), byteArray0, byteOrder0, 1);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      tiffField0.getIntArrayValue();
      int int0 = Byte.BYTES;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[226];
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      int int0 = 38;
      int int1 = 13;
      TiffField tiffField0 = new TiffField(38, 13, fieldTypeShort0.ASCII, 491L, (-1352L), byteArray0, byteOrder1, 13);
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      tiffField0.getFieldTypeName();
      tiffField0.dump();
      ByteOrder.nativeOrder();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ASCII");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "ASCII", 38, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[93];
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField((byte)58, 18246, fieldTypeByte0, 18246, (byte)58, byteArray0, byteOrder0, 582);
      tiffField0.getTagName();
      tiffField0.dump();
      FieldTypeByte fieldTypeByte1 = FieldType.SBYTE;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      try { 
        FieldType.getFieldType(281);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type 281 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[175];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(20, "FlashpixVersion");
      TiffField tiffField0 = new TiffField(1607, 1081, fieldTypeShort0, 6220L, 6220L, byteArray0, byteOrder0, 42032);
      String string0 = tiffField0.toString();
      assertEquals("1607 (0x647: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (87) (6220 Short)", string0);
      assertEquals(1081, tiffField0.getDirectoryType());
      assertEquals(42032, tiffField0.getSortHint());
      assertEquals(6220, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[216];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(10, (-555), fieldTypeFloat0, 80L, (-555), byteArray0, byteOrder0, (-3713));
      tiffField0.dump();
      tiffField0.getOversizeValueElement();
      int int0 = Pattern.COMMENTS;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[216];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      FieldType.getFieldType(13);
      TiffField tiffField0 = new TiffField(13, 38, fieldTypeLong0, 4304L, 28L, byteArray0, byteOrder2, 38);
      tiffField0.dump();
      int int0 = Pattern.DOTALL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("): ");
      mockPrintWriter0.append((CharSequence) "): ");
      int int1 = tiffField0.getOffset();
      assertEquals(13, tiffField0.getTag());
      assertEquals(38, tiffField0.getDirectoryType());
      assertEquals(4304L, tiffField0.getCount());
      assertEquals(38, tiffField0.getSortHint());
      assertEquals(28, int1);
  }
}
