/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 19:43:16 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Choice;
import java.awt.Component;
import java.awt.List;
import java.awt.Rectangle;
import java.awt.TextArea;
import java.awt.event.ComponentListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.Hashtable;
import javax.swing.DebugGraphics;
import javax.swing.InputVerifier;
import javax.swing.JTree;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.clusterers.SimpleKMeans;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.SerializedInstancesSaver;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetListener;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.removeTrainingSetListener((TrainingSetListener) null);
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      dataVisualizer0.getComponents();
      dataVisualizer0.setAlignmentX((-1.0F));
      filter0.removeTestSetListener(dataVisualizer0);
      filter0.setCustomName((String) null);
      filter0.stop();
      Saver saver0 = new Saver();
      Logger logger0 = saver0.m_logger;
      saver0.getBackground();
      saver0.getGraphics();
      filter0.setLog((Logger) null);
      filter0.removeInstanceListener(saver0);
      filter0.acceptDataSet((DataSetEvent) null);
      filter0.removeDataSourceListener(dataVisualizer0);
      filter0.removeDataSourceListener(dataVisualizer0);
      AllFilter allFilter0 = new AllFilter();
      filter0.setFilter(allFilter0);
      filter0.addInstanceListener(saver0);
      filter0.addDataSourceListener(saver0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setLog((Logger) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getUIClassID();
      filter0.eventGeneratable("G_Zx~p?");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.getWrappedAlgorithm();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm("PanelUI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setWrappedAlgorithm(spreadSubsample0);
      assertEquals("SpreadSubsample", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      String string0 = "dataSet";
      filter0.transferFocusBackward();
      filter0.addPropertyChangeListener("dataSet", (PropertyChangeListener) null);
      BeanVisual beanVisual0 = classifierPerformanceEvaluator0.m_visual;
      filter0.setVisual(beanVisual0);
      // Undeclared exception!
      try { 
        filter0.performRequest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      simpleKMeans0.getRevision();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-1261), (-1261));
      filter0.acceptTrainingSet(trainingSetEvent0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, 880, 2);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.getComponentListeners();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getCursor();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      Appender appender0 = new Appender();
      Logger logger0 = appender0.m_log;
      filter0.setLog((Logger) null);
      filter0.setLog((Logger) null);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      instanceEvent1.setStatus((-321));
      filter0.notifyInstanceListeners(instanceEvent1);
      filter0.addTestSetListener(substringLabeler0);
      Integer integer0 = new Integer((-531));
      Associator associator0 = new Associator();
      associator0.getStructure("");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(integer0, (Instances) null, 362, (-531));
      trainingSetEvent0.m_setNumber = (-331);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = null;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      // Undeclared exception!
      try { 
        filter0.connectionNotification("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter0.addTrainingSetListener(filter1);
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      filter0.setCustomName("testSet");
      boolean boolean0 = filter0.isBusy();
      assertEquals("testSet", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.contains(112, 10000);
      filter0.enumerateRequests();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      trainTestSplitMaker0.removeComponentListener((ComponentListener) null);
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      filter0.getFilter();
      Class<FlowByExpression.ExpressionClause.ExpressionType> class0 = FlowByExpression.ExpressionClause.ExpressionType.class;
      Class<List> class1 = List.class;
      String[] stringArray0 = new String[0];
      EventSetDescriptor eventSetDescriptor0 = new EventSetDescriptor(class0, "ERROR (See log for details).", class1, stringArray0, (String) null, (String) null, (String) null);
      eventSetDescriptor0.getAddListenerMethod();
      filter0.connectionAllowed(eventSetDescriptor0);
      filter0.setVisual((BeanVisual) null);
      Saver saver0 = new Saver();
      InstanceEvent instanceEvent0 = new InstanceEvent(saver0, (Instance) null, 3859);
      filter0.acceptInstance(instanceEvent0);
      assertEquals(3859, instanceEvent0.getStatus());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      boolean boolean0 = filter0.isBusy();
      filter0.firePropertyChange("Monospaced", (byte)18, (byte)18);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      substringReplacer0.getVisibleRect();
      substringReplacer0.isFocusable();
      filter0.getInputVerifier();
      filter0.setInputVerifier((InputVerifier) null);
      filter0.removeInstanceListener(substringReplacer0);
      filter0.getWrappedAlgorithm();
      filter0.useDefaultVisual();
      Filter filter1 = new Filter();
      filter0.stop();
      filter0.removeDataSourceListener(filter1);
      filter1.contains(0, 0);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      filter0.connectionNotification("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", technicalInformationHandlerJavadoc0);
      filter1.getFilter();
      boolean boolean1 = filter0.connectionAllowed("");
      assertFalse(boolean1 == boolean0);
      
      filter0.removeTestSetListener(filter1);
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter1.disconnectionNotification("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", scatterPlotMatrix0);
      filter1.addInstanceListener(substringReplacer0);
      filter1.removeDataSourceListener(filter0);
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      DataSetEvent dataSetEvent0 = new DataSetEvent(modelPerformanceChart0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("testSet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // testSet not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("knN%4CGk)08");
      assertTrue(boolean0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent("knN%4CGk)08", (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      BeanVisual beanVisual0 = trainingSetMaker0.getVisual();
      beanVisual0.getComponentListeners();
      filter0.add((Component) beanVisual0);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      TestSetEvent testSetEvent0 = new TestSetEvent(dataVisualizer0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      boolean boolean0 = filter0.isBusy();
      filter0.firePropertyChange("Monospaced", (byte)18, (byte)18);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      substringReplacer0.getVisibleRect();
      substringReplacer0.isFocusable();
      filter0.getInputVerifier();
      filter0.setInputVerifier((InputVerifier) null);
      filter0.removeInstanceListener(substringReplacer0);
      filter0.getWrappedAlgorithm();
      filter0.useDefaultVisual();
      Filter filter1 = new Filter();
      filter0.stop();
      filter0.removeDataSourceListener(filter1);
      filter1.contains(0, 0);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      filter0.connectionNotification("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", technicalInformationHandlerJavadoc0);
      filter1.getFilter();
      boolean boolean1 = filter0.eventGeneratable(".$xx?Go9*f");
      assertTrue(boolean1 == boolean0);
      
      filter0.acceptInstance((InstanceEvent) null);
      filter1.getFilter();
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.connectionNotification("", stratifiedRemoveFolds0);
      filter0.getFilter();
      filter0.connectionAllowed("euV6{E>j{idG1(fH");
      filter0.repaint(0L, 1536, 25, 990, 25);
      boolean boolean0 = filter0.eventGeneratable("");
      assertTrue(boolean0);
      
      filter0.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      filter0.connectionNotification("/L", "/L");
      boolean boolean0 = filter0.eventGeneratable("/L");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.connectionNotification("k", substringReplacer0);
      boolean boolean0 = filter0.eventGeneratable("k");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.connectionNotification("", stratifiedRemoveFolds0);
      filter0.getFilter();
      filter0.connectionNotification("", stratifiedRemoveFolds0);
      filter0.getFilter();
      filter0.connectionAllowed("");
      filter0.eventGeneratable("xJ:F^B[(YvjBSk$'Z<(");
      Associator associator0 = new Associator();
      filter0.removeDataSourceListener(associator0);
      StratifiedRemoveFolds stratifiedRemoveFolds1 = new StratifiedRemoveFolds();
      filter0.setFilter(stratifiedRemoveFolds1);
      boolean boolean0 = filter0.connectionAllowed("r8m)$o|");
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      AllFilter allFilter0 = new AllFilter();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      filter0.connectionNotification("can't process streamed instances; can't continue", associator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.eventGeneratable("can't process streamed instances; can't continue");
      filter0.setVisual((BeanVisual) null);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0, 2325, 2325);
      filter0.acceptTestSet(testSetEvent0);
      System.setCurrentTimeMillis(120L);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(textDirectoryLoader0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      AllFilter allFilter0 = new AllFilter();
      filter0.eventGeneratable("%Xf");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(instances0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.eventGeneratable("\nOptions specific to ");
      filter0.setCustomName(".bsi");
      assertEquals(".bsi", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(modelPerformanceChart0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      Random.setNextRandom(39);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getDebugGraphicsOptions();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addInstanceListener(substringLabeler0);
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, (Instances) null);
      filter0.notifyInstanceListeners(instanceEvent0);
      boolean boolean0 = filter0.eventGeneratable("uZ\"wvIp+nu7b6W?");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      JTree jTree0 = new JTree((Hashtable<?, ?>) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      basicComboBoxEditor0.removeActionListener(defaultTreeCellEditor0);
      flowByExpression0.removeFocusListener(basicComboBoxEditor0);
      filter0.addInstanceListener(flowByExpression0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.enumerateRequests();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.removeDataSourceListener(flowByExpression0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      Class<IncrementalClassifierEvaluator> class0 = IncrementalClassifierEvaluator.class;
      Class<ClustererPerformanceEvaluator> class1 = ClustererPerformanceEvaluator.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "@relation", class1, stringArray0, (String) null, ".bsi", "@relation");
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found: .arff on class weka.gui.beans.ClustererPerformanceEvaluator
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.addDataSourceListener(scatterPlotMatrix0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "c");
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      filter0.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "c");
      MockThread mockThread0 = new MockThread(threadGroup1, "]_x`}L*~}4a\"n$61l");
      filter0.m_filterThread = (Thread) mockThread0;
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Logger logger0 = substringReplacer0.m_log;
      filter0.setLog((Logger) null);
      filter0.acceptInstance((InstanceEvent) null);
      filter0.disconnectionNotification("c", (Object) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      MockThread mockThread0 = new MockThread("Stop");
      filter0.m_filterThread = (Thread) mockThread0;
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setFocusTraversalKeysEnabled(true);
      filter0.connectionNotification("instance", "instance");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(textDirectoryLoader0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus((-2));
      filter0.acceptInstance(instanceEvent0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.addDataSourceListener(sorter0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getStructure("Percentage split value needs be >0 and <100.");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("Percentage split value needs be >0 and <100.", (Instances) null, 2, 2, (-155), 0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      // Undeclared exception!
      try { 
        filter0.connectionNotification("instance", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Add add0 = new Add();
      Filter filter0 = new Filter();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      DenseInstance denseInstance0 = new DenseInstance(1);
      InstanceEvent instanceEvent1 = new InstanceEvent(scatterPlotMatrix0, denseInstance0, (-1934915268));
      filter0.acceptInstance(instanceEvent1);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      DenseInstance denseInstance0 = new DenseInstance(3180);
      InstanceEvent instanceEvent1 = new InstanceEvent(denseInstance0, denseInstance0, (-4948));
      filter0.acceptInstance(instanceEvent1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      DenseInstance denseInstance0 = new DenseInstance(1025);
      InstanceEvent instanceEvent1 = new InstanceEvent(sorter0, denseInstance0, 2);
      filter0.acceptInstance(instanceEvent1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      DenseInstance denseInstance0 = new DenseInstance(0);
      InstanceEvent instanceEvent1 = new InstanceEvent(multiFilter0, denseInstance0, 1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      instanceEvent1.setStructure((Instances) null);
      Instances instances0 = textDirectoryLoader0.getStructure();
      instanceEvent1.setStructure(instances0);
      filter0.acceptInstance(instanceEvent1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instanceEvent0.setStructure(instances0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }
}
