/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 04:47:56 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.ObjectArrayCodec;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.BufferedReader;
import java.io.PipedInputStream;
import java.io.PushbackReader;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.nio.charset.Charset;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("-GVID]FC!XQae,6,", parserConfig0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(numberFormat0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - G, info : pos 1, json : -GVID]FC!XQae,6,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("`j[g|F2", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : `j[g|F2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("applyLabel");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Class<Feature> class0 = Feature.class;
      ArrayDeque<MockDateFormat> arrayDeque0 = new ArrayDeque<MockDateFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : applyLabel
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.handleResovleTask("");
      Class<TimeZone> class0 = TimeZone.class;
      defaultJSONParser0.parseObject(class0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.close();
      defaultJSONParser0.checkListResolve((Collection) null);
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z8K.nLIsEV&");
      defaultJSONParser0.checkListResolve((Collection) null);
      defaultJSONParser0.getLexer();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "Z8K.nLIsEV&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      defaultJSONParser0.getExtraProcessors();
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.resolveReference("FRYYbC;r:!N3");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - <, info : pos 1, json : ?<$~?
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9P({Mc*nsX_]R");
      defaultJSONParser0.parse((Object) "9P({Mc*nsX_]R");
      String string0 = defaultJSONParser0.getInput();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I");
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("W^y71$FWCgG!CrQ&N");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.getParent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getObject("W^y71$FWCgG!CrQ&N");
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.getDateFormat();
      jSONScanner0.np = 0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(357, 357);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      defaultJSONParser0.getObject("applyName");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(22, 22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect TreeSet, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("g~~l0F3HaY5}rt");
      defaultJSONParser0.resolveReference("g~~l0F3HaY5}rt");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyProcessable0).toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$U~?");
      defaultJSONParser0.resolveReference("?<$U~?");
      defaultJSONParser0.getContext();
      defaultJSONParser0.checkMapResolve((Map) null, (Object) null);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IdentityHashMap", 99999);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ParseContext parseContext1 = new ParseContext((ParseContext) null, (Object) null, mockDateFormat0);
      defaultJSONParser0.setContext(parseContext1);
      LinkedHashMap<Method, String> linkedHashMap0 = new LinkedHashMap<Method, String>();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("com.alibaba.fastjson.util.IdentityHashMap");
      defaultJSONParser0.checkMapResolve(linkedHashMap0, stringCharacterIterator0);
      parseContext1.toString();
      defaultJSONParser0.getLexer();
      // Undeclared exception!
      try { 
        DateFormat.getDateInstance(1407);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1407
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z8K.nLIsEV&");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{K", parserConfig0, (-1280));
      JSON.DEFAULT_PARSER_FEATURE = (-1075);
      Class<Byte> class0 = Byte.TYPE;
      defaultJSONParser0.resolveReference("{K");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      defaultJSONParser0.resolveReference("3{1l@b2`j8K_xB");
      TreeMap<ParameterizedTypeImpl, MockJapaneseDate> treeMap0 = new TreeMap<ParameterizedTypeImpl, MockJapaneseDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : ?<$~?
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[long");
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 1, json : [long
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      int int0 = 0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?(O", parserConfig0, 0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getSymbolTable();
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeSupport");
      Class<Long> class0 = Long.class;
      JavaBeanSerializer javaBeanSerializer0 = null;
      try {
        javaBeanSerializer0 = new JavaBeanSerializer(class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = ';';
      charArray0[2] = 'C';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      charArray0[3] = 'u';
      charArray0[4] = '{';
      charArray0[5] = ',';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.getParent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      defaultJSONParser0.parse();
      defaultJSONParser0.setConfig(parserConfig0);
      JavaBeanInfo.getBuilderClass((JSONType) null);
      Stack<ChoiceFormat> stack0 = new Stack<ChoiceFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("applyLabel");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[long");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ObjectArrayCodec objectArrayCodec0 = ObjectArrayCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [long
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z8K.nLIsEV&");
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "Z8K.nLIsEV&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Z8K.nLIsEV&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", info : ", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : , info : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("W^y71$FWCgG!CrQ&N");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.getParent();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.getObject("W^y71$FWCgG!CrQ&N");
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.getDateFormat();
      jSONScanner0.np = 0;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<MockCalendar> class0 = MockCalendar.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : W^y71$FWCgG!CrQ&N
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      parserConfig0.clearDeserializers();
      Hashtable<PageAttributes, ChronoLocalDate> hashtable0 = new Hashtable<PageAttributes, ChronoLocalDate>();
      defaultJSONParser0.checkMapResolve(hashtable0, "");
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      defaultJSONParser0.parseObject((Type) class1, (Object) class1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("GgO+EOeUPu0\"whwB", 57);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "GgO+EOeUPu0\"whwB", object0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      parseContext0.toString();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      defaultJSONParser0.setConfig(parserConfig0);
      parseContext0.toString();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "GgO+EOeUPu0\"whwB");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GgO+EOeUPu0\"whwB");
      ParseContext parseContext1 = defaultJSONParser0.getContext();
      parseContext1.toString();
      Object object1 = new Object();
      defaultJSONParser0.handleResovleTask(object1);
      defaultJSONParser0.setContext(object1, (Object) parseContext1);
      Class<Rectangle> class0 = Rectangle.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig.global = parserConfig0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, ParserConfig.global, 0);
      defaultJSONParser0.parse();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      Stack<ChoiceFormat> stack0 = new Stack<ChoiceFormat>();
      defaultJSONParser0.getLexer();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.handleResovleTask("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      IdentityHashMap<Boolean, Boolean> identityHashMap0 = new IdentityHashMap<Boolean, Boolean>();
      defaultJSONParser0.checkMapResolve(identityHashMap0, identityHashMap0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getInput();
      defaultJSONParser0.getLexer();
      Class<TimeZone> class0 = TimeZone.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5#3^#:", parserConfig0);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      String string0 = "NgO`$d!mB";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NgO`$d!mB");
      Collection<JSONScanner> collection0 = null;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "?<$~?", (Object) "?<$~?");
      Class<Integer> class0 = Integer.TYPE;
      ParseContext parseContext1 = new ParseContext(parseContext0, parseContext0, class0);
      Locale locale0 = Locale.US;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, (Object) dateFormatSymbols0, (Object) parseContext1);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext2, "?<$~?");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask("?<$~?");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"}");
      TreeMap<Timestamp, MessageFormat> treeMap0 = new TreeMap<Timestamp, MessageFormat>();
      defaultJSONParser0.getObject("..");
      defaultJSONParser0.parse((Object) "{\"$ref\":\"..\"}");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask("{\"$ref\":\"..\"}");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Integer> class0 = Integer.TYPE;
      Stack<BreakIterator> stack0 = new Stack<BreakIterator>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3`fH|mw)0%_j3Ek<-", parserConfig0, 2);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Feature feature0 = Feature.UseBigDecimal;
      defaultJSONParser0.config(feature0, true);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      List<ExtraProcessor> list0 = new LinkedList<ExtraProcessor>();
      defaultJSONParser0.setResolveStatus(2);
      assertEquals(2, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      defaultJSONParser0.getExtraProcessors();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "5Mn} }`Vl8*k6'`";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5Mn} }`Vl8*k6'`");
      defaultJSONParser0.parse();
      Date date0 = new Date((-2082L));
      Time time0 = new Time(3794316665763266033L);
      // Undeclared exception!
      try { 
        time0.toInstant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("U->vCpZH?RO[2*p\"(");
      defaultJSONParser0.getInput();
      Byte byte0 = new Byte((byte)32);
      Byte.compare((byte)32, (byte)44);
      defaultJSONParser0.handleResovleTask(byte0);
      JavaBeanInfo.getBuilderClass((JSONType) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : U->vCpZH?RO[2*p\"(
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6V~?");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.parse((Object) "6V~?");
      Hashtable<Feature, Object> hashtable0 = new Hashtable<Feature, Object>();
      Object object0 = new Object();
      defaultJSONParser0.getDateFomartPattern();
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      TreeMap<ParameterizedTypeImpl, MockJapaneseDate> treeMap0 = new TreeMap<ParameterizedTypeImpl, MockJapaneseDate>();
      Hashtable<Feature, Object> hashtable0 = new Hashtable<Feature, Object>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z8K.nLIsEV&");
      Point point0 = new Point();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, defaultJSONParser0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[long");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ObjectArrayCodec objectArrayCodec0 = ObjectArrayCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, jSONScanner0, parserConfig0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      defaultJSONParser0.getResolveTaskList();
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?<$~?");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("L5", parserConfig0);
      defaultJSONParser1.getResolveTaskList();
      DateFormat dateFormat0 = defaultJSONParser1.getDateFormat();
      defaultJSONParser1.setDateFomrat(dateFormat0);
      assertEquals(0, defaultJSONParser1.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z8K.nLIsEV&", parserConfig0, 2357);
      defaultJSONParser0.getContext();
      defaultJSONParser0.setContext((ParseContext) null, (Object) parserConfig0, (Object) "Z8K.nLIsEV&");
      BitSet bitSet0 = new BitSet();
      Locale locale0 = Locale.US;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) locale0, (Object) bitSet0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "$");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Class<Double> class0 = Double.TYPE;
      defaultJSONParser0.handleResovleTask(dateFormatSymbols0);
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"}");
      Vector<JavaBeanDeserializer> vector0 = new Stack<JavaBeanDeserializer>();
      Point point0 = new Point();
      defaultJSONParser0.parseObject((Object) vector0);
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertFalse(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$ef:\".i\"}");
      defaultJSONParser0.parseObject((Object) "{$ef:\".i\"}");
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      int[] intArray0 = new int[0];
      javaBeanDeserializer0.smartMatch("$", intArray0);
      javaBeanDeserializer0.createInstance(defaultJSONParser0, (Type) class0);
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 3311);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(pushbackReader0, 805);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(javaBeanDeserializer0, jSONReaderScanner0, parserConfig0);
      defaultJSONParser1.getFieldTypeResolver();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) bufferedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 2604);
      ClassLoader.getSystemClassLoader();
      Hashtable<Feature, Object> hashtable0 = new Hashtable<Feature, Object>();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ", parserConfig0, 10);
      IdentityHashMap<JSONReaderScanner, ChronoLocalDate> identityHashMap0 = new IdentityHashMap<JSONReaderScanner, ChronoLocalDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$ef:\".i\"w}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, position at 0, name $ef
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"}");
      Point point0 = new Point();
      Class<Properties> class0 = Properties.class;
      Properties properties0 = defaultJSONParser0.parseObject(class0);
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",u^\" ~R_vGg(A\"f?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ObjectArrayCodec objectArrayCodec0 = ObjectArrayCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(mockHijrahDate0, jSONScanner0, parserConfig0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "Z:-iJdURA&<G66xh3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,u^\" ~R_vGg(A\"f?
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TreeSet<ParameterizedTypeImpl> treeSet0 = new TreeSet<ParameterizedTypeImpl>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z8K.nLIsJEV&");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Z8K.nLIsJEV&
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?<$~?");
      Hashtable<Feature, Object> hashtable0 = new Hashtable<Feature, Object>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser0.getExtraTypeProviders();
      Feature feature0 = Feature.CustomMapDeserializer;
      defaultJSONParser0.config(feature0, true);
      defaultJSONParser1.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "java/lang/Long");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : ?<$~?
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z8K.nLIsEV&", parserConfig0, 2357);
      defaultJSONParser0.getContext();
      defaultJSONParser0.setContext((ParseContext) null, (Object) parserConfig0, (Object) "Z8K.nLIsEV&");
      Locale locale0 = Locale.US;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "$");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Class<Double> class0 = Double.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JSON.parseArray("", class0);
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(defaultJSONParser0, (List) null, 0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(dateFormatSymbols0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z8K.nLIsEV&", parserConfig0, 2357);
      defaultJSONParser0.getContext();
      defaultJSONParser0.setContext((ParseContext) null, (Object) parserConfig0, (Object) "Z8K.nLIsEV&");
      BitSet bitSet0 = new BitSet();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, bitSet0, bitSet0);
      Locale locale0 = Locale.US;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) locale0, (Object) bitSet0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "$");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Class<Double> class1 = Double.class;
      JSON.parseArray("", class1);
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(defaultJSONParser0, (List) null, 0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(dateFormatSymbols0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$re\":\"..\"}");
      Stack<JavaBeanDeserializer> stack0 = new Stack<JavaBeanDeserializer>();
      Point point0 = new Point();
      LinkedHashMap<HttpCookie, DefaultJSONParser.ResolveTask> linkedHashMap0 = new LinkedHashMap<HttpCookie, DefaultJSONParser.ResolveTask>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",u^\" ~R_vGg(A\"f?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ObjectArrayCodec objectArrayCodec0 = ObjectArrayCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(mockHijrahDate0, jSONScanner0, parserConfig0);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      Point point0 = new Point();
      Object object0 = new Object();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ^, info : pos 2, json : ,u^\" ~R_vGg(A\"f?
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T<`by*c9K<X[\"g#");
      Class<Feature> class1 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : T<`by*c9K<X[\"g#
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$ref", 454);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      String string0 = null;
      defaultJSONParser0.resolveReference((String) null);
      // Undeclared exception!
      try { 
        JSON.parseObject("NM z(izPW]\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : NM z(izPW]\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(<,5LP.+");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("(<,5LP.+", parserConfig0, 2);
      // Undeclared exception!
      try { 
        defaultJSONParser2.parse((Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (<,5LP.+
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"}");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"}");
      Stack<JavaBeanDeserializer> stack0 = new Stack<JavaBeanDeserializer>();
      Point point0 = new Point();
      defaultJSONParser0.parseObject((Object) stack0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.acceptType("56p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"}");
      Stack<JavaBeanDeserializer> stack0 = new Stack<JavaBeanDeserializer>();
      Point point0 = new Point();
      TreeMap<Timestamp, MessageFormat> treeMap0 = new TreeMap<Timestamp, MessageFormat>();
      defaultJSONParser0.parseObject((Map) treeMap0);
      defaultJSONParser0.getContext();
      defaultJSONParser0.getObject("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("{\"$ref\":\"..\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : {\"$ref\":\"..\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ul");
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) "ul", (Object) "null");
      defaultJSONParser0.setContext(parseContext0);
      defaultJSONParser0.resolveReference("null");
      System.setCurrentTimeMillis((-268L));
      Object object0 = defaultJSONParser0.getObject("ul");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject((String) null);
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("password", parserConfig0, 44);
      defaultJSONParser0.close();
      defaultJSONParser0.setResolveStatus(44);
      assertEquals(44, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("pos ", 434);
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.config(feature0, true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.resolveReference((String) null);
      JSON.parseObject("{\"$ref\":\"@\"}");
      TreeMap<Timestamp, MessageFormat> treeMap0 = new TreeMap<Timestamp, MessageFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : pos 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'AH&dZwW3+9}u'xo1";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'AH&dZwW3+9}u'xo1");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 14, json : 'AH&dZwW3+9}u'xo1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"..\"}");
      Point point0 = new Point();
      TreeMap<Timestamp, MessageFormat> treeMap0 = new TreeMap<Timestamp, MessageFormat>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(treeMap0, defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 7, json : {\"$ref\":\"..\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6VHa~?");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser((Object) null, defaultJSONParser0.lexer, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser1.context;
      Insets insets0 = new Insets(19, 1654, (-3278), 547);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(2772, 2, 22, 2772, 3.0, 22, 2, 15, insets0, (-237), (-3278));
      ParseContext parseContext1 = defaultJSONParser0.setContext((ParseContext) null, (Object) gridBagConstraints0, (Object) insets0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      defaultJSONParser0.setContext(parseContext1, (Object) mockGregorianCalendar0, (Object) "6VHa~?");
      defaultJSONParser0.popContext();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Short> class0 = Short.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")C*CC*5");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("bk-4ls@<Wk");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )C*CC*5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null");
      JSON.DEFFAULT_DATE_FORMAT = "cT<U=.";
      defaultJSONParser0.parse((Object) "null");
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*\"4tl|Lp9l$g;a*]B");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getDateFormat();
      Feature feature0 = Feature.UseObjectArray;
      defaultJSONParser0.isEnabled(feature0);
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("..");
      JSONObject jSONObject0 = new JSONObject();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONObject0, defaultJSONParser0.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : ..
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{#re\":\"..\"}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : #pos 1, json : {#re\":\"..\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "{$re\":\"..\"}";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$re\":\"..\"}");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) pipedInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$re\":\"..\"}");
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{$re\":\"..\"}", parserConfig0, 44);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[", parserConfig0, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}-H]+!GzNT 6#*G");
      ArrayDeque<MockThaiBuddhistDate> arrayDeque0 = new ArrayDeque<MockThaiBuddhistDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }-H]+!GzNT 6#*G
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "[";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "[";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]xArTOSDuUOZevK'6", parserConfig0, 52);
      defaultJSONParser0.setConfig(parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]xArTOSDuUOZevK'6
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      Class<Boolean> class0 = Boolean.TYPE;
      LinkedHashSet<MockSimpleDateFormat> linkedHashSet0 = new LinkedHashSet<MockSimpleDateFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "[";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      Type[] typeArray0 = new Type[0];
      Class<Long> class0 = Long.TYPE;
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$ef:\".i\"}");
      Class<Byte> class0 = Byte.TYPE;
      defaultJSONParser0.parseObject((Type) class0, (Object) class0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) timeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : {$ef:\".i\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      BitSet bitSet0 = new BitSet();
      Insets insets0 = new Insets(2, 1000, 8192, 48);
      defaultJSONParser0.getContext();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) mockThaiBuddhistDate0, (Object) mockHijrahDate0);
      Integer integer0 = new Integer(3592);
      ParseContext parseContext1 = new ParseContext(parseContext0, defaultJSONParser0, integer0);
      Locale locale0 = Locale.US;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      Point point0 = new Point();
      DecimalFormat decimalFormat0 = new DecimalFormat("[");
      defaultJSONParser0.setContext(parseContext0, (Object) point0, (Object) decimalFormat0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Class<Double> class0 = Double.class;
      JSON.parseArray("", class0);
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(defaultJSONParser0, (List) null, (-76));
      defaultJSONParser0.handleResovleTask(bitSet0);
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("new Date(", parserConfig0, 12);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig((ASMDeserializerFactory) null);
      HttpCookie httpCookie0 = new HttpCookie("ul", "new Date(");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect int, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("new Date(", parserConfig0, 12);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      HttpCookie httpCookie0 = new HttpCookie("ul", "new Date(");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect int, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$ef:\".i\"}");
      Class<Properties> class0 = Properties.class;
      Properties properties0 = defaultJSONParser0.parseObject(class0);
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$ef:\".i\"}");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      Double double0 = new Double(1.0);
      Object object0 = defaultJSONParser0.parse(propertyProcessable0, (Object) double0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$ef:\".i\"}");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn(parameterizedTypeImpl0).when(propertyProcessable0).getType(anyString());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but string, pos 9, json : {$ef:\".i\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ul");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraTypeProviders();
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{6)u3Gm)(");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {6)u3Gm)(
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{\"$ref\":\"..\"}", (-1826));
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Object object0 = defaultJSONParser0.parse(propertyProcessable0, (Object) throwableDeserializer0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0[ncq0/p^b");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 1, json : 0[ncq0/p^b
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$ef:\".i\"}");
      Dimension dimension0 = new Dimension();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) dimension0, (Object) "{$ef:\".i\"}");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Insets insets0 = new Insets(2, 2, 8, 2387);
      defaultJSONParser0.setContext(parseContext0, (Object) insets0, (Object) null);
      defaultJSONParser0.resolveReference("{$ef:\".i\"}");
      defaultJSONParser0.parseKey();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : {$ef:\".i\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      Type[] typeArray0 = new Type[1];
      Class<Short> class0 = Short.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO : com.alibaba.fastjson.util.ParameterizedTypeImpl@74df
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{$ef:\".i\"}");
      Dimension dimension0 = new Dimension();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) dimension0, (Object) "{$ef:\".i\"}");
      assertNotNull(parseContext0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{$ef:\".i\"}");
      JSONObject jSONObject0 = (JSONObject)defaultJSONParser0.parseKey();
      assertFalse(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":l[J2u2Y4/OF<)=X8");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :l[J2u2Y4/OF<)=X8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[");
      Type[] typeArray0 = new Type[4];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z8K.nLIsEV&", parserConfig0, 2357);
      defaultJSONParser0.getContext();
      defaultJSONParser0.setContext((ParseContext) null, (Object) parserConfig0, (Object) "Z8K.nLIsEV&");
      BitSet bitSet0 = new BitSet();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, bitSet0, bitSet0);
      Locale locale0 = Locale.US;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) locale0, (Object) bitSet0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "$");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      Class<Double> class0 = Double.class;
      JSON.parseArray("", class0);
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(defaultJSONParser0, (List) null, 0);
      defaultJSONParser_ResolveTask0.fieldDeserializer = (FieldDeserializer) resolveFieldDeserializer0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer", e);
      }
  }
}
