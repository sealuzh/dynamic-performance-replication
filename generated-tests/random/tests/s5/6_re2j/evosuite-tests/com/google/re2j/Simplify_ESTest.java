/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 14:09:45 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = (-4884);
      regexp0.max = (-4884);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.cap = (-2609);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.min = 0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.toString();
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.flags = 3198;
      regexp0.op = regexp_Op0;
      regexp2.min = 0;
      Regexp regexp3 = Simplify.simplify(regexp2);
      Simplify.simplify(regexp3);
      Regexp regexp4 = Simplify.simplify(regexp0);
      assertSame(regexp0, regexp4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.toString();
      Simplify.simplify(regexp2);
      Regexp regexp3 = Simplify.simplify(regexp1);
      Regexp regexp4 = null;
      Simplify.simplify((Regexp) null);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp1.op = regexp_Op1;
      Simplify.simplify((Regexp) null);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "8V|8tSEH?";
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1830);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp1;
      Regexp regexp4 = Simplify.simplify(regexp0);
      regexpArray0[7] = regexp4;
      Regexp regexp5 = new Regexp(regexp0);
      regexpArray0[8] = regexp5;
      regexp1.subs = regexpArray0;
      intArray0[1] = 7;
      intArray0[2] = 1181;
      intArray0[3] = 7;
      intArray0[4] = (-3162);
      intArray0[5] = 1;
      intArray0[6] = (-2407);
      intArray0[7] = 0;
      regexp0.runes = intArray0;
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Regexp regexp6 = Simplify.simplify(regexp2);
      assertSame(regexp2, regexp6);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      int int0 = 483;
      regexp0.min = 483;
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.name = "com.google.re2j.Simplify";
      Regexp regexp3 = Simplify.simplify(regexp2);
      regexp1.toString();
      int int1 = 7;
      regexp3.flags = 7;
      int int2 = 115;
      regexp2.name = "5MMnyxyw`^Mh+";
      regexp2.cap = 115;
      regexp2.reinit();
      regexp3.equals("5MMnyxyw`^Mh+");
      regexp3.name = "5MMnyxyw`^Mh+";
      Regexp regexp4 = Simplify.simplify(regexp3);
      Simplify.simplify(regexp3);
      Simplify.simplify(regexp3);
      regexp3.op = regexp_Op0;
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp1);
      Regexp regexp5 = Simplify.simplify(regexp4);
      Simplify.simplify(regexp5);
      Simplify.simplify(regexp3);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.max = (-4884);
      Regexp regexp1 = Simplify.simplify(regexp0);
      int[] intArray0 = new int[9];
      regexp1.name = "(?s:.)";
      intArray0[0] = (-4884);
      intArray0[1] = (-4884);
      intArray0[2] = (-4884);
      regexp0.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[0] = regexp2;
      regexp1.min = (-661);
      regexp1.subs = regexpArray0;
      intArray0[3] = (-587);
      intArray0[4] = (-4884);
      intArray0[5] = (-4884);
      intArray0[6] = (-4884);
      regexp2.equals(regexp_Op0);
      intArray0[7] = (-4884);
      intArray0[8] = (-4884);
      regexp1.runes = intArray0;
      Regexp regexp3 = Simplify.simplify(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp3);
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      regexp4.op = regexp_Op1;
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp2);
      Regexp regexp5 = Simplify.simplify(regexp3);
      assertSame(regexp5, regexp3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      Regexp regexp3 = Simplify.simplify(regexp0);
      regexpArray0[3] = regexp3;
      regexp0.subs = regexpArray0;
      regexp0.flags = (-1808);
      regexp0.runes = null;
      Regexp regexp4 = new Regexp(regexp0);
      regexp4.reinit();
      regexp4.name = "H:";
      regexp0.cap = 65112;
      Regexp regexp5 = Simplify.simplify(regexp4);
      Simplify.simplify(regexp4);
      Regexp[] regexpArray1 = new Regexp[2];
      regexp5.subs = regexpArray1;
      Regexp regexp6 = Simplify.simplify(regexp0);
      regexpArray1[0] = regexp6;
      regexp6.op = regexp_Op0;
      regexp5.name = "H:";
      regexp6.cap = 65112;
      regexpArray1[1] = regexp0;
      regexp5.subs = regexpArray1;
      Regexp regexp7 = Simplify.simplify(regexp5);
      Regexp regexp8 = Simplify.simplify(regexp5);
      Regexp regexp9 = Simplify.simplify(regexp0);
      regexp9.cap = (-1808);
      Regexp regexp10 = Simplify.simplify(regexp9);
      Regexp regexp11 = Simplify.simplify(regexp10);
      Regexp.Op regexp_Op2 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp12 = new Regexp(regexp_Op2);
      regexp12.equals("H:");
      regexp10.subs = regexp5.subs;
      regexp10.equals(regexp12);
      Simplify.simplify(regexp6);
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp11);
      Regexp regexp13 = Simplify.simplify(regexp7);
      assertSame(regexp13, regexp8);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp2);
      regexp1.toString();
      regexp2.cap = 3;
      regexp3.min = 1950;
      Simplify.simplify(regexp3);
      Simplify.simplify(regexp3);
      Regexp regexp4 = Simplify.simplify(regexp2);
      Simplify.simplify(regexp1);
      regexp4.equals("(?s:.)");
      Simplify.simplify(regexp4);
      Regexp regexp5 = Simplify.simplify(regexp4);
      Simplify.simplify(regexp5);
      Regexp regexp6 = Simplify.simplify(regexp3);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp6.op = regexp_Op1;
      regexp6.max = 1725;
      Regexp regexp7 = Simplify.simplify(regexp6);
      Simplify.simplify(regexp1);
      Regexp regexp8 = Simplify.simplify(regexp5);
      assertSame(regexp2, regexp7);
      
      Regexp regexp9 = Simplify.simplify(regexp0);
      assertNotSame(regexp9, regexp8);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Simplify.simplify(regexp0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertSame(regexp0, regexp1);
  }
}
