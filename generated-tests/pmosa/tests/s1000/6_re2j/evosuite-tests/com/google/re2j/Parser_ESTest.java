/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:59:51 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("?<", (-3267));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      Parser parser0 = new Parser("t4", 0);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("Eo", 0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("#HZKnUx==`O/vI", 0);
      regexpArray0[1] = regexp1;
      regexp1.toString();
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 0, 0);
      Parser.subarray(regexpArray0, 0, 0);
      regexp1.name = "Eo";
      Parser.parse("", 0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-101), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -101
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse(")Y1%j<(4+%&O<y", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("|+$0G", (-887));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Parser.parse("pz", 0);
      String string0 = "4\\K=dh8h&sTbWe!k";
      int int0 = 696;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\K`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Parser.parse("\\", 2589);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse(" (?P<", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Parser.parse("o(", 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `o(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Parser.parse("(P", 3168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      Regexp regexp0 = Parser.parse("", 0);
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[3];
      regexp0.reinit();
      int int1 = 2149;
      regexp0.min = 2149;
      regexpArray0[0] = regexp0;
      String string0 = regexp0.toString();
      regexpArray0[1] = regexp0;
      regexp0.min = 0;
      regexpArray0[2] = regexp0;
      int int2 = 0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 0, 0);
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, 0, 0);
      Parser.parse("wR-cLA@em", 0);
      String string1 = "";
      Parser parser0 = new Parser(string1, int2);
      String string2 = "\\d";
      Parser.parse(string2, int1);
      Parser.parse(string0, int1);
      int int3 = 85;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray2, int0, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", 81);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 2149);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 2377;
      try { 
        Parser.parse("+:jgB", 2377);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "";
      int int0 = (-1220);
      Parser parser0 = new Parser("", (-1220));
      Parser.parse("", 0);
      String string1 = "";
      Parser.parse("", (-436));
      int int1 = 0;
      try { 
        Parser.parse("[~<]F)mXv7", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^u", 1685);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]", 4911);
      Regexp regexp1 = Parser.parse("[:]", 10216);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 2400);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Parser.parse("[:P{", 69632);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:P{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Parser.parse("[]", 5788);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v|~", 156);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 17);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "K:$:i'3Q(\"w!= ,|l";
      int int0 = (-1600);
      try { 
        Parser.parse("K:$:i'3Q(\"w!= ,|l", (-1600));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `K:$:i'3Q(\"w!= ,|l`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v|", 120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "(";
      try { 
        Parser.parse("(", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Ul|t", 545);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|~", 43704);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "Any";
      int int0 = 85;
      Regexp regexp0 = Parser.parse("Any", 85);
      Parser parser0 = new Parser("Any", 85);
      Parser.parse("Any", 85);
      Parser.parse("Any", 85);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      int int1 = (-349);
      Regexp regexp1 = Parser.parse("Any", (-349));
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp2 = Parser.parse("|", 0);
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp1.max = 85;
      int int2 = (-1688);
      regexp2.cap = (-1084);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, (-1688));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Parser.parse("Y(?(?-m!:$)", 9177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        Parser.parse(" (?P<", 965);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "GnS~%D,73T";
      int int0 = 0;
      Parser parser0 = new Parser("GnS~%D,73T", 0);
      try { 
        Parser.parse("+qwX", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser.parse(".A", 2365);
      String string0 = "";
      int int0 = 12;
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      String string0 = "yYfc._z~0-V'FP(";
      int int0 = (-255);
      try { 
        Parser.parse("yYfc._z~0-V'FP(", (-255));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `yYfc._z~0-V'FP(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Parser.parse("!F#9X7z#C:[l;R2z", 1169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[l;R2z`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 64;
      Parser.parse("Px7&g7xm,", (-3844));
      String string0 = "GlZq7#";
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 97);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "(hvGD=TT5g[toe7($";
      int int0 = 0;
      Parser parser0 = new Parser("(hvGD=TT5g[toe7($", 0);
      try { 
        Parser.parse("=#;5<[3m", (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[3m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = (-1428);
      Parser.parse("p", (-1428));
      String string0 = "Diacritic";
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        Parser.parse("{)y9fN#Bt.", 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("k _*Q5#{+Q66gC", (-941));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("", 115);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("7N|", 0);
      regexpArray0[2] = regexp3;
      int int0 = (-121);
      Regexp regexp4 = Parser.parse("", (-121));
      regexpArray0[3] = regexp4;
      int int1 = 0;
      Regexp regexp5 = Parser.parse("", 0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("", 3);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("", 0);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = Parser.parse("", 115);
      regexpArray0[7] = regexp8;
      try { 
        Parser.parse("WmTO2[9mV#", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[9mV#`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 2045;
      Regexp regexp0 = Parser.parse("gjyl:Ai8]M_?&", 2045);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      String string0 = "6bp/gH|@3{q~y~I";
      Regexp regexp1 = Parser.parse(string0, int0);
      int int1 = 0;
      regexp0.max = int1;
      int int2 = 1025;
      regexp1.min = int2;
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      regexp0.op = regexp_Op0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int3 = (-1439);
      int int4 = 2698;
      regexp0.max = int4;
      regexp1.flags = int4;
      regexp1.toString();
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1439
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 0);
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[3];
      regexp0.reinit();
      regexp0.min = 2149;
      regexpArray0[0] = regexp0;
      regexp0.toString();
      Parser.parse("", (-1211));
      Parser.parse("bl", 2149);
      int int0 = 0;
      Parser.parse("[:h:]", (-1211));
      int int1 = 1039;
      Parser.parse("com.google.re2j.Parser$1", 1039);
      Parser.parse("H;\"\bF*\u0003yp^|G0`lP", 2149);
      int int2 = 2611;
      String string0 = "Lepcha";
      Parser.parse(string0, int0);
      Regexp[] regexpArray1 = null;
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, int2, int2);
      int int3 = 2002;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray2, int3, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0001E", 925);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007#`etnxL", (-1104));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Parser.parse("[^x00-x{10FFFF}]", (-71));
      Parser parser0 = new Parser("no~#e`@", 65535);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp0);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("^x00-x{10FFFF}", 577);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp6);
      regexpArray0[7] = regexp7;
      String string0 = "65nC&{";
      Regexp regexp8 = Parser.parse("65nC&{", 577);
      regexpArray0[8] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 52, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "\\x{";
      int int0 = 0;
      Parser.parse("x{", 0);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x7&g7xm,", (-1235));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp[] regexpArray0 = null;
      String string0 = "ON8=<!p6";
      int int0 = 121;
      Parser.parse("ON8=<!p6", 121);
      Parser.parse("P3m", 121);
      String string1 = "L!lmOB^d";
      int int1 = 1844;
      Parser.parse(string1, int1);
      int int2 = 787;
      int int3 = 69631;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Parser parser0 = new Parser("", 0);
      Regexp regexp0 = Parser.parse("d", 2149);
      Regexp regexp1 = Parser.parse("invalid repeat count", 44);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("k _*Q5#{+Q66gC", (-941));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("", 115);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("k _*Q5#{+Q66gC", 0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("k _*Q5#{+Q66gC", (-121));
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("", 0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("", 3);
      regexpArray0[5] = regexp6;
      Parser parser0 = new Parser("k _*Q5#{+Q66gC", (-121));
      Parser.parse("", 0);
      Parser parser1 = new Parser("Ig", 46);
      Regexp regexp7 = Parser.parse("k _*Q5#{+Q66gC", (-941));
      assertTrue(regexp7.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-|.3", 473);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 379, 8248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 379
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = new Parser((String) null, (-1235));
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("t}QaE]yP;gihmcc1<'", (-1235));
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("cA |DA0aB^{", (-1235));
      regexpArray0[3] = regexp3;
      int int0 = 45;
      try { 
        Parser.parse("(?-s:.)", 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser.subarray((Regexp[]) null, (-1235), (-1235));
      Parser parser0 = new Parser("[:g", (-1235));
      try { 
        Parser.parse("F[", (-1235));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-1428);
      Parser parser0 = new Parser("p", (-1428));
      Regexp regexp0 = Parser.parse("p", (-1428));
      String string0 = "invalid repeat count";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 2147483645;
      Parser.parse("pz", 2147483645);
      String string0 = "invalid character class";
      Parser.parse(string0, int0);
      String string1 = "[:~<]F)mXv7";
      int int1 = 32;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 2147483645;
      Parser.parse("pz", 2147483645);
      String string0 = "invalid character class";
      Regexp regexp0 = Parser.parse(string0, int0);
      int int1 = (-1016);
      Regexp regexp1 = Parser.parse(string0, int1);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser.parse("aE", 0);
      Regexp regexp0 = Parser.parse("aE", 0);
      Regexp regexp1 = Parser.parse("4K=dh8h&sTbWe!k", 696);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Parser.parse("(?DP", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?D`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser.parse("(?-s:.)", 64);
      Parser parser0 = new Parser("+:jgB", 16);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", (-2228));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Parser.parse("(?", 2377);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        Parser.parse("(?-:)", (-1704));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Parser.parse("(?-<|:.", 9836);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Pph:]", 2147483645);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      String string0 = "(?:";
      int int0 = (-1670);
      Regexp regexp2 = Parser.parse(string0, int0);
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      int int1 = 963;
      int int2 = 668;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = new Parser("Tai_Viet", (-1428));
      Parser.parse("[:h:]", 3160);
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 5563);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        Parser.parse("-[uX@-43<b|]VF]^Rc%", 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `@-4`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^*00-4x{10FFF`M]", (-1283));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Parser.parse("[:<]F)mXv7", 94);
      try { 
        Parser.parse("{~*|Z|.07s(&*8hBat5", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `{~*|Z|.07s(&*8hBat5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = new Parser("", 0);
      Parser.parse("rWWS4Dt| +iCC", 45);
      Regexp regexp0 = Parser.parse("|#", 2149);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-3403), 2149);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3403
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Parser.parse(".A", 2377);
      Parser parser0 = new Parser("x7", 12);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser.parse("W", 64);
      Parser parser0 = new Parser("1tYy5M^x6l\"aHFx#v}", 64);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        Parser.parse("(;Ha[PP{", (-351));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[PP{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Parser parser0 = new Parser("[::]", 370);
      Regexp regexp0 = Parser.parse("[::]", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = (-554);
      Parser.parse("[:<]F)mXv7", (-554));
      int int1 = (-971);
      int int2 = 1493;
      Parser parser0 = new Parser("[:<]F)mXv7", 1493);
      Parser.parse("invalid repeat count", 3661);
      Parser.parse("\u0003", (-971));
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -554
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("<~Zo{BW:;J+", (-1696));
      Regexp regexp1 = Parser.parse("V9a]", (-1696));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "|";
      int int0 = 64;
      String string1 = "8WH[\\x-r~sH6gbK?q";
      try { 
        Parser.parse("8WH[x-r~sH6gbK?q", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `x-r`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("b<QQdw~7r(}U:h)}dN", 49);
      Regexp regexp1 = Parser.parse("[:wB{TFAKb.", 1211);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-1428);
      Parser.parse("H;\"\bF*\u0003&p^|j0`lP", (-1428));
      String string0 = "Uiq";
      Parser.parse(string0, int0);
      Parser.parse(string0, int0);
      String string1 = "[:h:]";
      int int1 = (-4605);
      Parser parser0 = new Parser(string1, int1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Parser.parse("b~ /ev", 76);
      Parser parser0 = new Parser("b~ /ev", 76);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Parser parser0 = new Parser("DD|s\"clcLjjQ", 118);
      Parser.parse("[::TFAKb.", 118);
      Regexp regexp0 = Parser.parse("", 118);
      Regexp regexp1 = Parser.parse("DD|s\"clcLjjQ", 92);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexp0.max = 92;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 383, 118);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp regexp0 = Parser.parse("rVH{6T", 809);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{1", (-351));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Parser.parse("W{0(?V:)", 624);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?V`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser.parse("B", 77);
      Parser parser0 = new Parser("G+DM.{$", 77);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("]&Epu0d\r{", 48);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Parser parser0 = new Parser("4}Va.=:ZaJ%>[K", (-2088));
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("(?-m:$)", (-2088));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-2088));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "\\0";
      Regexp regexp0 = Parser.parse("\u0000", (-1124));
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexp0.equals("\u0000");
      regexp0.name = "(?V:";
      regexpArray0[1] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1184), (-1124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1184
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("hZ;M6ntmnu.", 2212);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^\u0019", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Q>o32$KGa+\t8z|I", (-116));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("e <t{85?gw", 2204);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("M>O} {aE\"wL!|mR}{PZ", 97);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("r|RS*6ApEg", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\"Y91{66>xu{;Ea*ia~W", 96);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      int int0 = 85;
      try { 
        Parser.parse("(?i:", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\f", (-4839));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("hz\u0001US", (-867));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PPP{", (-311));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse("6|aEKWUG4}j49{$\n", (-1639));
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[7] = regexp1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-1639), (-1639));
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      regexp1.reinit();
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      int int0 = 1832;
      Regexp regexp5 = Parser.parse("qK{7,Yz<U?}GF.", 1832);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = null;
      try {
        regexp6 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Regexp regexp0 = Parser.parse("qK{7,Yz<U?}GF.", 544);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z!'?D[X]@ru:C", (-299));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("qK{7,9Yz<U?}GN.", 52);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Parser.parse("-*kx@\u0004~Y", 3012);
      String string0 = "CXM";
      int int0 = 550;
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP{", (-528));
      Regexp regexp1 = Parser.parse("PP{", (-528));
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = (-311);
      try { 
        Parser.parse("Ul`[U5^$>|\u0000z><zP", (-311));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[U5^$>|\u0000z><zP`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP\u0002", (-528));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Parser.parse("[[:", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Parser.parse("[[:", (-311));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Parser.parse("_vQ?0!;h$m?(&[f*J", (-1548));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[f*J`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser parser0 = new Parser("z", (-5031));
      Regexp regexp0 = Parser.parse("z", (-5031));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "yh:=0K";
      int int0 = 2852;
      Regexp regexp0 = Parser.parse("yh:=0K", 2852);
      regexpArray0[0] = regexp0;
      int int1 = 44;
      try { 
        Parser.parse("[Pdlt@Y?lKC'|W4hwO-", 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Pdlt@Y?lKC'|W4hwO-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("r|RS5*6ApEg", 52);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("com.google.re2j.Parser$Stack", 52);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("r|RS5*6ApEg", (-1335));
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp3);
      regexpArray0[4] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 11801, 523);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Parser.parse("[-Q<VK;%tOC#ieLLZm!", 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-Q<VK;%tOC#ieLLZm!`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Parser.parse("1[-OJ", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-OJ`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Parser.parse("[-Q<VK;%tOC#ieLLZm!", 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-Q<VK;%tOC#ieLLZm!`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Regexp regexp0 = Parser.parse("@|!|&te9}", 121);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp regexp1 = Parser.parse("@|!|&te9}", 121);
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 6970, 121);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Regexp regexp0 = Parser.parse("r|RS*6ApEg", 373);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      int int0 = 2081;
      Regexp regexp0 = Parser.parse("eH-q_/.O'=\u0006@QL%i,x", 2081);
      regexpArray0[0] = regexp0;
      String string0 = "[:c<";
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:c<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser.parse("pLLZm!", 9177);
      Parser parser0 = new Parser("Dv5SZmxEJ,`=$'m?|", 41);
  }
}
