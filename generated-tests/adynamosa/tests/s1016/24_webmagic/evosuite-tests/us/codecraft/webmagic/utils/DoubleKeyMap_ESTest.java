/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 23:45:41 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>>();
      HashMap<HashMap<Object, String>, Integer> hashMap0 = new HashMap<HashMap<Object, String>, Integer>();
      Integer integer0 = new Integer((-1977));
      doubleKeyMap0.put((Map<HashMap<Object, String>, Integer>) hashMap0, (Object) integer0, (Map<HashMap<Object, String>, Integer>) hashMap0);
      HashMap<HashMap<Object, String>, Integer> hashMap1 = new HashMap<HashMap<Object, String>, Integer>();
      Map<HashMap<Object, String>, Integer> map0 = doubleKeyMap0.remove((Map<HashMap<Object, String>, Integer>) hashMap1, (Object) integer0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.put(integer0, integer0, (Object) null);
      Object object0 = doubleKeyMap0.get(integer0, integer1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<String, Map<HashMap<Object, String>, Integer>>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<String, Map<HashMap<Object, String>, Integer>>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Map<String, Map<HashMap<Object, String>, Integer>> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, String, Map<HashMap<Object, String>, Integer>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, String, Map<HashMap<Object, String>, Integer>>(hashMap0, class0);
      Map<String, Map<HashMap<Object, String>, Integer>> map1 = doubleKeyMap1.remove(hashMap1);
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<String, Object>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<String, Object>>();
      DoubleKeyMap<HashMap<Object, Object>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, Object>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      doubleKeyMap0.put(hashMap1, "", (Object) hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.remove(hashMap1);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>>();
      HashMap<HashMap<Object, String>, Integer> hashMap0 = new HashMap<HashMap<Object, String>, Integer>();
      Map<HashMap<Object, String>, Integer> map0 = doubleKeyMap0.remove((Map<HashMap<Object, String>, Integer>) hashMap0, (Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>>();
      HashMap<HashMap<Object, String>, Integer> hashMap0 = new HashMap<HashMap<Object, String>, Integer>();
      Map<HashMap<Object, String>, Integer> map0 = doubleKeyMap0.remove((Map<HashMap<Object, String>, Integer>) hashMap0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Map<HashMap<Object, String>, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<HashMap<Object, String>, Integer>, Object>();
      Object object0 = new Object();
      HashMap<HashMap<Object, String>, Integer> hashMap0 = new HashMap<HashMap<Object, String>, Integer>();
      Object object1 = doubleKeyMap0.remove(object0, (Map<HashMap<Object, String>, Integer>) hashMap0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Map<HashMap<Object, String>, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Map<HashMap<Object, String>, Integer>, Object>();
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      Map<String, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.put(object0, (Object) null, (Object) doubleKeyMap0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.get((Object) integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Map<Integer, Object>> hashMap0 = new HashMap<Integer, Map<Integer, Object>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(1958);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, Object>(class0);
      Map<HashMap<Object, String>, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Map<Object, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Map<HashMap<Map<HashMap<Object, String>, Integer>, String>, Map<Object, Object>>>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Map<HashMap<Map<HashMap<Object, String>, Integer>, String>, Map<Object, Object>>>, Integer>();
      Map<String, Map<HashMap<Map<HashMap<Object, String>, Integer>, String>, Map<Object, Object>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Map<HashMap<Object, String>, Integer>, String>, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Map<HashMap<Object, String>, Integer>, String>, Map<Object, Object>>(map0, class0);
      HashMap<Map<HashMap<Object, String>, Integer>, String> hashMap0 = new HashMap<Map<HashMap<Object, String>, Integer>, String>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null);
      Map<Object, Object> map1 = doubleKeyMap2.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((String) null, hashMap0, map1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>>();
      HashMap<HashMap<Object, String>, Integer> hashMap0 = new HashMap<HashMap<Object, String>, Integer>();
      Integer integer0 = new Integer((-1977));
      doubleKeyMap0.put((Map<HashMap<Object, String>, Integer>) hashMap0, (Object) integer0, (Map<HashMap<Object, String>, Integer>) hashMap0);
      Map<HashMap<Object, String>, Integer> map0 = doubleKeyMap0.remove((Map<HashMap<Object, String>, Integer>) hashMap0, (Object) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Map<HashMap<Object, String>, Integer>>, Map<Map<HashMap<Object, String>, Integer>, Map<Object, String>>, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<HashMap<Object, String>, Integer>>, Map<Map<HashMap<Object, String>, Integer>, Map<Object, String>>, HashMap<Object, String>>();
      Map<Map<HashMap<Object, String>, Integer>, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, String>(map0);
      String string0 = doubleKeyMap1.remove((Map<HashMap<Object, String>, Integer>) null, (Object) "ClS,;L&.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, String>, Integer>, Object, Map<HashMap<Object, String>, Integer>>();
      HashMap<HashMap<Object, String>, Integer> hashMap0 = new HashMap<HashMap<Object, String>, Integer>();
      doubleKeyMap0.put((Map<HashMap<Object, String>, Integer>) hashMap0, (Object) hashMap0, (Map<HashMap<Object, String>, Integer>) hashMap0);
      Map<HashMap<Object, String>, Integer> map0 = doubleKeyMap0.put((Map<HashMap<Object, String>, Integer>) hashMap0, (Object) hashMap0, (Map<HashMap<Object, String>, Integer>) hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, Integer>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Integer>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<String, Object>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<String, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Object>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Object object0 = new Object();
      doubleKeyMap0.put(hashMap1, object0, object0);
      doubleKeyMap0.get(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }
}
