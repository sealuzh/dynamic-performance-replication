/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:21:49 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.HashingSource;
import okio.Sink;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("E");
      MockIOException mockIOException1 = new MockIOException("bytes is empty", mockIOException0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("E", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockIOException1;
      objectArray0[1] = (Object) mockIOException0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[4] = (Object) mockIOException1;
      objectArray0[5] = (Object) "bytes is empty";
      objectArray0[6] = (Object) mockFileWriter0;
      objectArray0[7] = (Object) "E";
      PrintWriter printWriter0 = mockPrintWriter0.format("bytes is empty", objectArray0);
      mockIOException1.printStackTrace(printWriter0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.enter();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.timedOut();
      asyncTimeout0.exit();
      AsyncTimeout.head.exit(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = null;
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.deadlineNanoTime((-1428L));
      asyncTimeout0.clearTimeout();
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.exit();
      asyncTimeout0.exit(true);
      asyncTimeout0.exit();
      asyncTimeout0.exit(false);
      asyncTimeout0.exit();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.deadlineNanoTime((-1428L));
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      asyncTimeout0.enter();
      try { 
        asyncTimeout1.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = null;
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.deadlineNanoTime((-1428L));
      asyncTimeout0.clearTimeout();
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.exit();
      asyncTimeout0.exit(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      asyncTimeout0.exit(true);
      asyncTimeout0.exit();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.timedOut();
      asyncTimeout0.exit();
      AsyncTimeout.head.exit(false);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      BufferedSink bufferedSink0 = buffer1.emit();
      asyncTimeout0.sink(bufferedSink0);
      AsyncTimeout.head.throwIfReached();
      asyncTimeout0.enter();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.timedOut();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      AsyncTimeout.head.deadline(2888L, timeUnit0);
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.exit();
      AsyncTimeout.head.exit(true);
      AsyncTimeout.head.throwIfReached();
      asyncTimeout0.enter();
      IOException iOException1 = asyncTimeout0.exit(iOException0);
      AsyncTimeout.head.exit(iOException1);
      asyncTimeout0.throwIfReached();
      AsyncTimeout.head.enter();
      Sink sink0 = asyncTimeout0.sink((Sink) null);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime((-1428L));
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      asyncTimeout0.enter();
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.exit();
      asyncTimeout0.exit(true);
      asyncTimeout0.exit();
      asyncTimeout0.exit(false);
      AsyncTimeout asyncTimeout3 = AsyncTimeout.head;
      asyncTimeout3.exit(true);
      asyncTimeout0.enter();
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout1.exit((IOException) interruptedIOException0);
      asyncTimeout2.exit((IOException) interruptedIOException1);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      mockIOException0.getCause();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      System.setCurrentTimeMillis((-4909L));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      asyncTimeout0.source(hashingSource0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.deadlineNanoTime((-1392409281321416L));
      Timeout timeout0 = Timeout.NONE;
      asyncTimeout0.enter();
      AsyncTimeout.awaitTimeout();
  }
}
