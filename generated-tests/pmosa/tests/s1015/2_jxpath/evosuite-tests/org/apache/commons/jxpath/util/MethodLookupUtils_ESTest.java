/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:49:41 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.apache.commons.jxpath.util.MethodLookupUtils;
import org.apache.commons.jxpath.util.TypeConverter;
import org.apache.commons.jxpath.util.TypeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodLookupUtils_ESTest extends MethodLookupUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "toUpperCase", objectArray0);
      assertFalse(method0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Object> class1 = Object.class;
      Method method0 = MethodLookupUtils.lookupMethod(class1, "*@Sfzts", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[0];
      MethodLookupUtils.lookupStaticMethod(class0, "*CI2XLism9m:'$^T~#1", objectArray0);
      MethodLookupUtils.lookupStaticMethod(class0, "{$0$W6],pzW", objectArray0);
      Class<Integer> class1 = Integer.class;
      MethodLookupUtils.lookupMethod(class1, "aX7Bw", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) "*CI2XLism9m:'$^T~#1";
      MethodLookupUtils.lookupConstructor(class1, objectArray1);
      Class<Object> class2 = Object.class;
      Method method0 = MethodLookupUtils.lookupMethod(class2, "{$0$W6],pzW", objectArray1);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class1, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      objectArray0[0] = object1;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "toUpperCase", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "iwDKnt*:>r";
      objectArray0[1] = (Object) "iwDKnt*:>r";
      objectArray0[2] = (Object) class0;
      MethodLookupUtils.lookupMethod(class0, "iwDKnt*:>r", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter0);
      TypeConverter typeConverter1 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter1);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "iwDKnt*:>r", objectArray0);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      TypeConverter typeConverter2 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter2);
      TypeConverter typeConverter3 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(typeConverter3).convert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter3);
      Class<String> class3 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class3, "iwDKnt*:>r", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = "org.apache.commons.jxpath.util.MethodLookupUtils";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.jxpath.util.MethodLookupUtils";
      MethodLookupUtils.lookupStaticMethod(class0, "org.apache.commons.jxpath.util.MethodLookupUtils", objectArray0);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Integer> class1 = Integer.class;
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "org.apache.commons.jxpath.util.MethodLookupUtils";
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter0);
      objectArray1[1] = (Object) "org.apache.commons.jxpath.util.MethodLookupUtils";
      objectArray1[2] = (Object) methodLookupUtils0;
      objectArray1[3] = (Object) class1;
      TypeUtils.setTypeConverter((TypeConverter) null);
      Object object0 = new Object();
      objectArray1[4] = object0;
      objectArray1[5] = (Object) class1;
      objectArray1[6] = (Object) "org.apache.commons.jxpath.util.MethodLookupUtils";
      objectArray1[7] = (Object) class1;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class1, "org.apache.commons.jxpath.util.MethodLookupUtils", objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) class0;
      MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "", objectArray0);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class2, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Ambigous method call: ";
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) methodLookupUtils0;
      Object object0 = new Object();
      Class<String> class1 = String.class;
      String string0 = "Ambigous constructor ";
      MethodLookupUtils.lookupMethod(class1, "Ambigous constructor ", objectArray0);
      objectArray0[3] = object0;
      MethodLookupUtils.lookupMethod(class0, "Ambigous method call: ", objectArray0);
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[7];
      Class<Integer> class1 = Integer.class;
      MethodLookupUtils.lookupMethod(class1, (String) null, objectArray0);
      objectArray0[0] = (Object) class0;
      MethodLookupUtils.lookupStaticMethod(class1, "", objectArray0);
      MethodLookupUtils.lookupMethod(class0, "org.apache.commons.jxpath.util.MethodLookupUtils", objectArray0);
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) methodLookupUtils0;
      objectArray0[4] = (Object) methodLookupUtils0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) class0;
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<Object> class2 = Object.class;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) class2;
      objectArray1[1] = (Object) "org.apache.commons.jxpath.util.MethodLookupUtils";
      Object object0 = new Object();
      objectArray1[2] = object0;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class2, (String) null, objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) methodLookupUtils0;
      objectArray0[2] = (Object) "org.apache.commons.jxpath.util.BasicTypeConverter";
      objectArray0[3] = (Object) methodLookupUtils0;
      objectArray0[4] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupStaticMethod(class0, "org.apache.commons.jxpath.util.BasicTypeConverter", objectArray0);
      Class<Object> class1 = Object.class;
      Object[] objectArray1 = new Object[2];
      Object[] objectArray2 = new Object[5];
      objectArray2[0] = (Object) class0;
      Object object0 = new Object();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) null;
      objectArray2[4] = (Object) null;
      MethodLookupUtils.lookupMethod(class0, "o]4d_ZC?Nq~{Qs", objectArray2);
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(typeConverter0).canConvert(any() , any(java.lang.Class.class));
      TypeUtils.setTypeConverter(typeConverter0);
      objectArray1[0] = (Object) class1;
      MethodLookupUtils.lookupStaticMethod(class1, "mLJk(", objectArray1);
      objectArray1[1] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupConstructor(class1, objectArray1);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupConstructor(class0, objectArray1);
      MethodLookupUtils.lookupStaticMethod(class2, "mLJk(", objectArray1);
      Class<Integer> class3 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class3, "", objectArray1);
      Class<Object> class4 = Object.class;
      Constructor constructor0 = MethodLookupUtils.lookupConstructor(class4, objectArray1);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) class0;
      objectArray1[1] = (Object) methodLookupUtils0;
      objectArray1[2] = (Object) class0;
      objectArray1[3] = (Object) methodLookupUtils0;
      MethodLookupUtils.lookupConstructor(class0, objectArray1);
      Class<Object> class1 = Object.class;
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = (Object) class0;
      objectArray2[1] = (Object) null;
      MethodLookupUtils.lookupConstructor(class1, objectArray2);
      MethodLookupUtils.lookupConstructor(class0, objectArray1);
      Class<Integer> class2 = Integer.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray2);
      MethodLookupUtils methodLookupUtils1 = new MethodLookupUtils();
      TypeConverter typeConverter0 = mock(TypeConverter.class, new ViolatedAssumptionAnswer());
      TypeUtils.setTypeConverter(typeConverter0);
      String string0 = "Ambigous constructor ";
      MethodLookupUtils.lookupStaticMethod(class0, "getComponentType", objectArray0);
      Object object0 = new Object();
      MethodLookupUtils.lookupConstructor(class0, objectArray0);
      Class<String> class3 = String.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupConstructor(class3, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous constructor [null, null]
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "valueOf";
      Class<Integer> class0 = Integer.class;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
      assertEquals("public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupConstructor(class1, (Object[]) null);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupMethod(class2, "compareToIgnoreCase", (Object[]) null);
      MethodLookupUtils.lookupMethod(class0, "", (Object[]) null);
      MethodLookupUtils.lookupConstructor(class1, (Object[]) null);
      MethodLookupUtils.lookupMethod(class2, "compareToIgnoreCase", (Object[]) null);
      Class<String> class3 = String.class;
      MethodLookupUtils.lookupConstructor(class3, (Object[]) null);
      Class<String> class4 = String.class;
      MethodLookupUtils.lookupMethod(class4, "compareToIgnoreCase", (Object[]) null);
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, "hashCode", (Object[]) null);
      assertEquals(1, method0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "replaceFirst", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MethodLookupUtils methodLookupUtils0 = new MethodLookupUtils();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) methodLookupUtils0;
      Object object0 = new Object();
      MethodLookupUtils.lookupMethod(class0, "wait", objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) "wait";
      objectArray1[1] = (Object) "getChars";
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) methodLookupUtils0;
      objectArray1[4] = (Object) "wait";
      MethodLookupUtils.lookupStaticMethod(class0, "equals", objectArray1);
      Class<String> class1 = String.class;
      MethodLookupUtils.lookupConstructor(class1, objectArray0);
      MethodLookupUtils methodLookupUtils1 = new MethodLookupUtils();
      MethodLookupUtils.lookupConstructor(class0, objectArray1);
      Class<Object> class2 = Object.class;
      MethodLookupUtils.lookupConstructor(class2, objectArray0);
      Class<String> class3 = String.class;
      MethodLookupUtils.lookupMethod(class3, "wait", objectArray0);
      Method method0 = MethodLookupUtils.lookupMethod(class2, "Convert String[", objectArray1);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class0, "hashCode", (Object[]) null);
      assertEquals(1, method0.getModifiers());
      assertNotNull(method0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      MethodLookupUtils.lookupStaticMethod(class0, "", objectArray0);
      MethodLookupUtils.lookupMethod(class0, "", objectArray0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) class0;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) class0;
      objectArray1[4] = (Object) null;
      objectArray1[5] = (Object) null;
      Object object1 = new Object();
      objectArray1[6] = object1;
      MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray1);
      Class<Object> class1 = Object.class;
      MethodLookupUtils.lookupStaticMethod(class1, "(4XP`u?^$", objectArray0);
      Class<Integer> class2 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class2, "", objectArray1);
      MethodLookupUtils.lookupConstructor(class1, objectArray1);
      MethodLookupUtils.lookupStaticMethod(class0, "", objectArray0);
      Object[] objectArray2 = new Object[5];
      objectArray2[0] = (Object) null;
      Object object2 = new Object();
      objectArray2[1] = object2;
      objectArray2[2] = object0;
      objectArray2[3] = (Object) null;
      objectArray2[4] = object1;
      Method method0 = MethodLookupUtils.lookupStaticMethod(class1, "", objectArray2);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      MethodLookupUtils.lookupStaticMethod(class0, "hashCode", objectArray0);
      Method method0 = MethodLookupUtils.lookupMethod(class0, "hashCode", objectArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: valueOf
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "valueOf";
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupStaticMethod(class0, "valueOf", objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/logging/LogFactory
         //
         verifyException("org.apache.commons.beanutils.ConvertUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "valueOf";
      objectArray0[1] = object1;
      Method method0 = MethodLookupUtils.lookupMethod(class0, "valueOf", objectArray0);
      assertEquals(9, method0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "valueOf";
      MethodLookupUtils.lookupMethod(class0, "codePointBefore", objectArray0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        MethodLookupUtils.lookupMethod(class1, "indexOf", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Ambigous method call: indexOf
         //
         verifyException("org.apache.commons.jxpath.util.MethodLookupUtils", e);
      }
  }
}
