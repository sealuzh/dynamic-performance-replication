/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:42:03 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("'!|{AH", (ClassLoader) aSMClassLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.isPath(class0);
      Time time0 = new Time((-1658L));
      Date date0 = TypeUtils.castToDate(time0);
      assertEquals("23:59:58", date0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<FJTd`1dT:R#fn");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("<FJTd`1dT:R#fn");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<FJTd`1dT:R#fn\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : interface java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "read string from reader error");
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<NoSuchMethodException> arrayList0 = new ArrayList<NoSuchMethodException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(arrayList0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.decapitalize("z@4eBU{s)Mm?hI*");
      TypeUtils.loadClass("z@4eBU{s)Mm?hI*");
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = new ParserConfig();
      Byte byte0 = new Byte((byte) (-2));
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.isNumber("?\"KQO");
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public com.alibaba.fastjson.parser.deserializer.EnumDeserializer(java.lang.Class<?>)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, treeMap0, true, (PropertyNamingStrategy) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      boolean boolean0 = TypeUtils.isNumber(".,");
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1);
      
      TypeUtils.clearClassMapping();
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0);
      boolean boolean2 = TypeUtils.isGenericParamType(class1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockThread mockThread0 = new MockThread("com.alibaba.fastjson.parser.ParserConfig");
      Class<Method> class0 = Method.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, identityHashMap0);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      TypeUtils.toLocale("_ty:}+M#D[+cBmo5.");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("_ty:}+M#D[+cBmo5.", "_ty:}+M#D[+cBmo5.");
      SecurityException securityException0 = new SecurityException("_ty:}+M#D[+cBmo5.", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("_ty:}+M#D[+cBmo5.", (String) null, (-2189), sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLTransientConnectionException1);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(sQLTransientConnectionException2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLTransientConnectionException: java.sql.SQLTransientConnectionException: _ty:}+M#D[+cBmo5.
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<MockDate> class0 = MockDate.class;
      TypeUtils.isProxy(class0);
      JSONObject jSONObject0 = new JSONObject(2106);
      Locale locale0 = Locale.CANADA_FRENCH;
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(989, roundingMode0);
      BigDecimal bigDecimal0 = new BigDecimal(140758963191807L, mathContext0);
      TypeUtils.castToDate(bigDecimal0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(roundingMode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : CEILING
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      weakHashMap0.get(propertyNamingStrategy0);
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.autoTypeSupport", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.loadClass("Q");
      TypeUtils.loadClass("Q");
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<MockDate> class0 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "Q", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.decapitalize("z@4eBU{s)Mm?hI*");
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)61;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.castToBoolean((Object) null);
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : zh_TW
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      TypeUtils.isKotlin(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.castToSqlDate((Object) null);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      noSuchFieldException0.printStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(noSuchFieldException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      boolean boolean0 = TypeUtils.isNumber(".,");
      assertFalse(boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      long long0 = TypeUtils.fnv1a_64_lower(".,");
      assertEquals(565791124562656199L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.loadClass("o");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.castToByte((Object) null);
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      long long0 = TypeUtils.fnv1a_64_lower("o");
      assertEquals((-5808550276084140354L), long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.decapitalize("h\"Gg@0h]?lexy,4?D|5");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("h\"Gg@0h]?lexy,4?D|5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : h\"Gg@0h]?lexy,4?D|5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "read string from reader error");
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sqlDateDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "vpM";
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("vpM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : vpM
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      SQLWarning sQLWarning0 = new SQLWarning(".000000", "bFTPW3=-xZ' #O^M&}^");
      Locale locale0 = TypeUtils.toLocale("bFTPW3=-xZ' #O^M&}^");
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64("bFTPW3=-xZ' #O^M&}^");
      assertEquals(2155900701703222604L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Function<Object, DecimalFormatSymbols> function0 = (Function<Object, DecimalFormatSymbols>) mock(Function.class, new ViolatedAssumptionAnswer());
      TypeUtils.fnv1a_64("fil");
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      TypeUtils.toLocale("Ol");
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormatException numberFormatException0 = new NumberFormatException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLWarning sQLWarning0 = new SQLWarning(".000000", "bFTPW3=-xZ' #O^M&}^");
      MockThread mockThread0 = new MockThread(".000000");
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("bFTPW3=-xZ' #O^M&}^", classLoader1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<('E:>I_c$I-44");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils.fnv1a_64_lower("N~sUnAS>=a'");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isProxy(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("n");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("N~sUnAS>=a'", "Ljava.lang.AutoCloseable", sQLTimeoutException0);
      sQLTimeoutException1.spliterator();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLTimeoutException: n
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("U5x", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "U5x", sQLRecoverableException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap", "S};2/MLoEnhu", (-38));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("U5x", "U5x", "699l1=6Ub?),Rt\"rS=", (-1622));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("U5x", "S};2/MLoEnhu", "fyIUpK&%z2+;{", (-38));
      stackTraceElementArray0[2] = stackTraceElement2;
      Class<Calendar> class1 = Calendar.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("h\"Gg@0h]?lexy,4?D|5", (ClassLoader) aSMClassLoader0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C,L6+");
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Double> class0 = Double.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals("class java.lang.Double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = new Locale("Ljava.util.concurrent.ConcurrentSkipListMap");
      MessageFormat messageFormat0 = new MessageFormat("Ljava.util.concurrent.ConcurrentSkipListMap", locale0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      TypeUtils.castToString("Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.getSerializeFeatures(class0);
      Properties properties0 = new Properties();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Character character0 = new Character('(');
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : (
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      Object object0 = null;
      TypeUtils.castToShort((Object) null);
      Double double0 = new Double(0.0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig.getGlobalInstance();
      classLoader0.setClassAssertionStatus(";", false);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) double0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.TimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Og0)e");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("superclass", "db");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Og0)e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Og0)e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<SQLException> class0 = SQLException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
      
      SecurityException securityException0 = new SecurityException();
      SQLException sQLException0 = new SQLException();
      Throwable throwable0 = securityException0.initCause(sQLException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, throwable0);
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.clearClassMapping();
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1154);
      Locale locale0 = Locale.CANADA_FRENCH;
      TypeUtils.castToDate((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.loadClass("o");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.castToByte((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "serialize exceeded MAX_OUTPUT_LENGTH=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "serialize exceeded MAX_OUTPUT_LENGTH=");
      TypeUtils.loadClass("short");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("serialize exceeded MAX_OUTPUT_LENGTH=", "9;5ltZ6^");
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1144);
      Locale locale0 = Locale.CANADA_FRENCH;
      MockDate mockDate0 = new MockDate(989, 1144, 3089, 989, 1144);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("ha");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      SQLWarning sQLWarning0 = new SQLWarning("bFTPW3=-xZ' #O^M&}^", "dou");
      TypeUtils.toLocale("bFTPW3=-xZ' #O^M&}^");
      Locale locale0 = Locale.CANADA_FRENCH;
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.isProxy(class0);
      SQLDataException sQLDataException0 = new SQLDataException("dou", sQLWarning0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLDataException: dou
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      boolean boolean0 = TypeUtils.isNumber(".,");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Properties properties0 = new Properties();
      boolean boolean1 = TypeUtils.isHibernateInitialized(properties0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[7], class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[7], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) genericArrayType0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, type0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@6923d12f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils.decapitalize("_+(H2! xg");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("isspliterator");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.addSuppressed(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.setNextException(sQLTransactionRollbackException1);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("_+(H2! xg");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.NegativeArraySizeException: _+(H2! xg
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.decapitalize("z@4eBU{s)Mm?hI*");
      TypeUtils.loadClass("z@4eBU{s)Mm?hI*");
      TypeUtils.clearClassMapping();
      Class<MockDate> class1 = MockDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Byte byte0 = new Byte((byte) (-2));
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) byte0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils.isGenericParamType(class0);
      Float float0 = new Float((-1.0));
      TypeUtils.castToBigInteger(float0);
      TypeUtils.isPath(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Properties> class0 = Properties.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertNotNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertNull(type0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertEquals(0, treeMap0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SQLWarning sQLWarning0 = new SQLWarning("ha", "wOG0hb@Bn/BsD#Uw!");
      assertEquals("wOG0hb@Bn/BsD#Uw!", sQLWarning0.getSQLState());
      assertEquals("ha", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ha", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<ClassLoader> class0 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.deny", "fastjson.parser.autoTypeAccept");
      assertEquals("fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("fastjson.parser.deny", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.deny", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Class<Properties> class0 = Properties.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = TypeUtils.isNumber("$e:Mu~l?<%Zf@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (Throwable) null);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertNotNull(list0);
      
      List<FieldInfo> list1 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(16, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<Float> class0 = Float.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) hashtable0, true, (PropertyNamingStrategy) null);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Float float0 = new Float(1839.0062F);
      assertNotNull(float0);
      assertEquals(1839.0062F, (float)float0, 0.01F);
      
      Float float1 = TypeUtils.castToFloat(float0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1839.0062F, (float)float1, 0.01F);
      
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("getClass");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "getClass");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      Type[] typeArray0 = new Type[8];
      Class<Short> class1 = Short.TYPE;
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[7], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)54}, byteArray0);
      assertFalse(boolean0);
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      SQLNonTransientException sQLNonTransientException0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNull(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      WeakHashMap<Double, BitSet> weakHashMap0 = new WeakHashMap<Double, BitSet>();
      assertNotNull(weakHashMap0);
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      Class<?> class0 = TypeUtils.loadClass("5");
      assertNull(class0);
      
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Byte byte0 = new Byte((byte) (-2));
      assertNotNull(byte0);
      assertEquals((byte) (-2), (byte)byte0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.deny");
      assertEquals("java.lang.IllegalMonitorStateException: fastjson.parser.deny", illegalMonitorStateException0.toString());
      assertEquals("fastjson.parser.deny", illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
      
      Class<MockDate> class1 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) illegalMonitorStateException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("h\"Gg@0h]?lexy,4?D|5", "Qw)G?.8uNj)n4uDRI", "org.springframework.cglib.proxy.Factory", (-55675502));
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals((-55675502), stackTraceElement0.getLineNumber());
      assertEquals("org.springframework.cglib.proxy.Factory", stackTraceElement0.getFileName());
      assertEquals("Qw)G?.8uNj)n4uDRI", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("stb ", "stb ", "|wC:t]J", (-55675502));
      assertEquals("stb ", stackTraceElement1.getMethodName());
      assertEquals("stb .stb (|wC:t]J)", stackTraceElement1.toString());
      assertEquals((-55675502), stackTraceElement1.getLineNumber());
      assertEquals("stb ", stackTraceElement1.getClassName());
      assertEquals("|wC:t]J", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      TypeUtils.clearClassMapping();
      long long0 = TypeUtils.fnv1a_64_lower("I.!Y+!");
      assertEquals((-4159365181764413796L), long0);
      
      Class<Object> class0 = Object.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      assertNotNull(noSuchMethodException0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertNotNull(class0);
      
      SQLWarning sQLWarning0 = new SQLWarning("D&b", "D&b");
      assertEquals("java.sql.SQLWarning: D&b", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("D&b", sQLWarning0.getMessage());
      assertEquals("D&b", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l=6kZ", parserConfig1);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(defaultJSONParser0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) locale0, (Object) locale0);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parseContext0);
      assertNotSame(parserConfig1, parserConfig0);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("D&b");
      assertEquals("D&b", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: D&b", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig2 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertNotNull(parserConfig2);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, (Type) class0, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@135
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertEquals("class java.sql.SQLDataException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.loadClass("short");
      assertEquals("short", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.equals((Object)class1));
      assertNotNull(class2);
      assertNotSame(class2, class1);
      
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Byte byte0 = new Byte((byte)43);
      assertNotNull(byte0);
      assertEquals((byte)43, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("h\"Gg@0h]?lexy,4?D|5", (ClassLoader) aSMClassLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNull(class0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      boolean boolean1 = TypeUtils.isKotlin((Class) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      Class<?> class2 = TypeUtils.loadClass("h\"Gg@0h]?lexy,4?D|5", classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNull(class2);
      
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
      
      Class<ChoiceFormat> class3 = ChoiceFormat.class;
      boolean boolean2 = TypeUtils.isKotlin(class3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<PropertyProcessable> class4 = PropertyProcessable.class;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) null);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(objectDeserializer0);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class4;
      typeArray0[1] = (Type) null;
      typeArray0[2] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      Rectangle rectangle0 = new Rectangle();
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertNotNull(decimalFormatSymbols0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormatSymbols0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@2d1c6705
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("h\"Gg@0h]?lexy,4?D|5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"h\"Gg@0h]?lexy,4?D|5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("org.springframework.util.LinkedMultiValueMap", (String) null);
      assertNull(string0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      String string1 = weakHashMap1.put("Ljava.awt.Point", "getInstance");
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNull(string1);
      assertNotSame(weakHashMap1, weakHashMap0);
      
      String string2 = weakHashMap0.put("Ljava.awt.Color", "java.util.List");
      assertFalse(weakHashMap0.equals((Object)weakHashMap1));
      assertNull(string2);
      assertNotSame(weakHashMap0, weakHashMap1);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.util.List");
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.util.List", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.util.List", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<MockDate> class0 = MockDate.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ycuIZJjSX,x\u0003E");
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("ycuIZJjSX,x\u0003E", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ycuIZJjSX,x\u0003E", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      Class<Collator> class1 = Collator.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      Locale locale0 = TypeUtils.toLocale("ycuIZJjSX,x\u0003E");
      assertEquals("ycuizjjsx,x\u0003e", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ycuizjjsx,x\u0003e", locale0.toString());
      assertNotNull(locale0);
      
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("PY;X=642^H");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("PY;X=642^H");
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNull(class0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Lo");
      assertEquals("java.sql.SQLTimeoutException: Lo", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Lo", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<MockDate> class0 = MockDate.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertEquals((short) (-1), bigInteger0.shortValue());
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger1);
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      assertNull(illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError", illegalAccessError0.toString());
      assertNotNull(illegalAccessError0);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, treeMap0, false, propertyNamingStrategy0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = new Locale("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals("", locale0.getISO3Country());
      assertEquals("ljava.util.concurrent.concurrentskiplistmap", locale0.toString());
      assertEquals("ljava.util.concurrent.concurrentskiplistmap", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MessageFormat messageFormat0 = new MessageFormat("Ljava.util.concurrent.ConcurrentSkipListMap", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ljava.util.concurrent.concurrentskiplistmap", locale0.toString());
      assertEquals("ljava.util.concurrent.concurrentskiplistmap", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(messageFormat0);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      String string0 = TypeUtils.castToString("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(string0);
      
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.loadClass("java.lang.String@0000000003", (ClassLoader) null);
      assertNull(class1);
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) null;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) null;
      Class<Double> class2 = Double.TYPE;
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("double", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertNotNull(class2);
      
      typeArray0[8] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], class2);
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("double", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertNotNull(parameterizedTypeImpl0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("?");
      assertNotNull(mockIllegalAccessException0);
      
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. org.evosuite.runtime.mock.java.lang.MockIllegalAccessException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError();
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNotNull(verifyError0);
      
      verifyError0.printStackTrace();
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger((-2383));
      assertEquals((-2383L), atomicInteger0.longValue());
      assertEquals((-2383.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-2383), atomicInteger0.intValue());
      assertEquals((-2383.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals("-2383", atomicInteger0.toString());
      assertEquals((-2383), atomicInteger0.get());
      assertEquals((byte) (-79), atomicInteger0.byteValue());
      assertEquals((short) (-2383), atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -2383
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SQLWarning sQLWarning0 = new SQLWarning("bFTPW3=-xZ' #O^M&}^", "bFTPW3=-xZ' #O^M&}^");
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("bFTPW3=-xZ' #O^M&}^", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: bFTPW3=-xZ' #O^M&}^", sQLWarning0.toString());
      assertEquals("bFTPW3=-xZ' #O^M&}^", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bFTPW3=-xZ' #O^M&}^", parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertNotNull(defaultJSONParser0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) classLoader0, (Object) locale0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertNotNull(parseContext0);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("bFTPW3=-xZ' #O^M&}^");
      assertEquals("java.sql.SQLTimeoutException: bFTPW3=-xZ' #O^M&}^", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("bFTPW3=-xZ' #O^M&}^", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      
      String string0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Gj}<", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("o");
      assertNull(class0);
      
      Class<MockDate> class1 = MockDate.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<Properties> class2 = Properties.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class2, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(9, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<MockDate> class0 = MockDate.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "oracle.sql.";
      stringArray0[1] = "bHzc$@*BwIB'm";
      stringArray0[2] = "";
      stringArray0[3] = "gT";
      stringArray0[4] = "Lorg.springframework.util.LinkedMultiValueMap;";
      stringArray0[6] = "I#<T)/B";
      stringArray0[7] = "y";
      stringArray0[8] = ")92#h]y<U_j";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, stringArray0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertEquals("class org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate", class2.toString());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      Class<?> class3 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap;");
      assertNull(class3);
      
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      byte byte0 = (byte) (-93);
      Class<MockDate> class4 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "Lorg.springframework.util.LinkedMultiValueMap;", class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("o");
      assertNull(class0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("LLshortValue");
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("LLshortValue", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: LLshortValue", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Class<Annotation> class0 = Annotation.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("h\"Gg@0h]?lexy,4?D|5", "h\"Gg@0h]?lexy,4?D|5");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("[92SxKJkZb0\"{Ti", "h\"Gg@0h]?lexy,4?D|5", "[92SxKJkZb0\"{Ti", 1340);
      assertEquals("[92SxKJkZb0\"{Ti", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(1340, stackTraceElement0.getLineNumber());
      assertEquals("[92SxKJkZb0\"{Ti", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      TypeUtils.clearClassMapping();
      long long0 = TypeUtils.fnv1a_64_lower("h\"Gg@0h]?lexy,4?D|5");
      assertEquals((-646021422639541997L), long0);
      
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedHashMap<Properties, Long> linkedHashMap0 = new LinkedHashMap<Properties, Long>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      JSONObject jSONObject0 = new JSONObject(55);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      Long long1 = jSONObject0.getLong("|8FgSDV'as%X");
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNull(long1);
      
      Long long2 = linkedHashMap0.put(properties0, (Long) null);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(long2);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("o");
      assertNull(class0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("o", "o");
      assertNull(string0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Gg@h]?ley,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("Gg@h]?ley,4?D|5");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      parserConfig0.configFromPropety(properties0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertSame(classLoader0, classLoader1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, false);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(javaBeanInfo0);
      
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(objectDeserializer0);
      assertSame(classLoader0, classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertNotNull(classLoader3);
      assertSame(classLoader3, classLoader2);
      
      Locale locale0 = TypeUtils.toLocale("E6G+");
      assertEquals("e6g+", locale0.getLanguage());
      assertEquals("e6g+", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)1}, byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short) (-2047), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = TypeUtils.castToBigInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)1}, byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short) (-2047), bigInteger0.shortValue());
      assertEquals((short) (-2047), bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      assertNull(illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError", illegalAccessError0.toString());
      assertNotNull(illegalAccessError0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLNonTransientConnectionException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      String string1 = "pzoA,\\";
      MockFile mockFile0 = new MockFile("pzoA,");
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals("pzoA,", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("pzoA,", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("U5x", (Throwable) null);
      assertEquals("U5x", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: U5x", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.Class@0000000003", "U5x", sQLRecoverableException0);
      assertEquals("U5x", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: U5x", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("U5x", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      int int0 = (-38);
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ljava.util.concurrent.ConcurrentSkipListMap", "Ljava.util.concurrent.ConcurrentSkipListMap", "S};2/MLoEnhu", (-38));
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals((-38), stackTraceElement0.getLineNumber());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", stackTraceElement0.getMethodName());
      assertEquals("S};2/MLoEnhu", stackTraceElement0.getFileName());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", stackTraceElement0.getClassName());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap.Ljava.util.concurrent.ConcurrentSkipListMap(S};2/MLoEnhu)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljava.util.concurrent.ConcurrentSkipListMap", "S};2/MLoEnhu");
      assertEquals("S};2/MLoEnhu", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ljava.util.concurrent.ConcurrentSkipListMap", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLFeatureNotSupportedException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLFeatureNotSupportedException: Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = TypeUtils.decapitalize("_GUrVP}Sg}Vb");
      assertNotNull(string0);
      assertEquals("_GUrVP}Sg}Vb", string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("_GUrVP}Sg}Vb");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_GUrVP}Sg}Vb\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      long long0 = TypeUtils.fnv1a_64_lower("h\"Gg@0h]?lexy,4?D|5");
      assertEquals((-646021422639541997L), long0);
      
      Class<Object> class0 = Object.class;
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class1);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "h\"Gg@0h]?lexy,4?D|5", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      Float float0 = new Float(334.0F);
      assertNotNull(float0);
      assertEquals(334.0F, (float)float0, 0.01F);
      
      Byte byte0 = TypeUtils.castToByte(float0);
      assertNotNull(byte0);
      assertEquals((byte)78, (byte)byte0);
      
      JavaBeanSerializer javaBeanSerializer0 = null;
      try {
        javaBeanSerializer0 = new JavaBeanSerializer((Class<?>) null, weakHashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      String string0 = "_GUrVP}Sg}Vb";
      String string1 = TypeUtils.decapitalize("_GUrVP}Sg}Vb");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_GUrVP}Sg}Vb", string1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string2 = weakHashMap0.put("_GUrVP}Sg}Vb", "@|k&");
      assertNull(string2);
      
      String string3 = weakHashMap0.get(propertyNamingStrategy0);
      assertNull(string3);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      LinkedHashMap<SQLTransientConnectionException, Properties> linkedHashMap0 = new LinkedHashMap<SQLTransientConnectionException, Properties>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("@|k&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : @|k&
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("bFTPW3=-xZ' #O^M&}^");
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: bFTPW3=-xZ' #O^M&}^", sQLTimeoutException0.toString());
      assertEquals("bFTPW3=-xZ' #O^M&}^", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("bFTPW3=-xZ' #O^M&}^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : bFTPW3=-xZ' #O^M&}^
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread.dumpStack();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      Class<Method> class0 = Method.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      Class<Double> class1 = Double.TYPE;
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(parameterizedTypeImpl0);
      
      Rectangle rectangle0 = TypeUtils.cast((Object) boolean2, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Locale locale0 = TypeUtils.toLocale("Ljava.awt.Font");
      assertEquals("", locale0.getISO3Country());
      assertEquals("ljava.awt.font", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ljava.awt.font", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(".000000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : .000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Q");
      assertNull(class0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<SQLDataException> class1 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, weakHashMap0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class2 = TypeUtils.loadClass("Q");
      assertNull(class2);
      
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Byte byte0 = new Byte((byte)43);
      assertNotNull(byte0);
      assertEquals((byte)43, (byte)byte0);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "o";
      Class<?> class0 = TypeUtils.loadClass("o");
      assertNull(class0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("bFTPW3=-xZ' #O^M&}^", identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNull(field0);
      
      Class<MockDate> class0 = MockDate.class;
      Class<Integer> class1 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("%02d", class0, class1, class1, (Field) null, (-181), 39, 4499);
      assertEquals("%02d", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(39, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(4499, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(fieldInfo0);
      
      Class<NoClassDefFoundError> class2 = NoClassDefFoundError.class;
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      assertEquals("%02d", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(39, beanContext0.getFeatures());
      assertEquals("%02d", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(39, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(4499, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(beanContext0);
      
      Class<ImageCapabilities> class3 = ImageCapabilities.class;
      BeanContext beanContext1 = new BeanContext(class3, fieldInfo0);
      assertEquals("%02d", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNull(beanContext1.getFormat());
      assertEquals("%02d", beanContext1.getName());
      assertEquals("", beanContext1.getLabel());
      assertEquals(39, beanContext1.getFeatures());
      assertFalse(beanContext1.isJsonDirect());
      assertEquals(39, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(4499, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(beanContext1.equals((Object)beanContext0));
      assertNotNull(beanContext1);
      
      Method method0 = beanContext1.getMethod();
      assertEquals("%02d", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNull(beanContext1.getFormat());
      assertEquals("%02d", beanContext1.getName());
      assertEquals("", beanContext1.getLabel());
      assertEquals(39, beanContext1.getFeatures());
      assertFalse(beanContext1.isJsonDirect());
      assertEquals(39, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(4499, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(beanContext1.equals((Object)beanContext0));
      assertNull(method0);
      assertNotSame(beanContext1, beanContext0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      Class class4 = (Class)TypeUtils.getCollectionItemType(fieldInfo0.declaringClass);
      assertEquals("%02d", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(class4.isAnnotation());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(39, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(4499, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertNotNull(class4);
      
      Type type0 = TypeUtils.getGenericParamType(class4);
      assertEquals("%02d", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(class4.isAnnotation());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(39, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(4499, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertNull(type0);
      
      Class class5 = (Class)beanContext0.getFieldType();
      assertEquals("%02d", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(39, beanContext0.getFeatures());
      assertEquals("%02d", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertEquals("class java.lang.Integer", class5.toString());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals(17, class5.getModifiers());
      assertEquals(39, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(4499, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(beanContext0.equals((Object)beanContext1));
      assertFalse(class5.equals((Object)class4));
      assertNotNull(class5);
      assertNotSame(beanContext0, beanContext1);
      assertNotSame(class5, class4);
      
      Class<Integer> class6 = Integer.TYPE;
      assertFalse(class6.isArray());
      assertFalse(class6.isInterface());
      assertEquals(1041, class6.getModifiers());
      assertEquals("int", class6.toString());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isEnum());
      assertFalse(class6.isAnnotation());
      assertTrue(class6.isPrimitive());
      assertFalse(class6.equals((Object)class1));
      assertNotNull(class6);
      assertNotSame(class6, class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, fieldInfo0.fieldClass);
      assertEquals("%02d", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(39, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(4499, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(class1.equals((Object)class6));
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ".000000", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      MockThread mockThread0 = new MockThread("");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1, "", 1L);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(mockThread2);
      
      MockThread mockThread3 = new MockThread(mockThread1, "getClass");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertNotNull(mockThread3);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(classLoader0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread2, mockThread3);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      
      Class<?> class0 = TypeUtils.loadClass("Bt+IS`J|8#t6At%faU6", classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread3));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNull(class0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread2, mockThread3);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Integer integer0 = TypeUtils.castToInt(float0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      long long0 = TypeUtils.fnv1a_64_lower("+B*&Z[~:_-cZlU(Oz6");
      assertEquals(515558798208408140L, long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(typeUtils0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SQLWarning sQLWarning0 = new SQLWarning(".000000", "bFTPW3=-xZ' #O^M&}^");
      assertEquals("bFTPW3=-xZ' #O^M&}^", sQLWarning0.getSQLState());
      assertEquals(".000000", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: .000000", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("bFTPW3=-xZ' #O^M&}^");
      assertEquals("bFTPW3=-xZ' #O^M&}^", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: bFTPW3=-xZ' #O^M&}^", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError("8H~*|s:/-a_-Q");
      assertEquals("java.lang.StackOverflowError: 8H~*|s:/-a_-Q", stackOverflowError0.toString());
      assertEquals("8H~*|s:/-a_-Q", stackOverflowError0.getMessage());
      assertNotNull(stackOverflowError0);
      
      Throwable throwable0 = stackOverflowError0.initCause(sQLTimeoutException0);
      assertEquals("bFTPW3=-xZ' #O^M&}^", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: bFTPW3=-xZ' #O^M&}^", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.lang.StackOverflowError: 8H~*|s:/-a_-Q", stackOverflowError0.toString());
      assertEquals("8H~*|s:/-a_-Q", stackOverflowError0.getMessage());
      assertEquals("8H~*|s:/-a_-Q", throwable0.getMessage());
      assertEquals("java.lang.StackOverflowError: 8H~*|s:/-a_-Q", throwable0.toString());
      assertNotNull(throwable0);
      assertSame(stackOverflowError0, throwable0);
      assertSame(throwable0, stackOverflowError0);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertNotSame(parserConfig1, parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("8H~*|s:/-a_-Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 8H~*|s:/-a_-Q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("_+(H2! xg");
      assertNotNull(string0);
      assertEquals("_+(H2! xg", string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("_+(H2! xg");
      assertEquals("_+(H2! xg", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: _+(H2! xg", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("java.sql.SQLIntegrityConstraintViolationException");
      assertNotNull(mockIllegalAccessException0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)14;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)26, (byte)4, (byte) (-128), (byte) (-61), (byte)121, (byte)14}, byteArray0);
      assertFalse(boolean0);
      
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      assertEquals("_+(H2! xg", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: _+(H2! xg", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(spliterator0);
      
      String string1 = mockIllegalAccessException0.getLocalizedMessage();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", string1);
      
      Class<Collator> class0 = Collator.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockIllegalAccessException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      MockDate mockDate0 = new MockDate(1135L);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertNotNull(mockDate0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized(mockDate0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      boolean boolean3 = TypeUtils.isHibernateInitialized(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class1, (ParserConfig) null);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("_GUrVP}Sg}Vb", "@|k&");
      assertNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertNotNull(parserConfig0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("can not cast to char, value : ");
      assertEquals("java.sql.SQLFeatureNotSupportedException: can not cast to char, value : ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("can not cast to char, value : ", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMClassLoader0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.util.ASMClassLoader@6837fa4d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("_");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "getClass");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      String string0 = TypeUtils.decapitalize("getClass");
      assertNotNull(string0);
      assertEquals("getClass", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string1 = weakHashMap0.put("BrowserCompatible", "_|(W|Q[");
      assertNull(string1);
      
      Short short0 = new Short((short) (-300));
      assertNotNull(short0);
      assertEquals((short) (-300), (short)short0);
      
      String string2 = weakHashMap0.get(short0);
      assertNull(string2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      LinkedHashMap<SQLTransientConnectionException, Properties> linkedHashMap0 = new LinkedHashMap<SQLTransientConnectionException, Properties>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Double double0 = new Double(1036.069095538);
      assertNotNull(double0);
      assertEquals(1036.069095538, (double)double0, 0.01);
      
      Boolean boolean2 = TypeUtils.castToBoolean(double0);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      classLoader0.clearAssertionStatus();
      assertSame(classLoader0, classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      TypeUtils.clearClassMapping();
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      long long0 = TypeUtils.fnv1a_64("ZJS}F");
      assertEquals(325835326205837041L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Collection collection0 = TypeUtils.createCollection(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertNotNull(collection0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("h\"Gg@0h]?lexy,4?D|5", (ClassLoader) aSMClassLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNull(class0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("C,L6+", "C,L6+", "h\"Gg@0h]?lexy,4?D|5", 7);
      assertEquals(7, stackTraceElement0.getLineNumber());
      assertEquals("C,L6+", stackTraceElement0.getClassName());
      assertEquals("C,L6+", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertNotNull(stackTraceElement0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("null", "/^RIX?s@_z7.Y|;/be?");
      assertEquals("/^RIX?s@_z7.Y|;/be?", sQLTransientConnectionException0.getSQLState());
      assertEquals("null", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: null", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SecurityException securityException0 = new SecurityException("C,L6+", sQLTransientConnectionException0);
      assertEquals("/^RIX?s@_z7.Y|;/be?", sQLTransientConnectionException0.getSQLState());
      assertEquals("null", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: null", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.lang.SecurityException: C,L6+", securityException0.toString());
      assertEquals("C,L6+", securityException0.getMessage());
      assertNotNull(securityException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(0, treeMap0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) long0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Locale locale0 = new Locale("z]_s,/% TLn}CU", "z]_s,/% TLn}CU");
      assertEquals("z]_s,/% tln}cu_Z]_S,/% TLN}CU", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Z]_S,/% TLN}CU", locale0.getCountry());
      assertEquals("z]_s,/% tln}cu", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("z]_s,/% TLn}CU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : z]_s,/% TLn}CU
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) genericArrayType0;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.deny", string0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      InternalError internalError0 = new InternalError(noSuchFieldError0);
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertEquals("java.lang.InternalError: java.lang.NoSuchFieldError", internalError0.toString());
      assertEquals("java.lang.NoSuchFieldError", internalError0.getMessage());
      assertNotNull(internalError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.InternalError: java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertNotNull(class0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) hashtable0, false, (PropertyNamingStrategy) null);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      classLoader0.setDefaultAssertionStatus(false);
      Class<Byte> class1 = Byte.class;
      List<FieldInfo> list1 = TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, false, (PropertyNamingStrategy) null);
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("_GUrVP}Sg}Vb", "_GUrVP}Sg}Vb");
      assertNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      Class<Integer> class2 = Integer.TYPE;
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(typeArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Type[] typeArray0 = new Type[3];
      Class<?> class0 = TypeUtils.getClassFromMapping("NULL");
      assertNull(class0);
      
      typeArray0[0] = (Type) null;
      Class<NumberFormatException> class1 = NumberFormatException.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NULL";
      stringArray0[1] = "NULL";
      stringArray0[2] = "NULL";
      stringArray0[3] = "NULL";
      stringArray0[4] = "NULL";
      stringArray0[5] = "NULL";
      stringArray0[6] = "NULL";
      stringArray0[7] = "NULL";
      stringArray0[8] = "NULL";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class1, stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      Class<?> class2 = simplePropertyPreFilter0.getClazz();
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.NumberFormatException", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      typeArray0[1] = (Type) class2;
      Class<TimeDeserializer> class3 = TimeDeserializer.class;
      TimeDeserializer timeDeserializer0 = TypeUtils.castToJavaBean((Object) "NULL", class3);
      assertNull(timeDeserializer0);
      
      Class<?> class4 = TypeUtils.getClass((Type) class2);
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals("class java.lang.NumberFormatException", class4.toString());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isPrimitive());
      assertEquals(1, class4.getModifiers());
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.NumberFormatException", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertNotNull(class4);
      assertSame(class4, class2);
      assertSame(class2, class4);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("_GUrVP}Sg}Vb", "_GUrVP}Sg}Vb");
      assertNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<Integer> class2 = Integer.TYPE;
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("int", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertNotNull(class2);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2, weakHashMap0);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("int", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertNotNull(javaBeanSerializer0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap1);
      
      Short short0 = new Short((short)35);
      assertNotNull(short0);
      assertEquals((short)35, (short)short0);
      
      Double double0 = TypeUtils.castToDouble(short0);
      assertNotNull(double0);
      assertEquals(35.0, (double)double0, 0.01);
      
      LinkedHashMap<MockHijrahDate, JobAttributes> linkedHashMap0 = new LinkedHashMap<MockHijrahDate, JobAttributes>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Class<Field> class3 = Field.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      parserConfig0.configFromPropety(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)linkedHashMap0.clone();
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap1);
      
      Field field0 = ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) linkedHashMap0, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("", "");
      assertNull(string0);
      
      String string1 = weakHashMap0.put("qF,O1", "Ljava.awt.Color");
      assertNull(string1);
      
      String string2 = weakHashMap0.put("", ".I!q>fRHA");
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {qF,O1=Ljava.awt.Color, =.I!q>fRHA}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals("class [B", class1.toString());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) genericArrayType0;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertNotNull(string0);
      assertEquals("fastjson.parser.deny", string0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Class<IllegalStateException> class2 = IllegalStateException.class;
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "?PaL5\"k~";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?PaL5\"k~");
      assertFalse(boolean0);
      
      Class<Point> class0 = Point.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class<java.sql.Date> class2 = java.sql.Date.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class2, map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : interface java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      String string0 = "o";
      Class<?> class1 = TypeUtils.loadClass("o");
      assertNull(class1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string1 = weakHashMap0.put("o", "o");
      assertNull(string1);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<SQLDataException> class2 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2, weakHashMap0);
      assertNotNull(javaBeanSerializer0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : o
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Class<?> class1 = TypeUtils.loadClass("");
      assertNull(class1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("", "");
      assertNull(string0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<SQLDataException> class2 = SQLDataException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2, weakHashMap0);
      assertNotNull(javaBeanSerializer0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      java.sql.Date date0 = TypeUtils.castToSqlDate("");
      assertNull(date0);
      
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("cause");
      assertEquals("cause", locale0.toString());
      assertEquals("cause", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = mockGregorianCalendar0.getWeekYear();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(2014, int0);
      
      Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("h\"Gg@0h]?lexy,4?D|5", (Throwable) null);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Dimension> class1 = Dimension.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list1 = TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, false, propertyNamingStrategy1);
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      String string0 = TypeUtils.decapitalize("z@4eBU{s)Mm?hI*");
      assertNotNull(string0);
      
      Class<?> class1 = TypeUtils.loadClass("z@4eBU{s)Mm?hI*");
      assertNull(class1);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(javaBeanSerializer0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Gj}<");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Gj}<", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Gj}<", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) map0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
