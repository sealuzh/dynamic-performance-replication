/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:29:20 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.SegmentedByteString;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Pipe pipe0 = new Pipe(922337L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha256();
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(255L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAll((Sink) null);
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte(512);
      HashingSink.sha1(buffer0);
      ByteString byteString0 = buffer0.sha1();
      buffer0.indexOf(byteString0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Integer integer0 = new Integer(11);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(buffer0, byteString0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)99, (long) (byte)99, (-2865L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=99 toIndex=-2865
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-557));
      // Undeclared exception!
      try { 
        buffer1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(10);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      buffer1.md5();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      buffer0.read(byteArray0);
      buffer0.writeHexadecimalUnsignedLong((byte)45);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1L));
      buffer0.sha1();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) dataInputStream0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      buffer0.sha1();
      Buffer buffer2 = buffer1.writeLongLe((-1976L));
      buffer2.readShortLe();
      boolean boolean0 = buffer1.request((-1976L));
      assertEquals(16L, buffer0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[35];
      byte[] byteArray1 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray1);
      byteString0.hashCode = (-1);
      buffer0.rangeEquals((long) (byte)0, byteString0);
      buffer0.outputStream();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      long long0 = buffer0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      buffer0.indexOf(byteString0);
      Inflater inflater0 = new Inflater();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.indexOfElement((ByteString) null, 0L);
      buffer1.timeout();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip((-98L));
      buffer0.require(0L);
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.skip((-1));
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.require(2128L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.toString();
      ByteString byteString0 = buffer_UnsafeCursor1.buffer.md5();
      buffer_UnsafeCursor0.buffer.hmacSha256(byteString0);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Pipe pipe0 = new Pipe(71776119061217280L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(71776119061217280L);
      assertEquals(17L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(35L);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(65L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      long long0 = buffer_UnsafeCursor1.buffer.writeAll(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, long0);
      
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.snapshot();
      String string0 = buffer_UnsafeCursor0.buffer.readUtf8Line();
      assertNull(string0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("gKuH;_jV_p");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Pipe pipe0 = new Pipe(290L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("e+1Ju x~w^4h$)&Ao", 17, 17);
      buffer1.sha256();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.inputStream();
      // Undeclared exception!
      try { 
        buffer0.readString((-1317L), (Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1317
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      buffer0.copyTo((OutputStream) pipedOutputStream0);
      buffer0.exhausted();
      buffer0.request(378L);
      buffer0.md5();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      buffer0.skip((-98L));
      realBufferedSource0.buffer.writeByte(2707);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.require((-98L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        realBufferedSource0.indexOf(byteString0, (long) (byte)32);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)121, (long) (byte)121);
      Inflater inflater0 = new Inflater();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.toString();
      Buffer buffer1 = (Buffer)hashingSource0.delegate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.hmacSha1(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.readFully(buffer2, (long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writableSegment(14);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      try { 
        buffer0.readFully(realBufferedSink0.buffer, 2147483647L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.toString();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer0.copyTo((OutputStream) pipedOutputStream0);
      buffer2.completeSegmentByteCount();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      buffer0.rangeEquals((-433L), byteString1, 33, 48);
      try { 
        buffer0.skip(48);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Pipe pipe0 = new Pipe(290L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("e+1Ju x~w^4h$)&Ao", 17, 17);
      buffer1.writeLong(17);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[20];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.writeDecimalLong((-1L));
      buffer0.rangeEquals((long) (byte)0, byteString0);
      buffer0.outputStream();
      // Undeclared exception!
      try { 
        buffer0.snapshot(55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=55296
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require(0L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Inflater inflater0 = new Inflater();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 2716L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[35];
      byte[] byteArray1 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray1);
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      buffer0.rangeEquals((long) (byte)0, byteString0);
      buffer0.outputStream();
      buffer1.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Pipe pipe0 = new Pipe(283L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("e+1Ju x~w^4h$)&Ao", (-2313), 1064);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2313
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      buffer0.buffer();
      MockFile mockFile0 = new MockFile("HmacSHA512", "HmacSHA512");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "HmacSHA512");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // HmacSHA512
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)7, (-589L), 15L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-589 toIndex=15
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.writeDecimalLong(585L);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      byte[] byteArray0 = new byte[1];
      buffer0.readUtf8Line();
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha1(byteString0);
      buffer0.write(byteString0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Pipe pipe0 = new Pipe(290L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("(m3br", 17, (-1908));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1908 < 17
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(2409);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(2409);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=2409 > size=4
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      buffer0.readUtf8Line();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      Buffer buffer1 = buffer0.write(byteString0);
      ByteString byteString1 = buffer1.hmacSha1(byteString0);
      buffer0.indexOfElement(byteString1, (long) (byte)27);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte((-1));
      buffer0.readUtf8CodePoint();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      byte[] byteArray0 = new byte[1];
      buffer0.readUtf8Line();
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      buffer0.hmacSha1(byteString0);
      buffer0.rangeEquals((long) (byte)0, byteString0, 1283, (int) (byte)0);
      buffer0.read(byteArray0);
      buffer0.writeShortLe((-1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clone();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOfElement(byteString0);
      buffer0.indexOf((byte)9);
      buffer0.hmacSha512(byteString0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-15);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.hmacSha512(byteString0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      Buffer buffer2 = buffer1.writeDecimalLong(7205759403792L);
      // Undeclared exception!
      try { 
        buffer2.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, 60L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte(50);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = buffer0.sha1();
      buffer0.indexOf(byteString0);
      hashingSink0.hash();
      Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("c!znzKcD;#@93e?C$H", "c!znzKcD;#@93e?C$H");
      Buffer buffer2 = buffer1.writeDecimalLong(922337L);
      buffer_UnsafeCursor0.buffer.equals(buffer0);
      // Undeclared exception!
      try { 
        buffer2.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("}^KaG8**#e6CKwI");
      Inflater inflater0 = new Inflater(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.writeDecimalLong(65533L);
      buffer0.segmentSizes();
      Inflater inflater1 = new Inflater();
      buffer1.readByteArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      buffer0.readUtf8Line();
      buffer0.indexOfElement(byteString1, (long) (byte)27);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1095216660484L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeDecimalLong((-1));
      buffer_UnsafeCursor0.buffer.readShort();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      String string0 = ")";
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      buffer0.skip((-98L));
      buffer0.require(0L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Buffer buffer1 = buffer0.readFrom((InputStream) pushbackInputStream0, 0L);
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte(50);
      HashingSink.sha1(buffer0);
      buffer_UnsafeCursor0.next();
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = buffer_UnsafeCursor0.start;
      buffer0.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      long long0 = 65280L;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long1 = 0L;
      buffer_UnsafeCursor0.resizeBuffer(0L);
      buffer_UnsafeCursor0.buffer.writeShort(99);
      buffer0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read(buffer0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-1L);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1L));
      buffer0.sha1();
      // Undeclared exception!
      try { 
        buffer0.writeAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      Buffer buffer1 = new Buffer();
      buffer1.equals(buffer0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong((-1621L));
      buffer1.equals(buffer0);
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("", charset0);
      try { 
        buffer0.write((Source) buffer1, (long) (byte)14);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      Buffer buffer1 = buffer0.write(byteString0);
      buffer1.hmacSha1(byteString0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte)127;
      buffer1.read(byteArray1);
      buffer1.writeTo((OutputStream) byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2989L));
      buffer0.readDecimalLong();
      buffer0.writeInt(562);
      buffer0.readByteString();
      buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, (-2989L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(65L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource.hmacSha1(buffer_UnsafeCursor0.buffer, byteString0);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 17, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      inflaterSource0.refill();
      ByteString byteString1 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      byteString0.sha1();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong(100000000000000L);
      Object object0 = new Object();
      buffer1.equals(object0);
      buffer0.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(19L);
      byte[] byteArray0 = new byte[3];
      HashingSink.sha256(buffer0);
      buffer0.indexOf((byte)9);
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Charset charset0 = Charset.defaultCharset();
      int int0 = 9;
      // Undeclared exception!
      try { 
        buffer1.writeString("W@}4d", 9, 9, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 9 > 5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      buffer0.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      realBufferedSink0.buffer();
      realBufferedSink0.writeUtf8("T");
      buffer_UnsafeCursor0.buffer.readByte();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer1 = buffer0.writeDecimalLong((-1405L));
      buffer1.clear();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=");
      buffer0.sha512();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      buffer0.write(byteArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      buffer1.readByte();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writableSegment(1);
      Pipe pipe0 = new Pipe((byte)86);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.end = 43;
      buffer_UnsafeCursor0.close();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      try { 
        buffer1.readFrom((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Pipe pipe0 = new Pipe(92233L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("Q3nbac", 102, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 102 > 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      buffer0.readUtf8();
      Buffer buffer1 = new Buffer();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 1000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = 2707;
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      buffer0.rangeEquals((long) 224, byteString0, 224, (-712));
      buffer0.timeout();
      buffer0.indexOf((byte)117, (long) (byte)117);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("", 2707, (-887), (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -887 < 2707
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(72057594037927L);
      pipe0.sinkClosed = true;
      buffer0.writeShort((-2028));
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 72057594037927L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=72057594037927
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10021L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-1));
      ((RealBufferedSink) bufferedSink0).buffer.head = null;
      realBufferedSink0.buffer.write((Source) buffer_UnsafeCursor0.buffer, 10021L);
      realBufferedSink0.buffer.outputStream();
      // Undeclared exception!
      realBufferedSink0.buffer.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.next();
      Charset.defaultCharset();
      Charset.defaultCharset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("c!znzKcD;#@93e?C$H", "");
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.clone();
      buffer1.readUtf8Line();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      buffer1.completeSegmentByteCount();
      buffer_UnsafeCursor0.buffer.writeAll(buffer2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode = (-1);
      buffer0.writeDecimalLong((-1L));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(9223372036L);
      buffer1.sha512();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10021L);
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      buffer_UnsafeCursor0.next();
      buffer0.copyTo(buffer_UnsafeCursor0.buffer, 5L, 569L);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[11];
      byteArray0[5] = (byte) (-5);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.write(byteArray0);
      try { 
        realBufferedSource0.buffer.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0000000000fb0000000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-4706));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1702L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte(50);
      HashingSink.sha1(buffer0);
      buffer0.size = (long) (-1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = ObjectStreamConstants.baseWireHandle;
      buffer0.clear();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(8257536);
      try { 
        buffer0.require(8257536);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      Charset.defaultCharset();
      buffer0.close();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1095216660484L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.offset = 1095216660484L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1095216660484 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.toString();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-3341L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray1);
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      buffer1.segmentSizes();
      ByteString.encodeUtf8("");
      Inflater inflater0 = new Inflater();
      buffer0.indexOfElement(byteString0, (long) (byte)0);
      // Undeclared exception!
      try { 
        buffer1.writeUtf8CodePoint(8257536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7e0000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.flush();
      buffer0.inputStream();
      buffer0.sha1();
      buffer0.request(10000000000000000L);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Buffer buffer1 = (Buffer)hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      buffer1.write(byteArray0);
      buffer1.writeDecimalLong(717761189L);
      buffer1.readLong();
      Pipe pipe0 = new Pipe(3685L);
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeByte((-1));
      buffer_UnsafeCursor0.next();
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      int int0 = buffer_UnsafeCursor0.start;
      Charset.defaultCharset();
      buffer0.indexOfElement(byteString0);
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      ByteString byteString1 = new ByteString((byte[]) null);
      Buffer buffer1 = new Buffer();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.read(buffer0, 0L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2989L));
      Object[] objectArray0 = new Object[3];
      byte[] byteArray0 = new byte[1];
      buffer1.readInt();
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, (-2989L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeIntLe(1763);
      Buffer buffer2 = buffer1.buffer();
      buffer2.readInt();
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.indexOf((byte)0);
      Buffer buffer2 = buffer1.write(byteArray0);
      Buffer buffer3 = realBufferedSource0.buffer;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer4 = buffer2.writeDecimalLong((-9223372036854775L));
      buffer2.segmentSizes();
      // Undeclared exception!
      try { 
        buffer4.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      int int0 = ObjectStreamConstants.baseWireHandle;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)0);
      buffer0.readHexadecimalUnsignedLong();
      buffer1.writeHexadecimalUnsignedLong((-345L));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-2989L);
      Buffer buffer1 = buffer0.writeDecimalLong((-2989L));
      buffer0.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer1.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Pipe pipe0 = new Pipe(922337203L);
      Source source0 = pipe0.source();
      HashingSource.md5(source0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer1 = realBufferedSource0.buffer.writeLongLe(10L);
      buffer0.writeDecimalLong(2147483647L);
      buffer1.sha1();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.equals(buffer2);
      buffer2.readLongLe();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)14;
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte)14;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte((byte)14);
      HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.next();
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = buffer_UnsafeCursor0.start;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null, 128, 8230);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      buffer0.emitCompleteSegments();
      Object object0 = new Object();
      buffer_UnsafeCursor0.buffer.equals(object0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer_UnsafeCursor0.buffer.writeDecimalLong(9223372036854775807L);
      buffer0.segmentSizes();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.next();
      Charset.defaultCharset();
      ByteString byteString0 = buffer0.sha1();
      byteString0.indexOf(buffer_UnsafeCursor0.data);
      Charset.defaultCharset();
      HashingSink.sha1(buffer1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Integer integer0 = new Integer(19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, buffer_UnsafeCursor0.data);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("WLFg:q/ubmwwJ#Q", charset0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      buffer_UnsafeCursor0.next();
      try { 
        buffer_UnsafeCursor0.buffer.readFully(buffer_UnsafeCursor0.data);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = ObjectStreamConstants.baseWireHandle;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte(50);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = buffer1.hmacSha512(byteString0);
      String string0 = byteString0.utf8;
      ByteString byteString2 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.hmacSha1(byteString1);
      buffer0.rangeEquals(2L, byteString0, 118, (-16777216));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      Charset.defaultCharset();
      buffer0.readUtf8Line();
      Charset.defaultCharset();
      Integer integer0 = new Integer((-8));
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.buffer.writeByte(50);
      HashingSink.sha1(buffer0);
      buffer_UnsafeCursor0.buffer.indexOf((byte) (-25));
      ByteString byteString0 = buffer0.sha1();
      Charset.defaultCharset();
      buffer0.readHexadecimalUnsignedLong();
      buffer_UnsafeCursor0.buffer.hmacSha256(byteString0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "HmacSHA256");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(65);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteStringArray0[1];
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_");
      ByteString byteString1 = hashingSink0.hash();
      buffer1.indexOfElement(byteString1, (long) 65);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B`");
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1L));
      // Undeclared exception!
      try { 
        buffer1.readByteArray(15L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=15
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte(50);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1L));
      buffer_UnsafeCursor0.buffer.readDecimalLong();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.readByteString();
      // Undeclared exception!
      try { 
        buffer1.write(buffer_UnsafeCursor0.buffer, 5L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1384L));
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "=";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=");
      Buffer buffer1 = buffer0.writeUtf8CodePoint(57343);
      // Undeclared exception!
      try { 
        buffer1.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 26;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(26);
      buffer1.segmentSizes();
      // Undeclared exception!
      try { 
        Charset.forName("SHA-1");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // SHA-1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      inflaterSource0.refill();
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      buffer0.readUtf8Line();
      ByteString byteString3 = new ByteString(byteArray0);
      buffer0.hmacSha1(byteString0);
      buffer0.rangeEquals(1000L, byteString0, (-1616), (-1616));
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require(0L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Buffer buffer1 = buffer0.readFrom((InputStream) pushbackInputStream0, 0L);
      Inflater inflater0 = new Inflater();
      pushbackInputStream0.close();
      Buffer buffer2 = buffer1.writeDecimalLong(0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      SegmentPool.byteCount = (long) (-1);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.getByte(0L);
      buffer1.writeUtf8CodePoint(513);
      HashingSink hashingSink0 = HashingSink.md5(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      buffer_UnsafeCursor0.buffer.hmacSha1(byteString0);
      buffer1.readDecimalLong();
      // Undeclared exception!
      try { 
        Charset.forName("M/e{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // M/e{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer0.writeDecimalLong(0L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KSB{h@@j;e=v7yo9");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = ObjectStreamConstants.baseWireHandle;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.toString();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      try { 
        buffer1.copyTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte(50);
      HashingSink.sha1(buffer0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SGvz^p@KdTG$s[YQi");
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeByte(2707);
      inflaterSource0.timeout();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SGvz^p@KdTG$s[YQi");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer3.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.next();
      Charset.defaultCharset();
      buffer0.sha1();
      Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("c!znzKcD;#@93e?C$H", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      buffer1.copyTo((OutputStream) mockPrintStream0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.readByteArray((long) 0);
      bufferedOutputStream0.close();
      MockFile mockFile1 = new MockFile(mockFile0, "A57No*qa}");
      mockFile0.renameTo(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = null;
      try {
        mockFileOutputStream1 = new MockFileOutputStream(mockFile1, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.indexOf((byte)108);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeTo((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)108;
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte(50);
      HashingSink.sha1(buffer0);
      buffer_UnsafeCursor0.next();
      Charset.defaultCharset();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Integer integer1 = new Integer(56320);
      Object object1 = new Object();
      buffer0.equals(object1);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      buffer0.skip((-98L));
      realBufferedSource0.buffer.writeByte(2707);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.require((-98L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      buffer0.size = 2147483647L;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSource0.buffer.sha1();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (long) (byte)32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[20];
      byte[] byteArray1 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray1);
      ByteString byteString1 = new ByteString(byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      long long0 = (-1L);
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      Inflater inflater0 = new Inflater();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.rangeEquals((long) (byte)0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeShort(2396);
      buffer0.segmentSizes();
      realBufferedSink0.buffer.writeDecimalLong(10000000000L);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOfElement(byteString1, (-193L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(65);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteStringArray0[1];
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_");
      ByteString byteString1 = hashingSink0.hash();
      buffer1.indexOfElement(byteString1, (long) 65);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte(2);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = hashingSink0.hash();
      HashingSink.sha512(buffer1);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      byteString0.write(buffer0);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.snapshot();
      int int0 = buffer_UnsafeCursor0.start;
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.indexOf((byte)0);
      realBufferedSource0.buffer.writeInt(902);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer1.read(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(830);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("}^KaG8**#e6CKwI", charset0);
      buffer1.writeDecimalLong(830);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      byteString0.write(buffer0);
      buffer0.indexOf(byteString0);
      buffer0.sha256();
      buffer1.readUtf8CodePoint();
      buffer1.size();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      buffer0.writeDecimalLong(568L);
      buffer0.sha1();
      buffer0.indexOf(byteString1);
      buffer0.sha256();
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      buffer0.writeDecimalLong(10000000000000L);
      buffer0.timeout();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("limit < 0: ", 2147483415, 2147483415);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2147483415 > 11
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray1);
      ByteString byteString1 = new ByteString(byteArray1);
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      buffer0.sha512();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = buffer1.write(byteArray1);
      buffer2.indexOfElement(byteString0);
      buffer0.segmentSizes();
      buffer2.readLong();
      buffer0.readUtf8();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      byteString0.write(buffer1);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = new Buffer();
      buffer_UnsafeCursor0.next();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer_UnsafeCursor0.buffer.writeTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-2989L);
      Buffer buffer1 = buffer0.writeDecimalLong((-2989L));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 11);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream1, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) buffer1;
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("C: 0JK.J5)@IHBL", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      buffer0.writeTo((OutputStream) dataOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(11);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      // Undeclared exception!
      try { 
        buffer1.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(746L);
      buffer0.sha1();
      buffer1.hashCode();
      try { 
        MockURI.URI("L(4n,q", "8WB1w5N!'_PuP;)x", "8WB1w5N!'_PuP;)x", 121, "Expected leading [0-9] or '-' character but was 0x", "okio.Buffer", "UTF-8");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: L(4n,q://8WB1w5N!'_PuP;)x@8WB1w5N!'_PuP;)x:121Expected%20leading%20%5B0-9%5D%20or%20'-'%20character%20but%20was%200x?okio.Buffer#UTF-8
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(buffer0, byteString0);
      HashingSource.md5(buffer0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("%TD$3(PGCqTH", charset0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}f-g");
      Buffer buffer2 = buffer1.writeUtf8CodePoint(2372);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%TD$3(PGCqTH");
      Buffer buffer3 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer1.hmacSha512(byteString0);
      short short0 = ObjectStreamConstants.STREAM_VERSION;
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.indexOfElement(byteString0, 972L);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.write((Source) realBufferedSource0, (-1335L));
      realBufferedSource0.buffer.hashCode();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte)14;
      byteArray0[12] = (byte)14;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.readUtf8Line((long) (byte)14);
      MockFile mockFile0 = new MockFile("\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000", "\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000");
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-965));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -965
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte(14);
      buffer0.readUtf8CodePoint();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null, 14, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte(101);
      HashingSink.sha1(buffer1);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.indexOf((byte)31);
      ByteString byteString0 = buffer2.sha1();
      Charset.defaultCharset();
      buffer2.readHexadecimalUnsignedLong();
      buffer_UnsafeCursor0.buffer.hmacSha256(byteString0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "HmacSHA256");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.indexOf((byte)108);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      byteArray0[3] = (byte)14;
      realBufferedSource0.buffer.writeUtf8("/]nu\"SV5d37C,r4k");
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(buffer0, byteString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(30L);
      byteString0.indexOf(byteString0);
      Buffer buffer1 = buffer0.writeUtf8("getsockname failed");
      buffer0.rangeEquals(0L, byteString0, 0, 31);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x67
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeIntLe((-1725));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      Charset.defaultCharset();
      buffer1.readHexadecimalUnsignedLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SGvz^p@KdTG$s[YQi");
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeByte(2707);
      realBufferedSource0.buffer.timeout();
      buffer1.require(0L);
      byte byte0 = (byte)32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[4] = (byte)32;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSource0.buffer.writeLongLe(2707);
      try { 
        realBufferedSource0.indexOf(byteString0, 8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.next();
      Charset.defaultCharset();
      buffer0.sha1();
      Charset.defaultCharset();
      String string0 = "";
      MockFile mockFile0 = new MockFile("c!znzKcD;#@93e?C$H", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.copyTo((OutputStream) bufferedOutputStream0);
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer2.indexOf((byte) (-1));
      bufferedOutputStream0.close();
      buffer0.writeTo((OutputStream) bufferedOutputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer1.readUnsafe(buffer_UnsafeCursor1);
      try { 
        bufferedOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.clear();
      Buffer buffer1 = buffer0.buffer();
      buffer1.writeAll(buffer0);
      // Undeclared exception!
      try { 
        buffer1.writeString(",I&x@g-de`d<0WFDR", (-16777216), 840, (Charset) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -16777216
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte((-1));
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeString("soU.\u0004)5Ypl\"e-m'", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte(50);
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      HashingSink.sha1(buffer0);
      // Undeclared exception!
      try { 
        options0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeDecimalLong(10000000000000L);
      buffer0.completeSegmentByteCount();
      buffer1.indexOf((byte)92, 9L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer2.writeDecimalLong((byte)92);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.segmentSizes();
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((byte) (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -8
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[3] = (byte)0;
      inflater0.setInput(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeDecimalLong(2310L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Inflater inflater1 = new Inflater();
      buffer2.readUtf8Line();
      Buffer buffer3 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer2.writeShortLe(57);
      buffer0.writeUtf8CodePoint(1114111);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAll(hashingSink0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)19;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0, 149L);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      Charset.defaultCharset();
      Pipe pipe0 = new Pipe(1729L);
      pipe0.sourceClosed = true;
      Buffer buffer1 = pipe0.buffer;
      buffer1.clear();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B");
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      long long0 = 9L;
      // Undeclared exception!
      try { 
        buffer0.readFrom(inputStream0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-1));
      ((RealBufferedSink) bufferedSink0).buffer.head = null;
      realBufferedSink0.buffer();
      BufferedSink bufferedSink1 = realBufferedSink0.writeLongLe((-1));
      ((RealBufferedSink) bufferedSink1).buffer.inputStream();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink1).buffer.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = new Buffer();
      buffer2.indexOf((byte)30);
      byte[] byteArray0 = new byte[2];
      buffer0.write(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toAsciiUppercase();
      buffer1.indexOf(byteString0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.writeDecimalLong(10000000L);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      hashingSource0.hash();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      realBufferedSource0.buffer();
      Buffer buffer3 = realBufferedSource0.buffer;
      MockFile mockFile0 = new MockFile((File) null, "nOuXw:7pA/mCtnvYv?P");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "nOuXw:7pA/mCtnvYv?P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "timeout < 0: ");
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(buffer0, byteString0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(30L);
      byteString0.indexOf(byteString0);
      Buffer buffer1 = buffer0.writeUtf8("getsockname failed");
      buffer1.readShort();
      buffer0.rangeEquals(0L, byteString0, 0, 0);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x74
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = 50;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte(50);
      HashingSink.sha1(buffer0);
      buffer_UnsafeCursor0.next();
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require(0L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Buffer buffer1 = buffer0.readFrom((InputStream) pushbackInputStream0, 0L);
      Inflater inflater0 = new Inflater();
      pushbackInputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      buffer1.writeDecimalLong(0L);
      // Undeclared exception!
      try { 
        buffer0.writableSegment(2117237399);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      buffer_UnsafeCursor0.next();
      Charset charset0 = Charset.defaultCharset();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Integer integer0 = new Integer(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      buffer0.writeDecimalLong(13L);
      buffer_UnsafeCursor0.buffer.sha512();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = buffer1.write(buffer_UnsafeCursor0.data);
      buffer2.indexOfElement(byteString0);
      buffer0.segmentSizes();
      buffer1.readLong();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.writeString("", 1, 1, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer1 = buffer0.writeShort(6);
      Buffer buffer2 = buffer1.clone();
      byte[] byteArray0 = new byte[8];
      buffer2.size = 10000000000000000L;
      byteArray0[7] = (byte)110;
      byteArray0[1] = (byte) (-28);
      byteArray0[3] = (byte)76;
      byteArray0[0] = (byte)17;
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong((byte)17);
      // Undeclared exception!
      try { 
        buffer3.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[25];
      byteArray0[2] = (byte)14;
      byteArray0[12] = (byte)14;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[14] = (byte)14;
      Buffer buffer1 = buffer0.write(byteArray0);
      ByteString byteString0 = buffer1.md5();
      buffer1.indexOfElement(byteString0, (long) (byte)14);
      buffer1.readUtf8Line((long) (byte)14);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer0.writeTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = (-2028178999);
      buffer_UnsafeCursor0.buffer.writeByte((-2028178999));
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 2: 1 (to read code point prefixed 0xffffffc9)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      Buffer buffer1 = buffer0.writeUtf8("getsockname failed");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      HashingSink.hmacSha256(bufferedSink0, byteString0);
      bufferedSink0.buffer();
      realBufferedSink0.buffer.readUtf8CodePoint();
      Buffer buffer2 = realBufferedSink0.buffer();
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.snapshot(963);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=62 offset=0 byteCount=963
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      byteString0.write(buffer1);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer1.snapshot();
      Buffer buffer3 = new Buffer();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.readWrite = false;
      buffer1.readUtf8CodePoint();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-3627L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -3627
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10000L);
      buffer_UnsafeCursor0.buffer.md5();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.readByteArray();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeByte((-1));
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O");
      Buffer buffer3 = new Buffer();
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.snapshot();
      buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O");
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((-1));
      HashingSource.md5(((RealBufferedSink) bufferedSink0).buffer);
      buffer0.rangeEquals((-92233L), byteString1);
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10021L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-1));
      ((RealBufferedSink) bufferedSink0).buffer.head = null;
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeLongLe(10021L);
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(1889);
      HashingSink.sha1(buffer1);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(45);
      Buffer buffer2 = buffer1.clone();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-28);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)17;
      buffer2.writeHexadecimalUnsignedLong((byte)110);
      Buffer buffer3 = buffer1.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      realBufferedSink0.writeShort((byte) (-28));
      Pipe pipe0 = new Pipe(2663L);
      ByteString byteString1 = buffer1.snapshot();
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer0.readUtf8CodePoint();
      Charset.defaultCharset();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Pipe pipe1 = new Pipe((byte)17);
      Buffer buffer5 = pipe0.buffer;
      buffer2.hashCode();
      Charset.defaultCharset();
      byteString0.indexOf(byteArray0);
      buffer5.hmacSha512(byteString1);
      buffer0.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeShort(99);
      buffer0.emitCompleteSegments();
      Integer integer0 = new Integer(99);
      buffer_UnsafeCursor0.resizeBuffer(0L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(65280L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=65280 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("IyPUA.<wa8gBzx|t", charset0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.resizeBuffer((byte)11);
      Charset.defaultCharset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      Object object1 = new Object();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10021L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(10021L);
      ((RealBufferedSink) bufferedSink0).buffer.inputStream();
      realBufferedSink0.buffer.timeout();
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line(10021L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeString("[yPUA<wa8gBzxtV}", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer1.indexOf((byte)95);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(65533);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer_UnsafeCursor0.buffer.equals("[yPUA<wa8gBzxtV}");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOfElement(byteString0, 17L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer1 = buffer0.writeShort(11);
      Buffer buffer2 = buffer1.clone();
      byte[] byteArray0 = new byte[8];
      buffer2.size = 10000000000000000L;
      byteArray0[1] = (byte) (-28);
      byteArray0[3] = (byte)76;
      byteArray0[0] = (byte)17;
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong((byte)17);
      Buffer buffer4 = buffer1.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer4);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        buffer3.snapshot();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size > Integer.MAX_VALUE: 10000000000000002
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(45);
      Buffer buffer2 = buffer1.clone();
      byte[] byteArray0 = new byte[8];
      buffer2.size = 10000000000000000L;
      byteArray0[7] = (byte)80;
      byteArray0[2] = (byte)80;
      byte byte0 = (byte)76;
      byteArray0[3] = (byte)76;
      byte byte1 = (byte)17;
      byteArray0[2] = (byte)17;
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong((byte)0);
      buffer3.write(byteArray0);
      buffer2.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer4 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer4.getByte((byte)80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=80 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 0L;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeShort(99);
      buffer0.emitCompleteSegments();
      Integer integer0 = new Integer(99);
      buffer_UnsafeCursor0.resizeBuffer(0L);
      // Undeclared exception!
      try { 
        buffer1.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha1(buffer0);
      String string0 = "n0P34 NE3/O$8T{]";
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("n0P34 NE3/O$8T{]", charset0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x6e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      OutputStream outputStream0 = buffer0.outputStream();
      byte[] byteArray0 = new byte[11];
      buffer0.indexOf((byte)1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = buffer0.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer0.md5();
      Pipe pipe0 = new Pipe(3641L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = buffer1.copyTo(outputStream0);
      Integer integer0 = new Integer((byte)122);
      Object object0 = new Object();
      realBufferedSource0.buffer.equals((Object) null);
      buffer3.writeTo((OutputStream) byteArrayOutputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("}^KaG8**#e6CKwI");
      Buffer buffer2 = buffer0.writeIntLe(830);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("GkaQ", charset0);
      buffer2.writeDecimalLong((-138L));
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      hashingSink0.hash();
      byteString0.write(buffer0);
      buffer1.indexOf(byteString0);
      buffer1.sha256();
      buffer2.readUtf8CodePoint();
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer3 = pipe0.buffer;
      buffer2.size();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10000L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.emitCompleteSegments();
      Buffer buffer2 = buffer0.writeDecimalLong((-1L));
      buffer_UnsafeCursor0.buffer.segmentSizes();
      Inflater inflater0 = new Inflater();
      Buffer buffer3 = buffer2.clone();
      HashingSource hashingSource0 = HashingSource.sha1(buffer3);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOfElement(byteString0, 10000L);
      Charset.defaultCharset();
      Charset.defaultCharset();
      buffer3.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readByteString((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=10002 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = 2004318071;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeIntLe(2004318071);
      realBufferedSink1.buffer.head = null;
      realBufferedSink0.buffer.write((Source) buffer_UnsafeCursor0.buffer, 10000L);
      Buffer buffer1 = realBufferedSink1.buffer;
      RealBufferedSink realBufferedSink2 = (RealBufferedSink)realBufferedSink0.writeLongLe((-3805L));
      // Undeclared exception!
      try { 
        realBufferedSink2.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeString("[yPUA<wa8gBzxtV}", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(92233L);
      ByteString byteString0 = new ByteString((byte[]) null);
      long long0 = buffer_UnsafeCursor0.offset;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString1 = buffer1.sha1();
      buffer_UnsafeCursor0.readWrite = false;
      byteString1.sha1();
      buffer0.hmacSha1(byteString1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[yPUA<wa8gBzxtV}");
      // Undeclared exception!
      buffer1.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 92233720368547758L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10021L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeIntLe((-1));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      realBufferedSink1.buffer.head = null;
      Buffer buffer1 = (Buffer)realBufferedSink0.buffer.write((Source) buffer_UnsafeCursor0.buffer, 10021L);
      buffer1.clone();
      realBufferedSink0.writeLongLe(10021L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("IyPUA.<wa8gBzx|t", charset0);
      InputStream inputStream0 = buffer0.inputStream();
      Buffer buffer2 = buffer1.readFrom(inputStream0);
      byte byte0 = (byte)51;
      buffer1.readUtf8Line();
      Charset.defaultCharset();
      Buffer buffer3 = buffer0.writeDecimalLong(byte0);
      int int0 = (-2163);
      Integer integer0 = new Integer(int0);
      int int1 = buffer3.readUtf8CodePoint();
      buffer2.readIntLe();
      buffer3.readIntLe();
      int int2 = 52;
      buffer2.writeShort(int2);
      long long0 = 153L;
      buffer3.readByteArray(long0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int3 = 18;
      buffer2.writeUtf8CodePoint(int3);
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer4 = realBufferedSource0.buffer;
      long long1 = (-753L);
      buffer4.readFully(buffer1, long1);
      realBufferedSource0.buffer.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer5 = realBufferedSink0.buffer;
      buffer5.readFully(buffer1, (long) int1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      byte[] byteArray0 = new byte[1];
      buffer0.readUtf8Line();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 110, 110, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      Buffer buffer1 = buffer0.writeUtf8("getsockname failed");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      realBufferedSink0.buffer.readLongLe();
      HashingSink hashingSink0 = HashingSink.hmacSha256(bufferedSink0, byteString0);
      bufferedSink0.buffer();
      realBufferedSink0.buffer.readUtf8CodePoint();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer.inputStream();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        Charset.forName("getsockname failed");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // getsockname failed
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("}^KaG8**#e6CK");
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}^KaG8**#e6CK");
      segmentedByteString0.write(buffer1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffer");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink1.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2_");
      buffer_UnsafeCursor0.buffer.snapshot();
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      buffer_UnsafeCursor0.next();
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      Buffer buffer4 = buffer1.writeString("v@&:", (Charset) uS_ASCII0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink0);
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer4, (long) 0, (-979L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-979
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10021L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer_UnsafeCursor0.next();
      buffer0.readFully(buffer_UnsafeCursor0.data);
      buffer_UnsafeCursor0.resizeBuffer(10021L);
      ((RealBufferedSink) bufferedSink0).buffer.writeByte((-1908));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink1 = realBufferedSink1.write(buffer_UnsafeCursor0.data);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink1);
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)14;
      byte[] byteArray0 = new byte[15];
      byteArray0[14] = (byte)14;
      byteArray0[9] = (byte)0;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.readAndWriteUnsafe();
      buffer1.readUtf8Line((long) (byte)0);
      MockFile mockFile0 = new MockFile("", "");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeShort(109);
      buffer0.readShort();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.read((Buffer) null, (-14L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("}^KaG8**#e6CK");
      ByteString byteString0 = buffer0.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.write(byteString0);
      try { 
        realBufferedSink0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }
}
