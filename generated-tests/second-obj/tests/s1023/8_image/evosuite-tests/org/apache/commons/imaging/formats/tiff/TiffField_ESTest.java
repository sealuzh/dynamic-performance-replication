/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:25:31 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.ByteOrder;
import java.time.Clock;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)51, (byte)0, fieldTypeDouble0, (byte)0, (byte)0, byteArray0, byteOrder0, (byte)0);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [D cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50710, (-3498), fieldTypeRational0, (-3498), 50710, byteArray0, byteOrder0, (-1418));
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("50710 (0xc616: CFAPlaneColor): ", string0);
      
      int int0 = tiffField0.getSortHint();
      assertEquals((-3498), tiffField0.getDirectoryType());
      assertEquals(50710, tiffField0.getOffset());
      assertEquals((-27984), tiffField0.getBytesLength());
      assertEquals((-1418), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(48, 2401, fieldTypeShort0, 48, 48, byteArray0, byteOrder0, 2401);
      String string0 = tiffField0.getValueDescription();
      assertEquals(48L, tiffField0.getCount());
      assertEquals(2401, tiffField0.getDirectoryType());
      assertEquals(96, tiffField0.getBytesLength());
      assertEquals(48, tiffField0.getTag());
      assertEquals(2401, tiffField0.getSortHint());
      assertEquals(48, tiffField0.getOffset());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[3] = (byte)21;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(4017, 1649, fieldTypeByte0, 5424L, 1649, byteArray0, byteOrder0, (byte) (-119));
      String string0 = tiffField0.getValueDescription();
      assertEquals(1649, tiffField0.getDirectoryType());
      assertEquals(4017, tiffField0.getTag());
      assertEquals(5424, tiffField0.getBytesLength());
      assertEquals(5424L, tiffField0.getCount());
      assertNotNull(string0);
      assertEquals((-119), tiffField0.getSortHint());
      assertEquals(1649, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte) (-120), 2023, fieldTypeByte0, (byte)100, 4L, byteArray0, byteOrder0, (byte)100);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@15732935 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(7, (-1016), fieldTypeLong0, (byte)7, 4L, byteArray0, byteOrder0, (byte)0);
      tiffField0.getIntArrayValue();
      assertEquals(7, tiffField0.getTag());
      assertEquals(28, tiffField0.getBytesLength());
      assertEquals(4, tiffField0.getOffset());
      assertEquals((-1016), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(7L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(34019, 34019, fieldTypeRational0, 34019, 34019, byteArray0, byteOrder0, 34019);
      tiffField0.getOversizeValueElement();
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      TiffField tiffField0 = new TiffField(1356, (byte)0, fieldTypeRational0, (byte)3, 1, byteArray0, byteOrder0, (-614));
      tiffField0.getIntArrayValue();
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(24, tiffField0.getBytesLength());
      assertEquals(1356, tiffField0.getTag());
      assertEquals(3L, tiffField0.getCount());
      assertEquals((-614), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-1341), "");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1302, 1302, fieldTypeDouble0, 1302, 1302, (byte[]) null, byteOrder0, 1302);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(1302, (-1916));
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(1302, tiffField0.getTag());
      assertEquals(1302, tiffField0.getOffset());
      assertEquals(1302, tiffField0.getSortHint());
      assertNull(string0);
      assertEquals(1302, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1103), 2146420537, fieldTypeShort0, 2146420537, 2146420537, (byte[]) null, byteOrder0, 2146420537);
      tiffField0.getFieldTypeName();
      assertEquals(2146420537, tiffField0.getSortHint());
      assertEquals((-1103), tiffField0.getTag());
      assertEquals(2146420537, tiffField0.getDirectoryType());
      assertEquals(2146420537, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(3235, "'kBm4*");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(3235, 3235, fieldTypeLong0, 26L, 3235, byteArray0, byteOrder0, (byte) (-60));
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-1341), "");
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1302, 18249, fieldTypeDouble0, 1302, 18249, (byte[]) null, byteOrder0, 1302);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(18249, (-1341));
      String string0 = tiffField_OversizeValueElement0.getElementDescription();
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: ", string0);
      assertEquals(18249, tiffField0.getDirectoryType());
      assertEquals(1302, tiffField0.getSortHint());
      assertEquals(18249, tiffField0.getOffset());
      assertEquals(1302, tiffField0.getTag());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(34019, 34019, fieldTypeRational0, 34019, 34019, byteArray0, byteOrder0, 34019);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(34019 (0x84e3: RasterPadding): ): [Lorg.apache.commons.imaging.common.RationalNumber;@f74017e
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      TiffField tiffField0 = new TiffField((byte)51, (-614), fieldTypeDouble0, 0L, 0L, byteArray0, byteOrder1, 50);
      boolean boolean0 = tiffField0.isLocalValue();
      assertTrue(boolean0);
      
      String string0 = tiffField0.getValueDescription();
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(51, tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals((-614), tiffField0.getDirectoryType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(1082, "Ibew<TS~");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-54);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(15, 1082, fieldTypeShort0, 90L, 537L, byteArray0, byteOrder0, 347);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(90L, tiffField0.getCount());
      assertEquals(1082, tiffField0.getDirectoryType());
      assertEquals(15, tiffField0.getTag());
      assertEquals(347, tiffField0.getSortHint());
      assertArrayEquals(new int[] {7185, 51729}, intArray0);
      assertEquals(537, tiffField0.getOffset());
      assertEquals(180, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-37);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1720), 1600, fieldTypeByte0, 4L, (-2087L), byteArray0, byteOrder0, (byte) (-37));
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@52c9f544 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[67];
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid value: ");
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(31, (-1161), fieldTypeShort0, 1L, 31, byteArray0, byteOrder0, (-1161));
      String string0 = tiffField0.getValueDescription();
      assertEquals(31, tiffField0.getOffset());
      assertEquals((-1161), tiffField0.getSortHint());
      assertEquals((-1161), tiffField0.getDirectoryType());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(31, tiffField0.getTag());
      assertEquals(2, tiffField0.getBytesLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)100, (byte)0, fieldTypeByte0, 1L, (byte) (-120), byteArray0, byteOrder0, 1);
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getIntArrayValue();
      assertEquals((-120), tiffField0.getOffset());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(100, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50691, 50691, fieldTypeRational0, 50691, 50691, byteArray0, byteOrder0, 50691);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, int0);
      
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(405528, tiffField0.getBytesLength());
      assertEquals(50691, tiffField0.getTag());
      assertEquals(50691, tiffField0.getOffset());
      assertEquals(50691, tiffField0.getDirectoryType());
      assertEquals(50691, tiffField0.getSortHint());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-1);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(344, 344, fieldTypeByte0, 2541L, 2541L, byteArray0, byteOrder0, (byte) (-6));
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@d5d0e96 for: 344 (0x158: XClipPathUnits): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-58);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(34, 34, fieldTypeLong0, 33584L, 34, byteArray0, byteOrder0, (byte)85);
      tiffField0.getIntValueOrArraySum();
      assertEquals(85, tiffField0.getSortHint());
      assertEquals(34, tiffField0.getOffset());
      assertEquals(34, tiffField0.getTag());
      assertEquals(134336, tiffField0.getBytesLength());
      assertEquals(34, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[228];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-49), (-49), fieldTypeDouble0, 1L, (byte) (-53), byteArray0, byteOrder0, (-4186));
      tiffField0.getDoubleArrayValue();
      int int0 = tiffField0.getTag();
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals((-4186), tiffField0.getSortHint());
      assertEquals((-49), int0);
      assertEquals((-53), tiffField0.getOffset());
      assertEquals((-49), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[228];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-49), (-49), fieldTypeDouble0, 41L, (byte) (-53), byteArray0, byteOrder0, (-4186));
      tiffField0.getDoubleArrayValue();
      int int0 = tiffField0.getTag();
      assertEquals((-49), tiffField0.getDirectoryType());
      assertEquals((-49), int0);
      assertEquals((-4186), tiffField0.getSortHint());
      assertEquals(328, tiffField0.getBytesLength());
      assertEquals((-53), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[2];
      TiffField tiffField0 = new TiffField(1356, 1356, fieldTypeShort0, 23920L, 23920L, byteArray0, byteOrder0, (-1171));
      tiffField0.getDoubleArrayValue();
      Integer integer0 = new Integer(1356);
      tiffField0.getTagInfo();
      assertEquals(47840, tiffField0.getBytesLength());
      assertEquals(23920, tiffField0.getOffset());
      assertEquals((-1171), tiffField0.getSortHint());
      assertEquals(1356, tiffField0.getDirectoryType());
      assertEquals(1356, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-120);
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField((byte)0, (byte) (-120), fieldTypeAscii0, 2147304047, (byte)0, byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.getValueDescription();
      assertEquals(2147304047, tiffField0.getBytesLength());
      assertEquals((-120), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(37109, 21, fieldTypeLong0, 37109, (byte) (-94), byteArray0, (ByteOrder) null, 21);
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0x90f5)", string0);
      
      String string1 = tiffField0.toString();
      assertEquals(21, tiffField0.getSortHint());
      assertEquals(21, tiffField0.getDirectoryType());
      assertEquals("37109 (0x90f5: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (37109 IFD)", string1);
      assertEquals((-94), tiffField0.getOffset());
      assertEquals(148436, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[300];
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder3 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      ByteOrder byteOrder4 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("u9avK,W&;S@6BE~?", "u9avK,W&;S@6BE~?");
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = File.pathSeparator;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField((-40), (-40), fieldTypeLong0, 604L, 2003L, byteArray0, byteOrder3, (-3303));
      tiffField0.getDoubleArrayValue();
      assertEquals(2416, tiffField0.getBytesLength());
      assertEquals((-3303), tiffField0.getSortHint());
      assertEquals((-40), tiffField0.getTag());
      assertEquals(2003, tiffField0.getOffset());
      assertEquals((-40), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[228];
      ByteOrder.nativeOrder();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1901), 13, fieldTypeDouble0, 13, (-710L), byteArray0, byteOrder0, 13);
      int int0 = Double.MIN_EXPONENT;
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals((-1901), tiffField0.getTag());
      assertEquals((-710), tiffField0.getOffset());
      assertEquals("0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0", string0);
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)121;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, 50, fieldTypeShort0, 1, 1L, byteArray0, byteOrder0, (byte)9);
      tiffField0.getIntValueOrArraySum();
      assertEquals(9, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getTag());
      assertEquals(2, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(515, ", fieldType: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)38;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-89);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(515, 515, fieldTypeShort0, 2160L, (-1L), byteArray0, byteOrder0, (byte)0);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(10552, int0);
      
      tiffField0.getCount();
      assertEquals((-1), tiffField0.getOffset());
      assertEquals(515, tiffField0.getTag());
      assertEquals(515, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(4320, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-3657), (-3657), fieldTypeRational0, (-3657), (-3657), byteArray0, byteOrder0, (-3657));
      tiffField0.getOversizeValueElement();
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte byte0 = (byte)51;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[2] = (byte) (-100);
      TiffField tiffField0 = new TiffField((byte)51, 34852, fieldTypeRational0, (byte)51, 64L, byteArray0, byteOrder0, 6);
      TiffField tiffField1 = new TiffField((-3176), 6, fieldTypeDouble0, (byte)51, (byte) (-100), byteArray0, byteOrder0, (byte)51);
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte byte0 = (byte) (-81);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-81);
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte) (-81), 7, fieldTypeRational0, 7, (byte) (-81), byteArray0, byteOrder0, 7);
      tiffField0.dump();
      tiffField0.getDoubleArrayValue();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteOrder.nativeOrder();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(34026, 34026, fieldTypeFloat0, 34026, 34026, (byte[]) null, byteOrder0, (-1897));
      String string0 = tiffField0.getTagName();
      assertEquals(34026, tiffField0.getDirectoryType());
      assertEquals("BackgroundColorValue", string0);
      assertEquals(34026, tiffField0.getTag());
      assertEquals((-1897), tiffField0.getSortHint());
      assertEquals(34026, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)55;
      TiffField tiffField0 = new TiffField(305, 305, fieldTypeAscii0, 1398L, 1398L, byteArray0, (ByteOrder) null, (byte)4);
      int int0 = Pattern.CANON_EQ;
      tiffField0.getStringValue();
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "{\uFFFD\uFFFD\u00047");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      System.setCurrentTimeMillis(33998);
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(1895, 1895, fieldTypeFloat0, 1895, 563L, byteArray0, byteOrder0, 1895);
      String string0 = tiffField0.toString();
      assertEquals(1895, tiffField0.getSortHint());
      assertEquals("1895 (0x767: Unknown Tag):  (1895 Float)", string0);
      assertEquals(563, tiffField0.getOffset());
      assertEquals(7580, tiffField0.getBytesLength());
      assertEquals(1895, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[228];
      TiffField tiffField0 = new TiffField((-111), (-111), fieldTypeDouble0.FLOAT, 144L, (-111), byteArray0, byteOrder0, (-111));
      tiffField0.dump();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[180];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(660, 660, fieldTypeFloat0, 392L, (-224), byteArray0, byteOrder0, (-224));
      tiffField0.getDoubleArrayValue();
      assertEquals(1568, tiffField0.getBytesLength());
      assertEquals(660, tiffField0.getTag());
      assertEquals((-224), tiffField0.getSortHint());
      assertEquals(660, tiffField0.getDirectoryType());
      assertEquals((-224), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)4;
      TiffField tiffField0 = new TiffField((byte) (-94), 13, fieldTypeAscii0, 13, 386064L, byteArray0, (ByteOrder) null, 2146768535);
      String string0 = tiffField0.getValueDescription();
      assertEquals(2146768535, tiffField0.getSortHint());
      assertEquals((-94), tiffField0.getTag());
      assertEquals(13, tiffField0.getDirectoryType());
      assertEquals(13, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(386064, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[69];
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(2672, 0, fieldTypeByte0, 1932L, 0, byteArray0, byteOrder1, 47);
      boolean boolean0 = tiffField0.isLocalValue();
      assertFalse(boolean0);
      
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(2672, tiffField0.getTag());
      assertEquals(47, tiffField0.getSortHint());
      assertEquals(1932, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[81];
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      int int0 = 28;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", fieldType: ");
      byte byte0 = (byte)116;
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      int int1 = (-3447);
      int int2 = 28;
      TiffField tiffField0 = new TiffField((-3447), (byte)116, fieldTypeShort0.ASCII, 567L, 1309L, byteArray0, byteOrder0, 28);
      String string0 = tiffField0.getValueDescription();
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((-892), string0);
      Clock clock0 = MockClock.systemDefaultZone();
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      ChronoLocalDate chronoLocalDate0 = ChronoLocalDate.from(hijrahDate0);
      try { 
        fieldTypeAscii0.writeData(chronoLocalDate0, byteOrder1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown data type: Hijrah-umalqura AH 1435-04-14
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[222];
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      Object object0 = new Object();
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      ByteOrder byteOrder4 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder.nativeOrder();
      Object object1 = new Object();
      ByteOrder byteOrder5 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-2235), 1, fieldTypeShort0, 1048L, 46, byteArray0, byteOrder3, 1);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      tiffField0.getCount();
      MockFile mockFile0 = new MockFile("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (111)");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = tiffField0.getDirectoryType();
      assertEquals(46, tiffField0.getOffset());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals((-2235), tiffField0.getTag());
      assertEquals(2096, tiffField0.getBytesLength());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[228];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Double.MIN_EXPONENT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = Double.MIN_EXPONENT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      TiffField tiffField0 = new TiffField(1419, 29, fieldTypeLong0, 1419, 155L, byteArray0, byteOrder0, 0);
      MockFile mockFile0 = new MockFile("g0Ls!OL0]7Gpaaf8S", "g0Ls!OL0]7Gpaaf8S");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      tiffField0.dump((PrintWriter) mockPrintWriter0, "");
      int int2 = tiffField0.getOffset();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(5676, tiffField0.getBytesLength());
      assertEquals(1419, tiffField0.getTag());
      assertEquals(29, tiffField0.getDirectoryType());
      assertEquals(155, int2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[419];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1895, 257, fieldTypeDouble0, 587L, 257, byteArray0, byteOrder1, 272);
      ByteOrder.nativeOrder();
      String string0 = tiffField0.toString();
      assertEquals("1895 (0x767: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (52) (587 Double)", string0);
      
      int int0 = tiffField0.getBytesLength();
      assertEquals(4696, int0);
      
      int int1 = tiffField0.getOffset();
      assertEquals(257, tiffField0.getDirectoryType());
      assertEquals(272, tiffField0.getSortHint());
      assertEquals(257, int1);
  }
}
