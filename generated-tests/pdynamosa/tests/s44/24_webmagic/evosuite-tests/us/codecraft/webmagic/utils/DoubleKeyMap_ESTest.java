/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:04:16 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Map<Object, Map<Map<Integer, Integer>, Map<Integer, Integer>>>> hashMap0 = new HashMap<Integer, Map<Object, Map<Map<Integer, Integer>, Map<Integer, Integer>>>>();
      DoubleKeyMap<Integer, Object, Map<Map<Integer, Integer>, Map<Integer, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Map<Integer, Integer>, Map<Integer, Integer>>>(hashMap0);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, (Object) integer0, (Map<Map<Integer, Integer>, Map<Integer, Integer>>) null);
      Map<Object, Map<Map<Integer, Integer>, Map<Integer, Integer>>> map0 = doubleKeyMap0.remove(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<String, String>, Map<Map<Integer, Integer>, Integer>> hashMap0 = new HashMap<HashMap<String, String>, Map<Map<Integer, Integer>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, String>, Map<Integer, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Map<Integer, Integer>, Integer>(hashMap0, class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Integer integer0 = doubleKeyMap0.remove(hashMap1, (Map<Integer, Integer>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(map0);
      Map<String, Map<Object, String>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(map1, class0);
      String string0 = doubleKeyMap2.remove((String) null, (Object) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.remove(object0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Map<String, Map<Integer, Integer>>> hashMap0 = new HashMap<Object, Map<String, Map<Integer, Integer>>>();
      DoubleKeyMap<Object, String, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<Integer, Integer>>(hashMap0);
      Map<String, Map<Integer, Integer>> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      DoubleKeyMap<Object, String, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Integer, Object>>();
      HashMap<Object, Map<Object, Object>> hashMap1 = new HashMap<Object, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap1, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) hashMap0, (Object) hashMap1, (Object) doubleKeyMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      DoubleKeyMap<Map<Integer, Integer>, Object, Map<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, Object, Map<Integer, Integer>>();
      DoubleKeyMap<Map<Integer, Integer>, HashMap<Integer, Object>, Object> doubleKeyMap2 = new DoubleKeyMap<Map<Integer, Integer>, HashMap<Integer, Object>, Object>();
      Map<Integer, Map<Object, HashMap<Object, Object>>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Integer, Object, HashMap<Object, Object>> doubleKeyMap3 = new DoubleKeyMap<Integer, Object, HashMap<Object, Object>>(map0);
      Map<Integer, Integer> map1 = doubleKeyMap3.newMap();
      Map<Integer, Integer> map2 = doubleKeyMap1.put(map1, (Object) doubleKeyMap0, map1);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Integer, HashMap<String, Integer>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<String, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<String, Integer>>(hashMap0, class0);
      HashMap<Object, Map<Integer, String>> hashMap1 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(hashMap1);
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, HashMap<String, Object>>();
      Map<String, Map<HashMap<Object, String>, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, String>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Object, String>, Object>(map0, class0);
      Object object0 = doubleKeyMap1.get("_PA[m5?e0\",m,o5l", (HashMap<Object, String>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Integer, Integer>, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Integer, Integer>, Integer>, String, String>();
      DoubleKeyMap<Object, Object, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<String, String>>();
      HashMap<String, String> hashMap0 = doubleKeyMap1.get((Object) "nwDIEj}(pJhl(k", (Object) doubleKeyMap0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Map<Integer, String>> hashMap0 = new HashMap<String, Map<Integer, String>>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(hashMap0);
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap0.get((String) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Object object0 = new Object();
      Map<Object, String> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Map<Integer, Integer>, Map<Map<Integer, Integer>, String>> hashMap0 = new HashMap<Map<Integer, Integer>, Map<Map<Integer, Integer>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Integer>, Map<Integer, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Map<Integer, Integer>, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Map<Integer, Integer>) null, (Map<Integer, Integer>) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Map<String, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, Map<Object, String>, HashMap<String, Map<Integer, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Map<Object, String>, HashMap<String, Map<Integer, Integer>>>((Map<Map<Integer, Integer>, Map<Map<Object, String>, HashMap<String, Map<Integer, Integer>>>>) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Integer integer0 = new Integer(399);
      hashMap1.put(integer0, "W[lw0E?bKn2A:)");
      HashMap<String, Map<Integer, Integer>> hashMap2 = new HashMap<String, Map<Integer, Integer>>();
      doubleKeyMap0.put((Map<Integer, Integer>) hashMap0, (Map<Object, String>) hashMap1, hashMap2);
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      HashMap<String, Map<Integer, Integer>> hashMap4 = doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0, (Map<Object, String>) hashMap3);
      assertNull(hashMap4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Map<Map<Integer, Integer>, Map<Map<Object, String>, HashMap<String, Map<Integer, Integer>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Integer, Integer>, Map<Object, String>, HashMap<String, Map<Integer, Integer>>> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, Map<Object, String>, HashMap<String, Map<Integer, Integer>>>(map0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<String, Map<Integer, Integer>> hashMap2 = new HashMap<String, Map<Integer, Integer>>();
      doubleKeyMap1.put((Map<Integer, Integer>) hashMap0, (Map<Object, String>) hashMap1, hashMap2);
      HashMap<String, Map<Integer, Integer>> hashMap3 = doubleKeyMap1.put((Map<Integer, Integer>) hashMap0, (Map<Object, String>) hashMap1, (HashMap<String, Map<Integer, Integer>>) null);
      assertSame(hashMap3, hashMap2);
      assertNotNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Map<HashMap<Object, Integer>, HashMap<Object, String>>> hashMap0 = new HashMap<Integer, Map<HashMap<Object, Integer>, HashMap<Object, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<Object, Integer>, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Integer>, HashMap<Object, String>>(hashMap0, class0);
      Integer integer0 = new Integer((-1));
      HashMap<HashMap<Object, Integer>, HashMap<Object, String>> hashMap1 = new HashMap<HashMap<Object, Integer>, HashMap<Object, String>>();
      hashMap0.put(integer0, hashMap1);
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>(1777);
      HashMap<Object, String> hashMap3 = doubleKeyMap0.get(integer0, hashMap2);
      assertNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Integer>, Object, Map<Integer, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, Object, Map<Integer, Integer>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Map<Map<Integer, Integer>, Map<Map<Object, String>, HashMap<String, Map<Integer, Integer>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Integer, Integer>, Map<Object, String>, HashMap<String, Map<Integer, Integer>>> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, Map<Object, String>, HashMap<String, Map<Integer, Integer>>>(map0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<String, Map<Integer, Integer>> hashMap2 = new HashMap<String, Map<Integer, Integer>>();
      doubleKeyMap1.put((Map<Integer, Integer>) hashMap0, (Map<Object, String>) hashMap1, hashMap2);
      HashMap<String, Map<Integer, Integer>> hashMap3 = doubleKeyMap1.remove((Map<Integer, Integer>) hashMap0, (Map<Object, String>) hashMap1);
      assertTrue(map0.isEmpty());
      assertSame(hashMap3, hashMap2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, "62PU@b^@aRjC3/");
      HashMap<Integer, Map<Integer, Integer>> hashMap0 = new HashMap<Integer, Map<Integer, Integer>>();
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, Integer>(hashMap0);
      Map<Integer, Integer> map0 = doubleKeyMap2.get(integer0);
      assertNull(map0);
  }
}
