/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:47:54 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("", (Map<String, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.values();
      hashMap0.put("", hashMap1);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0, class0);
      doubleKeyMap0.put("", "", "");
      HashMap<String, Map<String, Object>> hashMap2 = new HashMap<String, Map<String, Object>>();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(hashMap2, class1);
      HashMap<Integer, Map<Integer, String>> hashMap3 = new HashMap<Integer, Map<Integer, String>>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, String>(hashMap3);
      hashMap3.values();
      Integer integer0 = new Integer(0);
      doubleKeyMap2.remove(integer0);
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>(class0);
      doubleKeyMap3.get("");
      Object object0 = new Object();
      Integer integer1 = new Integer(1804);
      doubleKeyMap1.get("");
      HashMap<String, Map<Integer, Object>> hashMap4 = new HashMap<String, Map<Integer, Object>>(1027);
      Class<HashMap> class2 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap4 = new DoubleKeyMap<String, Integer, Object>(hashMap4, class2);
      Integer integer2 = new Integer(1804);
      doubleKeyMap4.get("TC94A0zWAu7=xTPV0", integer2);
      HashMap<Object, Map<String, Object>> hashMap5 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap5 = new DoubleKeyMap<Object, String, Object>();
      doubleKeyMap5.remove((Object) hashMap1, "");
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Object object0 = new Object();
      doubleKeyMap0.get((String) null, object0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap1.remove((Object) doubleKeyMap0, (String) null);
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>();
      Map<String, Map<Integer, Object>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<String, Integer, Object>(map0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      DoubleKeyMap<Object, String, String> doubleKeyMap4 = new DoubleKeyMap<Object, String, String>();
      HashMap<Object, Map<Integer, Object>> hashMap1 = new HashMap<Object, Map<Integer, Object>>();
      doubleKeyMap1.remove((Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      HashMap<Integer, Map<Object, String>> hashMap2 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap5 = new DoubleKeyMap<Integer, Object, String>(hashMap2);
      Integer integer0 = new Integer(0);
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      hashMap2.put(integer0, hashMap3);
      Integer integer1 = new Integer(0);
      doubleKeyMap5.remove(integer1, (Object) null);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Map<String, String>, Object, Integer> doubleKeyMap6 = null;
      try {
        doubleKeyMap6 = new DoubleKeyMap<Map<String, String>, Object, Integer>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Object object0 = new Object();
      doubleKeyMap0.get((String) null, object0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap1.remove((Object) doubleKeyMap0, (String) null);
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>();
      Map<String, Map<Integer, Object>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<String, Integer, Object>(map0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-291));
      DoubleKeyMap<Map<String, String>, Map<String, String>, Integer> doubleKeyMap4 = new DoubleKeyMap<Map<String, String>, Map<String, String>, Integer>(class0);
      HashMap<String, Map<Integer, String>> hashMap1 = new HashMap<String, Map<Integer, String>>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap5 = new DoubleKeyMap<String, Integer, String>(hashMap1);
      Map<String, String> map1 = doubleKeyMap5.newMap();
      Integer integer1 = new Integer((-519));
      doubleKeyMap4.put(map1, map1, integer1);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      doubleKeyMap4.get((Map<String, String>) hashMap3, (Map<String, String>) hashMap3);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap6 = null;
      try {
        doubleKeyMap6 = new DoubleKeyMap<Object, String, String>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Map<String, String>, Map<Map<String, String>, Integer>> hashMap0 = new HashMap<Map<String, String>, Map<Map<String, String>, Integer>>();
      DoubleKeyMap<Map<String, String>, Map<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, String>, Integer>();
      doubleKeyMap0.remove((Map<String, String>) null, (Map<String, String>) null);
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      HashMap<Object, Map<Integer, Object>> hashMap1 = new HashMap<Object, Map<Integer, Object>>();
      HashMap<Object, Map<Integer, Object>> hashMap2 = new HashMap<Object, Map<Integer, Object>>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      doubleKeyMap1.remove((Object) hashMap3, "nxQ!=r*mrM_/0lj2|<!");
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(hashMap2);
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>();
      doubleKeyMap3.remove((Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      HashMap<Integer, Map<Object, String>> hashMap4 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap4 = new DoubleKeyMap<Integer, Object, String>(hashMap4);
      Integer integer0 = new Integer((-1066));
      Integer integer1 = new Integer((-1066));
      doubleKeyMap4.remove(integer0, (Object) integer1);
      HashMap<Object, String> hashMap5 = new HashMap<Object, String>();
      hashMap5.put((Object) null, "nxQ!=r*mrM_/0lj2|<!");
      hashMap4.put(integer0, hashMap5);
      doubleKeyMap1.remove((Object) doubleKeyMap0);
      Integer integer2 = new Integer(1444);
      doubleKeyMap4.remove(integer0, (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      HashMap<String, Map<Object, Object>> hashMap6 = new HashMap<String, Map<Object, Object>>();
      Integer integer3 = new Integer(1444);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, Object, Integer> doubleKeyMap5 = null;
      try {
        doubleKeyMap5 = new DoubleKeyMap<Map<String, String>, Object, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
