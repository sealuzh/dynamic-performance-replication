/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:06:50 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Object, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, Integer>();
      Map<Integer, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>(map0);
      Integer integer0 = new Integer((-409));
      doubleKeyMap1.put(integer0, integer0, (Object) "j?0u$");
      Integer integer1 = new Integer((-409));
      Object object0 = doubleKeyMap1.remove(integer0, integer1);
      assertTrue(map0.isEmpty());
      assertEquals("j?0u$", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      doubleKeyMap0.put((Object) null, (Object) hashMap0, (Integer) null);
      Map<Object, Integer> map0 = doubleKeyMap0.remove((Object) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      doubleKeyMap0.put((Integer) null, "", (Object) class0);
      Object object0 = doubleKeyMap0.put((Integer) null, "", (Object) null);
      assertEquals("class java.util.HashMap", object0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-409));
      DoubleKeyMap<Integer, Map<Object, HashMap<Object, Object>>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, HashMap<Object, Object>>, HashMap<Integer, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>();
      Map<Object, HashMap<Object, Object>> map0 = doubleKeyMap1.newMap();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      doubleKeyMap0.put(integer0, map0, hashMap0);
      Map<Map<Object, HashMap<Object, Object>>, HashMap<Integer, Object>> map1 = doubleKeyMap0.get(integer0);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>();
      DoubleKeyMap<Object, Object, Map<Object, Map<Object, HashMap<Object, Object>>>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, Map<Object, HashMap<Object, Object>>>>();
      Map<Object, Map<Object, HashMap<Object, Object>>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0, class0);
      Map<String, Object> map1 = doubleKeyMap1.remove((String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Integer, Object>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Integer, Object>>();
      DoubleKeyMap<HashMap<Object, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, Object>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(hashMap1, integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>((Map<Integer, Map<Integer, Object>>) null);
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>((Map<String, Map<String, Object>>) null);
      Map<Integer, Object> map0 = doubleKeyMap1.newMap();
      Object object0 = doubleKeyMap0.put((Integer) null, (Integer) null, (Object) map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Integer integer0 = new Integer(1148);
      HashMap<Integer, Map<String, Integer>> hashMap1 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Integer>(hashMap1);
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Object>(map0, class0);
      HashMap<Object, HashMap<Object, Object>> hashMap2 = new HashMap<Object, HashMap<Object, Object>>();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put(integer0, (Object) doubleKeyMap0, (Object) hashMap2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      HashMap<Object, HashMap<Object, Object>> hashMap0 = new HashMap<Object, HashMap<Object, Object>>();
      Integer integer0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) hashMap0, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Map<HashMap<Integer, Map<Object, HashMap<Object, Object>>>, HashMap<Object, Map<Object, HashMap<Object, Object>>>>> hashMap0 = new HashMap<String, Map<HashMap<Integer, Map<Object, HashMap<Object, Object>>>, HashMap<Object, Map<Object, HashMap<Object, Object>>>>>();
      DoubleKeyMap<String, HashMap<Integer, Map<Object, HashMap<Object, Object>>>, HashMap<Object, Map<Object, HashMap<Object, Object>>>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Integer, Map<Object, HashMap<Object, Object>>>, HashMap<Object, Map<Object, HashMap<Object, Object>>>>(hashMap0);
      HashMap<Object, Map<Object, HashMap<Object, Object>>> hashMap1 = doubleKeyMap0.get((String) null, (HashMap<Integer, Map<Object, HashMap<Object, Object>>>) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Object>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(class0);
      Object object0 = doubleKeyMap1.get((Object) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) "^v<8LQf|9W");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Map<Object, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Map<Integer, String> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, Object>((Map<String, Map<String, Object>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, HashMap<Object, Object>>, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<Object, Object>>, Integer, String>((Map<Map<Object, HashMap<Object, Object>>, Map<Integer, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Object, HashMap<Object, Object>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, HashMap<Object, Object>>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      doubleKeyMap0.put((Integer) null, "", (Object) class0);
      doubleKeyMap0.remove((Integer) null, (String) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, String, Map<Object, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Map<Object, HashMap<Object, Object>>>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(1, 1);
      HashMap<Object, HashMap<Object, Object>> hashMap1 = new HashMap<Object, HashMap<Object, Object>>();
      doubleKeyMap0.put(hashMap0, "", (Map<Object, HashMap<Object, Object>>) hashMap1);
      Map<Object, HashMap<Object, Object>> map0 = doubleKeyMap0.get(hashMap0, "");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Map<Integer, Map<Integer, Integer>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Integer, Map<Integer, Integer>>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, Integer>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Map<Object, Map<String, HashMap<Integer, Object>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, HashMap<Integer, Object>> doubleKeyMap2 = new DoubleKeyMap<Object, String, HashMap<Integer, Object>>(map0);
      Map<String, HashMap<Integer, Object>> map1 = doubleKeyMap2.remove((Object) doubleKeyMap0);
      assertNull(map1);
  }
}
