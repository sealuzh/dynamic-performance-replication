/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:30:00 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      int int0 = (-4568);
      intArray0[0] = (-4568);
      intArray0[1] = (-4568);
      intArray0[2] = 1338;
      int int1 = 1954;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[6][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(6, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[5];
      intArray1[0] = 437;
      intArray1[1] = 2174;
      intArray1[2] = 2999;
      intArray1[3] = 0;
      intArray1[4] = (-1);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = (-1);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-1);
      intArray3[1] = 2999;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 437;
      intArray3[5] = (-1);
      intArray3[6] = (-1);
      intArray3[7] = 437;
      intArray3[8] = (-1);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 437;
      intArray4[1] = 437;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 2174;
      intArray5[1] = 2999;
      intArray5[2] = 437;
      intArray5[3] = 2999;
      intArray5[4] = 2999;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[5];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = (-1323);
      intArray6[1] = 2174;
      intArray6[2] = 0;
      intArray6[3] = 437;
      intArray6[4] = (-1);
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[9];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 8167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CharClass charClass1 = new CharClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 4879;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 2036;
      int[][] intArray0 = new int[7][2];
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1240;
      intArray0[1] = (-1608);
      intArray0[2] = 0;
      intArray0[3] = 3400;
      intArray0[4] = 0;
      intArray0[5] = (-2830);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1240, (-1608), 0, 3400, 0, (-2830)}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-2830));
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1240, (-1608), (-1607), 3400, (-2829), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[8][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 1240;
      intArray2[2] = 3400;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {1240, (-1608), (-1607), 3400, (-2829), 1114111}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][3];
      CharClass charClass1 = charClass0.appendLiteral(1678, 65);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharGroup charGroup0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[][] intArray1 = new int[0][3];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-64));
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendRange((-8), (-64));
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][7];
      int[] intArray1 = new int[1];
      intArray1[0] = 2192;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2192;
      intArray2[1] = 2192;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 2192;
      intArray3[1] = 2192;
      intArray3[2] = 2192;
      intArray3[3] = 4084;
      intArray3[4] = 2192;
      intArray3[5] = 2192;
      intArray3[6] = 2192;
      intArray3[7] = 2192;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 2192;
      intArray4[1] = 4084;
      intArray4[2] = 2192;
      intArray4[3] = 2192;
      intArray4[4] = 4084;
      intArray4[5] = 0;
      intArray4[6] = 4084;
      intArray4[7] = 0;
      intArray4[8] = 2192;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 0;
      intArray6[1] = 2192;
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[1];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = 2192;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 719;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 719);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[][] intArray1 = new int[0][3];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-64));
      assertNotNull(charClass1);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendRange((-8), (-64));
      assertNotNull(charClass3);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1050);
      intArray0[1] = (-1673);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1050), (-1673), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-1050), (-1673), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-1050), (-1673), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass2.cleanClass();
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-1050), (-1673), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1050);
      intArray0[1] = (-1673);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 3276;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1050), (-1673), 0, 0, 0, 3276}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 66640);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][3];
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-1044));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[5];
      int int0 = (-4568);
      intArray1[0] = (-4568);
      intArray1[1] = 0;
      CharClass charClass1 = new CharClass();
      assertNotNull(charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][3];
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1391);
      intArray0[1] = 0;
      intArray0[2] = (-1406);
      intArray0[3] = (-178);
      intArray0[4] = 7424;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 7149);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2086);
      intArray0[1] = (-2932);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendLiteral(1954, (-365));
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.appendRange(1954, 65438);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass5.appendLiteral((-2086), (-365));
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      
      CharClass charClass7 = charClass2.appendFoldedRange((-1787), (-63));
      assertNotNull(charClass7);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass7);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass1 = charClass0.appendFoldedRange(9423, 77);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1114111;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-165);
      intArray0[4] = (-2214);
      intArray0[5] = 0;
      intArray0[6] = 43188;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1114111, 0, 0, (-165), (-2214), 0, 43188}, intArray0);
      
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 43188;
      intArray2[2] = (-165);
      intArray2[3] = (-2214);
      intArray2[4] = (-1);
      intArray2[5] = 0;
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 774;
      CharClass charClass1 = charClass0.appendFoldedRange(774, 774);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArrayArray0 = null;
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-1147);
      CharClass charClass1 = charClass0.appendFoldedRange((-1147), (-1147));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArrayArray0 = null;
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1114111;
      intArray0[1] = 1114111;
      intArray0[2] = (-17);
      intArray0[3] = (-165);
      intArray0[4] = (-2214);
      intArray0[5] = 0;
      intArray0[6] = 43188;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1114111, 1114111, (-17), (-165), (-2214), 0, 43188}, intArray0);
      
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      int int0 = 610;
      intArray0[0] = 610;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 66640;
      intArray0[5] = (-2);
      CharClass charClass1 = charClass0.appendRange(1, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[6] = 32;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 89;
      int int0 = 1267;
      intArray0[1] = 1267;
      intArray0[2] = 1308;
      intArray0[3] = 1992;
      intArray0[4] = 2480;
      intArray0[5] = 66639;
      intArray0[6] = 1958;
      intArray0[7] = (-1451);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {89, 1267, 1308, 1992, 2480, 66639, 1958, (-1451)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {89, 1267, 1308, 1992, 2480, 66639, 1958, (-1451)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {89, 1267, 1308, 1992, 2480, 66639, 1958, (-1451)}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 7525;
      intArray0[1] = (-291);
      intArray0[2] = 120139;
      intArray0[3] = (-187);
      intArray0[4] = (-1926);
      intArray0[5] = (-1127);
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {7525, (-291), 120139, (-187), (-1926), (-1127), 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, (-1926));
      assertNotNull(charClass1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {7525, (-291), 120139, (-187), (-1926), (-1127), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string0 = CharClass.charClassToString(intArray0, (-1641));
      assertNotNull(string0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals("[]", string0);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[][] intArray2 = new int[9][8];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-1);
      intArray3[1] = (-1641);
      intArray3[2] = (-1);
      intArray3[3] = 598;
      intArray3[4] = (-1);
      intArray2[2] = intArray3;
      intArray2[3] = intArray1;
      intArray2[4] = intArray0;
      intArray2[5] = intArray0;
      intArray2[6] = intArray0;
      intArray2[7] = intArray1;
      intArray2[8] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(0, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[2];
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("[]", string0);
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass2 = new CharClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotNull(charClass3);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass5 = charClass3.appendLiteral((-2), 0);
      assertNotNull(charClass5);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass3.appendLiteral(0, 42783);
      assertNotNull(charClass6);
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      
      CharClass charClass7 = charClass6.appendFoldedRange(42783, (-84));
      assertNotNull(charClass7);
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      
      CharClass charClass8 = charClass7.appendLiteral((-2), 65100);
      assertNotNull(charClass8);
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertSame(charClass6, charClass8);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      
      CharClass charClass9 = charClass4.appendRange(65100, 0);
      assertNotNull(charClass9);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass1);
      
      CharClass charClass10 = charClass9.negateClass();
      assertNotNull(charClass10);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass2);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass0);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass1);
      
      CharClass charClass11 = charClass10.appendFoldedClass(intArray0);
      assertNotNull(charClass11);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass2));
      assertFalse(charClass11.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass1);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass2);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass0);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass3);
      assertNotSame(charClass11, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass11);
      
      String string1 = charClass10.toString();
      assertNotNull(string1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("[0xffffffff-0xa71e 0xffffffad-0xfe4b 0x0-0x10ffff]", string1);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass1);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass2);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass0);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass11);
      
      int[] intArray2 = charClass7.toArray();
      assertNotNull(intArray2);
      assertEquals(6, intArray2.length);
      assertArrayEquals(new int[] {(-1), 42782, (-83), 65099, 0, 1114111}, intArray2);
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertSame(charClass6, charClass8);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass9);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass11);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      
      CharClass charClass12 = charClass6.cleanClass();
      assertNotNull(charClass12);
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass12.equals((Object)charClass2));
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass12);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass11);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass11);
      assertNotSame(charClass12, charClass2);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass9);
      
      CharClass charClass13 = charClass3.appendLiteral((-84), 0);
      assertNotNull(charClass13);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass13.equals((Object)charClass2));
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass11);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass13);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass11);
      assertNotSame(charClass13, charClass2);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass6);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1081);
      intArray0[1] = (-1673);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 25;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1081), (-1673), 0, 0, 25, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 130;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 130);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 123;
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {123, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1207499);
      intArray0[0] = (-1207499);
      intArray0[1] = 2;
      intArray0[2] = 2340;
      intArray0[3] = 65340;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1207499), 2, 2340, 65340}, intArray0);
      
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 3762;
      int int1 = (-143);
      CharClass charClass1 = charClass0.appendFoldedRange(3762, (-143));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3762;
      intArray0[1] = 3762;
      intArray0[2] = (-143);
      intArray0[3] = (-143);
      intArray0[4] = (-143);
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int int0 = 1925;
      CharClass charClass3 = charClass1.appendLiteral(1925, 1925);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      String string0 = CharClass.charClassToString(intArray0, (-117));
      assertNotNull(string0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[]", string0);
      
      CharClass charClass4 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass4.appendClassWithSign(intArray0, (-117));
      assertNotNull(charClass6);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      
      CharClass charClass7 = charClass6.negateClass();
      assertNotNull(charClass7);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass8 = charClass5.cleanClass();
      assertNotNull(charClass8);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      
      int[][] intArray2 = new int[9][2];
      CharClass charClass9 = charClass7.appendClass(intArray1);
      assertNotNull(charClass9);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass9);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass8);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      
      // Undeclared exception!
      try { 
        charClass9.appendTableWithSign(intArray2, (-117));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 7410;
      intArray0[1] = 372;
      intArray0[2] = 3132;
      intArray0[3] = 3132;
      intArray0[4] = 3130;
      intArray0[5] = (-894);
      intArray0[6] = 1169;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {7410, 372, 3132, 3132, 3130, (-894), 1169}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange(372, 3132);
      assertNotNull(charClass1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {7410, 372, 3132, 3132, 3130, (-894), 3132}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 3132);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-1094);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-8));
      assertNotNull(charClass1);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.negateClass();
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass3.appendFoldedClass(intArray0);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass2.appendTable(intArray1);
      assertNotNull(charClass6);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass3.appendTable(intArray1);
      assertNotNull(charClass7);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      
      int int1 = 2348;
      CharClass charClass8 = charClass2.appendFoldedRange(int0, int1);
      assertNotNull(charClass8);
      assertEquals(0, intArray1.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(0, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[2];
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals("[]", string0);
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int int0 = 4;
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass1.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendLiteral(66640, 66640);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      int int0 = (-879);
      int[] intArray1 = new int[7];
      intArray1[0] = (-879);
      intArray1[1] = 66640;
      intArray1[2] = 66640;
      intArray1[3] = (-879);
      intArray1[4] = (-879);
      intArray1[5] = 66640;
      intArray1[6] = 25;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[5];
      intArray1[0] = (-4568);
      CharClass charClass1 = new CharClass();
      assertNotNull(charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 93;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1363;
      intArray0[5] = 3398;
      intArray0[6] = (-703);
      intArray0[7] = (-141);
      intArray0[8] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 93, 0, 0, 1363, 3398, (-703), (-141), 0}, intArray0);
      
      CharGroup charGroup0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[][] intArray0 = new int[0][3];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-64));
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendFoldedRange((-1044), (-2795));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1044), (-2795)}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      int int0 = 1902;
      intArray0[0] = 1902;
      intArray0[1] = (-1045);
      intArray0[2] = (-1503);
      int int1 = (-1565);
      intArray0[3] = (-1565);
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[4] = (-3094);
      int int2 = 0;
      intArray0[5] = 0;
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1902, (-1045), (-1503), (-1565), (-3094), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1902, (-1045), (-1503), (-1565), (-3094), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1902, (-1045), (-1503), (-1565), (-3094), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1902, (-1045), (-1503), (-1565), (-3094), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1902, (-1045), (-1503), (-1565), (-3094), 0}, intArray0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      
      CharClass charClass7 = charClass0.appendRange((-3094), (-3094));
      assertNotNull(charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass7.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-612);
      intArray0[2] = 2608;
      intArray0[3] = (-1923);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-612), 2608, (-1923)}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral((-612), 1566);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-612), 2608, (-1923)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[0][9];
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, (-612), 2608, (-1923)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, (-1923));
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-612), 2608, (-1923)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1050);
      intArray0[1] = (-1673);
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 3276;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1050), (-1673), 0, 0, 0, 3276}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[][] intArray0 = new int[0][3];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-64));
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendTable(intArray0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      // Undeclared exception!
      charClass1.appendFoldedRange((-1044), 2348);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[9];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 940;
      intArray0[1] = 64;
      intArray0[2] = 2596;
      intArray0[3] = 448;
      int int0 = (-84);
      intArray0[4] = (-84);
      intArray0[5] = 567;
      int int1 = 46;
      intArray0[6] = 46;
      intArray0[7] = 0;
      intArray0[8] = (-2113);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {940, 64, 2596, 448, (-84), 567, 46, 0, (-2113)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-8));
      assertNotNull(charClass1);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendFoldedRange((-8), (-8));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.negateClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass1.appendFoldedRange((-8), (-8));
      assertNotNull(charClass5);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass3.appendTable(intArray1);
      assertNotNull(charClass6);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      
      CharClass charClass7 = charClass5.cleanClass();
      assertNotNull(charClass7);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass7);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2086);
      intArray0[1] = (-2932);
      intArray0[2] = (-63);
      intArray0[3] = (-1787);
      intArray0[4] = 4749;
      intArray0[5] = 2036;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), (-63), (-1787), 4749, 2036}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange(6623, 0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), (-63), (-1787), 4749, 2036}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendRange((-985), 2036);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), (-63), (-1787), 4749, 2036}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), (-63), (-1787), 4749, 2036}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), (-63), (-1787), 4749, 2036}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass3.appendClassWithSign(intArray0, (-63));
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), (-63), (-1787), 4749, 2036}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass4.appendRange(65, (-63));
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), (-63), (-1787), 4749, 2036}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      
      CharClass charClass7 = charClass6.cleanClass();
      assertNotNull(charClass7);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), (-63), (-1787), 4749, 2036}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      
      CharClass charClass8 = charClass3.negateClass();
      assertNotNull(charClass8);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2086), (-2932), (-63), (-1787), 4749, 2036}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2036);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2171);
      intArray0[1] = (-903);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2171), (-903)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass1.negateClass();
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      int[][] intArray1 = new int[0][3];
      CharClass charClass5 = charClass4.appendTable(intArray1);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass2.appendRange(66640, 0);
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {66640, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass1.negateClass();
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      int[][] intArray1 = new int[0][3];
      CharClass charClass5 = charClass4.appendTable(intArray1);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass4.appendFoldedRange((-3499), (-654));
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3499), (-654), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1713;
      intArray0[1] = 568;
      intArray0[2] = 548;
      intArray0[3] = 65073;
      intArray0[4] = 0;
      intArray0[5] = 1542;
      intArray0[6] = 563;
      intArray0[7] = 1656;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.appendFoldedRange(1656, 1713);
      assertArrayEquals(new int[] {0, 65073, 548, 65073, 563, 1656, 1713, 568}, intArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[0] = (-4568);
      intArray0[1] = (-4568);
      intArray0[2] = 1338;
      CharClass charClass1 = charClass0.appendLiteral(1954, 65438);
      CharClass charClass2 = charClass1.appendFoldedRange((-4568), (-4568));
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-809);
      intArray0[2] = (-2);
      intArray0[3] = 961;
      intArray0[4] = 0;
      intArray0[5] = 1609;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 1609);
      int[][] intArray1 = new int[7][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[4];
      intArray2[0] = (-1372);
      intArray2[1] = 0;
      intArray2[2] = 11632;
      intArray2[3] = 0;
      charClass0.appendNegatedClass(intArray2);
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[][] intArray0 = new int[0][3];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-64));
      CharClass charClass2 = charClass1.appendTable(intArray0);
      charClass2.appendFoldedRange((-1044), (-2795));
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {0, 1114111, (-1044), (-2795)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1185;
      intArray0[0] = 1185;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][8];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      charClass1.appendTableWithSign(intArray1, (-1408));
      charClass1.appendRange((-1408), 1468);
      CharClass charClass2 = charClass1.appendTable(intArray1);
      charClass2.appendTable(intArray1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2086);
      intArray0[1] = (-2932);
      intArray0[2] = (-63);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendClassWithSign(intArray0, (-2));
      int[][] intArray1 = new int[7][3];
      int[] intArray2 = new int[4];
      intArray2[2] = (-2);
      intArray0[3] = (-2);
      intArray2[2] = (-2086);
      intArray2[3] = (-2);
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 93;
      intArray0[1] = 93;
      intArray0[2] = 0;
      int int2 = 0;
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2086);
      intArray0[1] = (-2932);
      int int0 = 1954;
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendClass(intArray0);
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 8167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2086);
      intArray0[1] = (-2932);
      intArray0[2] = (-63);
      intArray0[3] = (-1787);
      intArray0[4] = 4749;
      intArray0[5] = 2036;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(6623, 0);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[6][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[2];
      intArray2[0] = 0;
      intArray2[1] = 4749;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[3];
      intArray1[0] = (-1688);
      intArray1[1] = (-2245);
      intArray1[2] = 1114111;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = (-1688);
      intArray2[1] = (-1688);
      intArray2[2] = (-1688);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 1114111;
      intArray3[1] = (-2245);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 1114111;
      intArray4[1] = 1114111;
      intArray4[2] = (-1688);
      intArray4[3] = (-2245);
      intArray4[4] = 1114111;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = (-1688);
      intArray5[1] = 1114111;
      intArray5[2] = 1114111;
      intArray5[3] = (-2245);
      intArray5[4] = (-1688);
      intArray5[5] = 1114111;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 1114111;
      intArray6[1] = 1114111;
      intArray6[2] = (-2245);
      intArray6[3] = 1114111;
      intArray6[4] = 1114111;
      intArray6[5] = 1114111;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[6];
      intArray7[0] = 1114111;
      intArray7[1] = 93;
      intArray7[2] = (-2245);
      intArray7[3] = (-2245);
      intArray7[4] = (-1688);
      intArray7[5] = (-2245);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      intArray8[0] = 1114111;
      intArray8[1] = 93;
      intArray8[2] = 93;
      intArray8[3] = 1114111;
      intArray8[4] = (-2245);
      intArray8[5] = (-1688);
      intArray8[6] = (-2245);
      intArray8[7] = 93;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[6];
      intArray9[0] = (-1688);
      intArray9[1] = (-2245);
      intArray9[2] = (-2245);
      intArray9[3] = 93;
      intArray9[4] = (-1688);
      intArray9[5] = 93;
      intArray0[8] = intArray9;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-514);
      intArray0[1] = (-170);
      intArray0[2] = 91;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2320);
      int int0 = 475;
      intArray0[6] = 475;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[7];
      CharClass charClass0 = new CharClass(intArray0);
      int int0 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      // Undeclared exception!
      try { 
        charClass1.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[0] = (-4568);
      intArray0[1] = (-4568);
      intArray0[2] = 1338;
      int int0 = 1954;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 2756);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      charClass0.appendRange((-2629), (-2629));
      String string0 = charClass0.toString();
      assertEquals("[0x0-0x10ffff 0xfffff5bb]", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2086);
      intArray0[1] = (-2932);
      intArray0[2] = (-63);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendClassWithSign(intArray0, (-2));
      int[][] intArray1 = new int[7][3];
      intArray0[3] = (-2);
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[1] = (-1673);
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 3276;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass0.cleanClass();
      charClass2.cleanClass();
      charClass1.appendClass(intArray0);
      CharClass charClass3 = charClass1.appendRange(0, 154);
      charClass3.cleanClass();
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 3276}, intArray1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      CharClass charClass1 = charClass0.negateClass();
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int int0 = (-2064);
      CharClass charClass1 = charClass0.appendRange(0, (-2064));
      CharClass charClass2 = charClass1.appendClass(intArray0);
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      CharClass charClass4 = charClass3.negateClass();
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass4.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(0, (-2064));
      CharClass charClass2 = charClass1.appendClass(intArray0);
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      int[] intArray1 = charClass0.toArray();
      charClass0.appendClassWithSign(intArray0, 514);
      int[][] intArray2 = new int[4][3];
      intArray2[0] = intArray1;
      charClass2.appendClassWithSign(intArray1, 1117);
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      charClass3.appendNegatedTable(intArray2);
      charClass3.appendClassWithSign(intArray1, 574);
      assertArrayEquals(new int[] {0, (-2064), 0, 1114111}, intArray1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = new CharClass(intArray0);
      CharClass charClass2 = charClass1.appendLiteral(0, (-2481));
      charClass2.appendFoldedRange(856, (-2481));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = new CharClass(intArray0);
      CharGroup charGroup0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 8167;
      int[] intArray0 = null;
      int int1 = 3076;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 3076);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1050);
      intArray0[1] = (-1673);
      charClass0.appendLiteral((-1673), (-1673));
      CharClass charClass1 = charClass0.appendClass(intArray0);
      charClass1.cleanClass();
      charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendRange(1396, (-2));
      int[] intArray1 = charClass2.toArray();
      assertArrayEquals(new int[] {(-1673), (-1673), (-1050), (-1673), 0, 0, 1396, (-2)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      int int1 = 0;
      int int2 = 66432;
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(66640, 0);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[9];
      intArray1[0] = 8167;
      intArray1[1] = (-2);
      intArray1[2] = 0;
      intArray1[3] = 1678;
      intArray1[4] = (-305);
      intArray1[5] = 1273;
      intArray1[6] = 244;
      intArray1[7] = 0;
      intArray1[8] = 66432;
      intArray0[0] = intArray1;
      charClass0.appendNegatedTable(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[5][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int int0 = (-450);
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, (-450));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
