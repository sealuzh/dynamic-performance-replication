/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 18:57:44 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      int int0 = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = 'V';
      charArray0[2] = '';
      javaCharStream0.nextCharBuf = charArray0;
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 1, 0);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, (-2241), (-2241));
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      PipedReader pipedReader0 = new PipedReader(2048);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 8257536, 87);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 673, 673, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 673;
      intArray0[2] = 673;
      pipedInputStream0.markSupported();
      intArray0[3] = (-2301);
      intArray0[4] = 0;
      javaCharStream0.bufline = intArray0;
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      try { 
        JavaCharStream.hexval('|');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)8, (byte)8);
      javaCharStream0.BeginToken();
      javaCharStream0.adjustBeginLineColumn((byte)8, (-5019));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-5019), javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 4300);
      pipedInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 4300, 4300);
      pipedOutputStream0.flush();
      pipedInputStream0.mark(4300);
      javaCharStream0.adjustBeginLineColumn(0, 0);
      PipedReader pipedReader0 = new PipedReader(4300);
      int int0 = (-1107);
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 10, (byte)5, (byte)5);
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals('\u0005', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1), (-1), 0);
      javaCharStream0.AdjustBuffSize();
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.inputStream = null;
      javaCharStream0.tokenBegin = (-3162);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 112, (-457));
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.ExpandBuff(false);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      javaCharStream0.ReInit((Reader) null);
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-83), 2790, 382);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)94, (int) (byte)1, 1981);
      javaCharStream0.readChar();
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 4300);
      pipedInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 4300, 4300);
      pipedOutputStream0.flush();
      pipedInputStream0.mark(4300);
      javaCharStream0.adjustBeginLineColumn((-7), (-7));
      PipedReader pipedReader0 = new PipedReader(4300);
      int int0 = (-1107);
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 3225, (byte)127, (-909));
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 3, 75, 2009);
      javaCharStream0.GetImage();
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 79, 1523, 79);
      javaCharStream2.ReInit((InputStream) byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2253, (byte)127, (-1265));
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 3225, 3225, 10);
      javaCharStream0.readChar();
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3225, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 3225, (byte)127, (-909));
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)0, (int) (byte)127, (int) (byte)86);
      javaCharStream0.readChar();
      int int0 = javaCharStream0.getEndLine();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-148), (-423), (-423));
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)127, (int) (byte)127, (int) (byte) (-72));
      javaCharStream0.readChar();
      javaCharStream0.Done();
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 2350, 2350, 2350);
      JavaCharStream.hexval('D');
      javaCharStream0.adjustBeginLineColumn(886, 702);
      javaCharStream0.getBeginLine();
      assertEquals(702, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) pipedReader0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 6815, (-1417), 1100);
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 6815, 2121, 1100);
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 1, 96);
      javaCharStream0.GetSuffix(1);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 694, 694);
      int int0 = 112;
      javaCharStream0.ReInit((Reader) pipedReader0, 694, 694, 112);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.GetImage();
      javaCharStream0.ReInit((Reader) pipedReader0, 112, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      int int0 = 2350;
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 2350, 2350, 2350);
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaCharStream.hexval('0');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (byte)1, 1049, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 6815, 2121, 1100);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = JavaCharStream.hexval('f');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char char0 = 'c';
      JavaCharStream.hexval('c');
      int int0 = 15;
      PipedInputStream pipedInputStream0 = new PipedInputStream(15);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 7);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = JavaCharStream.hexval('2');
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JavaCharStream.hexval('5');
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 2350, 2350, 2350);
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, 2350, 2350, 41);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JavaCharStream.hexval('B');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0, 2107, (byte)68);
      javaCharStream0.backup((-2325));
      assertEquals(2324, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 2334, 2334, 2334);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.skip(0L);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 2350, 2350, 2350);
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JavaCharStream.hexval('7');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2439, 7);
      int int0 = (-2539);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        mockFileReader0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
      
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.Done();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JavaCharStream.hexval('C');
      MockFile mockFile0 = new MockFile("");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)86;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte) (-72));
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 3225, (byte)127, (-909));
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)0, (int) (byte)127, (int) (byte)0);
      javaCharStream0.readChar();
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals('q', char0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
      
      int int1 = JavaCharStream.hexval('8');
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)127;
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 14, 14);
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)127;
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 14, 14);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaCharStream0.Done();
      javaCharStream0.ReInit((Reader) null);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('C');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.backup(86);
      javaCharStream0.readChar();
      assertEquals(4010, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.available = (int) (byte)91;
      javaCharStream0.BeginToken();
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.bufsize = 260;
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)13, 0);
      javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.prevCharIsCR = true;
      javaCharStream0.BeginToken();
      javaCharStream0.Done();
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)13, (-25));
      javaCharStream0.readChar();
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals('\uFFFD', char0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("52Wr[*~X@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.BeginToken();
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      javaCharStream1.available = (-1);
      // Undeclared exception!
      try { 
        javaCharStream1.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.available = (-1);
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 1, (byte) (-30));
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals('\n', char0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      javaCharStream0.BeginToken();
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\f', char0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.backup((byte)8);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(4088, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.prevCharIsCR = true;
      byteArrayInputStream0.mark(1471);
      javaCharStream0.BeginToken();
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
  }
}
