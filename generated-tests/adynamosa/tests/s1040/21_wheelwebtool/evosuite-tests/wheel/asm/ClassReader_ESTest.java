/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 18:04:44 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Label;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ClassReader.SIGNATURES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      PipedInputStream pipedInputStream1 = new PipedInputStream(271);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      ClassReader classReader2 = new ClassReader("wheel.asm.Edge");
      Locale.getISOCountries();
      classReader1.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader2, 1393);
      classWriter0.newNameType("java/lang/Object", "RuntimeVisibleParameterAnnotations");
      classReader1.copyPool(classWriter0);
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("java/lang/Object");
      attributeArray0[0] = attribute0;
      classReader2.accept((ClassVisitor) classWriter0, attributeArray0, 0);
      Attribute[] attributeArray1 = new Attribute[3];
      classWriter0.cr = classReader0;
      Attribute attribute1 = new Attribute("StackMapTable");
      attributeArray1[0] = attribute1;
      Attribute attribute2 = new Attribute((String) null);
      attributeArray1[1] = attribute2;
      Attribute attribute3 = attribute2.next;
      classReader1.accept((ClassVisitor) classWriter0, attributeArray1, 4);
      classReader1.accept((ClassVisitor) classWriter0, attributeArray1, 2);
      classWriter0.cr.getSuperName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassReader classReader3 = null;
      try {
        classReader3 = new ClassReader("StackMapTable");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ClassReader.SIGNATURES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      PipedInputStream pipedInputStream1 = new PipedInputStream(271);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      ClassReader classReader2 = new ClassReader("wheel.asm.Edge");
      Locale.getISOCountries();
      classReader1.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader2, 1393);
      classWriter0.newNameType("java/lang/Object", "RuntimeVisibleParameterAnnotations");
      classReader1.copyPool(classWriter0);
      Attribute[] attributeArray0 = new Attribute[3];
      classWriter0.cr = classReader0;
      Attribute attribute0 = new Attribute("StackMapTable");
      attributeArray0[0] = attribute0;
      Attribute attribute1 = new Attribute((String) null);
      attributeArray0[1] = attribute1;
      Attribute attribute2 = attribute1.next;
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 4);
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 2);
      classWriter0.cr.getSuperName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassReader classReader3 = null;
      try {
        classReader3 = new ClassReader("StackMapTable");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1398);
      PipedInputStream pipedInputStream1 = new PipedInputStream(271);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader0.getInterfaces();
      ClassReader classReader2 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(classReader2, 13);
      classReader1.accept((ClassVisitor) classWriter0, 8);
      classReader1.readShort(1);
      // Undeclared exception!
      try { 
        classReader1.readByte((short) (-326));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -326
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ClassReader.SIGNATURES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1398);
      PipedInputStream pipedInputStream1 = new PipedInputStream(271);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      Locale.getISOCountries();
      ClassReader classReader2 = new ClassReader("wheel.asm.Edge");
      Locale.getISOCountries();
      classReader1.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader2, 1393);
      classWriter0.newNameType("java/lang/Object", "RuntimeVisibleParameterAnnotations");
      classReader1.copyPool(classWriter0);
      Attribute[] attributeArray0 = new Attribute[3];
      Attribute attribute0 = new Attribute("StackMapTable");
      Attribute attribute1 = attribute0.next;
      attributeArray0[0] = null;
      Attribute attribute2 = new Attribute((String) null);
      attributeArray0[1] = attribute2;
      Attribute attribute3 = attribute2.next;
      attributeArray0[2] = null;
      classReader2.accept((ClassVisitor) classWriter0, attributeArray0, 8);
      classReader2.accept((ClassVisitor) classWriter0, attributeArray0, 987);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader2.readUTF8(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = ClassReader.SIGNATURES;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1398);
      ClassReader classReader0 = new ClassReader("wheel.asm.FieldWriter");
      classReader0.getInterfaces();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader1.accept((ClassVisitor) classAdapter0, 4);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      try { 
        sequenceInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = ClassReader.SIGNATURES;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1398);
      ClassReader classReader0 = new ClassReader("wheel.asm.FieldWriter");
      classReader0.getInterfaces();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      classWriter0.visitOuterClass("wheel.asm.FieldWriter", "kj", "wheel.asm.FieldWriter");
      classReader1.accept((ClassVisitor) classWriter0, 2080);
      int int0 = classReader1.readUnsignedShort(4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1398);
      PipedInputStream pipedInputStream1 = new PipedInputStream(271);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(classReader1, 40);
      classReader1.accept((ClassVisitor) classWriter0, 8);
      assertNotSame(classReader1, classReader0);
      
      classReader0.getClassName();
      Attribute attribute0 = new Attribute("LineNumberTable");
      Attribute attribute1 = attribute0.next;
      Attribute[] attributeArray0 = new Attribute[2];
      attributeArray0[0] = null;
      attributeArray0[1] = attribute0;
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 657);
      classReader1.readInt(1);
      classReader0.getSuperName();
      short short0 = classReader0.readShort(4);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)76;
      byteArray0[3] = (byte)77;
      byteArray0[3] = (byte)70;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.getSuperName();
      classReader0.getItem(13);
      int int0 = ClassReader.SKIP_CODE;
      ClassWriter classWriter0 = new ClassWriter(classReader0, 63);
      classReader0.accept((ClassVisitor) classWriter0, (-93));
      classReader0.readInt(3);
      classReader0.readInt(63);
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      classReader0.readConst(3, charArray0);
      classReader0.getItem(1);
      Label[] labelArray0 = new Label[2];
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      Label label0 = classReader1.readLabel(1, labelArray0);
      Label label1 = label0.next;
      labelArray0[0] = null;
      Label label2 = new Label();
      labelArray0[1] = label2;
      // Undeclared exception!
      try { 
        classReader0.readLabel(3632, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      Attribute[] attributeArray0 = new Attribute[5];
      attributeArray0[1] = attribute0;
      attributeArray0[2] = attribute0;
      attributeArray0[3] = attribute0;
      Attribute attribute1 = new Attribute("wheel.asm.Edge");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter((-1781));
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'p';
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader0.b, 82, 795);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 425
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = ClassReader.SIGNATURES;
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      Attribute attribute0 = new Attribute("}XS$z[)");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(248);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      // Undeclared exception!
      try { 
        classReader1.readConst(8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(271);
      classReader0.getInterfaces();
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'P';
      classReader0.readConst(7, charArray0);
      ClassWriter classWriter0 = new ClassWriter(18);
      classReader0.accept((ClassVisitor) classWriter0, 4);
      assertEquals(2, ClassReader.SKIP_DEBUG);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)76;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)47;
      byteArray0[3] = (byte)70;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(13);
      classReader0.getSuperName();
      classReader0.getItem(13);
      int int0 = ClassReader.SKIP_CODE;
      ClassWriter classWriter0 = new ClassWriter(classReader0, 63);
      classReader0.accept((ClassVisitor) classWriter0, (-93));
      classReader0.readInt(3);
      classReader0.readInt(63);
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '}';
      charArray0[2] = 'B';
      Type type0 = (Type)classReader0.readConst((byte)70, charArray0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(271);
      classReader0.accept((ClassVisitor) classWriter0, (-758));
      classReader0.getInterfaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LocalVariableTable");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 4, 4);
      Attribute[] attributeArray0 = new Attribute[0];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 14);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1104);
      classReader0.accept((ClassVisitor) classWriter1, 580);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassReader classReader2 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = 'r';
      charArray0[2] = '\\';
      charArray0[3] = 'r';
      charArray0[4] = '^';
      charArray0[5] = 'X';
      charArray0[6] = '~';
      charArray0[7] = 'r';
      charArray0[8] = 'a';
      // Undeclared exception!
      try { 
        classReader2.readClass(2018, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream(140);
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.WildcardFileFilter");
      Attribute attribute1 = new Attribute("org.apache.commons.io.filefilter.WildcardFileFilter");
      Attribute attribute2 = attribute1.next;
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, (Attribute[]) null, (-1172));
      classReader0.accept((ClassVisitor) classAdapter0, 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassReader classReader2 = new ClassReader(classReader1.b);
      classReader2.copyPool(classWriter0);
      classReader2.accept((ClassVisitor) classWriter0, 4);
      assertNotSame(classReader2, classReader1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1000);
      Attribute[] attributeArray0 = new Attribute[5];
      attributeArray0[1] = attribute0;
      attributeArray0[2] = attribute0;
      attributeArray0[3] = attribute0;
      Attribute attribute1 = new Attribute("wheel.asm.Edge");
      attributeArray0[4] = attribute1;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, (-242));
      classReader0.accept((ClassVisitor) classWriter0, 33);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getClassName();
      ClassReader classReader2 = new ClassReader(classReader1.b);
      classReader2.accept((ClassVisitor) classWriter0, (-153));
      assertNotSame(classReader1, classReader2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-2761));
      Attribute[] attributeArray0 = new Attribute[2];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 81);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getClassName();
      ClassReader classReader2 = new ClassReader(classReader0.b);
      ClassWriter classWriter1 = new ClassWriter(57);
      classReader0.accept((ClassVisitor) classWriter1, 4);
      assertEquals(1380, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1380);
      PipedInputStream pipedInputStream1 = new PipedInputStream(9);
      Attribute attribute0 = new Attribute("The FilenameFilter must not be null");
      Attribute attribute1 = new Attribute("equals");
      Attribute attribute2 = attribute1.next;
      ClassWriter classWriter0 = new ClassWriter(83);
      Attribute[] attributeArray0 = new Attribute[0];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 83);
      classReader0.accept((ClassVisitor) classWriter0, 1006);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-13);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.WildcardFileFilter";
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(155);
      classReader0.accept((ClassVisitor) classWriter0, 72);
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = '|';
      charArray0[2] = 'I';
      charArray0[3] = '4';
      charArray0[4] = 'R';
      charArray0[5] = 'e';
      // Undeclared exception!
      try { 
        classReader0.readConst(0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1380);
      PipedInputStream pipedInputStream1 = new PipedInputStream(9);
      ClassReader classReader1 = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
      classReader1.getInterfaces();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)59;
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1398);
      PipedInputStream pipedInputStream1 = new PipedInputStream(271);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader0.getInterfaces();
      ClassReader classReader2 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(classReader2, 40);
      classReader1.accept((ClassVisitor) classWriter0, 8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.NameFileFilter");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = 'z';
      charArray0[2] = 't';
      charArray0[3] = '/';
      charArray0[4] = '7';
      charArray0[5] = '^';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(216, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 271);
      classReader0.accept((ClassVisitor) classWriter0, 2196);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)105;
      byte byte0 = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.getInterfaces();
      classReader1.getSuperName();
      int int0 = 11;
      classReader1.readLong(11);
      // Undeclared exception!
      try { 
        classReader0.readLabel((-128), (Label[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1398);
      PipedInputStream pipedInputStream1 = new PipedInputStream(271);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      classReader0.getInterfaces();
      String string0 = classReader1.getSuperName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 13);
      classReader0.accept((ClassVisitor) classWriter0, 13);
      classReader0.getInterfaces();
      classReader0.getSuperName();
      int int0 = (-1023);
      // Undeclared exception!
      try { 
        classReader0.readLong((-1023));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getInterfaces();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      Label[] labelArray0 = new Label[0];
      // Undeclared exception!
      try { 
        classReader0.readLabel(2802, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getInterfaces();
      classReader0.getSuperName();
      classReader0.getInterfaces();
      int int0 = (-1023);
      int int1 = 6121;
      Label[] labelArray0 = new Label[3];
      // Undeclared exception!
      try { 
        classReader0.readLabel(4096, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, (Attribute[]) null, (-214));
      classReader0.getClassName();
      char[] charArray0 = null;
      classReader0.readUTF8(21, (char[]) null);
      classReader0.getClassName();
      classReader0.getClassName();
      int int0 = 138;
      // Undeclared exception!
      try { 
        classReader0.getItem(138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 138
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      ClassReader classReader1 = new ClassReader("wheel.asm.Edge");
      classReader1.getInterfaces();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.read(classReader0.b);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        classReader1.readConst(1008, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1008
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 4);
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      classReader0.getInterfaces();
      charArray0[1] = 'g';
      charArray0[2] = 'G';
      charArray0[3] = 'g';
      // Undeclared exception!
      try { 
        classReader0.readUTF8((short) (-13570), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1380);
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) null, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.NameFileFilter");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, (-2717), (-889275714));
      byteArrayInputStream0.read(byteArray0);
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, (-1288));
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(1380);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[0];
      int int0 = 1770;
      // Undeclared exception!
      try { 
        classReader0.readClass(1770, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        classReader0.readClass(10, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'u';
      charArray0[2] = 'H';
      charArray0[3] = 'a';
      charArray0[4] = '%';
      charArray0[5] = 'U';
      // Undeclared exception!
      try { 
        classReader1.readUTF8(11, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mu)W6W_6t0R:q@~");
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.mark(1380);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      int int0 = classReader0.readByte(8);
      assertEquals(1380, classReader0.header);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-2761));
      Attribute[] attributeArray0 = new Attribute[2];
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.WildcardFileFilter");
      attributeArray0[0] = attribute0;
      Attribute attribute1 = attribute0.next;
      attributeArray0[1] = null;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 2);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.accept((ClassVisitor) classWriter0, 33);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      assertEquals(1380, classReader0.header);
      
      classReader0.getClassName();
      short short0 = classReader0.readShort(13);
      assertEquals((short)51, short0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      
      int int0 = classReader0.getItem(13);
      assertEquals(63, int0);
      
      int int1 = ClassReader.SKIP_CODE;
      ClassWriter classWriter0 = new ClassWriter(classReader0, 63);
      classReader0.accept((ClassVisitor) classWriter0, (-93));
      classReader0.readInt(3);
      int int2 = classReader0.readInt(63);
      assertEquals(4197120, int2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '}';
      charArray0[2] = 'B';
      // Undeclared exception!
      try { 
        classReader0.readConst((byte)77, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 4);
      ClassWriter classWriter0 = new ClassWriter(1006);
      classReader0.readLong(0);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      // Undeclared exception!
      try { 
        classReader0.getItem(324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 324
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 4);
      ClassWriter classWriter0 = new ClassWriter(1006);
      classReader0.copyPool(classWriter0);
      classReader0.readUnsignedShort(0);
      classReader0.getSuperName();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      classReader0.getSuperName();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader0.readConst((-835), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b, 1380, 2);
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classReader1.copyPool(classWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(391);
      classReader0.copyPool(classWriter0);
      // Undeclared exception!
      try { 
        classReader0.readUnsignedShort((-741));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      int int0 = 0;
      classReader0.readShort(0);
      int int1 = 704;
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = 'F';
      charArray0[2] = '|';
      charArray0[3] = '2';
      charArray0[4] = '9';
      charArray0[5] = 'Y';
      charArray0[6] = 'k';
      // Undeclared exception!
      try { 
        classReader0.readConst(704, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)15;
      byteArrayInputStream0.read(byteArray0);
      ClassReader classReader1 = new ClassReader(byteArrayInputStream0);
      int int0 = ClassReader.SKIP_FRAMES;
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) null, (Attribute[]) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getInterfaces();
      classReader0.getSuperName();
      int int0 = (-1023);
      // Undeclared exception!
      try { 
        classReader0.readLong((-1023));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.mark(1380);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader0.getAccess();
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readLong((-2371));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      assertEquals(1380, classReader0.header);
      
      String string0 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/WildcardFileFilter", string0);
      
      short short0 = classReader0.readShort(0);
      assertEquals((short) (-13570), short0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 4);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.mark(4060);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader0.getAccess();
      classReader0.getSuperName();
      long long0 = classReader0.readLong(0);
      assertEquals((-3819410108757049297L), long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '@';
      // Undeclared exception!
      try { 
        classReader0.readClass((-1502), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'm';
      charArray0[2] = 'R';
      // Undeclared exception!
      try { 
        classReader0.readClass(59, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(1380, classReader0.header);
      assertEquals(0, stringArray0.length);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.mark(1380);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ClassReader.SKIP_DEBUG;
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      
      short short0 = classReader0.readShort(2);
      assertEquals((short) (-17730), short0);
      
      int int1 = classReader0.readByte(2);
      assertEquals(186, int1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(0);
      classReader0.getSuperName();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 4);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader0.readUTF8(4060, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassAdapter");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader1.b, 2, 1007);
      int int0 = ClassReader.EXPAND_FRAMES;
      classReader1.getAccess();
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader0.b, 1359, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45280
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(13);
      classReader0.getSuperName();
      int int0 = ClassReader.SKIP_CODE;
      ClassWriter classWriter0 = new ClassWriter(classReader0, (byte)67);
      classWriter0.cr = classReader0;
      classReader0.accept((ClassVisitor) classWriter0, (-93));
      classReader0.getClassName();
      classReader0.readInt(3);
      int int1 = classReader0.readInt((byte)70);
      int int2 = classReader0.readUnsignedShort(13);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.readShort(2);
      Label[] labelArray0 = new Label[2];
      Edge edge0 = new Edge();
      Label label0 = edge0.successor;
      labelArray0[0] = null;
      Label label1 = edge0.successor;
      labelArray0[1] = null;
      // Undeclared exception!
      try { 
        classReader0.readLabel((short) (-17730), labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassAdapter");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader1.b, 2, 1007);
      byteArrayInputStream0.read(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(1011);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader1.accept((ClassVisitor) classWriter0, 0);
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = ClassReader.SIGNATURES;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1398);
      ClassReader classReader0 = new ClassReader("wheel.asm.FieldWriter");
      classReader0.getInterfaces();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      classReader1.accept((ClassVisitor) classWriter0, 2080);
      assertNotSame(classReader1, classReader0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader2 = new ClassReader(classReader1.b);
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader1.accept((ClassVisitor) classWriter0, 8);
      assertNotSame(classReader1, classReader2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.getSuperName();
      classReader0.readLong(64);
      classReader0.getItem(0);
      // Undeclared exception!
      try { 
        classReader0.getItem((-93));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -93
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        classReader0.readShort((-1888));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(0);
      classReader0.getSuperName();
      classReader0.getSuperName();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'z';
      charArray0[2] = ':';
      charArray0[3] = 'x';
      charArray0[4] = '9';
      charArray0[5] = 'u';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(1040, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(33);
      classReader0.accept((ClassVisitor) classWriter0, 79);
      assertEquals(2, ClassReader.SKIP_DEBUG);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      classReader0.copyPool(classWriter0);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 25);
      classReader0.copyPool(classWriter0);
      // Undeclared exception!
      try { 
        classReader0.readInt((-1183));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.mark(1380);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader0.getAccess();
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      
      int int0 = classReader0.readInt(83);
      assertEquals(33, classReader0.getAccess());
      assertEquals(167790080, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(13);
      classReader0.getSuperName();
      classReader0.getItem(13);
      int int0 = ClassReader.SKIP_CODE;
      ClassWriter classWriter0 = new ClassWriter(classReader0, 63);
      classReader0.accept((ClassVisitor) classWriter0, (-93));
      int int1 = classReader0.readInt(3);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      // Undeclared exception!
      try { 
        classReader0.readUTF8(517, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      sequenceInputStream0.mark(1380);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader0.getAccess();
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.getItem(3106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3106
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(155);
      classReader0.accept((ClassVisitor) classWriter0, 72);
      Locale.getISOLanguages();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.readLong(6);
      classReader1.getInterfaces();
      ClassReader classReader2 = new ClassReader(classReader1.b);
      classReader2.getInterfaces();
      classReader2.readShort(4);
      ClassReader classReader3 = new ClassReader(classReader1.b, 1380, 83);
      // Undeclared exception!
      try { 
        classReader3.getInterfaces();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      classReader0.getClassName();
      classReader0.readShort(0);
      classReader0.getSuperName();
      classReader0.getItem(0);
      // Undeclared exception!
      try { 
        classReader0.getItem((-93));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -93
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-24);
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-39);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, 6, (byte) (-39));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.WildcardFileFilter");
      ClassWriter classWriter0 = null;
      // Undeclared exception!
      try { 
        classReader0.copyPool((ClassWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte)4;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byte byte0 = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-32);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 4096;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, 4096, 4096);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
