/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:00:46 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("w#[J8~VxXWkZ?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      int[] intArray0 = new int[5];
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      // Undeclared exception!
      try { 
        denseMatrix0.minInRow(33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      int int1 = 1340;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1340, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix(0, 1340, 0);
      cCSMatrix1.toBinary();
      cCSMatrix1.toColumnVector();
      cCSMatrix1.rank();
      cCSMatrix1.setColumn(0, Double.NEGATIVE_INFINITY);
      cCSMatrix0.toRowMajorSparseMatrix();
      int int2 = 974;
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(974, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 975
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(9);
      basic2DMatrix0.rank();
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(153, 153);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.transformColumn(113, vectorFunction0);
      matrix0.toBinary();
      matrix0.columnMajorIterator();
      matrix0.maxInColumn((-1982292617));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      Matrix matrix0 = rowMajorSparseMatrix0.blank();
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      rowMajorSparseMatrix0.apply(matrixOperation0);
      rowMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      rowMajorSparseMatrix0.hashCode();
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(703, 0, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '703' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2.3087);
      double[][] doubleArray1 = new double[0][1];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      denseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 9.02335084298209, (Random) mockRandom0);
      rowMajorSparseMatrix0.diagonalProduct();
      rowMajorSparseMatrix0.max();
      rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      String string0 = "";
      int int1 = (-3487);
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-3487));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(51, 6);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      denseMatrix0.non(advancedMatrixPredicate0);
      SparseVector sparseVector0 = SparseVector.zero(6, (-2881));
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn(6, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(51, 51);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.blankOfColumns(1875);
      cRSMatrix0.non((AdvancedMatrixPredicate) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      double[][] doubleArray0 = new double[0][4];
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix(doubleArray0);
      basic2DMatrix0.equals((Matrix) basic2DMatrix1, 699.590884508206);
      // Undeclared exception!
      try { 
        basic2DMatrix1.insert((Matrix) basic2DMatrix0, 3773, 3773, 3773, 3773, 3773, 3773);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 3773, 3773
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = Matrix.unit(1745, 2734);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert(matrix0, 2734, 89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2734 rows and 89 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2.3087);
      doubleArray0[5] = (-2.3087);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 1147.0;
      doubleArray0[5] = 2504.57;
      doubleArray0[6] = 4562.442007095342;
      int int0 = 242;
      Matrix matrix0 = Matrix.unit(242, 242);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic2DMatrix0, 242, 242);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 242 rows and 242 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1);
      cCSMatrix0.hashCode();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[2] = 0.0;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(7, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(74, mockRandom0);
      NumberFormat.getInstance();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket(" in a ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      int int0 = 7;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.updateColumn(7, vectorFunction0);
      basic1DMatrix0.withInverter(linearAlgebra_InverterFactory0);
      basic1DMatrix0.diagonalProduct();
      basic1DMatrix0.hashCode();
      basic1DMatrix0.rows();
      basic1DMatrix0.maxInRow((-4470));
      // Undeclared exception!
      try { 
        basic1DMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 1478;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1478);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1478, 1478);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int1 = 3;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, int0);
      matrix0.insertColumn(int1, denseVector0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1340;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 1340);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0);
      SparseVector.fromMap(hashMap0, 0);
      columnMajorSparseMatrix0.toCSV();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.power(1340);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 1340.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.kroneckerProduct(basic2DMatrix0);
      basic2DMatrix0.maxInColumn(22);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert(matrix0, (-344), 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -344x20
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 2609;
      Matrix matrix0 = Matrix.diagonal(2609, 2609);
      matrix0.power(2609);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      double double0 = basic2DMatrix0.determinant();
      Matrix matrix1 = Matrix.identity(int0);
      Matrix matrix2 = basic2DMatrix0.removeLastRow();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      basic2DMatrix0.removeFirstRow();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.keySet();
      Matrix matrix3 = basic2DMatrix0.multiply(double0);
      int int1 = (-228);
      DenseVector.zero(int1);
      int int2 = 18;
      matrix1.toSparseMatrix();
      Matrix matrix4 = Matrix.constant(int2, int1, int1);
      hashMap0.keySet();
      int int3 = (-3967);
      DenseVector.zero(int3);
      int int4 = 1;
      int int5 = (-1230);
      basic2DMatrix0.insert(matrix2, int4, int5);
      int int6 = 81;
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix3, matrix3, basic2DMatrix0, matrix4);
      int int7 = 10;
      cCSMatrix0.slice(int0, int6, int7, int3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.rank();
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      SparseVector.fromMap(hashMap0, 0);
      cCSMatrix0.toCSV();
      SparseVector.fromMap(hashMap0, 1);
      cCSMatrix0.toCSV();
      Matrix matrix0 = cCSMatrix0.power(0);
      basic2DMatrix0.equals((Matrix) cCSMatrix0, (-17.0));
      basic2DMatrix0.determinant();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      cRSMatrix0.copy();
      int[] intArray0 = new int[7];
      intArray0[4] = 1;
      intArray0[1] = 0;
      intArray0[2] = (-1166);
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1982, 3377.95789775864);
      matrix0.blankOfRows(1);
      matrix0.sum();
      int int0 = 0;
      matrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      denseMatrix0.mkString("wO%_qO2&Q@", "wO%_qO2&Q@");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldRows(vectorAccumulator0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)71;
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic2DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Matrix matrix0 = Matrix.unit(3457, 5);
          Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
          int int0 = 1314;
          // Undeclared exception!
          try { 
            matrix0.insert((Matrix) basic2DMatrix0, (-1292), 1314);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Cannot have negative rows or columns: -1292x1314
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(153, 153);
      matrix0.toBinary();
      Double double0 = new Double(153);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      matrix0.apply(matrixOperation0);
      matrix0.columnMajorIterator();
      double double1 = Locale.LanguageRange.MIN_WEIGHT;
      matrix0.sliceBottomRight((-1982292617), 2673);
      double double2 = 0.0;
      matrix0.subtract(double2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(950, 950);
      Matrix matrix0 = cCSMatrix0.slice(950, 950, 950, 950);
      matrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 37;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(37, 36, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.slice((-4305), 36, (-561), 898);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      denseMatrix0.rank();
      // Undeclared exception!
      try { 
        denseMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      ooPlaceOuterProduct0.partiallyApply(sparseVector0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      DenseVector denseVector0 = DenseVector.constant(0, 0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      matrix0.toColumnVector();
      // Undeclared exception!
      try { 
        matrix0.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2.3087);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.fail("=3tNOc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // =3tNOc
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        Matrix.random(1027, 1027, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1122);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.transformRow(4177, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV(", ");
      denseMatrix0.swapColumns((-178), (-178));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2473.0192484673;
      doubleArray2[1] = 280.385;
      doubleArray2[2] = (-403.301);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-403.301);
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 280.385;
      doubleArray4[1] = 2473.0192484673;
      doubleArray4[2] = 2473.0192484673;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 2473.0192484673;
      doubleArray4[5] = (-110.4809545805909);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 280.385;
      doubleArray4[8] = 2473.0192484673;
      doubleArray0[3] = doubleArray4;
      int int0 = 4;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(4, 0.0);
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        Matrix.block((Matrix) null, (Matrix) null, denseMatrix0, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.toDenseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.fromCSV("WC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      denseMatrix0.max();
      // Undeclared exception!
      try { 
        denseMatrix0.getColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      basic2DMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = 2473.0192484673;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray2);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(2, 2);
      DenseVector denseVector1 = DenseVector.fromMap(hashMap0, 2);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector1);
      matrix0.removeFirstColumn();
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      int int1 = 1340;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 1340);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = columnMajorSparseMatrix0.transformColumn(0, vectorFunction0);
      matrix0.toColumnVector();
      matrix0.kroneckerProduct(columnMajorSparseMatrix0);
      matrix0.rank();
      matrix0.setColumn(0, Double.NEGATIVE_INFINITY);
      double double0 = new Integer(0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1754.139159584528;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1855.902204988354;
      doubleArray2[6] = (-1642.6953413235);
      doubleArray2[7] = (-1369.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1642.6953413235);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[1] = (-1642.6953413235);
      doubleArray4[2] = 1855.902204988354;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-1369.0);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-1642.6953413235);
      doubleArray5[4] = (-1642.6953413235);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-1369.0);
      doubleArray0[5] = doubleArray6;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(2049, 628);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2050
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 9.02335084298209, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceTopLeft(37, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DenseMatrix.zero(27, 27);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.determinant();
      SparseMatrix.zero(5, 1522, 5);
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(14, (-4194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 14x-4194
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(27, 27);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(27, 27);
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      CCSMatrix.zero(27, 27);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 1452;
      Integer integer0 = new Integer(1452);
      matrix0.determinant();
      int int1 = (-1155);
      // Undeclared exception!
      try { 
        Matrix.identity((-1155));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      int int0 = (-3437);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfColumns((-3437));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2x-3437
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 18;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(18, 18);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.rank();
      double double0 = 147895.33601265406;
      cRSMatrix0.subtract(double0);
      cRSMatrix0.setAll(int0);
      int int1 = 1852;
      int int2 = 9;
      cRSMatrix0.slice(int0, int1, int2, int0);
      cRSMatrix0.blankOfColumns(int0);
      int int3 = 6;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, int0);
      sparseVector0.toSparseVector();
      int int4 = 31;
      cRSMatrix0.insertColumn(int4, sparseVector0);
      double double1 = (-3857.6183222771);
      cRSMatrix0.set(int3, int3, int3);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(int3, double1);
      int int5 = 20;
      cRSMatrix0.copy();
      int[] intArray0 = new int[4];
      intArray0[0] = int5;
      intArray0[1] = int3;
      double double2 = 0.11862839843251047;
      basic2DMatrix0.setAll(double2);
      org.evosuite.runtime.Random.setNextRandom(intArray0[0]);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 2730;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2730, 2730);
      NumberFormat numberFormat0 = null;
      Matrix matrix0 = denseMatrix0.sliceTopLeft(2730, 2730);
      String string0 = "].";
      String string1 = "R";
      denseMatrix0.mkString(numberFormat0, string0, string1);
      int int1 = 30;
      denseMatrix0.getRow(int1);
      int int2 = 22;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int0, int2);
      int int3 = (-129);
      double double0 = 0.0;
      Matrix.constant(int0, int3, double0);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.to(matrixFactory0);
      columnMajorSparseMatrix0.trace();
      denseMatrix0.equals((Object) columnMajorSparseMatrix0);
      int int4 = (-1427);
      int int5 = (-5194);
      cRSMatrix0.set(int4, int5, int2);
      matrix0.sliceBottomRight(int4, int5);
      int int6 = (-4);
      MockRandom mockRandom0 = new MockRandom(int2);
      Matrix matrix1 = Matrix.random(int3, int6, mockRandom0);
      matrix1.manhattanNorm();
      MatrixFactory<Matrix> matrixFactory1 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      Matrix matrix2 = matrix0.to(matrixFactory1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix2.foldRows(vectorAccumulator0);
      int int7 = 12;
      matrix1.iteratorOfRow(int7);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 100.0;
      int[] intArray0 = new int[6];
      intArray0[0] = 7;
      intArray0[0] = 9;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 7;
      intArray0[5] = 1340;
      CRSMatrix cRSMatrix0 = new CRSMatrix(7, 0, 0, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.diagonalProduct();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = new CCSMatrix(942, 1);
      // Undeclared exception!
      try { 
        cCSMatrix0.slice(3498, 3498, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3498..1][3498..1].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4, 4);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.spliterator();
      int int0 = 81;
      Matrix.identity(81);
      denseMatrix0.removeLastRow();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(4);
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 81);
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
      Matrix matrix0 = cRSMatrix0.insertRow(4, denseVector0);
      int int1 = (-311);
      matrix0.swapColumns(int1, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(27, 27);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.identity(27);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) basic2DMatrix1, 27, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 27x-3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.transpose();
      // Undeclared exception!
      try { 
        basic2DMatrix0.slice(Integer.MAX_VALUE, Integer.MAX_VALUE, (-169), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2147483647..-169][2147483647..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      denseMatrix0.transpose();
      // Undeclared exception!
      try { 
        denseMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(27, 27);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)27).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        Matrix.unit(1960, (-1549));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 5088, 5088);
      Matrix matrix0 = cRSMatrix0.blankOfShape(6, 6);
      matrix0.toSparseMatrix();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 6);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(5088, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 6.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Matrix.constant(16, 16, 16);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      DenseMatrix denseMatrix1 = DenseMatrix.identity(17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix1.transformRow(1, vectorFunction0);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) denseMatrix1, (-2433), (-2433));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2433x-2433
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(4, 4);
      Matrix.identity(4);
      basic2DMatrix0.removeLastRow();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(55, 3284);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(3284);
      Double double0 = new Double(55);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow(4, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.blankOfShape(0, 0);
      matrix0.setRow((-1), (double) (-1));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      rowMajorSparseMatrix0.norm();
      intArray0[1] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      rowMajorSparseMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copyOfColumns(580);
      cRSMatrix0.toMatrixMarket();
      basic2DMatrix0.infinityNorm();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(290, 290);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(290, 290);
      int[] intArray0 = new int[1];
      denseMatrix0.select(intArray0, intArray0);
      CCSMatrix.identity(290);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(76);
      Double double0 = new Double(76);
      hashMap0.put(integer0, double0);
      Integer integer1 = new Integer(2087);
      Double double1 = new Double(2087);
      basic2DMatrix0.equals((Matrix) denseMatrix0, (-1.0));
      // Undeclared exception!
      try { 
        Matrix.fromCSV("I_]3EvB");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      rowMajorSparseMatrix0.removeLastColumn();
      Double double0 = new Double(1);
      cCSMatrix0.toCSV();
      matrix0.equals((Matrix) denseMatrix0, (double) 1);
      int int1 = 1073741824;
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("1.000\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 13;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(13, 13);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(13);
      Double double0 = new Double(13);
      int int1 = 3;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(15, 3, 2803.07630416957);
      basic2DMatrix0.removeLastColumn();
      rowMajorSparseMatrix0.transpose();
      int int2 = 0;
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateAt(0, 3, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      int[] intArray0 = new int[6];
      intArray0[1] = 1;
      denseMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(1248, 1, 1);
      rowMajorSparseMatrix1.equals((Matrix) denseMatrix0, (double) 1248);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      rowMajorSparseMatrix0.spliterator();
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(481, 481);
      int int0 = 2671;
      cCSMatrix0.swapColumns(2671, 2671);
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(950, 950);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(950);
      Matrix matrix0 = cCSMatrix1.copyOfColumns(950);
      Locale locale0 = Locale.US;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      String string0 = matrix0.toMatrixMarket(numberFormat0);
      Matrix matrix1 = matrix0.subtract((double) (-634));
      MockRandom mockRandom0 = new MockRandom((-177L));
      mockRandom0.nextDouble();
      mockRandom0.ints(228L, (-634), 13);
      matrix1.mkString(numberFormat0, string0, string0);
      int int0 = 0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateColumn(int0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(26, 26);
      int[] intArray0 = new int[10];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(26);
      MatrixOperation<Double> matrixOperation0 = (MatrixOperation<Double>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Double> matrixMatrixOperation0 = (MatrixMatrixOperation<Double>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      matrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.updateAt(0, 0, matrixFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DenseMatrix.zero(1, 1);
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.toCSV();
      int int0 = (-1152);
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-1152));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1152.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 55);
      cRSMatrix0.spliterator();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(4, 4);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      CRSMatrix cRSMatrix1 = (CRSMatrix)Matrix.identity(4);
      basic2DMatrix0.removeLastRow();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(13);
      BasicVector basicVector0 = (BasicVector)DenseVector.fromMap(hashMap0, 13);
      basicVector0.toSparseVector();
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 55;
      doubleArray0[3] = 147895.33601265406;
      doubleArray0[4] = (double) 55;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 1.0;
      Matrix.from1DArray(4, 13, doubleArray0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cRSMatrix1, (DenseMatrix) basic2DMatrix0);
      basic2DMatrix1.shuffle();
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (double) Integer.MAX_VALUE;
      doubleArray0[8] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 17;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17);
      rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.add((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 55);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformColumn((-2075), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2075' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.rotate();
      int int0 = 698;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateColumn(698, vectorFunction0);
      matrix0.diagonalProduct();
      // Undeclared exception!
      try { 
        Vector.random(192, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Matrix matrix1 = denseMatrix0.rotate();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      matrix0.toCSV();
      denseMatrix0.toRowMajorSparseMatrix();
      matrix1.subtract(2557.61782502);
      denseMatrix0.add((Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      matrix1.rank();
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Matrix matrix2 = denseMatrix0.rotate();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      SparseVector.fromMap(hashMap0, 0);
      matrix1.toCSV();
      Matrix matrix3 = matrix1.power(0);
      matrix3.equals(matrix0, (double) 0);
      denseMatrix0.toRowMajorSparseMatrix();
      Matrix matrix4 = matrix3.multiply(2.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      matrix2.subtract(2557.61782502);
      // Undeclared exception!
      try { 
        matrix4.insert(matrix0, 37, 1, 934, (-1317), 934, 374);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 934, -1317
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DenseMatrix.zero(27, 27);
      CRSMatrix.zero(27, 27);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[1];
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      int int0 = 1960;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix1.update(matrixFunction0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        Matrix.from1DArray(27, (-1711), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 27x-1711
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 358;
      Matrix matrix0 = Matrix.zero(358, 358);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      int int1 = 287;
      int int2 = 1437;
      matrix0.sliceBottomRight(int1, int2);
      matrix0.maxInColumn(int0);
      matrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 9.120152673531893, (Random) mockRandom0);
      rowMajorSparseMatrix0.diagonalProduct();
      rowMajorSparseMatrix0.max();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      double[][] doubleArray0 = new double[3][1];
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateAt(17, 17, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 991, 17);
      cCSMatrix0.removeFirstRow();
      SparseVector sparseVector0 = SparseVector.zero(840, 17);
      SparseVector sparseVector1 = sparseVector0.toSparseVector();
      sparseVector1.add((double) 991);
      rowMajorSparseMatrix0.removeLastColumn();
      cCSMatrix0.diagonalProduct();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero(7, (-766));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(10, mockRandom0);
      int int1 = 2037;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn(2037, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix.zero(1, 1);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.1102230246251565E-14).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldColumns(vectorAccumulator0);
      int int0 = (-2175);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(1, (-2175));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..1][0..-2175].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 27;
      DenseMatrix.zero(27, 27);
      int int1 = 4;
      int int2 = 55;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(4, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(1);
      Double double0 = new Double(1);
      cCSMatrix0.toCSV();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("1.000\n");
      int int0 = 827;
      cRSMatrix0.swapColumns(827, 827);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow(Integer.MAX_VALUE, (double) Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      double double0 = 2.0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldRows(vectorAccumulator0);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      CCSMatrix.identity(1);
      Matrix.identity(1);
      int int1 = 1884;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1884, 3);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      denseMatrix0.removeFirstRow();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.keySet();
      // Undeclared exception!
      try { 
        cCSMatrix0.hadamardProduct(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1884x3 does not equal to 1x1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      Matrix matrix0 = denseMatrix0.divide(0.6359621587206156);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.format((long) 1);
      DecimalFormat decimalFormat1 = new DecimalFormat("&zXz");
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(8, mockRandom0);
      denseMatrix0.mkString((NumberFormat) decimalFormat0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2959.68429).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      int int0 = Double.MIN_EXPONENT;
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(1);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      Double double0 = new Double(1);
      // Undeclared exception!
      try { 
        SparseVector.fromMap(hashMap0, (-1022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1022
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      int int1 = Double.BYTES;
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      rowMajorSparseMatrix0.removeLastColumn();
      Double double0 = new Double(1);
      cCSMatrix0.toCSV();
      Matrix matrix0 = cCSMatrix0.power(8);
      matrix0.equals((Matrix) basic2DMatrix0, (double) 8);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("0.000\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.unit(0, 18);
      Matrix matrix1 = matrix0.multiply((-1.0));
      matrix1.copyOfColumns(0);
      // Undeclared exception!
      try { 
        matrix0.setColumn(18, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 721;
      Matrix matrix0 = Matrix.diagonal(721, 721);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.non(advancedMatrixPredicate0);
      matrix0.setAll(0.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transformColumn(721, vectorFunction0);
      matrix1.max();
      int int1 = 17;
      int int2 = Integer.MAX_VALUE;
      matrix0.swapRows(int1, int2);
      Matrix matrix2 = matrix1.removeLastColumn();
      Matrix matrix3 = matrix1.removeFirstColumn();
      matrix3.max();
      long long0 = 3019L;
      MockRandom mockRandom0 = new MockRandom(long0);
      int int3 = mockRandom0.nextInt();
      Matrix.randomSymmetric(int1, mockRandom0);
      Matrix matrix4 = Matrix.random(int1, int1, mockRandom0);
      String string0 = "n:%m?7yQN";
      matrix4.mkString(string0, string0);
      double double0 = (-0.4375);
      Matrix matrix5 = matrix4.divide(double0);
      int int4 = 962;
      int int5 = 32;
      matrix5.insert(matrix1, int1, int4, int0, int5, int3, int5);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix2.is(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 5);
      CCSMatrix.zero(54, 1240);
      Matrix matrix0 = cCSMatrix0.copyOfRows(54);
      // Undeclared exception!
      try { 
        matrix0.to((MatrixFactory<SparseMatrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 16;
      int int1 = 1677;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(16, 1677);
      sparseMatrix0.swapRows(1677, 1677);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      sparseMatrix0.is(matrixPredicate0);
      int int2 = 3;
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      Vector vector0 = Vector.constant(16, 1677);
      vector0.toDenseVector();
      double double0 = (-2596.306412918386);
      MockRandom mockRandom0 = new MockRandom();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachNonZero(matrixProcedure0);
      Matrix matrix0 = null;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateRow(2147483645, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2147483645' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.rank();
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      Integer integer0 = new Integer(1);
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 2;
      Matrix.randomSymmetric(2, mockRandom0);
      matrix0.determinant();
      rowMajorSparseMatrix0.copy();
      int int1 = 5293;
      rowMajorSparseMatrix0.trace();
      MockRandom mockRandom1 = new MockRandom(2);
      // Undeclared exception!
      CRSMatrix.randomSymmetric(5293, (double) 1, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow(1, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-267.27771);
      doubleArray3[1] = 0.5111144196993243;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-267.27771);
      doubleArray4[1] = 0.5111144196993243;
      doubleArray4[2] = (-267.27771);
      doubleArray4[3] = 0.5111144196993243;
      doubleArray4[4] = 0.5111144196993243;
      doubleArray4[5] = 0.5111144196993243;
      doubleArray0[3] = doubleArray4;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 676;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 676);
      SparseVector sparseVector1 = sparseVector0.toSparseVector();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(31);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn((-1921), sparseVector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..30
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      Matrix.diagonal(1, 0.5111144196993243);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.rank();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(1);
      rowMajorSparseMatrix0.removeLastColumn();
      Double double0 = new Double(1);
      SparseVector.fromMap(hashMap0, 1);
      cCSMatrix0.toCSV();
      Matrix matrix1 = cCSMatrix0.power(1);
      matrix1.equals(matrix0, (double) 1);
      matrix1.multiply(1.0592294680632506);
      CRSMatrix.fromCSV("1.000\n");
      SparseVector sparseVector0 = SparseVector.zero(1, 1);
      sparseVector0.sliceRight(1);
      matrix0.insertColumn(0, sparseVector0);
      // Undeclared exception!
      try { 
        denseMatrix0.non((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 51;
      CRSMatrix cRSMatrix0 = new CRSMatrix(51, 51, 51);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.blankOfColumns(51);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int int1 = 6;
      int int2 = 40;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 40);
      SparseVector sparseVector1 = sparseVector0.toSparseVector();
      cRSMatrix0.insertColumn(40, sparseVector1);
      Basic2DMatrix.diagonal(int0, int1);
      CCSMatrix cCSMatrix0 = new CCSMatrix(int0, int2, int2);
      String string0 = "\\";
      Matrix matrix0 = Matrix.fromCSV(string0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      matrix0.removeFirstColumn();
      cRSMatrix0.diagonalProduct();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn(1, 2.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 13;
      Double double0 = new Double(0.964);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3609);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(13, 3609);
      String string0 = sparseMatrix0.toCSV();
      Matrix matrix0 = sparseMatrix0.power(47);
      int int1 = 2;
      int int2 = 2817;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV(string0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.zero(1940);
      ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      cRSMatrix0.insertRow(13, denseVector0);
      double double1 = 0.6359621587206156;
      matrix0.set(int2, int1, double1);
      Basic2DMatrix.diagonal(int2, double1);
      sparseMatrix0.copy();
      MockRandom mockRandom0 = new MockRandom();
      int int3 = (-2314);
      int int4 = 2402;
      RowMajorSparseMatrix.zero(int3, int0, int4);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 13;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(13, 13);
      Matrix matrix0 = rowMajorSparseMatrix0.copyOfShape(13, 13);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 18, 1132, 18, (-3487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 18x-3487
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.diagonal(1575, 0.0);
      cRSMatrix0.nonZeroIterator();
      cRSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication1.apply(denseMatrix0, denseMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      matrix0.rank();
      Integer integer0 = new Integer(1);
      rowMajorSparseMatrix0.removeLastColumn();
      Double double0 = new Double((-1943.53921270242));
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix1 = DenseMatrix.diagonal(2, (-527.88423));
      Matrix matrix1 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix1, (SparseMatrix) rowMajorSparseMatrix0);
      matrix1.toCSV();
      rowMajorSparseMatrix0.power(1);
      matrix1.equals(matrix0, 9.120152673531893);
      denseMatrix0.determinant();
      Matrix matrix2 = rowMajorSparseMatrix0.copy();
      cCSMatrix0.divide(0.0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 1);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(sparseMatrix0, matrix2, matrix2, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 956;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.updateColumn(956, vectorFunction0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.setAll(0.0);
      Matrix matrix0 = cRSMatrix0.shuffle();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.08072709504897266).when(vectorAccumulator1).accumulate();
      cRSMatrix0.foldNonZeroInColumn(956, vectorAccumulator1);
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        cRSMatrix0.ensureIndexesAreInBounds(956, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '956' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      int[] intArray0 = new int[4];
      cRSMatrix0.add((Matrix) denseMatrix0);
      intArray0[3] = 1;
      int[] intArray1 = new int[1];
      denseMatrix0.select(intArray1, intArray1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfColumns((-2083));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-2083
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 9.120153, (Random) mockRandom0);
      rowMajorSparseMatrix0.max();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      rowMajorSparseMatrix0.hashCode();
      Matrix matrix0 = rowMajorSparseMatrix0.multiplyByItsTranspose();
      rowMajorSparseMatrix0.insert(matrix0);
      byte byte0 = (byte)95;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        matrix0.insertRow((byte) (-35), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 13;
      Double double0 = new Double(0.964);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector.fromMap(hashMap0, 3609);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(13, 3609);
      String string0 = sparseMatrix0.toCSV();
      int int1 = 47;
      Matrix matrix0 = sparseMatrix0.power(47);
      int int2 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV(string0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      matrix0.toCSV();
      double double1 = 0.0;
      sparseMatrix0.equals(matrix0, double1);
      matrix0.multiply((double) int2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transform(matrixFunction0);
      int int3 = (-3348);
      cRSMatrix0.blankOfColumns(int3);
      int int4 = 8;
      double double2 = 0.75;
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int4, double2, (Random) mockRandom0);
      Matrix matrix1 = columnMajorSparseMatrix0.rotate();
      int int5 = 2668;
      int int6 = 49;
      sparseMatrix0.insert(matrix1, int0, int5, int6, int5, int5, int1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(5, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      denseMatrix0.rank();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      cCSMatrix0.toCSV();
      cCSMatrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 5);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(27, 27);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(27, 19, 22);
      int int0 = 10;
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) denseMatrix0, 19, 10, 5, 27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 5 rows and 27 cols at 19, 10 in a 27x19 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 4;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4, 4);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = null;
      int int1 = 25;
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) null, (-2147454667), 150, (-887), (-887), 4, 988);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -887, -887
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 403;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1, 403);
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 27;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(27, 27);
      int int1 = 22;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(421, 19, 22);
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      cCSMatrix0.insert((Matrix) denseMatrix0, 19, 413, 5, 421);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      denseMatrix0.determinant();
      int int2 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(int0);
      int[] intArray0 = new int[1];
      intArray0[0] = int2;
      matrix0.select(intArray0, intArray0);
      int int3 = (-2713);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(int1, int3);
      cRSMatrix0.removeLastRow();
      int int4 = (-1728);
      int int5 = 6;
      CRSMatrix.zero(int4, int1, int5);
      matrix0.trace();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      double double0 = 1.7205917458365778;
      rowMajorSparseMatrix0.setColumn(int2, double0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = denseMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      VectorOperation<Integer> vectorOperation0 = (VectorOperation<Integer>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      matrix0.multiply((Vector) sparseVector0);
      Integer integer0 = new Integer(1);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector.zero(1, 1);
      matrix0.toMatrixMarket();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(1, 2.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 27;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(27, 27);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(27, 27);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      int[] intArray0 = new int[1];
      basic2DMatrix0.select(intArray0, intArray0);
      String string0 = null;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(27);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cCSMatrix0, Integer.MAX_VALUE, 2615, 27, 27, 100, 2615);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2147483647, 2615
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 2027);
      Matrix.zero(54, 1240);
      MockRandom mockRandom0 = new MockRandom(54);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(54, (int) (byte)0);
      cRSMatrix0.add((double) (byte)0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1240, (byte)0, (byte)0);
      cRSMatrix0.equals((Matrix) cCSMatrix0, (double) (byte)0);
      cRSMatrix0.updateRow((byte)1, (VectorFunction) null);
      Matrix.fromCSV("9VIy");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4, 4);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      int int0 = NumberFormat.FRACTION_FIELD;
      Integer integer0 = new Integer(1);
      CRSMatrix.zero(1, 1);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1);
      cRSMatrix0.toCSV();
      Vector vector0 = denseMatrix0.getRow(1);
      double[][] doubleArray0 = new double[1][8];
      vector0.blank();
      cRSMatrix0.insertRow(1, vector0);
      int int1 = Double.MIN_EXPONENT;
      int int2 = 32;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(1, 32);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) basic2DMatrix0, 1963, (-1022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1963x-1022
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 55);
      cRSMatrix0.spliterator();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(4, 4);
      basic2DMatrix0.determinant();
      Matrix.identity(4);
      Matrix matrix0 = basic2DMatrix0.removeLastRow();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      CCSMatrix.zero(55, 3274);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(3274);
      Double double0 = new Double(0.0);
      hashMap0.put(integer0, double0);
      hashMap0.keySet();
      matrix0.removeFirstRow();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.setColumn(4, 0.0);
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 27;
      DenseMatrix.zero(27, 27);
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(27, 27);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      hashMap0.keySet();
      cCSMatrix0.equals((Object) intArray0);
      cCSMatrix0.infinityNorm();
      Integer integer0 = new Integer(27);
      int int1 = 1313;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(27, 27, 1313);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 729.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      CCSMatrix.identity(819);
      denseMatrix0.rank();
      int int1 = 1964;
      int int2 = 12;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(819, 1964, 10);
      Object object0 = new Object();
      cCSMatrix0.equals((Object) matrix0);
      // Undeclared exception!
      cCSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(27, 27);
      CCSMatrix.identity(27);
      denseMatrix0.rank();
      ColumnMajorSparseMatrix.zero(32, 1048);
      Object object0 = new Object();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 27);
      cCSMatrix0.equals((Object) null);
      Integer integer0 = new Integer((-684));
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-684), 37, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -684x37
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 2609;
      double[] doubleArray0 = new double[0];
      Matrix matrix0 = Matrix.from1DArray(2609, 2609, doubleArray0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      SparseVector sparseVector0 = SparseVector.zero(16, 16);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.setRow(2609, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 16. Should be: 2609.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(23, 23);
      cRSMatrix0.equals((Object) cRSMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-1637038921), 23, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1637038921' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 27;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(27, 27);
      int[] intArray0 = new int[1];
      denseMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(27, 27, 27);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      cCSMatrix0.manhattanNorm();
      hashMap0.keySet();
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      DenseVector denseVector0 = DenseVector.zero(27);
      cCSMatrix0.insert((Matrix) denseMatrix0, 27, 27);
      Double.isFinite(8.478499276892386E-13);
      Matrix matrix1 = matrix0.blankOfColumns(1745);
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      Matrix matrix2 = denseMatrix0.removeFirstRow();
      int int1 = (-3798);
      matrix1.min();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.fold(matrixAccumulator0);
      matrix0.insert(matrix2, int0, int0);
      int int2 = (-1982292597);
      double double0 = (-1726.0197);
      denseMatrix0.setColumn(int2, double0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = denseVector0.toSparseVector();
      Matrix matrix3 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      double double1 = (-1.0);
      matrix3.setColumn(int1, double1);
      long long0 = 474L;
      MockRandom mockRandom0 = new MockRandom(long0);
      long long1 = 722L;
      MockRandom mockRandom1 = new MockRandom(long1);
      int int3 = 6;
      int int4 = 13;
      Matrix.random(int3, int4, mockRandom1);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix2.is(advancedMatrixPredicate0);
  }
}
