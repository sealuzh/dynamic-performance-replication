/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:46:20 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[3][3];
      int[] intArray1 = new int[8];
      intArray1[0] = 87;
      intArray1[1] = 91;
      intArray1[2] = 64;
      intArray1[3] = (-2312);
      intArray1[4] = 3521;
      intArray1[5] = 0;
      intArray1[6] = 120249;
      intArray1[7] = 520;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 120249;
      intArray2[1] = 64;
      intArray2[2] = 87;
      intArray2[3] = (-1408);
      intArray2[4] = 87;
      intArray2[5] = 0;
      intArray2[6] = 520;
      intArray2[7] = 520;
      intArray2[8] = 87;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 520;
      intArray3[1] = 0;
      intArray3[2] = 120249;
      intArray3[3] = (-1408);
      intArray3[4] = (-2312);
      intArray0[2] = intArray3;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-1408));
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-1212), (-1212));
      int[][] intArray0 = new int[9][7];
      charClass1.appendNegatedTable(intArray0);
      charClass0.negateClass();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      charClass1.appendRange((-10485988), 2194);
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 64;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(129, (-2807));
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendLiteral(0, 0);
      int int1 = 0;
      int int2 = 523;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 523);
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral((-3119), 66639);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[1] = 128;
      intArray0[2] = 66616;
      charClass0.appendFoldedRange(66616, 128);
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 66616);
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = (-1914);
      intArray1[2] = (-1);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 0;
      intArray2[1] = (-1914);
      intArray2[2] = (-1);
      intArray2[3] = (-1914);
      intArray2[4] = (-1);
      intArray2[5] = 0;
      intArray2[6] = 64;
      intArray2[7] = (-1144);
      intArray2[8] = (-1914);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 64;
      intArray3[1] = (-1);
      intArray3[2] = 64;
      intArray3[3] = (-1);
      intArray3[4] = (-2);
      intArray3[5] = 64;
      intArray3[6] = 0;
      intArray3[7] = 64;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = (-2);
      intArray4[1] = (-1);
      intArray4[2] = 64;
      intArray4[3] = 64;
      intArray4[4] = (-1914);
      intArray4[5] = (-2);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = 64;
      intArray5[1] = (-1914);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[0];
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      intArray7[0] = 64;
      intArray7[1] = 43632;
      intArray7[2] = (-1);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      intArray8[0] = 93;
      intArray8[1] = (-1);
      intArray8[2] = 43632;
      intArray8[3] = 4;
      intArray8[4] = (-1144);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[5];
      intArray9[0] = (-1);
      intArray9[1] = (-1144);
      intArray9[2] = 4;
      intArray9[3] = 43632;
      intArray9[4] = (-1914);
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][4];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = (-855);
      intArray0[1] = 1595;
      intArray0[2] = 0;
      intArray0[3] = (-1261);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 66334;
      intArray0[7] = 99;
      intArray0[8] = 0;
      CharClass.charClassToString(intArray0, 0);
      CharClass charClass1 = charClass0.appendFoldedRange((-1308), (-1308));
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 477);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 65;
      intArray0[1] = (-367);
      intArray0[2] = 0;
      intArray0[3] = (-378);
      intArray0[4] = (-2);
      intArray0[5] = (-1400);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendRange(65338, 0);
      CharClass charClass3 = charClass2.appendLiteral(0, (-2));
      int[][] intArray1 = new int[6][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 65;
      intArray2[1] = (-1400);
      intArray2[2] = (-2);
      intArray2[3] = 65338;
      intArray2[4] = (-367);
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 65338);
      CharClass charClass5 = charClass4.negateClass();
      String string0 = charClass5.toString();
      assertEquals("[0x0-0x40 0xfffffe92-0xffffffff 0xfffffe87-0xfffffffd 0xfffffa89-0xff39 0x1-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1344;
      intArray0[1] = 5515;
      int int0 = 69714;
      intArray0[2] = 69714;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 69828;
      intArray0[1] = 115;
      intArray0[2] = (-646);
      intArray0[3] = (-3165);
      charClass0.appendFoldedClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = (-3119);
      intArray0[1] = 129;
      intArray0[2] = 66640;
      intArray0[3] = 69820;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = (-3119);
      intArray2[1] = 69820;
      intArray2[2] = 2338;
      intArray2[3] = 66640;
      intArray2[4] = (-3119);
      intArray2[5] = 69820;
      intArray1[3] = intArray2;
      charClass1.appendTableWithSign(intArray1, (-3119));
      charClass1.appendClass(intArray0);
      int[] intArray3 = charClass0.toArray();
      CharClass charClass2 = charClass0.cleanClass();
      CharClass charClass3 = charClass0.appendFoldedRange(1206, 91);
      charClass3.cleanClass();
      charClass3.appendRange(1206, (-170));
      charClass2.appendClass(intArray3);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray3, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-2714));
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-2807));
      int[][] intArray1 = new int[0][4];
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      CharClass charClass4 = charClass3.appendFoldedRange(66640, (-3994));
      charClass4.cleanClass();
      int[] intArray2 = charClass4.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2495);
      intArray0[1] = (-3058);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      charClass0.appendClassWithSign(intArray0, 857);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2380);
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      charClass0.toString();
      CharClass charClass2 = charClass0.appendFoldedRange(0, 0);
      int[][] intArray1 = new int[1][8];
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 1034;
      intArray2[3] = 0;
      intArray1[0] = intArray2;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 0);
      CharClass charClass4 = charClass3.appendClass(intArray2);
      charClass4.appendRange((-2508), 0);
      CharClass charClass5 = charClass3.appendNegatedClass(intArray2);
      assertSame(charClass5, charClass1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[] intArray0 = new int[2];
      intArray0[0] = (-51);
      intArray0[1] = (-1);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 66640);
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 331;
      intArray0[1] = 2396;
      intArray0[2] = 3313;
      intArray0[3] = 5942;
      intArray0[4] = (-2111);
      intArray0[5] = (-2084);
      intArray0[6] = (-1784);
      intArray0[7] = (-2082);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(7082, 7082);
      int[][] intArray0 = new int[9][3];
      int[] intArray1 = new int[4];
      intArray1[0] = 7082;
      intArray1[1] = 7082;
      intArray1[2] = 7082;
      intArray1[3] = 7082;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 7082;
      intArray2[1] = 7082;
      intArray2[2] = (-10386270);
      intArray2[3] = 7082;
      intArray2[4] = 7082;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = (-10386270);
      intArray3[1] = 7082;
      intArray3[2] = 7082;
      intArray3[3] = (-10386270);
      intArray3[4] = 1;
      intArray3[5] = (-10386270);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = (-10386270);
      intArray4[1] = 7082;
      intArray4[2] = 7082;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = 7082;
      intArray5[1] = (-10386270);
      intArray5[2] = (-10386270);
      intArray5[3] = 7082;
      intArray5[4] = 1;
      intArray5[5] = 7082;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 1;
      intArray6[1] = (-10386270);
      intArray6[2] = (-10386270);
      intArray6[3] = 7082;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = 7082;
      intArray7[1] = 1;
      intArray7[2] = (-10386270);
      intArray7[3] = (-10386270);
      intArray7[4] = 119146;
      intArray7[5] = 1;
      intArray7[6] = (-10386270);
      intArray7[7] = 7082;
      intArray7[8] = 64;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      intArray8[0] = 1;
      intArray8[1] = 64;
      intArray8[2] = 1;
      intArray8[3] = (-10386270);
      intArray8[4] = 1;
      intArray8[5] = (-10386270);
      intArray8[6] = 64;
      intArray8[7] = 775;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[7];
      intArray9[0] = 7082;
      intArray9[1] = (-10386270);
      intArray9[2] = 7082;
      intArray9[3] = 775;
      intArray9[4] = (-10386270);
      intArray9[5] = 7295;
      intArray9[6] = 1;
      intArray0[8] = intArray9;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      CharClass charClass3 = charClass2.appendClass(intArray1);
      CharClass charClass4 = charClass3.appendTable(intArray0);
      int int0 = 8293;
      CharClass charClass5 = charClass4.appendTableWithSign(intArray0, int0);
      CharGroup charGroup0 = null;
      boolean boolean0 = false;
      charClass5.appendGroup(charGroup0, boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = (-3119);
      intArray0[1] = 129;
      intArray0[2] = 66640;
      intArray0[3] = 69820;
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = (-3119);
      intArray2[1] = 69820;
      intArray2[2] = 129;
      intArray2[4] = (-3119);
      CharClass charClass1 = new CharClass(intArray0);
      charClass1.appendFoldedRange(1, 69820);
      CharClass charClass2 = new CharClass(intArray0);
      CharClass charClass3 = charClass2.appendFoldedRange(66641, 69820);
      charClass3.appendTableWithSign(intArray1, (-3119));
      CharGroup charGroup0 = null;
      boolean boolean0 = false;
      charClass0.appendGroup(charGroup0, boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3119);
      intArray0[1] = 129;
      intArray0[2] = 66640;
      intArray0[3] = 69820;
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = (-3119);
      intArray2[1] = 69820;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-621));
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      CharClass charClass5 = charClass4.cleanClass();
      charClass5.appendClass(intArray2);
  }
}
