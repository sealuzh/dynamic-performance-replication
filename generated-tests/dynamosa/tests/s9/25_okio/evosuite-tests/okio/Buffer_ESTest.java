/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:44:42 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 10000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(9223372036773052388L);
      Pipe pipe0 = new Pipe(1101L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        buffer1.indexOf((ByteString) null, 1101L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeInt((-584));
      realBufferedSink0.buffer();
      Pipe pipe0 = new Pipe(334L);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.request((-1L));
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, (-420L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-420
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      assertNotSame(buffer1, buffer0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer1.hmacSha512(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = realBufferedSource0.buffer.writeLongLe(100000000L);
      realBufferedSource0.buffer.read(buffer0, 6L);
      buffer1.hashCode();
      assertEquals(2L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)97;
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("(", (int) (byte)97, 5281);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 5281 > 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Charset.defaultCharset();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(128);
      assertEquals(4L, buffer0.size());
      
      String string0 = buffer1.readUtf8Line();
      assertEquals("\u0000\u0000\u0000\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[16];
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      byteArray0[0] = (byte) (-86);
      buffer_UnsafeCursor0.start = (int) (byte)49;
      assertFalse(buffer0.exhausted());
      
      Charset.defaultCharset();
      long long0 = buffer_UnsafeCursor0.resizeBuffer((byte)2);
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Pipe pipe0 = new Pipe(3008L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okio.Base64");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        buffer0.writeString("okio.Base64", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(2584L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      Buffer buffer1 = new Buffer();
      realBufferedSource0.buffer.writeShortLe(0);
      // Undeclared exception!
      try { 
        buffer1.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Locale locale0 = Locale.GERMANY;
      locale0.stripExtensions();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(92L);
      ByteString byteString0 = buffer0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.close();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer0.clone();
      Buffer buffer2 = buffer1.write(byteString0);
      assertNotSame(buffer2, buffer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Pipe pipe0 = new Pipe(3528L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(3537L);
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, 3528L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(2, buffer_UnsafeCursor0.end);
      assertEquals(2, int0);
      
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = 517L;
      Pipe pipe0 = new Pipe(517L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1610612735));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(8L);
      buffer0.readUtf8CodePoint();
      buffer1.readUtf8Line((long) 1);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      buffer_UnsafeCursor1.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor1.offset = (long) 1;
      buffer_UnsafeCursor1.next();
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte byte0 = (byte)35;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      realBufferedSink0.buffer.write(byteArray0);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      buffer_UnsafeCursor0.buffer.writeAll(realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.utf8();
      boolean boolean0 = realBufferedSource0.buffer.rangeEquals(747L, byteString0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.copyTo(buffer0, (-994L), (-907L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-994 byteCount=-907
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("HmacSH1");
      buffer0.copyTo((OutputStream) mockPrintStream0);
      buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readString(71776118979575808L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=71776118979575808
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-67);
      Buffer buffer1 = buffer0.write(byteArray0);
      Pipe pipe0 = new Pipe((byte)40);
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString0 = buffer1.snapshot();
      ByteString byteString1 = buffer0.hmacSha512(byteString0);
      buffer0.readLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer3.indexOf(byteString1, 10000000000000L);
      // Undeclared exception!
      try { 
        buffer3.write(byteArray0, (int) (byte) (-88), (-919));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=-88 byteCount=-919
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Pipe pipe0 = new Pipe(3024L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      buffer0.write(byteArray0);
      buffer0.clone();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "is1qpqC8~R6~");
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      pipe0.sourceClosed = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)7, (int) (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=7 byteCount=7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      try { 
        buffer0.readUtf8LineStrict(2147483636L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1581);
      MockPrintStream mockPrintStream0 = new MockPrintStream("HmacSHA1");
      Buffer buffer2 = buffer0.copyTo((OutputStream) mockPrintStream0);
      Buffer buffer3 = buffer2.writeTo((OutputStream) mockPrintStream0);
      buffer1.indexOf((byte)73, 0L, (long) 1581);
      buffer3.sha256();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOfElement(byteString0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer1.head = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      byte[] byteArray0 = buffer1.readByteArray();
      assertEquals(0, byteArray0.length);
      
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      Buffer buffer3 = buffer2.writeDecimalLong((-5296L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer1.copyTo((OutputStream) pipedOutputStream0, 6L, 5L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((byte) (-87));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-87 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer1.head = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer1.readByteArray();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = ByteString.encodeString("", charset0);
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals(0, int0);
      
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2048);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = byteString0.md5();
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.indexOf(byteString1, 4278190080L);
      buffer2.snapshot();
      buffer2.md5();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-94));
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=a2\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte)2, (-2024));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=2 byteCount=-2024
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha512(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Segment segment0 = new Segment();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf((byte)48, (-1L), (long) (byte)48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=48
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.snapshot();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.writeString("=sYG", 2048, 633, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 633 < 2048
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      boolean boolean0 = buffer_UnsafeCursor0.buffer.exhausted();
      assertEquals(2L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-86);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      buffer1.write(byteArray0);
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer2 = pipe0.buffer;
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (int) (byte) (-86), 3265, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -86
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(99999918424060L);
      buffer_UnsafeCursor0.next();
      try { 
        buffer_UnsafeCursor0.buffer.readFully(buffer_UnsafeCursor0.data);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = buffer_UnsafeCursor0.end;
      ByteString byteString0 = ByteString.encodeUtf8("vlsgXdt?z2;");
      buffer0.rangeEquals((-7L), byteString0, (-1), (-1));
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      buffer0.readUtf8Line();
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.toString();
      byte byte0 = (byte)91;
      byte byte1 = (byte) (-87);
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      Buffer buffer2 = buffer0.writeDecimalLong(2510L);
      ByteString byteString0 = buffer2.sha512();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(3030L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.selectPrefix(options0);
      assertEquals((-1), int0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.readByte();
      Integer integer0 = new Integer((-1665));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(4L);
      buffer1.readUtf8CodePoint();
      buffer0.writableSegment(7);
      buffer_UnsafeCursor0.buffer.clone();
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-87);
      realBufferedSource0.exhausted();
      byteArray0[3] = (byte)49;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)49;
      byteArray0[5] = (byte)45;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readUtf8();
      assertTrue(buffer2.exhausted());
      
      Buffer buffer3 = buffer2.writeLong((byte) (-87));
      ByteString byteString0 = new ByteString(byteArray0);
      buffer3.indexOf(byteString0, 6L);
      Buffer buffer4 = realBufferedSink0.buffer;
      assertEquals(0L, buffer4.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 1000000000000L;
      // Undeclared exception!
      try { 
        buffer0.readByteString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount > Integer.MAX_VALUE: 1000000000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("", (-2207), 66);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2207
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      HashingSource hashingSource0 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      buffer_UnsafeCursor0.buffer.rangeEquals((-2615L), byteString0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe(3030L);
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, 6L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink1.buffer();
      buffer0.readUtf8();
      pipe0.sinkClosed = false;
      buffer2.writeLong(0L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      buffer2.read(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink0.emit();
      realBufferedSink1.buffer.indexOf(byteString0, 2L);
      realBufferedSink0.buffer();
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer2.writeAll(realBufferedSink1.buffer);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.request(16711680L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 55);
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) bufferedOutputStream0, 16711680L, (long) 55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=16711680 byteCount=55
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) 65533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=65532 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.writeByte(35);
      buffer1.require(0L);
      buffer1.readByte();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x5b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      HashingSink.md5(hashingSink0);
      Charset.defaultCharset();
      buffer0.writeDecimalLong(1L);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      pipe0.sinkClosed = true;
      Charset.defaultCharset();
      buffer0.skip((-9999999999996L));
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, (-2134), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      buffer0.readAll(pipe_PipeSink0);
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null, (-2416), 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8("", 104, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 104
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.write(byteArray0);
      Buffer buffer2 = buffer0.writeShort(248);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("N s1NgHa)|ex>)Ys4#", charset0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      long long0 = buffer2.completeSegmentByteCount();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long0);
      
      Segment segment0 = new Segment();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, (long) (-1), (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=2 fromIndex=-1 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(1084);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)50;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte)50;
      buffer0.write(byteArray0);
      Charset.defaultCharset();
      buffer0.hashCode();
      assertEquals(13L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(87L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer1.read(buffer2, (-37L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -37
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.require(0L);
      buffer1.readByte();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x5b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-13);
      MockPrintStream mockPrintStream0 = new MockPrintStream(">oT2/|<YU");
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      Charset.defaultCharset();
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer0.writeShort((byte)16);
      buffer2.readByte();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      buffer0.readUtf8Line();
      Buffer buffer1 = realBufferedSink0.buffer;
      MockFile mockFile0 = new MockFile("\n", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object object0 = new Object();
      Locale locale0 = Locale.ENGLISH;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintStream0.printf(locale0, "endIndex > string.length: ", (Object[]) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      byteString0.indexOf(byteArray0, 131);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      ByteString byteString1 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer2.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      try { 
        buffer0.write((Source) buffer1, 6L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1581);
      MockPrintStream mockPrintStream0 = new MockPrintStream("*");
      buffer0.copyTo((OutputStream) mockPrintStream0);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2031);
      Pipe pipe0 = new Pipe(86L);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer0.readUtf8();
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writeLong(0L);
      ByteString byteString0 = new ByteString((byte[]) null);
      realBufferedSink0.buffer.buffer();
      buffer0.writeShortLe((-120));
      buffer2.emit();
      realBufferedSink0.emit();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-2721L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writableSegment((byte) (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("SHA-256", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 5348412D
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(9223372036773052388L);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-128);
      buffer0.writeHexadecimalUnsignedLong(32L);
      byteArray0[2] = (byte) (-100);
      buffer0.read(byteArray0);
      buffer0.writeLongLe(6L);
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1114111);
      Buffer buffer2 = new Buffer();
      buffer1.segmentSizes();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)49;
      Charset.defaultCharset();
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeDecimalLong((byte)91);
      assertEquals(2L, buffer1.size());
      
      Buffer buffer2 = buffer0.writeLong(32L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer2 = pipe0.buffer;
      buffer2.snapshot();
      buffer2.readByte();
      buffer2.readHexadecimalUnsignedLong();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.writeString("okio.Buffer", 3530, 1789569706, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1789569706 > 11
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.write(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer1.clear();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(2048);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(2048);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        buffer0.writeString(")", (int) (byte)49, 20, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 20 < 49
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      buffer_UnsafeCursor0.buffer.indexOf((byte)6, (long) (byte)6, (long) (byte)6);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      realBufferedSource0.buffer();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)27, 13L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)114;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.hmacSha512(byteString0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("9WU", 2485, 2485);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2485 > 3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)14;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      buffer_UnsafeCursor0.buffer.readAll(buffer0);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Pipe pipe0 = new Pipe(2584L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-94));
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, (-1027L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(1047L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer1 = buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      byteArrayOutputStream0.close();
      realBufferedSource0.buffer.readAll(buffer0);
      Charset.defaultCharset();
      buffer1.writeShort(2147481500);
      buffer1.writeDecimalLong(9223372L);
      assertEquals(9L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte)91);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x5b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(2584L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(2584L);
      long long0 = buffer0.indexOf((byte) (-108), 2584L, 9223372036854775807L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(701);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = buffer0.readByte();
      assertFalse(buffer0.exhausted());
      assertEquals((byte) (-54), byte0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(5L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      buffer0.write(byteArray0);
      buffer0.readByte();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      Charset.defaultCharset();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.snapshot();
      Charset.defaultCharset();
      buffer1.writeLong(2048);
      buffer2.writeDecimalLong(100L);
      assertEquals(3L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.skip((-44L));
      Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(8189L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.size = 657L;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      Charset.defaultCharset();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeShort((-1));
      // Undeclared exception!
      try { 
        buffer1.clear();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      pipe0.sinkClosed = true;
      byteArray0[1] = (byte)85;
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)85);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-3214L));
      buffer0.readDecimalLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-174L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -174
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      byteString0.indexOf(byteArray0, 1431655765);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1637L));
      Buffer buffer1 = buffer0.writeUtf8("");
      boolean boolean0 = buffer1.request(229L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      Charset.defaultCharset();
      int int0 = 0;
      // Undeclared exception!
      try { 
        buffer0.writableSegment(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      Buffer buffer1 = realBufferedSink0.buffer.write(byteArray0);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.buffer();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer2.hashCode();
      buffer1.clone();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-86);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      Buffer buffer2 = buffer1.write(byteArray0);
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer3 = pipe0.buffer;
      Charset.defaultCharset();
      boolean boolean0 = buffer2.exhausted();
      assertEquals(9L, buffer1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte)0, 176);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=0 byteCount=176
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(128);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".inputStream()");
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Charset.defaultCharset();
      Pipe pipe0 = new Pipe(71776118979428352L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 71776118979428352L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.buffer();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("7qc%bb2", 127, 127, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 127 > 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2048);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = byteString0.md5();
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = new Buffer();
      realBufferedSink0.buffer.indexOf(byteString1, 4278190080L);
      Buffer buffer4 = (Buffer)buffer3.write((Source) realBufferedSink0.buffer, (-1L));
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer4.readString((long) 2048, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2048
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      realBufferedSink0.buffer.write(byteArray0);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer_UnsafeCursor0.buffer.select(options0);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options options1 = Options.of(byteStringArray1);
      realBufferedSource0.buffer.selectPrefix(options1);
      buffer1.writeDecimalLong((byte)35);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeInt(128);
      realBufferedSink0.toString();
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.hashCode();
      ByteString byteString0 = realBufferedSink0.buffer.sha512();
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(823L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=823 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe pipe0 = new Pipe(3913L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer1.writeUtf8("endIndex > string.length: ", 11, 11);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      buffer1.readByteArray();
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.outputStream();
      realBufferedSink0.buffer();
      long long0 = buffer_UnsafeCursor0.offset;
      buffer0.copyTo(buffer2, 582L, 15L);
      assertEquals(1733L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)0;
      buffer0.rangeEquals((long) (byte)44, (ByteString) null, (int) (byte)109, (-1394));
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha256(byteString0);
      long long0 = buffer0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.rangeEquals((long) (-1), byteString0);
      Charset.defaultCharset();
      buffer0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((-1139L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1139
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1581);
      buffer0.readUtf8CodePoint();
      buffer0.writeShort(1581);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Pipe pipe0 = new Pipe(3024L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      buffer0.write(byteArray0);
      Buffer buffer1 = buffer0.clone();
      Buffer buffer2 = new Buffer();
      buffer2.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.md5();
      long long0 = buffer_UnsafeCursor0.buffer.size();
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      HashingSink.md5(buffer0);
      Charset.defaultCharset();
      buffer0.writeDecimalLong((-87L));
      buffer0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer_UnsafeCursor0.buffer.writeShortLe(2048);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readFully(buffer2, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)118, 8L, 1000000L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-87);
      realBufferedSource0.exhausted();
      byteArray0[3] = (byte)49;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)49;
      byteArray0[5] = (byte)45;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer1.writableSegment(248);
      realBufferedSink0.buffer.snapshot();
      realBufferedSource0.buffer.writeDecimalLong(1000L);
      buffer1.readHexadecimalUnsignedLong();
      Buffer buffer2 = realBufferedSink0.buffer.writeShort((-1077));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      Buffer buffer1 = realBufferedSink0.buffer.write(byteArray0);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.clear();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1664L));
      buffer1.writeUtf8CodePoint((byte)49);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      assertEquals(6L, buffer2.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer;
      long long0 = buffer3.writeAll(buffer2);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("A%~1,", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      int int0 = 1856;
      try { 
        ByteString.read(sequenceInputStream0, 1856);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      realBufferedSink0.buffer.write(byteArray0);
      realBufferedSink0.buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".outputStream()");
      Pipe pipe0 = new Pipe(1951L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong((-1007L));
      buffer3.snapshot(0);
      assertEquals(6L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.md5();
      try { 
        buffer0.skip(52);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1L));
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer0.outputStream();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(8192L);
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      realBufferedSink0.buffer.write(byteArray0);
      Buffer buffer1 = realBufferedSink0.buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("HmacSHA1");
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSink0.buffer.select(options0);
      assertEquals(0, int0);
      
      buffer1.segmentSizes();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      MockFile mockFile0 = new MockFile("endIndex > string.length: ", "endIndex > string.length: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) (byte) (-59);
      objectArray0[4] = (Object) (byte) (-27);
      mockPrintStream0.printf(locale1, "", objectArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.indexOf(byteArray0, 1358);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((byte)91);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 1581;
      buffer0.writeUtf8CodePoint(1581);
      int int1 = Buffer.REPLACEMENT_CHARACTER;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xd8
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink1.buffer();
      buffer0.readUtf8();
      buffer2.writeLong(0L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink1.emit();
      buffer0.indexOf(byteString0, (long) (byte)45);
      realBufferedSink1.buffer();
      Buffer buffer3 = realBufferedSink1.buffer;
      realBufferedSink1.buffer.emitCompleteSegments();
      Buffer buffer4 = buffer2.writeUtf8("");
      assertEquals(0L, buffer4.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readByteArray(148L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=148
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer1.head = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      buffer1.readByteArray();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = ByteString.encodeString("n>", charset0);
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(1733L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Segment segment0 = buffer0.head;
      buffer0.readAndWriteUnsafe();
      buffer0.writeDecimalLong(100000000L);
      assertEquals(9L, buffer0.size());
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(4294967296L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1581);
      MockPrintStream mockPrintStream0 = new MockPrintStream("HmacSHA1");
      Buffer buffer2 = buffer0.copyTo((OutputStream) mockPrintStream0);
      Buffer buffer3 = buffer2.writeTo((OutputStream) mockPrintStream0);
      buffer3.readByteArray(0L);
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[9];
      realBufferedSource0.buffer.write(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSource0.buffer.writeLong(4278190080L);
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(10L);
      assertEquals(2L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.clone();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer2 = buffer0.writeTo((OutputStream) pipedOutputStream0);
      assertNotSame(buffer2, buffer1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.completeSegmentByteCount();
      try { 
        buffer0.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 8);
      try { 
        buffer1.readFrom((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[3] = (byte)49;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)49;
      byteArray0[5] = (byte)45;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSource0.buffer.rangeEquals(747L, byteString0);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer2.readLongLe();
      buffer0.writeDecimalLong((-994L));
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.size = 657L;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      Charset.defaultCharset();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.readUtf8();
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotNull(outputStream0);
      
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer_UnsafeCursor0.buffer.clear();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-1));
      buffer_UnsafeCursor0.start = 40;
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      buffer0.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      buffer_UnsafeCursor0.buffer.writeDecimalLong(100000L);
      long long0 = buffer_UnsafeCursor0.buffer.readDecimalLong();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(100000L, long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[2];
      Options.of(byteStringArray0);
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      buffer0.writeShortLe(255);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("O?.WK$$52HwJ(");
      long long0 = buffer1.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 65, 65);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 65 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("SHA-256", charset0);
      buffer1.readUtf8();
      Segment segment0 = new Segment();
      buffer0.readAndWriteUnsafe();
      buffer0.writeDecimalLong(0L);
      buffer0.readHexadecimalUnsignedLong();
      buffer0.writeString("SHA-256", charset0);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)97;
      try { 
        buffer1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("", charset0);
      Pipe pipe0 = new Pipe((byte)35);
      Buffer buffer1 = pipe0.buffer;
      buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Segment segment0 = buffer0.head;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      buffer_UnsafeCursor0.buffer.readUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1733, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-63);
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((byte) (-63));
      // Undeclared exception!
      try { 
        buffer1.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.buffer.outputStream();
      String string0 = "x ";
      MockFile mockFile0 = new MockFile("x ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeTo((OutputStream) mockFileOutputStream0, 530L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=530
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      String string0 = null;
      int int0 = 1020;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      assertEquals(20, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      buffer1.write(byteArray0);
      Pipe pipe0 = new Pipe(3528L);
      pipe0.sinkClosed = true;
      realBufferedSource0.buffer.request((byte) (-87));
      Buffer buffer2 = pipe0.buffer;
      realBufferedSource0.readLongLe();
      realBufferedSource0.buffer.snapshot();
      buffer1.readByte();
      byte byte0 = (byte)49;
      realBufferedSource0.buffer.indexOf((byte) (-87), 0L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8((String) null, (int) (byte)49, (-329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeInt(128);
      MockFile mockFile0 = new MockFile("cF4", "cF4");
      MockPrintStream mockPrintStream0 = new MockPrintStream("cF4");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) realBufferedSink0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "cF4";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "cF4";
      objectArray0[7] = (Object) realBufferedSink0;
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "", objectArray0);
      buffer0.copyTo((OutputStream) printStream0);
      buffer1.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.readShortLe();
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1(realBufferedSource0, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Pipe pipe0 = new Pipe(1047L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer1 = buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      byteArrayOutputStream0.close();
      realBufferedSource0.buffer.readAll((Sink) null);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.buffer.readString(charset0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      Buffer buffer2 = realBufferedSource1.buffer();
      assertNotSame(buffer2, buffer1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2048);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.md5();
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.snapshot();
      Charset.defaultCharset();
      Buffer buffer3 = buffer2.buffer();
      try { 
        buffer3.readUtf8LineStrict(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-67);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      realBufferedSink0.buffer.readUnsafe();
      Charset.defaultCharset();
      buffer0.writeDecimalLong(4L);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOfElement((ByteString) null, 4162L);
      // Undeclared exception!
      try { 
        buffer0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)83;
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, 0, 120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=120
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.readUtf8();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeLongLe((byte)49);
      buffer2.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer3.readUtf8Line((long) 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=48 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      MockFile mockFile0 = new MockFile("endIndex > string.length: ", "endIndex > string.length: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      String string0 = "";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) (byte) (-59);
      objectArray0[4] = (Object) (byte) (-27);
      mockPrintStream0.printf(locale1, "", objectArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Pipe pipe0 = new Pipe(3029L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1000L);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      buffer0.readUtf8Line(452L);
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1000, buffer_UnsafeCursor0.end);
      assertEquals(546, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Pipe pipe0 = new Pipe(49L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)40);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-87);
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer2.indexOfElement(byteString0);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
      buffer_UnsafeCursor0.buffer.writeShort((byte) (-87));
      ByteString byteString1 = realBufferedSource0.buffer.sha512();
      assertEquals(64, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-94));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor1.buffer.readUnsafe();
      buffer_UnsafeCursor2.next();
      boolean boolean0 = buffer_UnsafeCursor1.buffer.request(1);
      assertEquals(1L, buffer0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[6] = (byte) (-87);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString0 = buffer2.snapshot();
      buffer2.readByte();
      buffer2.readHexadecimalUnsignedLong();
      byteString0.indexOf(byteArray0, 4331);
      ByteString byteString1 = ByteString.EMPTY;
      buffer0.segmentSizes();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      buffer1.emit();
      buffer1.writeUtf8("E?/%PF");
      assertEquals(20L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      hashingSource0.close();
      Buffer buffer0 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeLong(6L);
      realBufferedSink0.writeUtf8("2jf36");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer0.write(buffer2, 8L);
      buffer2.write(realBufferedSource0.buffer, 8L);
      realBufferedSink0.buffer.readIntLe();
      buffer1.read(realBufferedSource0.buffer, 8L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)35;
      realBufferedSink0.buffer.write(byteArray0);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      int int0 = buffer_UnsafeCursor0.end;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      buffer_UnsafeCursor0.buffer.writeAll(realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(52);
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(2L, buffer0.size());
      
      long long0 = buffer0.indexOf(byteString0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[6] = (byte) (-87);
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer1 = pipe0.buffer;
      buffer1.snapshot();
      buffer1.readByte();
      buffer1.readHexadecimalUnsignedLong();
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.writeUtf8("[hex=", (int) (byte) (-67), 701);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -67
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      buffer1.sha1();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOfElement(byteString0, 2582L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.readByte();
      Buffer buffer2 = buffer1.clone();
      Buffer buffer3 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.readByte();
      buffer1.clone();
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Pipe pipe0 = new Pipe(1483L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[0] = (byte)49;
      byteArray0[6] = (byte) (-87);
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.readByte();
      long long0 = new Integer((byte)49);
      buffer_UnsafeCursor0.resizeBuffer(4L);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer1.writableSegment((byte) (-87));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Pipe pipe0 = new Pipe(2584L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[2];
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer;
      realBufferedSource0.buffer.writeLong(10000000000000L);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.buffer.indexOf(byteString0, (long) (byte)45);
      Buffer buffer4 = realBufferedSink0.buffer();
      buffer4.writeDecimalLong((byte)45);
      assertEquals(2L, buffer4.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      buffer0.writeDecimalLong((-922337203685477580L));
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 3926, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.request(1095216660480L);
      try { 
        realBufferedSource0.buffer.write((Source) buffer0, 1095216660480L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = new Buffer();
      buffer1.emit();
      // Undeclared exception!
      try { 
        buffer1.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(5L);
      Locale locale0 = new Locale("M`Q");
      Locale locale1 = locale0.stripExtensions();
      MockFile mockFile0 = new MockFile("cF4", "endIndex > string.length: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("cF4");
      Object object0 = new Object();
      PrintStream printStream0 = mockPrintStream0.printf(locale1, "", (Object[]) null);
      Buffer buffer1 = buffer0.copyTo((OutputStream) printStream0);
      buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashingSink.md5(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      buffer1.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.offset = 1377L;
      buffer1.clone();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1377L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("3Vd");
      short short0 = buffer0.readShortLe();
      assertEquals(1L, buffer0.size());
      assertEquals((short)22067, short0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      Buffer buffer2 = pipe0.buffer;
      buffer2.sha512();
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer_UnsafeCursor0.resizeBuffer(8L);
      buffer_UnsafeCursor0.buffer.require((-1534L));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Object object0 = new Object();
      boolean boolean0 = buffer0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(3835);
      ByteString byteString0 = buffer0.sha256();
      Buffer buffer1 = buffer0.writeShort(3835);
      buffer1.indexOf(byteString0, 2065793023L);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Pipe pipe0 = new Pipe(2584L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)45;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer4.snapshot();
      Buffer buffer5 = buffer2.writeDecimalLong(9223372036854775807L);
      assertFalse(buffer5.exhausted());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer buffer4 = buffer3.writeLongLe((-293L));
      buffer3.readShort();
      Charset charset0 = Charset.defaultCharset();
      buffer4.readString(charset0);
      Buffer buffer5 = buffer2.writeDecimalLong((-1L));
      long long0 = buffer5.readDecimalLong();
      assertEquals(0L, buffer5.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.request((-1L));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write(buffer0, 4233L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      Buffer buffer1 = realBufferedSink0.buffer.write(byteArray0);
      buffer1.readDecimalLong();
      assertEquals(7L, buffer1.size());
      
      realBufferedSink0.buffer.segmentSizes();
      assertFalse(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.readByteString();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1L));
      ByteString byteString2 = buffer0.sha512();
      buffer0.readUnsafe();
      Charset.defaultCharset();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString1;
      ByteString byteString3 = new ByteString((byte[]) null);
      byteStringArray0[3] = byteString3;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(2L, buffer0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("v>`{Vos");
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      byteString1.write(buffer0);
      byteString0.hmacSha256(byteString1);
      byteString1.compareTo(byteString0);
      HashingSource.md5(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString1);
      Sink sink0 = hashingSink0.delegate();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.buffer();
      String string0 = buffer0.readUtf8();
      assertEquals("v>`{Vos", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(32L);
      buffer0.readUtf8CodePoint();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(55);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      buffer1.writeAll(realBufferedSink1.buffer);
      buffer2.readIntLe();
      buffer2.emit();
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(87L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.buffer.readUnsafe(buffer_UnsafeCursor1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      BufferedSink bufferedSink0 = buffer1.write((Source) buffer0, 0L);
      assertSame(buffer1, bufferedSink0);
      
      ByteString byteString0 = ByteString.EMPTY;
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0, 8L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("fromIndex < 0");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      PrintStream printStream0 = mockPrintStream1.append('6');
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(printStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Pipe pipe0 = new Pipe(92L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)35;
      Buffer buffer1 = realBufferedSink0.buffer.write(byteArray0);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      try { 
        buffer1.require(49L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(9223372036773052408L);
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(65533, int0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      short short0 = buffer0.readShortLe();
      assertEquals(5L, buffer0.size());
      assertEquals((short)8447, short0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.readByte();
      buffer0.readHexadecimalUnsignedLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(4L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.indexOf(byteArray0, (int) (byte) (-63));
      buffer_UnsafeCursor0.resizeBuffer((byte)91);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(5296L);
      buffer0.readShortLe();
      buffer0.readUnsafe();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.select(options0);
      assertEquals(2L, buffer1.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      try { 
        buffer0.readFully(buffer1, 60L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-110);
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      buffer2.readUnsafe();
      buffer2.writeHexadecimalUnsignedLong(427819008L);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("j#Rtv*)A%");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) hashingSource0;
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.writeTo((OutputStream) printStream0, 347L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=347
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Pipe pipe0 = new Pipe(1171L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong((-698L));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      boolean boolean0 = buffer2.exhausted();
      assertTrue(boolean0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1109);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffd1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.request(1120L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.write(realBufferedSource0.buffer, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      Pipe pipe1 = new Pipe((byte)49);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.snapshot((int) (byte) (-86));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-86
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocateDirect(2048);
      ByteBuffer.allocate(65280);
      Pipe pipe0 = new Pipe(2886);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      Charset.defaultCharset();
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong((-1));
      assertEquals(2L, buffer2.size());
      
      short short0 = buffer_UnsafeCursor0.buffer.readShortLe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer0.equals((Object)buffer2));
      assertEquals((short)12589, short0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.write(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Pipe pipe0 = new Pipe(244L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)102;
      byteArray0[0] = (byte)57;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)9;
      buffer0.write(byteArray0);
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer0.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Charset.defaultCharset();
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'c';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Pipe pipe0 = new Pipe(3024L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      try { 
        buffer_UnsafeCursor1.buffer.readFully(buffer_UnsafeCursor0.buffer, 3024L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString("bcvvZ|xz:.AowS4+F", 31, 31, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 31 > 17
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.indexOf(byteString0);
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString1.indexOf(byteArray0, (int) (byte)91);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer1.head = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      buffer1.readByteArray();
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      Buffer buffer3 = buffer2.writeDecimalLong((-5296L));
      buffer3.indexOf((byte)71, 15L);
      assertEquals(23L, buffer2.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint(57343);
      Charset.defaultCharset();
      buffer0.writeDecimalLong(57343);
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(20L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(10000000L);
      long long0 = buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      assertEquals(9994240L, long0);
      
      // Undeclared exception!
      buffer_UnsafeCursor0.buffer.hashCode();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(9223372036773052388L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)12, (long) (byte)12, (-33L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=8 fromIndex=12 toIndex=-33
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer1.head = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      buffer1.readByteArray();
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      Buffer buffer3 = buffer2.writeDecimalLong((-5296L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer1.copyTo(outputStream0, 6L, 5L);
      buffer3.indexOf((byte)71, 15L);
      buffer0.copyTo(buffer3, 582L, 15L);
      assertEquals(1733L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Pipe pipe0 = new Pipe(3024L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.readByte();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(31);
      // Undeclared exception!
      try { 
        buffer2.writeAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      HashingSource.md5(buffer0);
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 949L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Segment segment0 = buffer0.head;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(4663L);
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(10000000L);
      buffer1.sha1();
      buffer1.writeDecimalLong((-1));
      buffer0.indexOf((byte) (-65), (long) (byte)71);
      assertEquals(4673L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[8];
      Buffer buffer1 = realBufferedSink0.buffer.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(274L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe1 = new Pipe(10000000000000L);
      Buffer buffer1 = pipe1.buffer;
      Charset.defaultCharset();
      Buffer buffer2 = buffer0.writeDecimalLong(274L);
      buffer2.sha512();
      try { 
        buffer1.write((Source) buffer2, 3523L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer0.writeLong((byte)2);
      // Undeclared exception!
      try { 
        buffer2.indexOf((ByteString) null, (-44L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      buffer1.readUtf8();
      long long0 = buffer1.read(buffer0, 1377L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-29);
      Charset.defaultCharset();
      buffer0.writeDecimalLong((byte) (-29));
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, buffer0.size());
      assertEquals((-29L), long0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Pipe pipe0 = new Pipe(2584L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeUtf8("endIndex > string.length: ", (int) (byte)0, (int) (byte)0);
      Buffer buffer1 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = 9;
      // Undeclared exception!
      try { 
        options0.get(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Segment segment0 = new Segment();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(1095216660480L);
      long long0 = buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      assertEquals(0L, buffer0.size());
      assertEquals(291723144463488L, long0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      HashingSink.md5(bufferedSink0);
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink2.writeDecimalLong((-1L));
      realBufferedSink2.buffer();
      Buffer buffer1 = realBufferedSink1.buffer;
      buffer_UnsafeCursor0.buffer.readByteString();
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(32L);
      // Undeclared exception!
      try { 
        buffer3.readAll(buffer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      Buffer buffer1 = buffer0.writeDecimalLong(49L);
      buffer0.sha512();
      buffer0.write((Source) buffer1, (-1797L));
      ByteString.encodeUtf8("SHA-512");
      // Undeclared exception!
      try { 
        buffer1.write(byteArray0, 2145803300, (-367));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=2145803300 byteCount=-367
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readByteString();
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1750L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.readAndWriteUnsafe();
      Buffer buffer2 = realBufferedSource0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      buffer1.writeDecimalLong(100000L);
      assertEquals(6L, buffer1.size());
      
      long long0 = buffer1.readDecimalLong();
      assertEquals(100000L, long0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer1.head = null;
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 1733L, 1733L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1733 byteCount=1733
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("HsacSH1");
      Buffer buffer2 = buffer1.copyTo((OutputStream) mockPrintStream0);
      assertTrue(buffer2.exhausted());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(32L);
      buffer0.readUtf8CodePoint();
      buffer0.readUtf8Line(1L);
      ByteString byteString0 = buffer0.snapshot();
      buffer1.indexOf(byteString0, 2412L);
      buffer1.indexOf(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(57343);
      Charset.defaultCharset();
      buffer1.writeDecimalLong(16711680L);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x3f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      Options options0 = Options.of(byteStringArray0);
      buffer_UnsafeCursor0.buffer.select(options0);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options options1 = Options.of(byteStringArray1);
      realBufferedSource0.buffer.selectPrefix(options1);
      buffer1.writeDecimalLong((byte)35);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      pipe0.sourceClosed = false;
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      buffer1.readByteArray();
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      Buffer buffer3 = buffer2.writeDecimalLong((-5296L));
      buffer3.indexOf((byte)71, 15L);
      short short0 = buffer3.readShort();
      assertEquals(21L, buffer3.size());
      assertEquals((short)12592, short0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byte byte0 = (byte) (-27);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byte byte1 = (byte)50;
      byteArray0[4] = (byte)50;
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      MockFile mockFile0 = new MockFile("endIndex > string.length: ", "endIndex > string.length: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) (byte) (-59);
      objectArray0[4] = (Object) (byte) (-27);
      mockPrintStream0.printf(locale1, "", objectArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.indexOf(byteArray0, 1358);
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByteArray((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(8192L);
      buffer_UnsafeCursor0.buffer.readLong();
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer buffer2 = buffer1.readFrom((InputStream) byteArrayInputStream0);
      long long0 = 9223372036773044216L;
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer1, (-1027L), 9223372036773044216L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1027 byteCount=9223372036773044216
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.flush();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Pipe pipe0 = new Pipe(2063);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeByte(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer1 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=00\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.indexOf((byte)82, 1L, 1L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer1.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-100);
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
      
      Buffer buffer1 = buffer0.writeLongLe(6L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "buffer([size=0])");
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer.read(buffer1, 1377L);
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(10000000000000000L);
      Charset charset0 = Charset.defaultCharset();
      buffer2.writeString("buffer([size=0])", charset0);
      realBufferedSink0.buffer.exhausted();
      long long0 = buffer0.readAll(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = buffer_UnsafeCursor0.end;
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer0.rangeEquals((-44L), byteString0, (-1), (-1));
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.read(buffer_UnsafeCursor0.buffer, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-63);
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeAll(realBufferedSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = 71;
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(71);
      HashingSink.sha256(bufferedSink0);
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1));
      ByteString byteString0 = buffer0.sha256();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer0.hmacSha256(byteString0);
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = null;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("$1EX0XKC=F]V9Zyp1", charset0);
      buffer0.hashCode();
      assertEquals(18L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      Charset.defaultCharset();
      buffer0.writeDecimalLong(1L);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("HmacSHA1");
      realBufferedSink0.writeHexadecimalUnsignedLong(0L);
      Buffer buffer2 = buffer0.copyTo((OutputStream) mockPrintStream0);
      buffer1.segmentSizes();
      buffer2.writeUtf8CodePoint((-2590));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-128);
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)7, (-2416));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=7 byteCount=-2416
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 32L;
      // Undeclared exception!
      try { 
        buffer0.getByte(32L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=32 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      Buffer buffer1 = buffer0.write(byteArray0);
      byteArray0[2] = (byte) (-87);
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.select(options0);
      Options options1 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options1);
      realBufferedSource0.buffer();
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(71);
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSink0.buffer.indexOfElement(byteString1, 1787L);
      realBufferedSink0.buffer.writableSegment(71);
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      buffer0.writeUtf8("9h&m% +sSdW \"Uj*!VQ");
      assertEquals(19L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(87L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.buffer.readUnsafe(buffer_UnsafeCursor1);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer();
      long long0 = realBufferedSink1.buffer.indexOf((byte)48, 87L, 9223372036854775807L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(2261L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      Buffer buffer2 = buffer0.writeDecimalLong(16711680L);
      buffer1.sha512();
      buffer2.write((Source) buffer1, (-3467L));
      try { 
        buffer2.write((Source) buffer1, 2261L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      buffer1.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readFully(buffer_UnsafeCursor0.buffer, (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint(57343);
      assertFalse(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      Buffer buffer2 = buffer1.write(byteArray0);
      Pipe pipe0 = new Pipe(3528L);
      realBufferedSource0.buffer.request((byte) (-87));
      Buffer buffer3 = pipe0.buffer;
      realBufferedSource0.readLongLe();
      realBufferedSource0.buffer.snapshot();
      buffer1.readByte();
      buffer1.write(byteArray0);
      buffer2.readByte();
      Charset.defaultCharset();
      String string0 = buffer3.readUtf8(0L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.end;
      assertEquals((-1), int0);
      
      ByteString byteString0 = ByteString.encodeUtf8("");
      boolean boolean0 = buffer0.rangeEquals((long) (-1), byteString0, (-580), (-1));
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readUtf8();
      long long0 = buffer_UnsafeCursor1.buffer.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      assertEquals((-1), buffer_UnsafeCursor1.start);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(128);
      buffer0.readIntLe();
      buffer1.writeUtf8CodePoint(1785);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writableSegment(24);
      buffer0.indexOf((byte)78, (long) (byte)78, 3475L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("A%~1,", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.inputStream();
      ByteString.decodeBase64("");
      buffer1.writeUtf8CodePoint(55296);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(6L);
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      buffer_UnsafeCursor0.buffer.readByteArray(2L);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Pipe pipe0 = new Pipe(3528L);
      File file0 = MockFile.createTempFile("`r{mO9Mn7uCJg~SSC", "`r{mO9Mn7uCJg~SSC");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) mockFileOutputStream0, (-424L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-424
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Pipe pipe0 = new Pipe(3029L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeDecimalLong(2510L);
      ByteString byteString0 = buffer1.sha512();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.hmacSha256(byteString0);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((Source) null, 10L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocateDirect(2048);
      ByteBuffer.allocate(2886);
      Pipe pipe0 = new Pipe(2048);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(42781L);
      short short0 = buffer1.readShortLe();
      assertEquals(3L, buffer1.size());
      assertEquals((short)12852, short0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe pipe0 = new Pipe(3913L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer1.writeUtf8("endIndex > string.length: ", 11, 11);
      Buffer buffer2 = pipe0.buffer;
      Pipe pipe1 = new Pipe(2114L);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      String string0 = realBufferedSource0.buffer.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      Buffer buffer2 = buffer0.writeDecimalLong(2510L);
      ByteString byteString0 = buffer2.sha512();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(3030L);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options.of(byteStringArray0);
      Buffer buffer3 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource0.buffer();
      Buffer buffer5 = buffer4.writeDecimalLong(1279L);
      buffer4.readByteString();
      realBufferedSource0.buffer.close();
      assertTrue(buffer3.equals((Object)buffer4));
      assertTrue(buffer3.equals((Object)buffer5));
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      List<Integer> list0 = buffer0.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      ByteString byteString0 = buffer0.sha1();
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      ByteString byteString2 = buffer0.hmacSha512(byteString1);
      assertNotSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer1.readFrom((InputStream) byteArrayInputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.rangeEquals((-922337203685477580L), byteString0, (int) (byte) (-38), 4050);
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, (long) (byte) (-38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(99999918276608L);
      Segment segment0 = new Segment();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(9223372036854775807L);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 92233720368547758
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.size = 657L;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.hash();
      buffer_UnsafeCursor0.buffer.rangeEquals(657L, byteString0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-3);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer2 = buffer1.writeDecimalLong(100000000L);
      // Undeclared exception!
      try { 
        buffer2.readFully(buffer0, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      realBufferedSource0.buffer.readAll(hashingSink0);
      Buffer buffer0 = realBufferedSource0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer1 = buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) byteArrayOutputStream0, 60L, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=60 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      buffer0.snapshot();
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-87);
      byteArray0[6] = (byte) (-87);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString0 = buffer2.snapshot();
      buffer2.readByte();
      buffer0.buffer();
      Buffer buffer3 = buffer1.write(byteString0);
      assertEquals(13L, buffer2.size());
      assertEquals(13L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)40);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-87);
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer2.indexOfElement(byteString0);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      Buffer buffer1 = buffer0.write(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeTo((OutputStream) byteArrayOutputStream0, 3L);
      buffer2.readByte();
      Integer integer0 = new Integer((-1));
      buffer1.readByteString(0L);
      buffer_UnsafeCursor0.buffer.writeByte((-988));
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=00000024\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("9d");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) printStream0, 3223L, 1925L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3223 byteCount=1925
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.seek((-1));
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), int0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, 3030L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.readByte();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) filterOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      hashingSink0.hash();
      buffer_UnsafeCursor0.readWrite = true;
      long long0 = (-2062L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2062L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2062 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      buffer0.readByteArray();
      buffer0.writeDecimalLong(100000000000000000L);
      assertEquals(18L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      Charset.defaultCharset();
      byte[] byteArray0 = buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeDecimalLong(10000000000L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer1.writeDecimalLong((-1577L));
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)95, (-5296L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=16 fromIndex=-5296 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      buffer0.readUtf8Line();
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.toString();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.rangeEquals(747L, byteString0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)45;
      buffer1.write(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeDecimalLong(280375465082880L);
      realBufferedSink0.buffer.flush();
      try { 
        buffer1.skip((byte)45);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(92L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer1.readUnsafe();
      Charset.defaultCharset();
      buffer1.writeDecimalLong(100000000000L);
      assertEquals(12L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.next();
      Pipe pipe0 = new Pipe(1018L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.snapshot();
      buffer_UnsafeCursor0.buffer.readByte();
      int int0 = buffer0.readInt();
      assertEquals(3L, buffer0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(71);
      Buffer buffer1 = buffer0.writeLongLe((-72057594037927936L));
      assertEquals(8L, buffer0.size());
      
      ((RealBufferedSink) bufferedSink0).buffer.read(buffer1, 10000L);
      realBufferedSink0.buffer.readUnsafe();
      buffer0.request(1000000000000L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read(buffer2, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Integer integer0 = new Integer((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer3.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong((byte)112);
      realBufferedSource0.buffer.readShortLe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      Pipe pipe0 = new Pipe(15L);
      pipe0.sourceClosed = true;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      // Undeclared exception!
      try { 
        buffer2.write((Source) pipe_PipeSource0, 50L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte) (-87);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      buffer1.write(byteArray0);
      Pipe pipe0 = new Pipe(3528L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = pipe0.buffer;
      realBufferedSource0.readLongLe();
      realBufferedSource0.buffer.snapshot();
      buffer1.readByte();
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeInt(128);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(128);
      Pipe pipe0 = new Pipe(128);
      Pipe pipe1 = new Pipe(128);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer();
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer2.writeDecimalLong(1568L);
      realBufferedSink0.buffer.equals(pipe1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1568L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((byte) (-87));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.toString();
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      Buffer buffer1 = buffer0.writeDecimalLong((byte) (-87));
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      byte byte0 = buffer0.readByte();
      assertEquals(2L, buffer0.size());
      assertEquals((byte)45, byte0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Segment segment0 = buffer0.head;
      buffer0.writeUtf8CodePoint(386);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(2L);
      buffer0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line((long) 386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=385 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      pipe0.sinkClosed = true;
      byteArray0[1] = (byte)49;
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      buffer1.writeDecimalLong(9223372L);
      assertEquals(9L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeUtf8CodePoint((-4914));
      try { 
        buffer2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 2: 1 (to read code point prefixed 0xffffffce)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 1952257861;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1952257861);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 745d1745
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-59);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)16);
      buffer1.writeUtf8CodePoint(0);
      // Undeclared exception!
      try { 
        buffer1.writeString("bcvvZ|x:.AowS4+F", (int) (byte) (-13), (int) (byte)16, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -13
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-29);
      Charset.defaultCharset();
      buffer0.writeDecimalLong((byte) (-29));
      buffer0.readDecimalLong();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      ByteString byteString0 = buffer1.sha512();
      assertEquals(64, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, 1815, 1815, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Pipe pipe0 = new Pipe(2584L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.buffer.writeUtf8CodePoint(745);
      byte[] byteArray0 = new byte[1];
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer;
      realBufferedSource0.buffer.writeLong(10000000000000L);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.buffer.readFully(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(87L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.buffer.readUnsafe(buffer_UnsafeCursor1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink1.buffer;
      Segment segment0 = new Segment();
      buffer2.head = segment0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer();
      long long0 = realBufferedSink1.buffer.indexOf((byte)48, 87L, 9223372036854775807L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(92L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOf((byte) (-4), (long) 2048);
      byte[] byteArray0 = new byte[0];
      buffer1.read(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("HmacSHA256", 1715, (-101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -101 < 1715
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(4639L);
      buffer1.writeDecimalLong(9223372L);
      assertEquals(11L, buffer1.size());
      
      int int0 = buffer1.readInt();
      assertEquals(7L, buffer1.size());
      assertEquals(875967289, int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.indexOf(byteString0, (long) (byte)91);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-52), (long) (byte)91, 55L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=91 toIndex=55
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Pipe pipe0 = new Pipe(402L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha512(pipe_PipeSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      Buffer buffer1 = buffer0.writeIntLe((-1));
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo(buffer1, 8L, 1762L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=8 byteCount=1762
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      realBufferedSource0.buffer.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer2 = realBufferedSink1.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        realBufferedSink1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-72057594037927936L));
      buffer1.writeIntLe(0);
      assertEquals(22L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      int int0 = new Integer((byte)100);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1637L));
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-94));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor1.buffer.readUnsafe();
      int int0 = buffer_UnsafeCursor2.next();
      assertFalse(buffer0.exhausted());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1));
      // Undeclared exception!
      try { 
        buffer0.write(buffer_UnsafeCursor0.buffer, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      buffer1.readByteArray();
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      buffer2.writeDecimalLong(100000000000000000L);
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) null, (-1L), 16L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      byte byte0 = (byte)45;
      byte[] byteArray0 = new byte[0];
      buffer0.write(byteArray0);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      buffer2.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSink0.buffer.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(10000000L);
      buffer2.readFully(byteArray0);
      assertEquals(0L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Pipe pipe0 = new Pipe(522L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.buffer.indexOf((byte)101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (-846), (-846));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-846 byteCount=-846
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.write((Source) buffer_UnsafeCursor0.buffer, (-87L));
      int int0 = buffer_UnsafeCursor0.seek((-1));
      assertEquals((-1), int0);
      
      buffer_UnsafeCursor0.resizeBuffer(3030L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(763L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = pipe0.buffer;
      Charset.defaultCharset();
      buffer2.writeDecimalLong((-1L));
      buffer_UnsafeCursor0.buffer.sha512();
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      try { 
        buffer_UnsafeCursor0.buffer.write((Source) hashingSource0, 842L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(32L);
      buffer1.readLong();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[6] = (byte) (-87);
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer1 = pipe0.buffer;
      buffer1.snapshot();
      buffer1.readByte();
      int int0 = buffer0.readInt();
      assertEquals(2L, buffer0.size());
      assertEquals(822214845, int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("SHA-256", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      realBufferedSource0.buffer.readFrom(inputStream0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      ByteString[] byteStringArray0 = new ByteString[17];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.buffer();
      buffer2.clear();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.exhausted();
      Pipe pipe0 = new Pipe(100000000000L);
      Buffer buffer1 = pipe0.buffer;
      boolean boolean1 = buffer0.equals(buffer1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      buffer1.write(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = hashingSink0.hash();
      HashingSink.hmacSha256(realBufferedSource0.buffer, byteString1);
      buffer0.indexOfElement(byteString0, 2156L);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writableSegment(2147438288);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(569);
      Pipe pipe0 = new Pipe(2147483647L);
      Pipe pipe1 = new Pipe(1952257861);
      Segment segment0 = new Segment();
      buffer0.head = segment0;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer0.readUtf8();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Buffer buffer3 = buffer0.writeShort(82);
      assertFalse(buffer0.exhausted());
      
      buffer3.clear();
      Buffer buffer4 = buffer0.clone();
      buffer_UnsafeCursor0.next();
      buffer4.readFully(buffer2, 0L);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(32L);
      buffer0.readUtf8CodePoint();
      buffer0.readUtf8Line(1L);
      buffer0.writeShortLe(32);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readUtf8Line();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.indexOf((byte)16, (-1287L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1287 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2048);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.md5();
      Pipe pipe0 = new Pipe(2048);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString0, (-9L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Pipe pipe0 = new Pipe(3024L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-87);
      Buffer buffer1 = buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(7L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.indexOf(byteArray0, (int) (byte) (-63));
      realBufferedSource0.buffer.readUtf8();
      buffer_UnsafeCursor0.resizeBuffer(6L);
      Buffer buffer2 = buffer1.buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      Charset.defaultCharset();
      buffer0.writeDecimalLong((-1487L));
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-87);
      realBufferedSource0.exhausted();
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)45;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readUtf8();
      assertTrue(buffer1.exhausted());
      
      Buffer buffer2 = buffer1.writeLong((byte) (-87));
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, 55296);
      buffer2.writeDecimalLong((byte)49);
      buffer2.indexOf(byteString0, 10L);
      Buffer buffer3 = realBufferedSink0.buffer;
      assertFalse(buffer3.exhausted());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.snapshot();
      Buffer buffer2 = buffer1.writeDecimalLong(8L);
      // Undeclared exception!
      try { 
        buffer2.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      buffer_UnsafeCursor1.buffer.writeDecimalLong(1000000000000000L);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(227);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      boolean boolean0 = buffer0.rangeEquals((long) (-1), byteString0);
      assertEquals(16L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.toString();
      ByteString byteString0 = buffer1.snapshot();
      buffer1.writeDecimalLong(100000000000000L);
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(92L);
      // Undeclared exception!
      try { 
        buffer0.getByte(92L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=92 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.readUtf8();
      ByteString.decodeBase64("5$");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Pipe pipe0 = new Pipe(3002L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.readByte();
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=6 content=313100005ba9\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha256(byteString0);
      buffer0.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor2.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor2.buffer.readFully(buffer1, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-87);
      buffer0.write(byteArray0);
      byteArray0[2] = (byte) (-87);
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      hashingSource0.hash();
      realBufferedSource0.buffer.rangeEquals((long) (byte)0, byteString0);
      Buffer buffer2 = buffer0.write(byteArray0);
      realBufferedSource0.buffer.writeDecimalLong(10L);
      buffer1.readFully(buffer2, (long) (byte)0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      long long0 = buffer2.indexOfElement(byteString0);
      assertEquals(10L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      Buffer buffer1 = buffer0.write(byteArray0);
      long long0 = buffer1.completeSegmentByteCount();
      assertEquals(7L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      buffer_UnsafeCursor0.buffer.clone();
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)49;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer0.readByte();
      Integer integer0 = new Integer(18);
      buffer_UnsafeCursor0.resizeBuffer(3030L);
      buffer1.readUtf8CodePoint();
      Segment segment0 = new Segment();
      buffer0.size();
      buffer0.readUtf8Line(325L);
      assertEquals(2703L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Segment segment0 = new Segment();
      buffer0.readAndWriteUnsafe();
      buffer0.writeDecimalLong(99999998L);
      assertEquals(8L, buffer0.size());
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(2576980376L, long0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(128);
      buffer1.sha1();
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(3L, buffer1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      boolean boolean0 = buffer0.equals(buffer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(49);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(8230);
      Pipe pipe0 = new Pipe(1L);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1187L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MockPrintStream mockPrintStream0 = new MockPrintStream("W8L`;UR");
      byteArray0[1] = (byte)49;
      Charset.defaultCharset();
      Pipe pipe0 = new Pipe((byte)49);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.sha1();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer1.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line(10000000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=9999999999999999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.skip(52);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString(1273L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1273
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Pipe pipe0 = new Pipe(2584L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)45;
      realBufferedSource0.buffer.write(byteArray0);
      Pipe pipe1 = new Pipe(2597L);
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      buffer0.writeDecimalLong(1000000L);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      pipe0.sinkClosed = true;
      byteArray0[1] = (byte)49;
      Charset.defaultCharset();
      // Undeclared exception!
      buffer_UnsafeCursor0.resizeBuffer(10000000000L);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.readUtf8Line();
      Buffer buffer2 = realBufferedSink1.buffer;
      buffer_UnsafeCursor1.buffer.toString();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line(3000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.writeUtf8CodePoint(1114111);
      buffer0.writableSegment(561);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      pipe0.sinkClosed = true;
      buffer_UnsafeCursor0.buffer.writeLongLe(29L);
      buffer0.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      ByteString[] byteStringArray0 = new ByteString[8];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-85);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteStringArray0[0] = byteString0;
      String string0 = "";
      ByteString byteString1 = ByteString.encodeUtf8("");
      byteStringArray0[1] = byteString1;
      // Undeclared exception!
      try { 
        HashingSink.sha256((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-2145));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1));
      buffer0.sha256();
      Charset.defaultCharset();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      buffer_UnsafeCursor0.buffer.writeShort((-1));
      buffer0.writeDecimalLong(9223372L);
      boolean boolean0 = buffer1.request((-1));
      assertEquals(12L, buffer1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(10000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha256();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-64);
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer();
      realBufferedSink0.buffer.readUtf8();
      buffer0.writeLong((byte) (-37));
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink1.emit();
      long long0 = buffer1.indexOf(byteString0, 0L);
      assertEquals((-1L), long0);
      
      Buffer buffer2 = realBufferedSink1.buffer();
      Buffer buffer3 = realBufferedSink1.buffer;
      buffer2.emitCompleteSegments();
      buffer1.writeUtf8("");
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOfElement(byteString0, 2633L);
      buffer0.writableSegment(8192);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2048);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = byteString0.md5();
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer1.writeLong((-708L));
      buffer3.readUtf8Line();
      realBufferedSink0.buffer.indexOf(byteString1, 4278190080L);
      // Undeclared exception!
      try { 
        buffer2.writeUtf8("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD<", 2048, 2048);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2048 > 8
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer1 = pipe0.buffer;
      buffer1.snapshot();
      buffer1.readByte();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)49, 1389L, (-78L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=6 fromIndex=1389 toIndex=-78
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-87);
      realBufferedSource0.exhausted();
      byteArray0[3] = (byte)49;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)49;
      byteArray0[5] = (byte)45;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readUtf8();
      assertTrue(buffer2.exhausted());
      
      Buffer buffer3 = buffer2.writeLong((byte) (-87));
      ByteString byteString0 = new ByteString(byteArray0);
      buffer3.indexOf(byteString0, 6L);
      Buffer buffer4 = realBufferedSink0.buffer();
      Buffer buffer5 = realBufferedSink0.buffer;
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      buffer4.indexOf(byteString0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer0.writableSegment(65533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      buffer0.readUtf8Line();
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.toString();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8Line(2L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte) (-87);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      buffer1.write(byteArray0);
      Pipe pipe0 = new Pipe(3528L);
      Buffer buffer2 = pipe0.buffer;
      realBufferedSource0.buffer.snapshot();
      buffer1.readByte();
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Segment segment0 = buffer0.head;
      buffer0.writeUtf8CodePoint(386);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.offset = 1095216660480L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(2L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1095216660480 > size=2
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Pipe pipe0 = new Pipe(65L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      try { 
        buffer1.require(65L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(92L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readUnsafe();
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000L);
      buffer1.timeout();
      assertEquals(12L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("$1EX0XKC=F]V9Zyp1", charset0);
      ByteString.decodeBase64("Expected leading [0-9a-fA-F] character but was 0x");
      buffer1.rangeEquals(148L, (ByteString) null, 58, 55296);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      buffer0.readFully(byteArray0);
      assertEquals(13L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer0.readAndWriteUnsafe();
      realBufferedSource0.buffer.writeLongLe(100000000L);
      realBufferedSource0.buffer.read(buffer0, 6L);
      buffer1.readUnsafe();
      realBufferedSource0.buffer.buffer();
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Pipe pipe0 = new Pipe(2013L);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      buffer1.readUnsafe();
      Charset.defaultCharset();
      buffer2.writeDecimalLong(71776119061217280L);
      assertEquals(17L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-490L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -490
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      MockFile mockFile0 = new MockFile("endIndex > string.length: ", "endIndex > string.length: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) (byte) (-59);
      objectArray0[4] = (Object) (byte) (-27);
      mockPrintStream0.printf(locale1, "", objectArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("endIndex > string.length: ", (-1571), 1789569706, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1571
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha512(deflaterSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)0;
      byteString0.indexOf(byteArray0, 0);
      // Undeclared exception!
      try { 
        buffer1.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeAll(buffer0);
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Segment segment0 = new Segment();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(1733L);
      long long0 = buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      assertTrue(buffer0.exhausted());
      assertEquals(5939L, long0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readAndWriteUnsafe();
      buffer0.writeDecimalLong((byte)35);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      realBufferedSink0.buffer.write(byteArray0);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString[] byteStringArray0 = new ByteString[3];
      Options.of(byteStringArray0);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      boolean boolean1 = buffer0.equals(byteStringArray0[0]);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("3?s*<p}`V20(/a", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      Buffer buffer2 = buffer0.writeDecimalLong(2510L);
      buffer2.sha512();
      buffer_UnsafeCursor0.buffer.readUnsafe();
      assertEquals(18L, buffer0.size());
      
      Charset.defaultCharset();
      Buffer buffer3 = buffer1.writeDecimalLong(10000000000000000L);
      short short0 = buffer3.readShortLe();
      assertEquals((short)16179, short0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeDecimalLong(100000000000000000L);
      Buffer buffer1 = buffer0.writeDecimalLong(100000000000000000L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink1.outputStream();
      Buffer buffer2 = realBufferedSink0.buffer();
      MockFile mockFile0 = new MockFile("@wNzM&'2$v", "@wNzM&'2$v");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) mockPrintStream0, 0L, 5L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=5
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("L'<AoI", 2147268918, (-94), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -94 < 2147268918
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 1020;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2048);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.md5();
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        buffer1.read((Buffer) null, 588L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      int int0 = 514;
      ByteString byteString0 = ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[0] = (byte)49;
      byteArray0[6] = (byte) (-87);
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer0.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)51;
      byteArray0[8] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(3816L);
      Pipe pipe1 = new Pipe(1936L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = pipe1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer_UnsafeCursor0.buffer.rangeEquals(842L, byteString0);
      buffer_UnsafeCursor0.resizeBuffer(3L);
      ByteString.decodeBase64("s78vUv#*2");
      // Undeclared exception!
      try { 
        buffer1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(116);
      buffer0.readIntLe();
      buffer1.writeUtf8CodePoint(1785);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.hashCode();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)43;
      byteArray0[5] = (byte) (-29);
      byteArray0[4] = (byte) (-88);
      Charset.defaultCharset();
      buffer0.writeDecimalLong((byte)0);
      assertEquals(1L, buffer0.size());
      
      long long0 = buffer0.readDecimalLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      buffer2.snapshot();
      buffer2.writeDecimalLong(0L);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer2.selectPrefix(options0);
      assertFalse(buffer2.exhausted());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2048);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = byteString0.md5();
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer1.writeLong((-708L));
      realBufferedSink0.buffer.indexOf(byteString1, 4278190080L);
      buffer2.writeDecimalLong(6L);
      assertEquals(1L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      buffer1.readByteArray();
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      Buffer buffer3 = buffer2.writeDecimalLong((-5296L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      realBufferedSink0.writeDecimalLong((-556L));
      realBufferedSink0.outputStream();
      ByteString byteString0 = buffer3.snapshot();
      buffer0.indexOf(byteString0);
      assertEquals(23L, buffer2.size());
      assertEquals(23L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeInt(128);
      realBufferedSink0.toString();
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.next();
      buffer1.request(4294967295L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((Buffer) null, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-94));
      Buffer buffer1 = new Buffer();
      buffer1.writeAll(buffer0);
      assertEquals(1L, buffer1.size());
      
      buffer0.hashCode();
      buffer0.indexOf((byte) (-52));
      buffer0.sha512();
      assertFalse(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer_UnsafeCursor0.buffer.writeTo((OutputStream) byteArrayOutputStream0, 3L);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      buffer1.write(byteArray0);
      Pipe pipe0 = new Pipe(3528L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer2.snapshot();
      buffer2.writeDecimalLong(3528L);
      int int0 = 11;
      Integer integer0 = new Integer(11);
      realBufferedSink0.buffer.equals(integer0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("I/nm8s5\"\"");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-63);
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      buffer0.size();
      ByteString[] byteStringArray0 = new ByteString[5];
      ByteString byteString0 = ByteString.decodeBase64("");
      byteStringArray0[0] = byteString0;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("_N8'rR[&g'{LLl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: _
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Pipe pipe0 = new Pipe(244L);
      Pipe pipe1 = new Pipe(244L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe1.buffer;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)9;
      buffer0.write(byteArray0);
      Buffer buffer1 = pipe1.buffer;
      buffer0.snapshot();
      buffer1.readByte();
      buffer0.readHexadecimalUnsignedLong();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)102, (byte) (-20));
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (byte) (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -20
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      buffer1.writeShort((-1));
      buffer1.writeDecimalLong(9223372L);
      buffer0.readByteArray();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, (-2371L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2371
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Pipe pipe0 = new Pipe(1047L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      pipe0.sinkClosed = false;
      Buffer buffer0 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8(1047L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1047
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(995L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("A%~1,", charset0);
      Charset.defaultCharset();
      buffer0.writeDecimalLong((byte) (-29));
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x41
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(32L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)0;
      Segment segment0 = new Segment(byteArray0, (-770), (byte)3, true, true);
      buffer1.head = segment0;
      // Undeclared exception!
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Pipe pipe0 = new Pipe(3029L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeDecimalLong(2510L);
      buffer1.writeLong((-1));
      buffer0.readLongLe();
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer0.segmentSizes();
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8(1888L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1888
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "es]>')");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readByteString();
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.writeInt((-1));
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1750L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Pipe pipe0 = new Pipe(3024L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.readByte();
      buffer0.readHexadecimalUnsignedLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.indexOf(byteArray0, (int) (byte) (-63));
      realBufferedSource0.buffer.readUtf8();
      buffer_UnsafeCursor0.resizeBuffer(6L);
      try { 
        buffer0.require(1274L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeLongLe(42L);
      buffer_UnsafeCursor0.buffer.readShort();
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.buffer.readString(charset0);
      buffer1.writeDecimalLong((-1L));
      long long0 = buffer_UnsafeCursor0.buffer.readDecimalLong();
      assertTrue(buffer1.exhausted());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSource0.buffer.rangeEquals(1000000L, byteString0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)45;
      Buffer buffer2 = realBufferedSource0.buffer.write(byteArray0);
      Buffer buffer3 = buffer2.writeIntLe(2145803300);
      buffer1.writeDecimalLong((byte) (-87));
      Buffer buffer4 = buffer3.writeLong(291L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer4.writeString("/`E48v|}'yRQuVU", 39, (int) (byte) (-67), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -67 < 39
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 71776119061217280L;
      Pipe pipe0 = new Pipe(71776119061217280L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("", 11, (-2147268683));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -2147268683 < 11
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      byte byte0 = (byte)100;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer2.readByte();
      String string0 = "okio.Buffer";
      try { 
        buffer0.skip((byte)100);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)7, (int) (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=7 byteCount=7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)49;
      buffer0.clear();
      Charset.defaultCharset();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong((byte)49);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(9223L);
      buffer1.readUtf8Line();
      buffer0.emit();
      long long0 = buffer_UnsafeCursor1.buffer.size();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.require((-7L));
      buffer0.readByte();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink.md5(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = new Buffer();
      buffer1.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.offset = (long) (-1);
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.rangeEquals(1388L, byteString0, (-1), (-2352));
      long long0 = buffer_UnsafeCursor0.offset;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-2352));
      assertEquals(5L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-13);
      Charset.defaultCharset();
      buffer0.writeDecimalLong((byte)91);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      String string0 = "3^s.$+t{`_Ne!]|";
      int int0 = (-2309);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1750L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 4294967295L;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(128);
      buffer0.hashCode();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer1.readAndWriteUnsafe();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      Buffer buffer3 = buffer2.write(byteArray0);
      realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer3.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(29L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(8192L);
      buffer2.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      buffer0.readByte();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)2;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.readByte();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x5b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeLongLe((-72057594037927936L));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      long long0 = buffer1.read(realBufferedSource0.buffer, 9L);
      assertEquals((-1L), long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      boolean boolean0 = realBufferedSource0.buffer.request(4278190080L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.request(9L);
      // Undeclared exception!
      try { 
        buffer0.write(buffer_UnsafeCursor0.buffer, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, 10L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      Buffer buffer2 = buffer0.writeDecimalLong(2510L);
      buffer2.sha512();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.select(options0);
      long long0 = buffer3.completeSegmentByteCount();
      assertEquals(4L, buffer1.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.snapshot(192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=192
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      Charset.defaultCharset();
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha512();
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Segment segment0 = buffer0.head;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(386);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(2L);
      ByteString byteString0 = buffer0.snapshot();
      long long0 = buffer1.indexOf(byteString0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.snapshot();
      buffer1.writeDecimalLong(4278190080L);
      assertEquals(10L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.snapshot();
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(4278190080L);
      assertEquals(10L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeLongLe(13L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      int int0 = buffer_UnsafeCursor0.seek(0L);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Pipe pipe0 = new Pipe(244L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)87;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer0.write(byteArray0);
      buffer1.indexOfElement((ByteString) null);
      buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((byte) (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -20
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint(57343);
      ByteString[] byteStringArray0 = new ByteString[3];
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[1] = byteString1;
      ByteString byteString2 = ByteString.decodeBase64("");
      byteStringArray0[2] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      long long0 = buffer0.completeSegmentByteCount();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(gzipSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      try { 
        realBufferedSource0.indexOf((byte)11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      buffer_UnsafeCursor0.buffer.clone();
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOfElement(byteString0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink1.buffer();
      buffer0.readUtf8();
      Buffer buffer3 = buffer2.writeLong(0L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink0.emit();
      realBufferedSink1.buffer.indexOf(byteString0, 2L);
      realBufferedSink0.buffer();
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer0.emitCompleteSegments();
      buffer3.writeUtf8("");
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      Pipe pipe1 = new Pipe((byte)2);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.snapshot((int) (byte)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong((byte)126);
      realBufferedSource0.buffer.readShortLe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      Buffer buffer1 = realBufferedSink0.buffer.write(byteArray0);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      buffer1.read(buffer3, 0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readUnsafe();
      Buffer buffer4 = buffer_UnsafeCursor1.buffer;
      Buffer buffer5 = buffer4.buffer();
      buffer2.md5();
      try { 
        buffer5.skip(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      pipe0.sinkClosed = true;
      byteArray0[1] = (byte)49;
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)49);
      // Undeclared exception!
      try { 
        buffer1.writeString("bcvvZ|x:.AowS4+F", (int) (byte)49, (int) (byte)49, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 49 > 16
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[6] = (byte) (-87);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString0 = buffer2.snapshot();
      buffer2.readByte();
      buffer2.readHexadecimalUnsignedLong();
      byteString0.indexOf(byteArray0, 4331);
      buffer2.hmacSha512(byteString0);
      buffer0.segmentSizes();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      buffer1.indexOf((byte) (-96));
      buffer_UnsafeCursor0.buffer.writeShortLe(528);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      HashingSink.md5(bufferedSink0);
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink2.buffer();
      realBufferedSink1.buffer.writeDecimalLong(1951L);
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.readByteString();
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeDecimalLong(32L);
      assertEquals(2L, buffer1.size());
      
      boolean boolean0 = realBufferedSink1.buffer.rangeEquals(10000000000000L, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)8;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writableSegment((byte)8);
      buffer0.snapshot();
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong((byte)8);
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null, (long) (byte)91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.buffer();
      buffer1.writeDecimalLong((-1152921504606846976L));
      assertEquals(20L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      buffer1.write(byteArray0);
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer2 = pipe0.buffer;
      Charset.defaultCharset();
      Buffer buffer3 = realBufferedSource0.buffer.writeDecimalLong((-1474L));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(14L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer1.head = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      buffer0.readUtf8Line(0L);
      assertEquals(1731L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeInt(1073741824);
      assertEquals(4L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      pipe0.sinkClosed = true;
      byteArray0[1] = (byte)49;
      Charset.defaultCharset();
      buffer0.writeDecimalLong((byte)49);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.rangeEquals((long) (-1), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      buffer_UnsafeCursor0.resizeBuffer(71776119061217280L);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocateDirect(2031);
      Pipe pipe0 = new Pipe(86L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.buffer.readByteString();
      Buffer buffer2 = realBufferedSink1.buffer;
      Segment segment0 = new Segment();
      buffer2.head = segment0;
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.writeDecimalLong((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(2031);
      Pipe pipe1 = new Pipe(2031);
      Buffer buffer0 = pipe1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(2031);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString0 = ByteString.encodeString(";U\"Mage1|+WX k ", charset0);
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteString0.base64();
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options.of(byteStringArray0);
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      ByteString byteString1 = buffer0.snapshot(9);
      assertEquals(9, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(194);
      byteArrayOutputStream0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = pipe0.buffer;
      buffer2.readAll(realBufferedSink0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.writeDecimalLong(10000000000L);
      assertEquals(11L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      pipe0.sinkClosed = true;
      byteArray0[1] = (byte)49;
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer((byte)49);
      long long0 = buffer_UnsafeCursor0.buffer.readLongLe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1L));
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer0.outputStream();
      buffer1.segmentSizes();
      buffer_UnsafeCursor0.buffer.skip((-1L));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1L));
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 2627L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(2823L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      int int0 = 2048;
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(87L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf((byte)0, 87L);
      pipe0.sinkClosed = true;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      int int0 = buffer_UnsafeCursor0.seek((-1));
      assertEquals((-1), int0);
      
      buffer_UnsafeCursor0.resizeBuffer(32L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      pipe0.sourceClosed = false;
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      buffer1.readByteArray();
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      Buffer buffer3 = buffer2.writeDecimalLong((-5296L));
      buffer3.writeByte((byte)71);
      buffer3.indexOf((byte)71, 15L);
      short short0 = buffer3.readShort();
      assertEquals(22L, buffer3.size());
      assertEquals((short)12592, short0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      buffer0.readUtf8Line();
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.toString();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.rangeEquals(747L, byteString0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      buffer1.write(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = buffer0.writeDecimalLong(280375465082880L);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.equals(buffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(57366);
      Charset.defaultCharset();
      Buffer buffer2 = buffer1.writeDecimalLong(57366);
      Buffer buffer3 = buffer0.buffer();
      // Undeclared exception!
      try { 
        buffer3.readAll(buffer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      pipe0.sourceClosed = false;
      buffer_UnsafeCursor0.seek((-1));
      buffer_UnsafeCursor0.resizeBuffer(32L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-87);
      realBufferedSource0.exhausted();
      byteArray0[3] = (byte)49;
      byteArray0[2] = (byte) (-67);
      byteArray0[8] = (byte)49;
      byteArray0[5] = (byte)45;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readUtf8();
      buffer2.writeLong((byte) (-87));
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.sha1();
      assertFalse(buffer2.exhausted());
      
      short short0 = realBufferedSink0.buffer.readShortLe();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("A%~1,", charset0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer1.writeDecimalLong(10000000000000L);
      assertEquals(19L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      Buffer buffer2 = buffer0.writeDecimalLong(2510L);
      ByteString byteString0 = buffer2.sha512();
      Buffer buffer3 = (Buffer)buffer1.write((Source) buffer2, (-1797L));
      buffer1.hmacSha256(byteString0);
      buffer3.writableSegment(96);
      assertEquals(4L, buffer1.size());
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-42);
      Buffer buffer2 = buffer0.write(byteArray0);
      buffer1.require(0L);
      buffer2.readByte();
      buffer0.readHexadecimalUnsignedLong();
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Pipe pipe0 = new Pipe(3024L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[0] = (byte)49;
      byteArray0[6] = (byte) (-87);
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.readByte();
      buffer0.readHexadecimalUnsignedLong();
      buffer_UnsafeCursor0.resizeBuffer(4L);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      long long0 = (-593L);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-2123622717), (-274));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-2123622717 byteCount=-274
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Locale locale0 = Locale.GERMANY;
      locale0.stripExtensions();
      MockFile mockFile0 = new MockFile("endIndex > string.length: ", "endIndex > string.length: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer0 = pipe0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) pipedOutputStream0, 10L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1L));
      // Undeclared exception!
      try { 
        buffer1.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString0 = buffer2.snapshot();
      buffer2.readByte();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.indexOf(byteArray0, 1431655765);
      buffer1.hmacSha512(byteString1);
      buffer_UnsafeCursor0.buffer.segmentSizes();
      realBufferedSource0.buffer.skip((byte) (-87));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-1));
      try { 
        realBufferedSource0.buffer.readFrom((InputStream) pipedInputStream0, 100000000000L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer1 = realBufferedSink0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(194);
      byteArrayOutputStream1.close();
      Charset.defaultCharset();
      realBufferedSink0.buffer.writeDecimalLong(10000L);
      long long0 = buffer1.readDecimalLong();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(10000L, long0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Pipe pipe0 = new Pipe(1483L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[5] = (byte)41;
      byteArray0[0] = (byte)0;
      byteArray0[6] = (byte) (-87);
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.readByte();
      Integer integer0 = new Integer((byte)0);
      ByteString byteString0 = new ByteString((byte[]) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("`lD3ov}1fUH");
      Locale locale0 = new Locale("vC3hXo");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "vC3hXo";
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) (byte) (-87);
      objectArray0[4] = (Object) byteString0;
      locale0.getDisplayLanguage();
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "l9jrq", objectArray0);
      buffer0.writeTo((OutputStream) printStream0, (long) (byte)0);
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-72057594037927936L));
      buffer1.readShort();
      assertEquals(6L, buffer1.size());
      
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeDecimalLong(3809L);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(9223372036773052408L);
      buffer0.readUtf8CodePoint();
      buffer1.size();
      try { 
        buffer1.readUtf8Line(7L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSink.md5(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null, 101, (int) (byte) (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 10L;
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer1.readFrom((InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 4278190L, 657L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=4278190 byteCount=657
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.buffer();
      realBufferedSource1.buffer.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource1.buffer.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo((OutputStream) byteArrayOutputStream0, (long) (-1), (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink.md5(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      buffer1.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.offset = 1377L;
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.rangeEquals(1377L, byteString0, (-1), (-2352));
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, 395L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1L));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) bufferedInputStream0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      long long0 = buffer0.readAll(hashingSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong((byte)126);
      buffer0.readUnsafe();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals(1L, long0);
      assertEquals(3L, buffer1.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)0);
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      buffer1.writeShort((-1));
      buffer1.writeDecimalLong(9223372L);
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer2 = pipe0.buffer;
      buffer2.snapshot();
      buffer2.readByte();
      buffer2.readHexadecimalUnsignedLong();
      buffer1.emitCompleteSegments();
      assertEquals(5L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = realBufferedSink0.buffer.write(byteArray0);
      Buffer buffer2 = realBufferedSink0.buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("HmacSHA1");
      Buffer buffer3 = buffer2.copyTo((OutputStream) mockPrintStream0);
      buffer1.writeUtf8CodePoint(18);
      short short0 = buffer3.readShort();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((short)18, short0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)17;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-7);
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer1.indexOf(byteString0, (long) (byte)31);
      try { 
        buffer1.writeAll(realBufferedSource0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-94));
      buffer0.clone();
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = (Buffer)buffer0.emit();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      long long0 = 99999999999999996L;
      // Undeclared exception!
      try { 
        buffer0.write((Source) null, 99999999999999996L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null, (-2416), (-2416));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-63);
      buffer0.write(byteArray0);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      try { 
        buffer0.readString((-465L), (Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-465
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, 1790L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.start = 2147184472;
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer_UnsafeCursor0.buffer, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, (long) (-1), (-1287L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      short short0 = buffer_UnsafeCursor0.buffer.readShortLe();
      assertTrue(buffer0.exhausted());
      assertEquals((short)12589, short0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Pipe pipe0 = new Pipe(474L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      buffer0.inputStream();
      realBufferedSink0.timeout();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      buffer0.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      buffer_UnsafeCursor0.buffer.writeDecimalLong(100035L);
      assertEquals(6L, buffer0.size());
      
      long long0 = buffer_UnsafeCursor0.buffer.readDecimalLong();
      assertEquals(100035L, long0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeDecimalLong(1L);
      buffer0.readByteString(1L);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Pipe pipe0 = new Pipe(2582L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOfElement(byteString0, 2582L);
      buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      Buffer buffer1 = new Buffer();
      buffer1.writeDecimalLong(1095216660480L);
      assertEquals(13L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer1 = pipe0.buffer;
      ByteString byteString0 = buffer1.snapshot();
      buffer1.readByte();
      buffer1.readHexadecimalUnsignedLong();
      byteString0.indexOf(byteArray0, 4331);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-2935L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -2935
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      long long0 = buffer1.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      buffer1.readByteArray(0L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = realBufferedSink0.buffer.write(byteArray0);
      realBufferedSink0.buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer2 = buffer1.writeUtf8("endIndex > string.lefgUh: ", 3, 3);
      int int0 = (-4931);
      // Undeclared exception!
      try { 
        buffer2.writableSegment((-4931));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Pipe pipe0 = new Pipe(65536L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      int int0 = (-3602);
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, 43, (-3602), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink.md5(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1371L);
      ByteString byteString0 = buffer1.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.offset = 1371L;
      Buffer buffer2 = buffer1.clone();
      long long0 = buffer_UnsafeCursor0.offset;
      buffer1.write(byteString0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer buffer3 = buffer2.writeDecimalLong(8192L);
      // Undeclared exception!
      try { 
        buffer3.readByteString((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 13, 0, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 0 < 13
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong(2147483647L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.writeUtf8("cC<-F3|dfPw1<");
      try { 
        realBufferedSink1.buffer.write((Source) realBufferedSink0.buffer, 2147483647L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HashingSink.md5(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      buffer1.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.close();
      buffer0.clone();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1377L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      pipe0.sinkClosed = true;
      byteArray0[1] = (byte)126;
      Charset.defaultCharset();
      buffer0.writeDecimalLong((byte)126);
      buffer0.readShortLe();
      buffer_UnsafeCursor0.next();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      int int0 = buffer_UnsafeCursor0.seek(1);
      assertEquals(1L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer0.readAll(buffer_UnsafeCursor0.buffer);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeDecimalLong(10000000000000000L);
      assertEquals(17L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(92L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, 92L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-87);
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer1 = pipe0.buffer;
      ByteString byteString0 = buffer1.snapshot();
      buffer1.readByte();
      buffer1.readHexadecimalUnsignedLong();
      byteString0.indexOf(byteArray0, 4331);
      buffer1.hmacSha512(byteString0);
      buffer0.segmentSizes();
      try { 
        buffer1.skip((byte)91);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1750L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteArray(1248L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1248
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(87L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("oe -0.i2d(}%}W S0x", 57, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 57 > 18
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte byte0 = (byte)35;
      Pipe pipe0 = new Pipe(100L);
      buffer0.readByteString();
      realBufferedSink0.buffer.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      realBufferedSink0.buffer.writeUtf8CodePoint(57388);
      realBufferedSink0.buffer.copyTo(buffer1, 0L, 0L);
      Pipe pipe0 = new Pipe(3309L);
      Buffer buffer2 = pipe0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink1.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Pipe pipe0 = new Pipe(1047L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "offset=%s > size=%s");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      realBufferedSource0.buffer.readAll(buffer0);
      Charset.defaultCharset();
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.rangeEquals((long) (byte)0, byteString0, (int) (byte)0, (int) (byte)0);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-86);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      String string0 = "VYg4W}4! NTZ";
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeShort((-1));
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.write((Source) buffer_UnsafeCursor0.buffer, (long) (-1));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      byteArray0[5] = (byte)41;
      byteArray0[4] = (byte) (-67);
      byteArray0[6] = (byte) (-87);
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      Buffer buffer1 = pipe0.buffer;
      ByteString byteString0 = buffer1.snapshot();
      buffer1.readByte();
      buffer1.readHexadecimalUnsignedLong();
      byteString0.indexOf(byteArray0, 4331);
      buffer1.hmacSha512(byteString0);
      buffer0.segmentSizes();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Charset.defaultCharset();
      buffer1.writeUtf8("");
      boolean boolean0 = buffer2.rangeEquals(3030L, byteString0);
      assertEquals(5L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("9");
      realBufferedSource0.buffer.writeTo((OutputStream) mockPrintStream0);
      ByteArrayOutputStream byteArrayOutputStream1 = null;
      try {
        byteArrayOutputStream1 = new ByteArrayOutputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(240);
      hashingSink0.hash();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(71);
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSink0.buffer.indexOfElement(byteString1, (long) 71);
      long long0 = ((RealBufferedSink) bufferedSink0).buffer.completeSegmentByteCount();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = 9223372L;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.seek(9223372L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.request((-1));
      ByteString byteString0 = buffer0.sha256();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer0.hmacSha256(byteString0);
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      buffer1.writeLongLe(0L);
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      int int0 = 64;
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 61, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(128);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertFalse(buffer0.exhausted());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Pipe pipe0 = new Pipe(92L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(92L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeInt(128);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.buffer.readString(charset0);
      buffer1.writeDecimalLong((-2049L));
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(9223372036773052388L);
      buffer0.readUtf8CodePoint();
      assertEquals(7L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      try { 
        buffer0.readUtf8LineStrict(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 1733L;
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer1.head = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      pipe0.sourceClosed = false;
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      byte[] byteArray0 = buffer1.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      buffer0.write(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      buffer_UnsafeCursor1.buffer.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[6] = (byte) (-67);
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
      
      byteArray1[3] = (byte)49;
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte)49;
      byteArray1[5] = (byte)45;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeLong((byte) (-87));
      assertFalse(buffer2.exhausted());
      
      realBufferedSink0.buffer.readLongLe();
      ByteString byteString0 = new ByteString(byteArray1);
      buffer3.indexOf(byteString0, 6L);
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer4.emit();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      assertEquals(2L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(71);
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSink0.buffer.indexOfElement(byteString1, (long) 71);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)36;
      byte byte0 = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)107;
      ByteString byteString2 = new ByteString(byteArray0);
      buffer0.rangeEquals(9223372036854775807L, byteString1, (int) (byte)36, (int) (byte)101);
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Pipe pipe0 = new Pipe(1264L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readByteArray(148L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=148
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Timeout timeout0 = buffer1.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.buffer();
      buffer2.writeByte((-1));
      buffer0.writeDecimalLong(4278190080L);
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashingSink.md5(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      ByteString byteString0 = buffer1.readByteString();
      buffer1.writeDecimalLong(9223372L);
      buffer1.rangeEquals(1377L, byteString0);
      assertEquals(7L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(9223372036773052408L);
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer buffer1 = buffer0.writeDecimalLong(1161L);
      long long0 = buffer1.readDecimalLong();
      assertTrue(buffer0.exhausted());
      assertEquals(1161L, long0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      long long1 = buffer0.indexOfElement((ByteString) null);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      String string0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 1020, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[7];
      buffer_UnsafeCursor0.buffer.clone();
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)49;
      buffer0.write(byteArray0);
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(162);
      buffer_UnsafeCursor0.buffer.writeTo((OutputStream) byteArrayOutputStream0, 3L);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.toString();
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha1(byteString0);
      buffer0.request(1000000L);
      // Undeclared exception!
      try { 
        buffer0.readByteString(4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor1.close();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(100000L);
      buffer_UnsafeCursor0.buffer.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer1.readUtf8((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString("bcvvZ|x:.AowS4+F", (-976), (-976), (Charset) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -976
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      ByteBuffer.allocate(2048);
      Pipe pipe0 = new Pipe(87L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("size == 0");
      Object object0 = new Object();
      Locale locale0 = new Locale("lTI%2");
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      pipe0.sinkClosed = false;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeString("x. b", 0, 2048, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2048 > 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2048);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = byteString0.md5();
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.indexOf(byteString1, 4278190080L);
      buffer2.snapshot();
      Charset.defaultCharset();
      Buffer buffer3 = buffer2.buffer();
      try { 
        buffer3.readUtf8LineStrict(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[3] = (byte)49;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)49;
      byteArray0[5] = (byte)45;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSource0.buffer.rangeEquals(747L, byteString0);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      buffer1.write(byteArray0);
      buffer0.writeDecimalLong((-994L));
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      Pipe pipe0 = new Pipe(244L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[2] = (byte)77;
      Buffer buffer1 = buffer0.write(byteArray0);
      Buffer buffer2 = pipe0.buffer;
      ByteString byteString0 = buffer2.snapshot();
      Buffer buffer3 = buffer1.writeDecimalLong((byte) (-20));
      long long0 = buffer3.indexOf(byteString0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(gzipSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.toString();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8Line(2L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Pipe pipe0 = new Pipe(3030L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8("okio.Timeout", 1442, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 49 < 1442
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)50;
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      MockFile mockFile0 = new MockFile("endIndex > string.length: ", "endIndex > string.length: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) (byte) (-59);
      objectArray0[4] = (Object) (byte) (-27);
      mockPrintStream0.printf(locale1, "", objectArray0);
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(57388);
      Pipe pipe0 = new Pipe(8L);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(5L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=5 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      Pipe pipe0 = new Pipe(244L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(244L);
      buffer0.completeSegmentByteCount();
      buffer_UnsafeCursor0.buffer.readByteArray(244L);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.toString();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8Line((-442L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-442
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeInt(128);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(128);
      Pipe pipe0 = new Pipe(128);
      Pipe pipe1 = new Pipe(128);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.snapshot();
      buffer0.writeDecimalLong(9L);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1733L);
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(1733L);
      buffer1.readByteArray();
      Buffer buffer2 = buffer1.writeDecimalLong(100000000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.outputStream();
      realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeDecimalLong((-1));
      // Undeclared exception!
      try { 
        buffer3.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: 10000000000000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer1 = buffer0.writeTo((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 194, 194);
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, (long) 194);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashingSink.md5(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1377L);
      buffer1.readByteString();
      buffer1.readFully(byteArray0);
      buffer1.writeDecimalLong(9223372L);
      buffer1.readFully(byteArray0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(128);
      ByteString[] byteStringArray0 = new ByteString[2];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Pipe pipe0 = new Pipe(244L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)9;
      Buffer buffer1 = buffer0.write(byteArray0);
      Buffer buffer2 = pipe0.buffer;
      buffer0.snapshot();
      buffer2.readByte();
      buffer2.readInt();
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, (long) (byte)9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer0.outputStream();
      buffer_UnsafeCursor0.buffer.readUtf8();
      buffer_UnsafeCursor0.buffer.clear();
      buffer_UnsafeCursor0.buffer.writeLongLe((-1));
      String string0 = buffer_UnsafeCursor0.buffer.toString();
      assertEquals("[hex=ffffffffffffffff]", string0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong((-1412L));
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("7KRqQj", (-553), (-553));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -553
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-87);
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
      
      byteArray0[3] = (byte)49;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)49;
      byteArray0[5] = (byte)45;
      HashingSource.md5(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readUtf8();
      Buffer buffer3 = buffer2.writeLong((byte) (-87));
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink0.emit();
      buffer3.indexOf(byteString0, 6L);
      realBufferedSink0.buffer();
      assertFalse(buffer0.exhausted());
      
      Buffer buffer4 = realBufferedSink0.buffer;
      assertTrue(buffer4.exhausted());
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("$1EX0XKC=F]V9Zyp1", charset0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteString0.hex();
      long long0 = 9223372L;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      byteString1.write(buffer0);
      // Undeclared exception!
      try { 
        byteString1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeDecimalLong(1385L);
      buffer1.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
      buffer_UnsafeCursor0.buffer.equals(buffer1);
      buffer_UnsafeCursor0.buffer.toString();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeLong((-2076L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)38;
      buffer0.indexOf((byte)12, (long) (byte)38, (long) (byte)38);
      ByteString byteString0 = realBufferedSource0.buffer.sha1();
      assertEquals(20, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf((byte)49, (-248L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-248 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      String string0 = buffer_UnsafeCursor0.buffer.toString();
      assertEquals(2L, buffer0.size());
      assertEquals("[text=-1]", string0);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Pipe pipe0 = new Pipe(1952257861);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }
}
