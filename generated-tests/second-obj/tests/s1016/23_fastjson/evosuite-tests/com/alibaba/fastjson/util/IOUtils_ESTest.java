/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:02:36 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[6];
      byte[] byteArray0 = new byte[0];
      IOUtils.decodeUTF8(byteArray0, (-709), (-5), charArray0);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 2, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 6, 6, iOUtils0.specicalFlags_singleQuotes);
      PipedWriter pipedWriter0 = new PipedWriter();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils.isIdent('J');
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65462
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.properties");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize((-3351L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("*KJ3G(_#;?E");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 199, 199, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 199
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.getChars(780L, (-16), iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.getChars((-20), 191, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 190
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.getChars(25, 25, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 1033, 1033);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", (-1425), (-1425));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u00AE');
      boolean boolean1 = IOUtils.isValidJsonpQueryParam("!C");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.stringSize((-1027));
      IOUtils.isValidJsonpQueryParam(".");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.replaceWith(".");
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("3zB/_>1eAE;");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertTrue(charBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("_%'p[aH4C5-Wqg2Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("read string from rader eror");
      char[] charArray0 = new char[3];
      int int0 = IOUtils.decodeUTF8(byteArray0, 1, '8', charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.decodeBase64("iSbH.");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = IOUtils.stringSize(2147483647L);
      assertEquals(10, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'B';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 10, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-65), (-1286), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1287
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.alibaba.fastjson.JSONException");
      IOUtils.close(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils.decodeBase64(".Sb");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 13, 13);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-53), (byte)99, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-70), (byte) (-40), (byte) (-91)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("`[{P");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = IOUtils.firstIdentifier('g');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.decodeBase64("4");
      char[] charArray0 = new char[2];
      charArray0[1] = '<';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 144, 144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 144
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u00AE');
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u00AE';
      byte[] byteArray0 = new byte[0];
      int int1 = IOUtils.decodeUTF8(byteArray0, (-679), 0, charArray0);
      assertEquals(0, int1);
      
      IOUtils.decodeBase64("4");
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeBase64(",LHu5Btaq*_:*", 2, 0);
      boolean boolean1 = IOUtils.isIdent('t');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 25;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8((byte[]) null, 25, 25, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, (byte)21, 8, iOUtils0.CA);
      assertEquals(8, int1);
      
      int int2 = IOUtils.stringSize(192);
      assertEquals(3, int2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars((-969L), (-1234), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.decodeBase64("u_^jNC7L~]\">o&+X<8", 2, 2);
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      IOUtils.isIdent('X');
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readAll(charArrayReader0);
      IOUtils.getStringProperty("X0jGBDR8bB5K");
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(2146025750);
      // Undeclared exception!
      try { 
        IOUtils.getChars(2146025750, 41, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 1, 'H', charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("read srig from rader eror");
      char[] charArray0 = new char[3];
      int int0 = IOUtils.decodeUTF8(byteArray0, 3, '8', charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = IOUtils.firstIdentifier('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      int int0 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[4] = (byte)0;
      byteArray0[7] = (byte) (-9);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (byte)3, 'f', charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(780L, 17, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.getStringProperty("com.alibaba.fastjson.util.UTF8Decoder");
      char[] charArray0 = new char[2];
      charArray0[1] = 'C';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)91, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(2147483647L, (-403), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -404
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOUtils.stringSize(2718);
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[0] = '{';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      // Undeclared exception!
      try { 
        IOUtils.getChars(2147483652L, 2718, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2717
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      ByteBuffer byteBuffer0 = charset0.encode("]KY");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(charsetDecoder0, byteBuffer1, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 2, 2);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-28);
      byteArray0[3] = (byte)117;
      IOUtils.decodeUTF8(byteArray0, 1, 1157, charArray0);
      IOUtils.stringSize((long) (byte) (-28));
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-100), (-8), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '(';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 0, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = IOUtils.stringSize(33);
      assertEquals(2, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'p';
      charArray0[2] = '3';
      charArray0[3] = '#';
      charArray0[4] = 'c';
      IOUtils.getChars(33, 2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '3', '#', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = IOUtils.stringSize(68);
      assertEquals(2, int0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = '\u00E4';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      IOUtils.decodeUTF8(byteArray0, '\u00E4', 0, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 8257536, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOUtils.stringSize((-1L));
      char[] charArray0 = new char[6];
      IOUtils.getChars((byte)12, 2, charArray0);
      IOUtils.isIdent('\u0000');
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("*KJ3G(_#;?E");
      byte[] byteArray1 = IOUtils.decodeBase64("p0/");
      assertArrayEquals(new byte[] {(byte) (-89), (byte)79}, byteArray1);
      
      char[] charArray0 = new char[4];
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, (byte)3, charArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-99), (byte) (-58), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-4)}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 3, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65495
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOUtils.stringSize(2147483647L);
      char[] charArray0 = new char[17];
      charArray0[0] = '(';
      charArray0[1] = '(';
      IOUtils.getChars((-2507), 10, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1L), 86, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 85
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils iOUtils1 = new IOUtils();
      IOUtils.getChars((byte) (-128), 47, iOUtils0.ASCII_CHARS);
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-64);
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'E';
      charArray0[2] = '*';
      IOUtils.decodeUTF8(byteArray0, (byte)2, (byte)2, charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = '-';
      charArray1[1] = '*';
      charArray1[2] = 'E';
      charArray1[3] = '*';
      charArray1[4] = '*';
      charArray1[5] = 'E';
      charArray1[6] = '-';
      charArray1[7] = '-';
      charArray1[8] = 'M';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)2, (int) (byte) (-64), charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("*hm70b#q1&hN^");
      String string0 = "ovz8AGhR2RV16#K*";
      IOUtils.getStringProperty("ovz8AGhR2RV16#K*");
      IOUtils.isValidJsonpQueryParam("ovz8AGhR2RV16#K*");
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      IOUtils.decodeUTF8(byteArray0, 2, 2, charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      int int0 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      byteArray0[7] = (byte) (-9);
      char[] charArray0 = new char[8];
      IOUtils.decodeUTF8(byteArray0, (byte)3, 'f', charArray0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 3, 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65495
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("read srYg prom r.ader ekor");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      int int1 = IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      assertEquals((-1), int1);
      
      int int2 = IOUtils.stringSize(39);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray1 = IOUtils.specicalFlags_doubleQuotes;
      byte[] byteArray2 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 42, 42);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = iOUtils0.UTF8.encode(charBuffer0);
      uTF8Decoder0.decode(byteBuffer1);
      uTF8Decoder1.decode(byteBuffer1);
      IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
      int int1 = IOUtils.decodeUTF8(byteArray2, 2, 94, iOUtils0.ASCII_CHARS);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("0/0=)");
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-3)}, byteArray0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("0/0=)", 2, 2);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray1 = IOUtils.specicalFlags_doubleQuotes;
      byte[] byteArray2 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 42, 42);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("");
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = iOUtils0.UTF8.encode(charBuffer0);
      CharBuffer charBuffer1 = uTF8Decoder0.decode(byteBuffer1);
      uTF8Decoder0.decode(byteBuffer1);
      IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer1);
      int int1 = IOUtils.decodeUTF8(byteArray2, 2, 2, iOUtils0.ASCII_CHARS);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOUtils.isIdent('\u010A');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IOUtils.firstIdentifier('\u010D');
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '\u010D';
      charArray0[2] = '4';
      charArray0[4] = '}';
      IOUtils.loadPropertiesFromFile();
      IOUtils.getStringProperty("\"vGo]vE,N");
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize((-206));
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
