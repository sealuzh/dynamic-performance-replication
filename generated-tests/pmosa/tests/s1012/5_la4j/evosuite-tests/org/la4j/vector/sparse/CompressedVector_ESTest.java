/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 00:01:01 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2947L));
      // Undeclared exception!
      try { 
        CompressedVector.random(71, (double) 71, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1634);
      CompressedVector compressedVector0 = CompressedVector.random(1634, 0.0, (Random) mockRandom0);
      assertEquals(1634, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      Vector.zero(0);
      int int1 = 0;
      Vector.unit(0);
      double double0 = 2034.04839746;
      // Undeclared exception!
      try { 
        mockRandom0.ints(0L, 16, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 997.4732762072906;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector0.nonZeroAt(640);
      assertFalse(boolean0);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll(1);
      boolean boolean0 = compressedVector0.nonZeroAt((-20));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertSame(compressedVector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt(8);
      assertFalse(boolean0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      compressedVector0.swapElements(0, 0);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("hkxRX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(3, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(847);
      compressedVector0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)847).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(847, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      double double0 = 0.0;
      compressedVector0.setAll(0.0);
      compressedVector0.toDiagonalMatrix();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double1 = 1130.7710076983;
      MockRandom mockRandom0 = new MockRandom(8);
      // Undeclared exception!
      try { 
        SparseVector.random(8, 1130.7710076983, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      compressedVector0.setAll(0);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(",hxmOX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(880);
      compressedVector0.toColumnMatrix();
      compressedVector0.nonZeroAt(880);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)3, (byte)112, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-1.0));
      linkedList0.add(double0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Double double1 = new Double(795);
      linkedList0.offerFirst(double1);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(795, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(1);
      Integer integer0 = new Integer(866);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      compressedVector0.toDenseVector();
      compressedVector0.subtract(1960.0);
      double double0 = (-415.30121);
      MockRandom mockRandom0 = new MockRandom(2017L);
      // Undeclared exception!
      try { 
        CompressedVector.random((-2040), 2062.021842497629, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1237.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("Uy+uIH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.euclideanNorm();
      compressedVector0.multiply(1.0);
      compressedVector1.toMatrixMarket();
      compressedVector0.setAll(0.0);
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.infinityNorm();
      boolean boolean0 = compressedVector0.nonZeroAt(32);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-472.19122259);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int[] intArray0 = new int[0];
      CompressedVector compressedVector0 = new CompressedVector(0, 0, doubleArray0, intArray0);
      compressedVector0.iterator();
      MockRandom mockRandom0 = new MockRandom(2400);
      CompressedVector.random(2400, 0.0, (Random) mockRandom0);
      Vector.random(2400, mockRandom0);
      compressedVector0.iterator();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      VectorOperation<Object> vectorOperation0 = (VectorOperation<Object>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      compressedVector0.apply(vectorOperation0);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector0.non(vectorPredicate0);
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll(1);
      // Undeclared exception!
      try { 
        compressedVector0.is((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      compressedVector0.update((VectorFunction) null);
      compressedVector0.copyOfLength(1641);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(",hxmOX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.divide(100.0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>(hashMap0);
      Vector.fromMap(hashMap1, 0);
      Vector vector0 = compressedVector0.copyOfLength(8);
      compressedVector0.nonZeroAt(0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.toString();
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      Float float0 = new Float(1274.0F);
      Float.min(0.0F, 0.0F);
      hashMap2.getOrDefault(vector0, float0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap2, (-294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -294
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6, 6);
      compressedVector0.toCSV();
      compressedVector0.swapElements(2107, 1201);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(6, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      Locale locale0 = Locale.FRANCE;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("EIGEN", decimalFormatSymbols0);
      decimalFormat0.applyLocalizedPattern("EIGEN");
      compressedVector0.mkString((NumberFormat) decimalFormat0);
      Vector.unit(2254);
      compressedVector0.product();
      compressedVector0.iterator();
      compressedVector0.swapElements((-1059), (-1059));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1000, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      compressedVector0.nonZeroIterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.setAll(8);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(8, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6, 6);
      compressedVector0.setAll((-2836.0));
      CompressedVector.fromCSV("  ");
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6, 6);
      compressedVector0.spliterator();
      String string0 = compressedVector0.toCSV();
      assertEquals("0.000, 0.000, 0.000, 0.000, 0.000, 0.000", string0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)6, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      Double double0 = new Double((-4288.761826272));
      Double double1 = new Double(2737.0);
      Double.max((byte)16, (byte)16);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-576));
      hashMap0.put(integer0, double1);
      Integer integer1 = new Integer((byte)16);
      int int0 = Long.SIZE;
      Double double2 = new Double((-1223.2838671232));
      hashMap0.put(integer0, double2);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1, 1);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      MockRandom mockRandom0 = new MockRandom(4186);
      // Undeclared exception!
      try { 
        CompressedVector.random(4186, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector1.nonZeroAt(3);
      assertTrue(boolean0);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      
      byte[] byteArray0 = ((CompressedVector) sparseVector0).toBinary();
      assertSame(sparseVector0, compressedVector0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll(1);
      compressedVector0.swapElements(0, 0);
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(880);
      compressedVector0.getOrElse(4, (-3829.888683));
      compressedVector0.setAll(4);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 880;
      CompressedVector compressedVector0 = new CompressedVector(880);
      compressedVector0.getOrElse(4, (-3829.888683));
      compressedVector0.setAll(4);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-3383), 855);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll(1);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll((-50.26926766334));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-4532), 876);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1);
      compressedVector0.setAll((-1867.8));
      compressedVector0.swapElements(831, (-1005));
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1, 1);
      compressedVector0.setAll(1);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2016, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1, 1);
      compressedVector0.setAll(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements((-4), 0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      String string0 = compressedVector0.toCSV();
      assertEquals("-2100.737", string0);
      
      NumberFormat.getNumberInstance();
      compressedVector0.toDiagonalMatrix();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(17);
      SparseVector sparseVector0 = SparseVector.fromCSV("-2100.737");
      hashMap0.put(integer0, (Double) (-2100.737));
      Integer integer1 = new Integer(0);
      Double double0 = new Double((-2100.737));
      hashMap0.put(integer0, double0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(0, vectorFunction0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll(1);
      compressedVector0.swapElements(1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2136), vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(880);
      compressedVector0.setAll(5);
      compressedVector0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      compressedVector0.swapElements((-1031), (-1031));
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1452.480931019;
      doubleArray0[1] = 1452.480931019;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 9.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      compressedVector1.blank();
      compressedVector0.toCSV();
      NumberFormat.getNumberInstance();
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<Vector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.setAll(1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector1.nonZeroAt(3);
      assertFalse(boolean0);
      assertEquals(6, compressedVector1.cardinality());
      
      byte[] byteArray0 = ((CompressedVector) sparseVector0).toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2052.1353003215913);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      compressedVector0.swapElements(7, 7);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(847);
      compressedVector0.getOrElse(4, 1785.26);
      compressedVector0.setAll(388.0);
      compressedVector0.swapElements(1356, (-4150));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1356, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 880;
      CompressedVector compressedVector0 = new CompressedVector(880);
      SparseVector.zero(1552, 1552);
      compressedVector0.setAll(4);
      int int1 = 855;
      compressedVector0.swapElements(4, 855);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(855, 880);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1452.480931019;
      doubleArray0[1] = 1452.480931019;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 9.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1364.495015171, 2330.3089, 0.0, 2.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.blank();
      compressedVector1.update(vectorFunction0);
      compressedVector1.blank();
      compressedVector0.toCSV();
      NumberFormat.getNumberInstance();
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<Vector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Double double0 = new Double(1.0);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 5);
      assertEquals(0, compressedVector1.cardinality());
      
      compressedVector1.updateAt(2, vectorFunction0);
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(880);
      SparseVector.zero(1572, 1572);
      compressedVector0.setAll(4);
      compressedVector0.swapElements(4, 855);
      assertEquals(880, compressedVector0.cardinality());
      
      Integer integer0 = new Integer(4);
      int int0 = Long.SIZE;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Double double0 = new Double(64);
      hashMap0.put(integer0, double0);
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 1572);
      CompressedVector.zero(870);
      compressedVector1.nonZeroIterator();
      assertEquals(1572, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      compressedVector0.setAll(1);
      compressedVector0.innerProduct(sparseVector0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-17), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2100.737);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toCSV();
      NumberFormat.getNumberInstance();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      vector0.add((Vector) compressedVector0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-4392);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(859);
      double double0 = compressedVector0.getOrElse(4, 859);
      assertEquals(859.0, double0, 0.01);
      
      compressedVector0.setAll(4);
      int int0 = Long.SIZE;
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 859);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-170), vectorFunction0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(12);
      compressedVector0.setAll(12);
      compressedVector0.swapElements((-6), (-6));
      double double0 = compressedVector0.getOrElse(9, 12);
      assertEquals(12.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(880);
      compressedVector0.getOrElse(4, 880);
      compressedVector0.setAll(4);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(4, (-499));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1);
      compressedVector0.setAll(810.09177863243);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-1113));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(880);
      Integer integer0 = new Integer(4);
      compressedVector0.sliceLeft(880);
      compressedVector0.swapElements(880, 880);
      compressedVector0.iterator();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(851);
      assertEquals(851, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2052.1353003215913);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.to(vectorFactory0);
      compressedVector0.copy();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-869));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1325;
      doubleArray0[1] = (double) 1325;
      doubleArray0[2] = (double) 1325;
      doubleArray0[3] = (double) 1325;
      doubleArray0[4] = (double) 1325;
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 1325;
      intArray0[2] = 4;
      intArray0[3] = 1325;
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[6] = 4;
      CompressedVector compressedVector0 = new CompressedVector(1325, 4, doubleArray0, intArray0);
      compressedVector0.swapElements(1325, 32);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(",3\"c?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(83);
      compressedVector0.spliterator();
      compressedVector0.setAll(1927.4334);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(4, vectorFunction0);
      compressedVector0.swapElements(4, 2);
      assertEquals(0.9879518072289156, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(880, 880);
      compressedVector0.setAll(5);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 836;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.isZeroAt(849);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(836, vectorFunction1);
      assertEquals(0.9988636363636364, compressedVector0.density(), 0.01);
      
      compressedVector1.swapElements(0, 856);
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(880);
      compressedVector0.setAll(880);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 880;
      doubleArray0[1] = (double) 880;
      doubleArray0[2] = (double) 880;
      doubleArray0[3] = (double) 880;
      doubleArray0[4] = (double) 880;
      doubleArray0[5] = (double) 880;
      doubleArray0[6] = (double) 880;
      doubleArray0[7] = (-2797.611622133);
      doubleArray0[8] = (double) 880;
      CompressedVector compressedVector1 = new CompressedVector();
      compressedVector1.isZeroAt((-2955));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(13, vectorFunction0);
      compressedVector0.swapElements(51, (-7));
      assertEquals(0.9988636363636364, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(880, 880);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      compressedVector0.setAll(880);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(21, vectorFunction0);
      Vector vector0 = compressedVector0.sliceLeft(48);
      vector0.swapElements(48, 48);
      vector0.setAll(1.0);
      assertEquals(879, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2390, 977);
      compressedVector0.swapElements(3124, 977);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 12);
      ooPlaceVectorsAddition0.applySymmetric(denseVector0, compressedVector0);
      Vector vector0 = ooPlaceVectorsAddition0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      Vector vector1 = compressedVector0.add(vector0);
      compressedVector0.subtract(vector1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      compressedVector0.set(12, (-4490.50786));
      compressedVector0.set(12, (-1403.34661297594));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.set(1, 0.0);
      compressedVector0.getOrElse(1, 3124);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(880);
      compressedVector0.setAll(880);
      compressedVector0.set(40, 0.0);
      compressedVector0.sliceLeft(40);
      compressedVector0.swapElements(16, 6);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("]TKqVDkII%/g'[1lX_Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }
}
