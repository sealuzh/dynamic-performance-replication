/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:45:33 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Canvas;
import java.awt.Checkbox;
import java.awt.CheckboxGroup;
import java.awt.FlowLayout;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Point2D;
import java.beans.EventSetDescriptor;
import java.beans.beancontext.BeanContextServicesSupport;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.chrono.HijrahDate;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.DebugGraphics;
import javax.swing.JOptionPane;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.clusterers.AbstractClusterer;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.CheckGOE;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.NormalizableDistance;
import weka.core.TestInstances;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.setCustomName("hR$%");
      assertEquals("hR$%", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextViewer textViewer0 = new TextViewer();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.listOptions();
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ImageSaver imageSaver0 = new ImageSaver();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.disconnectionNotification("pf]L~})sml2t#]NZU{x", spreadSubsample0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getCustomName();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      BeanVisual beanVisual0 = serializedModelSaver0.m_visual;
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      beanVisual0.removeVetoableChangeListener(beanContextServicesSupport0);
      filter0.setVisual(beanVisual0);
      assertEquals("SerializedModelSaver", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionAllowed("SlidingMidPointofWidestSide splitting method. Please ");
      // Undeclared exception!
      try { 
        filter0.performRequest("SlidingMidPointofWidestSide splitting method. Please ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SlidingMidPointofWidestSide splitting method. Please  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-=u$");
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.connectionNotification("WARNING: Filter is c@rreYtly batch processinA.", "WARNING: Filter is c@rreYtly batch processinA.");
      Saver saver0 = new Saver();
      filter0.removeTrainingSetListener(saver0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(sorter0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.addDataSourceListener(sorter0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      attributeSummarizer0.setOffscreenXAxis("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      filter0.addTestSetListener(attributeSummarizer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      Saver saver0 = new Saver();
      filter0.removeTrainingSetListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      gridBagLayout0.location((-1726574382), (-1726574382));
      Point point0 = new Point(0, 0);
      filter0.getFocusListeners();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImageSaver imageSaver0 = new ImageSaver();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getOptions();
      MultiFilter multiFilter1 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      CheckGOE checkGOE0 = new CheckGOE();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      filter0.getVisual();
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      boolean boolean0 = filter0.isBusy();
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.getCustomName();
      filter0.requestFocusInWindow();
      filter0.getAncestorListeners();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getOptions();
      multiFilter0.listOptions();
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ImageSaver imageSaver0 = new ImageSaver();
      CheckGOE checkGOE0 = new CheckGOE();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      filter0.eventGeneratable("AllFilter");
      filter0.getVisual();
      filter0.addDataSourceListener(substringLabeler0);
      Sorter sorter0 = new Sorter();
      filter0.acceptInstance(instanceEvent0);
      filter0.globalInfo();
      filter0.getFilter();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      sorter0.getStructure(" scheduling ");
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      instanceEvent0.setStructure((Instances) null);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.addInstanceListener(appender0);
      filter0.getFilter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent1 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners(instanceEvent0);
      Filter filter1 = new Filter();
      filter1.getFilter();
      Filter filter2 = new Filter();
      boolean boolean0 = filter2.eventGeneratable("ROW_HEADER");
      assertFalse(boolean0);
      
      BeanVisual beanVisual0 = filter1.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      Enumeration enumeration0 = filter0.enumerateRequests();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      AllFilter allFilter0 = new AllFilter();
      filter0.setFilter(nominalToBinary0);
      filter0.list();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      SysErrLog sysErrLog0 = new SysErrLog();
      sysErrLog0.logMessage("@data");
      filter0.setLog(sysErrLog0);
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      CheckboxGroup checkboxGroup0 = new CheckboxGroup();
      CheckboxGroup checkboxGroup1 = new CheckboxGroup();
      checkboxGroup1.getSelectedCheckbox();
      checkboxGroup1.setSelectedCheckbox((Checkbox) null);
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      DataSetEvent dataSetEvent0 = new DataSetEvent(scatterPlotMatrix0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.acceptInstance((InstanceEvent) null);
      filter0.connectionNotification(">75G$xvWGXcBdroO}JS", incrementalClassifierEvaluator0);
      filter0.connectionNotification(">75G$xvWGXcBdroO}JS", enumeration0);
      Canvas canvas0 = new Canvas();
      TextViewer textViewer0 = new TextViewer();
      Saver saver0 = new Saver();
      filter0.addDataSourceListener(scatterPlotMatrix0);
      String string0 = JOptionPane.WANTS_INPUT_PROPERTY;
      assertEquals("wantsInput", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotNull(filter0);
      
      TextViewer textViewer0 = new TextViewer();
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertFalse(textViewer0.isBusy());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertFalse(textViewer0.getIgnoreRepaint());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertFalse(textViewer0.isFocusCycleRoot());
      assertNotNull(textViewer0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      filter0.connectionNotification("hR$%", mockHijrahDate0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      boolean boolean0 = filter0.eventGeneratable("hR$%");
      assertTrue(boolean0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WT#9*C");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicyProvider());
      assertEquals("For charting only, specify a sliding window size over which to compute performance stats. <= 0 means eval on whole stream", incrementalClassifierEvaluator0.chartingEvalWindowSizeTipText());
      assertEquals("Output per-class info retrieval stats. If set to true, predictions get stored so that stats such as AUC can be computed. Note: this consumes some memory.", incrementalClassifierEvaluator0.outputPerClassInfoRetrievalStatsTipText());
      assertFalse(incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertTrue(incrementalClassifierEvaluator0.getFocusTraversalKeysEnabled());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals("How often to report progress to the status bar.", incrementalClassifierEvaluator0.statusFrequencyTipText());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertFalse(incrementalClassifierEvaluator0.isFocusCycleRoot());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals("Evaluate the performance of incrementally trained classifiers.", incrementalClassifierEvaluator0.globalInfo());
      assertFalse(incrementalClassifierEvaluator0.isBusy());
      assertFalse(incrementalClassifierEvaluator0.getIgnoreRepaint());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicySet());
      assertNotNull(incrementalClassifierEvaluator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      filter0.setDoubleBuffered(true);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      AllFilter allFilter0 = (AllFilter)filter0.getFilter();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.isFirstBatchDone());
      assertNotNull(allFilter0);
      
      filter0.setFilter(allFilter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.isFirstBatchDone());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertNotNull(instances0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      
      // Undeclared exception!
      try { 
        filter0.performRequest("6}K5qA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6}K5qA not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotNull(filter0);
      
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertEquals(0, classOrder0.getClassOrder());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertFalse(classOrder0.isFirstBatchDone());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertNotNull(classOrder0);
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|";
      stringArray0[1] = "*}Z[V~VZl;aQN";
      stringArray0[3] = "";
      stringArray0[4] = "weka/gui/beans/icons/DefaultFilter_animated.gif";
      classOrder0.setClassOrder(1);
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals(1, classOrder0.getClassOrder());
      assertFalse(classOrder0.isFirstBatchDone());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      
      ClassOrder.main(stringArray0);
      filter0.setWrappedAlgorithm(classOrder0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("ClassOrder", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Changes the order of the classes so that the class values are no longer of in the order specified in the header</font><br><br> The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order.<br>Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier.<br>The value can also be converted back using 'originalValue(double value)' procedure.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals(1, classOrder0.getClassOrder());
      assertFalse(classOrder0.isFirstBatchDone());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotNull(filter0);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotNull(enumeration0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumClasses());
      assertNotNull(testInstances0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertFalse(nominalToBinary0.getTransformAllValues());
      assertTrue(nominalToBinary0.isNewBatch());
      assertEquals("Whether resulting binary attributes will be nominal.", nominalToBinary0.binaryAttributesNominalTipText());
      assertFalse(nominalToBinary0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(nominalToBinary0.isFirstBatchDone());
      assertFalse(nominalToBinary0.isOutputFormatDefined());
      assertEquals("Whether all nominal values are turned into new attributes, not only if there are more than 2.", nominalToBinary0.transformAllValuesTipText());
      assertFalse(nominalToBinary0.getBinaryAttributesNominal());
      assertNotNull(nominalToBinary0);
      
      filter0.list();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      Toolkit toolkit0 = filter0.getToolkit();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotNull(toolkit0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertEquals("How often to report progress to the status bar.", incrementalClassifierEvaluator0.statusFrequencyTipText());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals("Output per-class info retrieval stats. If set to true, predictions get stored so that stats such as AUC can be computed. Note: this consumes some memory.", incrementalClassifierEvaluator0.outputPerClassInfoRetrievalStatsTipText());
      assertEquals("For charting only, specify a sliding window size over which to compute performance stats. <= 0 means eval on whole stream", incrementalClassifierEvaluator0.chartingEvalWindowSizeTipText());
      assertFalse(incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicyProvider());
      assertFalse(incrementalClassifierEvaluator0.isFocusCycleRoot());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertFalse(incrementalClassifierEvaluator0.isBusy());
      assertTrue(incrementalClassifierEvaluator0.getFocusTraversalKeysEnabled());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals("Evaluate the performance of incrementally trained classifiers.", incrementalClassifierEvaluator0.globalInfo());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicySet());
      assertFalse(incrementalClassifierEvaluator0.getIgnoreRepaint());
      assertNotNull(incrementalClassifierEvaluator0);
      
      String string0 = testInstances0.toString();
      assertEquals("Relation: Testdata\nSeed: 1\n# Instances: 20\nClassType: 1\n# Classes: 2\nClass index: -1\n# Nominal: 1\n# Nominal values: 2\n# Numeric: 0\n# String: 0\n# Date: 0\n# Relational: 0\n  - # Nominal: 1\n  - # Nominal values: 2\n  - # Numeric: 0\n  - # String: 0\n  - # Date: 0\n  - # Instances: 10\nMulti-Instance: false\nWords: The,quick,brown,fox,jumps,over,the,lazy,dog\nWord separators:  \n", string0);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumClasses());
      assertNotNull(string0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertNotNull(defaultCaret0);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertNotNull(aWTEventMulticaster0);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      
      filter0.removeMouseMotionListener(aWTEventMulticaster0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup();
      assertNotNull(checkboxGroup0);
      
      incrementalClassifierEvaluator0.invalidate();
      assertEquals("How often to report progress to the status bar.", incrementalClassifierEvaluator0.statusFrequencyTipText());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals("Output per-class info retrieval stats. If set to true, predictions get stored so that stats such as AUC can be computed. Note: this consumes some memory.", incrementalClassifierEvaluator0.outputPerClassInfoRetrievalStatsTipText());
      assertEquals("For charting only, specify a sliding window size over which to compute performance stats. <= 0 means eval on whole stream", incrementalClassifierEvaluator0.chartingEvalWindowSizeTipText());
      assertFalse(incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicyProvider());
      assertFalse(incrementalClassifierEvaluator0.isFocusCycleRoot());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertFalse(incrementalClassifierEvaluator0.isBusy());
      assertTrue(incrementalClassifierEvaluator0.getFocusTraversalKeysEnabled());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals("Evaluate the performance of incrementally trained classifiers.", incrementalClassifierEvaluator0.globalInfo());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicySet());
      assertFalse(incrementalClassifierEvaluator0.getIgnoreRepaint());
      
      incrementalClassifierEvaluator0.setFocusable(true);
      assertEquals("How often to report progress to the status bar.", incrementalClassifierEvaluator0.statusFrequencyTipText());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals("Output per-class info retrieval stats. If set to true, predictions get stored so that stats such as AUC can be computed. Note: this consumes some memory.", incrementalClassifierEvaluator0.outputPerClassInfoRetrievalStatsTipText());
      assertEquals("For charting only, specify a sliding window size over which to compute performance stats. <= 0 means eval on whole stream", incrementalClassifierEvaluator0.chartingEvalWindowSizeTipText());
      assertFalse(incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicyProvider());
      assertFalse(incrementalClassifierEvaluator0.isFocusCycleRoot());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertFalse(incrementalClassifierEvaluator0.isBusy());
      assertTrue(incrementalClassifierEvaluator0.getFocusTraversalKeysEnabled());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals("Evaluate the performance of incrementally trained classifiers.", incrementalClassifierEvaluator0.globalInfo());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicySet());
      assertFalse(incrementalClassifierEvaluator0.getIgnoreRepaint());
      
      Checkbox checkbox0 = checkboxGroup0.getSelectedCheckbox();
      assertNull(checkbox0);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertNotNull(scatterPlotMatrix0);
      
      filter0.connectionNotification(" ", incrementalClassifierEvaluator0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals("How often to report progress to the status bar.", incrementalClassifierEvaluator0.statusFrequencyTipText());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertEquals("Output per-class info retrieval stats. If set to true, predictions get stored so that stats such as AUC can be computed. Note: this consumes some memory.", incrementalClassifierEvaluator0.outputPerClassInfoRetrievalStatsTipText());
      assertEquals("For charting only, specify a sliding window size over which to compute performance stats. <= 0 means eval on whole stream", incrementalClassifierEvaluator0.chartingEvalWindowSizeTipText());
      assertFalse(incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicyProvider());
      assertFalse(incrementalClassifierEvaluator0.isFocusCycleRoot());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertFalse(incrementalClassifierEvaluator0.isBusy());
      assertTrue(incrementalClassifierEvaluator0.getFocusTraversalKeysEnabled());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals("Evaluate the performance of incrementally trained classifiers.", incrementalClassifierEvaluator0.globalInfo());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicySet());
      assertFalse(incrementalClassifierEvaluator0.getIgnoreRepaint());
      
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      assertEquals("400", dataVisualizer0.getOffscreenHeight());
      assertEquals("DataVisualizer", dataVisualizer0.getCustomName());
      assertFalse(dataVisualizer0.isFocusTraversalPolicyProvider());
      assertEquals("", dataVisualizer0.getOffscreenAdditionalOpts());
      assertEquals("", dataVisualizer0.getOffscreenYAxis());
      assertEquals("Visualize incoming data/training/test sets in a 2D scatter plot.", dataVisualizer0.globalInfo());
      assertFalse(dataVisualizer0.isFocusCycleRoot());
      assertTrue(dataVisualizer0.getFocusTraversalKeysEnabled());
      assertEquals("500", dataVisualizer0.getOffscreenWidth());
      assertEquals("", dataVisualizer0.getOffscreenXAxis());
      assertEquals("Weka Chart Renderer", dataVisualizer0.getOffscreenRendererName());
      assertFalse(dataVisualizer0.isBusy());
      assertFalse(dataVisualizer0.getIgnoreRepaint());
      assertFalse(dataVisualizer0.isFocusTraversalPolicySet());
      assertNotNull(dataVisualizer0);
      
      filter0.acceptInstance((InstanceEvent) null);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isBusy());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("last", classAssigner0.getClassColumn());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertNotNull(classAssigner0);
      
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertNull(hierarchyListener1);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      
      classAssigner0.removeHierarchyListener((HierarchyListener) null);
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isBusy());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("last", classAssigner0.getClassColumn());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      
      // Undeclared exception!
      try { 
        filter0.performRequest(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //   not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertFalse(nominalToBinary0.getBinaryAttributesNominal());
      assertFalse(nominalToBinary0.isOutputFormatDefined());
      assertEquals("Whether resulting binary attributes will be nominal.", nominalToBinary0.binaryAttributesNominalTipText());
      assertEquals("Whether all nominal values are turned into new attributes, not only if there are more than 2.", nominalToBinary0.transformAllValuesTipText());
      assertTrue(nominalToBinary0.isNewBatch());
      assertFalse(nominalToBinary0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(nominalToBinary0.isFirstBatchDone());
      assertFalse(nominalToBinary0.getTransformAllValues());
      assertNotNull(nominalToBinary0);
      
      AllFilter allFilter0 = new AllFilter();
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertNotNull(allFilter0);
      
      filter0.list();
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertNotNull(textDirectoryLoader0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      sysErrLog0.logMessage(" WARNING : ");
      filter0.setLog(sysErrLog0);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertEquals("Output per-class info retrieval stats. If set to true, predictions get stored so that stats such as AUC can be computed. Note: this consumes some memory.", incrementalClassifierEvaluator0.outputPerClassInfoRetrievalStatsTipText());
      assertEquals("For charting only, specify a sliding window size over which to compute performance stats. <= 0 means eval on whole stream", incrementalClassifierEvaluator0.chartingEvalWindowSizeTipText());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicyProvider());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertFalse(incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertFalse(incrementalClassifierEvaluator0.isFocusCycleRoot());
      assertEquals("How often to report progress to the status bar.", incrementalClassifierEvaluator0.statusFrequencyTipText());
      assertTrue(incrementalClassifierEvaluator0.getFocusTraversalKeysEnabled());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals("Evaluate the performance of incrementally trained classifiers.", incrementalClassifierEvaluator0.globalInfo());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicySet());
      assertFalse(incrementalClassifierEvaluator0.isBusy());
      assertFalse(incrementalClassifierEvaluator0.getIgnoreRepaint());
      assertNotNull(incrementalClassifierEvaluator0);
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup();
      assertNotNull(checkboxGroup0);
      
      CheckboxGroup checkboxGroup1 = new CheckboxGroup();
      assertFalse(checkboxGroup1.equals((Object)checkboxGroup0));
      assertNotNull(checkboxGroup1);
      
      Checkbox checkbox0 = checkboxGroup1.getSelectedCheckbox();
      assertFalse(checkboxGroup1.equals((Object)checkboxGroup0));
      assertNull(checkbox0);
      assertNotSame(checkboxGroup1, checkboxGroup0);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertNotNull(scatterPlotMatrix0);
      
      filter0.acceptInstance((InstanceEvent) null);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      filter0.useDefaultVisual();
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      Classifier classifier0 = new Classifier();
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.getBlockOnLastFold());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertFalse(classifier0.isFocusCycleRoot());
      assertNotNull(classifier0);
      
      filter0.disconnectionNotification(".gif", classifier0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.getIgnoreRepaint());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.getBlockOnLastFold());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertFalse(classifier0.isFocusCycleRoot());
      
      filter0.useDefaultVisual();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertNull(classValuePicker0.getClassValue());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertNotNull(classValuePicker0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertNotNull(filter0);
      
      TestInstances testInstances0 = new TestInstances();
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertNotNull(testInstances0);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      assertNotNull(gridBagLayout0);
      
      Point point0 = gridBagLayout0.location(13, (-2));
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      
      Point point1 = gridBagLayout0.location((-1), 0);
      assertTrue(point1.equals((Object)point0));
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertNotNull(point1);
      assertNotSame(point1, point0);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      
      ImageSaver imageSaver0 = new ImageSaver();
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertFalse(imageSaver0.isBusy());
      assertNull(imageSaver0.getFilename());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertNotNull(imageSaver0);
      
      point1.setLocation((Point2D) point0);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(multiFilter0);
      
      String[] stringArray0 = testInstances0.getOptions();
      assertFalse(testInstances0.getNoClass());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertNotNull(stringArray0);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      MultiFilter multiFilter1 = new MultiFilter();
      assertFalse(multiFilter1.equals((Object)multiFilter0));
      assertFalse(multiFilter1.isFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter1.globalInfo());
      assertTrue(multiFilter1.isNewBatch());
      assertEquals("The base filters to be used.", multiFilter1.filtersTipText());
      assertFalse(multiFilter1.isOutputFormatDefined());
      assertFalse(multiFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter1.getDebug());
      assertEquals("Turns on output of debugging information.", multiFilter1.debugTipText());
      assertNotNull(multiFilter1);
      
      MultiFilter multiFilter2 = new MultiFilter();
      assertFalse(multiFilter2.equals((Object)multiFilter0));
      assertFalse(multiFilter2.equals((Object)multiFilter1));
      assertFalse(multiFilter2.getDebug());
      assertFalse(multiFilter2.isOutputFormatDefined());
      assertFalse(multiFilter2.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter2.filtersTipText());
      assertFalse(multiFilter2.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter2.debugTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter2.globalInfo());
      assertTrue(multiFilter2.isNewBatch());
      assertNotNull(multiFilter2);
      
      filter0.setFilter(multiFilter0);
      assertFalse(multiFilter0.equals((Object)multiFilter1));
      assertFalse(multiFilter0.equals((Object)multiFilter2));
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotSame(multiFilter0, multiFilter1);
      assertNotSame(multiFilter0, multiFilter2);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.getNominalBinary());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertNotNull(substringLabeler0);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getDebug());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getSilent());
      assertNotNull(checkGOE0);
      
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      assertNotNull(metalComboBoxEditor_UIResource0);
      
      BeanVisual beanVisual0 = imageSaver0.m_visual;
      assertEquals("weka/gui/beans/icons/SerializedModelSaver_animated.gif", beanVisual0.getAnimatedIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("ImageSaver", beanVisual0.getText());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertEquals("weka/gui/beans/icons/SerializedModelSaver.gif", beanVisual0.getIconPath());
      assertNotNull(beanVisual0);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      
      instanceEvent0.setStatus(3);
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.getNominalBinary());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals(3, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      assertFalse(simpleKMeans0.getFastDistanceCalc());
      assertFalse(simpleKMeans0.getInitializeUsingKMeansPlusPlusMethod());
      assertEquals(2, simpleKMeans0.getNumClusters());
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
      assertFalse(simpleKMeans0.getDisplayStdDevs());
      assertEquals("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.", simpleKMeans0.fastDistanceCalcTipText());
      assertEquals(500, simpleKMeans0.getMaxIterations());
      assertEquals(10, simpleKMeans0.getSeed());
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", simpleKMeans0.initializeUsingKMeansPlusPlusMethodTipText());
      assertEquals("set number of clusters", simpleKMeans0.numClustersTipText());
      assertEquals("Display std deviations of numeric attributes and counts of nominal attributes.", simpleKMeans0.displayStdDevsTipText());
      assertEquals("The distance function to use for instances comparison (default: weka.core.EuclideanDistance). ", simpleKMeans0.distanceFunctionTipText());
      assertEquals("Replace missing values globally with mean/mode.", simpleKMeans0.dontReplaceMissingValuesTipText());
      assertFalse(simpleKMeans0.getDontReplaceMissingValues());
      assertEquals(2, simpleKMeans0.numberOfClusters());
      assertNotNull(simpleKMeans0);
      
      Instances instances0 = simpleKMeans0.getClusterCentroids();
      assertFalse(simpleKMeans0.getFastDistanceCalc());
      assertFalse(simpleKMeans0.getInitializeUsingKMeansPlusPlusMethod());
      assertEquals(2, simpleKMeans0.getNumClusters());
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
      assertFalse(simpleKMeans0.getDisplayStdDevs());
      assertEquals("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.", simpleKMeans0.fastDistanceCalcTipText());
      assertEquals(500, simpleKMeans0.getMaxIterations());
      assertEquals(10, simpleKMeans0.getSeed());
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", simpleKMeans0.initializeUsingKMeansPlusPlusMethodTipText());
      assertEquals("set number of clusters", simpleKMeans0.numClustersTipText());
      assertEquals("Display std deviations of numeric attributes and counts of nominal attributes.", simpleKMeans0.displayStdDevsTipText());
      assertEquals("The distance function to use for instances comparison (default: weka.core.EuclideanDistance). ", simpleKMeans0.distanceFunctionTipText());
      assertEquals("Replace missing values globally with mean/mode.", simpleKMeans0.dontReplaceMissingValuesTipText());
      assertFalse(simpleKMeans0.getDontReplaceMissingValues());
      assertEquals(2, simpleKMeans0.numberOfClusters());
      assertNull(instances0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(gridBagLayout0, (Instances) null, 3, 2, 0, 0);
      assertEquals(3, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(2, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertFalse(testSetEvent0.isStructureOnly());
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals(3, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(2, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertFalse(testSetEvent0.isStructureOnly());
      
      filter0.revalidate();
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertNotNull(appender0);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertNotNull(scatterPlotMatrix0);
      
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      assertEquals("", dataVisualizer0.getOffscreenXAxis());
      assertTrue(dataVisualizer0.getFocusTraversalKeysEnabled());
      assertFalse(dataVisualizer0.getIgnoreRepaint());
      assertEquals("500", dataVisualizer0.getOffscreenWidth());
      assertFalse(dataVisualizer0.isBusy());
      assertFalse(dataVisualizer0.isFocusTraversalPolicyProvider());
      assertEquals("", dataVisualizer0.getOffscreenYAxis());
      assertEquals("", dataVisualizer0.getOffscreenAdditionalOpts());
      assertFalse(dataVisualizer0.isFocusCycleRoot());
      assertFalse(dataVisualizer0.isFocusTraversalPolicySet());
      assertEquals("Weka Chart Renderer", dataVisualizer0.getOffscreenRendererName());
      assertEquals("Visualize incoming data/training/test sets in a 2D scatter plot.", dataVisualizer0.globalInfo());
      assertEquals("400", dataVisualizer0.getOffscreenHeight());
      assertEquals("DataVisualizer", dataVisualizer0.getCustomName());
      assertNotNull(dataVisualizer0);
      
      filter0.acceptInstance(instanceEvent0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.getNominalBinary());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals(3, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertNotNull(classAssigner0);
      
      filter0.removeInstanceListener(appender0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        filter0.performRequest("@data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @data not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(filter0);
      
      ImageSaver imageSaver0 = new ImageSaver();
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertNull(imageSaver0.getFilename());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertFalse(imageSaver0.isBusy());
      assertNotNull(imageSaver0);
      
      TextViewer textViewer0 = new TextViewer();
      assertFalse(textViewer0.getIgnoreRepaint());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertFalse(textViewer0.isBusy());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.isFocusCycleRoot());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertNotNull(textViewer0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertNotNull(trainTestSplitMaker0);
      
      filter0.connectionNotification("hR$%", trainTestSplitMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = filter0.eventGeneratable("hR$%");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      
      Classifier classifier0 = new Classifier();
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.isFocusCycleRoot());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertFalse(classifier0.getBlockOnLastFold());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.getIgnoreRepaint());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertNotNull(classifier0);
      
      ClassOrder classOrder0 = new ClassOrder();
      assertFalse(classOrder0.isFirstBatchDone());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertEquals(0, classOrder0.getClassOrder());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertNotNull(classOrder0);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      
      FocusTraversalPolicy focusTraversalPolicy0 = filter0.getFocusTraversalPolicy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertNull(focusTraversalPolicy0);
      
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      assertEquals("Binary serialized instances", serializedInstancesLoader0.getFileDescription());
      assertEquals(".bsi", serializedInstancesLoader0.getFileExtension());
      assertEquals("Use relative rather than absolute paths", serializedInstancesLoader0.useRelativePathTipText());
      assertEquals("Reads a source that contains serialized Instances.", serializedInstancesLoader0.globalInfo());
      assertFalse(serializedInstancesLoader0.getUseRelativePath());
      assertNotNull(serializedInstancesLoader0);
      
      try { 
        serializedInstancesLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(string0);
      
      boolean boolean1 = filter0.requestFocusInWindow();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      AncestorListener[] ancestorListenerArray0 = filter0.getAncestorListeners();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(ancestorListenerArray0);
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      ImageSaver imageSaver0 = new ImageSaver();
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertFalse(imageSaver0.isBusy());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertNull(imageSaver0.getFilename());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertNotNull(imageSaver0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertNotNull(trainTestSplitMaker0);
      
      filter0.connectionNotification("$", trainTestSplitMaker0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertNotNull(classAssigner0);
      
      filter0.addInstanceListener(classAssigner0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertNotNull(substringLabeler0);
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertNotNull(filter1);
      
      Sorter sorter0 = new Sorter();
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isBusy());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertNull(sorter0.getSortDetails());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isFocusCycleRoot());
      assertEquals("10000", sorter0.getBufferSize());
      assertNotNull(sorter0);
      
      filter0.removeInstanceListener(sorter0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isBusy());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertNull(sorter0.getSortDetails());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isFocusCycleRoot());
      assertEquals("10000", sorter0.getBufferSize());
      assertNotSame(filter0, filter1);
      
      Sorter sorter1 = new Sorter();
      assertFalse(sorter1.equals((Object)sorter0));
      assertFalse(sorter1.getIgnoreRepaint());
      assertEquals("Sorter", sorter1.getCustomName());
      assertEquals("10000", sorter1.getBufferSize());
      assertNull(sorter1.getSortDetails());
      assertEquals("", sorter1.getTempDirectory());
      assertFalse(sorter1.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter1.globalInfo());
      assertFalse(sorter1.isFocusCycleRoot());
      assertFalse(sorter1.isFocusTraversalPolicySet());
      assertFalse(sorter1.isBusy());
      assertTrue(sorter1.getFocusTraversalKeysEnabled());
      assertNotNull(sorter1);
      
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      filter1.acceptInstance(instanceEvent0);
      assertFalse(sorter1.equals((Object)sorter0));
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(sorter1.getIgnoreRepaint());
      assertEquals("Sorter", sorter1.getCustomName());
      assertEquals("10000", sorter1.getBufferSize());
      assertNull(sorter1.getSortDetails());
      assertEquals("", sorter1.getTempDirectory());
      assertFalse(sorter1.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter1.globalInfo());
      assertFalse(sorter1.isFocusCycleRoot());
      assertFalse(sorter1.isFocusTraversalPolicySet());
      assertFalse(sorter1.isBusy());
      assertTrue(sorter1.getFocusTraversalKeysEnabled());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertNotSame(sorter1, sorter0);
      assertNotSame(filter1, filter0);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertNotNull(predictionAppender0);
      
      Instances instances0 = predictionAppender0.m_format;
      assertNull(instances0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(trainTestSplitMaker0, (Instances) null, (-8), 0, 2, 0);
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertEquals((-8), trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxRunNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(2, trainingSetEvent0.getSetNumber());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertNotNull(trainingSetEvent0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainingSetEvent0, (Instances) null);
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertEquals((-8), trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxRunNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(2, trainingSetEvent0.getSetNumber());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertNotNull(dataSetEvent0);
      
      DataSetEvent dataSetEvent1 = new DataSetEvent(substringLabeler0, (Instances) null);
      assertFalse(dataSetEvent1.equals((Object)dataSetEvent0));
      assertFalse(dataSetEvent1.isStructureOnly());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertNotNull(dataSetEvent1);
      
      filter1.acceptDataSet(dataSetEvent1);
      assertFalse(dataSetEvent1.equals((Object)dataSetEvent0));
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(dataSetEvent1.isStructureOnly());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertNotSame(dataSetEvent1, dataSetEvent0);
      assertNotSame(filter1, filter0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertNotNull(testInstances0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, instances0.classIndex());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.size());
      assertEquals(20, instances0.numInstances());
      assertEquals(2, instances0.numClasses());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertNotNull(instances0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      AllFilter allFilter0 = new AllFilter();
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertNotNull(allFilter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances1 = textDirectoryLoader0.getStructure();
      assertFalse(instances1.equals((Object)instances0));
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances1.size());
      assertTrue(instances1.checkForStringAttributes());
      assertEquals(1, instances1.classIndex());
      assertEquals(2, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances1.relationName());
      assertEquals(0, instances1.numClasses());
      assertNotNull(instances1);
      assertNotSame(instances1, instances0);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
      assertEquals("set number of clusters", simpleKMeans0.numClustersTipText());
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
      assertEquals(2, simpleKMeans0.getNumClusters());
      assertEquals("The distance function to use for instances comparison (default: weka.core.EuclideanDistance). ", simpleKMeans0.distanceFunctionTipText());
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", simpleKMeans0.initializeUsingKMeansPlusPlusMethodTipText());
      assertEquals(10, simpleKMeans0.getSeed());
      assertEquals(2, simpleKMeans0.numberOfClusters());
      assertFalse(simpleKMeans0.getDontReplaceMissingValues());
      assertEquals(500, simpleKMeans0.getMaxIterations());
      assertEquals("Display std deviations of numeric attributes and counts of nominal attributes.", simpleKMeans0.displayStdDevsTipText());
      assertFalse(simpleKMeans0.getInitializeUsingKMeansPlusPlusMethod());
      assertEquals("Replace missing values globally with mean/mode.", simpleKMeans0.dontReplaceMissingValuesTipText());
      assertFalse(simpleKMeans0.getFastDistanceCalc());
      assertFalse(simpleKMeans0.getDisplayStdDevs());
      assertEquals("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.", simpleKMeans0.fastDistanceCalcTipText());
      assertNotNull(simpleKMeans0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertNotNull(flowByExpression0);
      
      simpleKMeans0.setMaxIterations(853);
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
      assertEquals("set number of clusters", simpleKMeans0.numClustersTipText());
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
      assertEquals(2, simpleKMeans0.getNumClusters());
      assertEquals("The distance function to use for instances comparison (default: weka.core.EuclideanDistance). ", simpleKMeans0.distanceFunctionTipText());
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", simpleKMeans0.initializeUsingKMeansPlusPlusMethodTipText());
      assertEquals(10, simpleKMeans0.getSeed());
      assertEquals(2, simpleKMeans0.numberOfClusters());
      assertFalse(simpleKMeans0.getDontReplaceMissingValues());
      assertEquals(853, simpleKMeans0.getMaxIterations());
      assertEquals("Display std deviations of numeric attributes and counts of nominal attributes.", simpleKMeans0.displayStdDevsTipText());
      assertFalse(simpleKMeans0.getInitializeUsingKMeansPlusPlusMethod());
      assertEquals("Replace missing values globally with mean/mode.", simpleKMeans0.dontReplaceMissingValuesTipText());
      assertFalse(simpleKMeans0.getFastDistanceCalc());
      assertFalse(simpleKMeans0.getDisplayStdDevs());
      assertEquals("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.", simpleKMeans0.fastDistanceCalcTipText());
      
      FlowByExpression flowByExpression1 = new FlowByExpression();
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertFalse(flowByExpression1.isBusy());
      assertEquals("", flowByExpression1.getExpressionString());
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertNotNull(flowByExpression1);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getDebug());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getSilent());
      assertNotNull(checkGOE0);
      
      AbstractClusterer.runClusterer(simpleKMeans0, testInstances0.DEFAULT_WORDS);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
      assertEquals("set number of clusters", simpleKMeans0.numClustersTipText());
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
      assertEquals(2, simpleKMeans0.getNumClusters());
      assertEquals("The distance function to use for instances comparison (default: weka.core.EuclideanDistance). ", simpleKMeans0.distanceFunctionTipText());
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", simpleKMeans0.initializeUsingKMeansPlusPlusMethodTipText());
      assertEquals(10, simpleKMeans0.getSeed());
      assertEquals(2, simpleKMeans0.numberOfClusters());
      assertFalse(simpleKMeans0.getDontReplaceMissingValues());
      assertEquals(853, simpleKMeans0.getMaxIterations());
      assertEquals("Display std deviations of numeric attributes and counts of nominal attributes.", simpleKMeans0.displayStdDevsTipText());
      assertFalse(simpleKMeans0.getInitializeUsingKMeansPlusPlusMethod());
      assertEquals("Replace missing values globally with mean/mode.", simpleKMeans0.dontReplaceMissingValuesTipText());
      assertFalse(simpleKMeans0.getFastDistanceCalc());
      assertFalse(simpleKMeans0.getDisplayStdDevs());
      assertEquals("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.", simpleKMeans0.fastDistanceCalcTipText());
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(allFilter0, instances1);
      assertFalse(instances1.equals((Object)instances0));
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances1.size());
      assertTrue(instances1.checkForStringAttributes());
      assertEquals(1, instances1.classIndex());
      assertEquals(2, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances1.relationName());
      assertEquals(0, instances1.numClasses());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(instances1.equals((Object)instances0));
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(0, instances1.size());
      assertTrue(instances1.checkForStringAttributes());
      assertEquals(1, instances1.classIndex());
      assertEquals(2, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances1.relationName());
      assertEquals(0, instances1.numClasses());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertNotSame(instances1, instances0);
      
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotNull(filter0);
      
      ImageSaver imageSaver0 = new ImageSaver();
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertNull(imageSaver0.getFilename());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertFalse(imageSaver0.isBusy());
      assertNotNull(imageSaver0);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getDebug());
      assertFalse(checkGOE0.getSuccess());
      assertNotNull(checkGOE0);
      
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      assertNotNull(metalComboBoxEditor0);
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertNotNull(filter1);
      
      BeanVisual beanVisual0 = imageSaver0.getVisual();
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertNull(imageSaver0.getFilename());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertFalse(imageSaver0.isBusy());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("weka/gui/beans/icons/SerializedModelSaver_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertEquals("ImageSaver", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/SerializedModelSaver.gif", beanVisual0.getIconPath());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertNotNull(beanVisual0);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      
      Enumeration enumeration0 = filter1.enumerateRequests();
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertNotNull(enumeration0);
      assertNotSame(filter1, filter0);
      
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      assertEquals("Split an incoming data set into cross validation folds. Separate train and test sets are produced for each of the k folds.", crossValidationFoldMaker0.globalInfo());
      assertFalse(crossValidationFoldMaker0.getPreserveOrder());
      assertTrue(crossValidationFoldMaker0.getFocusTraversalKeysEnabled());
      assertFalse(crossValidationFoldMaker0.isBusy());
      assertEquals(10, crossValidationFoldMaker0.getFolds());
      assertEquals("The number of train and test splits to produce", crossValidationFoldMaker0.foldsTipText());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicySet());
      assertFalse(crossValidationFoldMaker0.getIgnoreRepaint());
      assertEquals("The randomization seed", crossValidationFoldMaker0.seedTipText());
      assertEquals("CrossValidationFoldMaker", crossValidationFoldMaker0.getCustomName());
      assertEquals(1, crossValidationFoldMaker0.getSeed());
      assertFalse(crossValidationFoldMaker0.isFocusCycleRoot());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicyProvider());
      assertNotNull(crossValidationFoldMaker0);
      
      crossValidationFoldMaker0.connectionNotification("K", "K");
      assertEquals("Split an incoming data set into cross validation folds. Separate train and test sets are produced for each of the k folds.", crossValidationFoldMaker0.globalInfo());
      assertFalse(crossValidationFoldMaker0.getPreserveOrder());
      assertTrue(crossValidationFoldMaker0.getFocusTraversalKeysEnabled());
      assertFalse(crossValidationFoldMaker0.isBusy());
      assertEquals(10, crossValidationFoldMaker0.getFolds());
      assertEquals("The number of train and test splits to produce", crossValidationFoldMaker0.foldsTipText());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicySet());
      assertFalse(crossValidationFoldMaker0.getIgnoreRepaint());
      assertEquals("The randomization seed", crossValidationFoldMaker0.seedTipText());
      assertEquals("CrossValidationFoldMaker", crossValidationFoldMaker0.getCustomName());
      assertEquals(1, crossValidationFoldMaker0.getSeed());
      assertFalse(crossValidationFoldMaker0.isFocusCycleRoot());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicyProvider());
      
      filter1.connectionNotification("weka/gui/beans/icons/", crossValidationFoldMaker0);
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertEquals("Split an incoming data set into cross validation folds. Separate train and test sets are produced for each of the k folds.", crossValidationFoldMaker0.globalInfo());
      assertFalse(crossValidationFoldMaker0.getPreserveOrder());
      assertTrue(crossValidationFoldMaker0.getFocusTraversalKeysEnabled());
      assertFalse(crossValidationFoldMaker0.isBusy());
      assertEquals(10, crossValidationFoldMaker0.getFolds());
      assertEquals("The number of train and test splits to produce", crossValidationFoldMaker0.foldsTipText());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicySet());
      assertFalse(crossValidationFoldMaker0.getIgnoreRepaint());
      assertEquals("The randomization seed", crossValidationFoldMaker0.seedTipText());
      assertEquals("CrossValidationFoldMaker", crossValidationFoldMaker0.getCustomName());
      assertEquals(1, crossValidationFoldMaker0.getSeed());
      assertFalse(crossValidationFoldMaker0.isFocusCycleRoot());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicyProvider());
      assertNotSame(filter1, filter0);
      
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      assertTrue(instanceStreamToBatchMaker0.getFocusTraversalKeysEnabled());
      assertFalse(instanceStreamToBatchMaker0.getIgnoreRepaint());
      assertFalse(instanceStreamToBatchMaker0.isFocusTraversalPolicySet());
      assertFalse(instanceStreamToBatchMaker0.isFocusTraversalPolicyProvider());
      assertFalse(instanceStreamToBatchMaker0.isFocusCycleRoot());
      assertFalse(instanceStreamToBatchMaker0.isBusy());
      assertEquals("InstanceStreamToBatchMaker", instanceStreamToBatchMaker0.getCustomName());
      assertNotNull(instanceStreamToBatchMaker0);
      
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      assertEquals(" \r\n\t.,;:'\"()?!", wordTokenizer0.getDelimiters());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", wordTokenizer0.delimitersTipText());
      assertEquals("A simple tokenizer that is using the java.util.StringTokenizer class to tokenize the strings.", wordTokenizer0.globalInfo());
      assertNotNull(wordTokenizer0);
      
      filter0.connectionNotification("\";%qb2qh];d", wordTokenizer0);
      assertFalse(filter0.equals((Object)filter1));
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals(" \r\n\t.,;:'\"()?!", wordTokenizer0.getDelimiters());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", wordTokenizer0.delimitersTipText());
      assertEquals("A simple tokenizer that is using the java.util.StringTokenizer class to tokenize the strings.", wordTokenizer0.globalInfo());
      assertNotSame(filter0, filter1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      filter0.addInstanceListener((InstanceListener) null);
      assertFalse(filter0.equals((Object)filter1));
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotSame(filter0, filter1);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertNotNull(substringLabeler0);
      
      ImageSaver imageSaver1 = new ImageSaver();
      assertFalse(imageSaver1.equals((Object)imageSaver0));
      assertFalse(imageSaver1.isFocusTraversalPolicySet());
      assertFalse(imageSaver1.isBusy());
      assertEquals("ImageSaver", imageSaver1.getCustomName());
      assertFalse(imageSaver1.getIgnoreRepaint());
      assertTrue(imageSaver1.getFocusTraversalKeysEnabled());
      assertNull(imageSaver1.getFilename());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver1.globalInfo());
      assertFalse(imageSaver1.isFocusCycleRoot());
      assertFalse(imageSaver1.isFocusTraversalPolicyProvider());
      assertNotNull(imageSaver1);
      
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      
      MetalComboBoxEditor metalComboBoxEditor1 = new MetalComboBoxEditor();
      assertFalse(metalComboBoxEditor1.equals((Object)metalComboBoxEditor0));
      assertNotNull(metalComboBoxEditor1);
      
      boolean boolean0 = filter1.eventGeneratable("weka/gui/beans/icons/");
      assertFalse(filter1.equals((Object)filter0));
      assertTrue(boolean0);
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertNotSame(filter1, filter0);
      
      Filter filter2 = new Filter();
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter0));
      assertFalse(filter2.getIgnoreRepaint());
      assertFalse(filter2.isBusy());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter2.getCustomName());
      assertNotNull(filter2);
      
      Filter filter3 = new Filter();
      assertFalse(filter3.equals((Object)filter0));
      assertFalse(filter3.equals((Object)filter1));
      assertFalse(filter3.equals((Object)filter2));
      assertEquals("AllFilter", filter3.getCustomName());
      assertFalse(filter3.isBusy());
      assertTrue(filter3.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter3.globalInfo());
      assertFalse(filter3.isFocusCycleRoot());
      assertFalse(filter3.isFocusTraversalPolicyProvider());
      assertFalse(filter3.getIgnoreRepaint());
      assertFalse(filter3.isFocusTraversalPolicySet());
      assertNotNull(filter3);
      
      // Undeclared exception!
      try { 
        filter1.performRequest(" is currently batch processing!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  is currently batch processing! not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.REGEX;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertNotNull(substringLabeler0);
      
      Instances instances0 = substringLabeler0.m_outputStructure;
      assertNull(instances0);
      
      substringLabeler0.setCustomName("&mp0/w,=");
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("&mp0/w,=", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(flowByExpression_ExpressionClause_ExpressionType0, (Instances) null, 13, 13);
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(13, trainingSetEvent0.getSetNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(13, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertNotNull(trainingSetEvent0);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(13, trainingSetEvent0.getSetNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(13, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertNotNull(filteredAssociator0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.getDebug());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(multiFilter0.isNewBatch());
      assertNotNull(multiFilter0);
      
      ImageSaver imageSaver0 = new ImageSaver();
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertFalse(imageSaver0.isBusy());
      assertNull(imageSaver0.getFilename());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertNotNull(imageSaver0);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getDebug());
      assertNotNull(checkGOE0);
      
      Appender appender0 = new Appender();
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertNotNull(appender0);
      
      BeanVisual beanVisual0 = appender0.m_visual;
      assertEquals("Appender", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/Appender.png", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("weka/gui/beans/icons/Appender.png", beanVisual0.getIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertNotNull(beanVisual0);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      
      filter0.setVisual(beanVisual0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Appender", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/Appender.png", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("weka/gui/beans/icons/Appender.png", beanVisual0.getIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      
      filter0.useDefaultVisual();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Appender", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      filter0.removeDataSourceListener(appender0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Appender", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
      
      boolean boolean0 = filter0.connectionAllowed("instance");
      assertFalse(boolean0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Appender", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      boolean boolean1 = filter0.eventGeneratable("@relation");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Appender", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      filter0.addInstanceListener(substringLabeler0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Appender", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("&mp0/w,=", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      
      filter0.removeInstanceListener(substringLabeler0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Appender", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("&mp0/w,=", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      
      filter0.addTrainingSetListener(appender0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Appender", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.REGEX;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isBusy());
      assertNotNull(substringLabeler0);
      
      Instances instances0 = substringLabeler0.m_outputStructure;
      assertNull(instances0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(flowByExpression_ExpressionClause_ExpressionType0, (Instances) null, 13, 13);
      assertEquals(13, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(13, trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertNotNull(trainingSetEvent0);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals(13, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(13, trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertNotNull(filteredAssociator0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.getDebug());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertNotNull(multiFilter0);
      
      boolean boolean0 = substringLabeler0.m_nominalBinary;
      assertFalse(boolean0);
      
      filter0.setFilter(multiFilter0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.getDebug());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      
      ImageSaver imageSaver0 = new ImageSaver();
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertNull(imageSaver0.getFilename());
      assertFalse(imageSaver0.isBusy());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertNotNull(imageSaver0);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getDebug());
      assertNotNull(checkGOE0);
      
      MultiFilter multiFilter1 = new MultiFilter();
      assertFalse(multiFilter1.equals((Object)multiFilter0));
      assertFalse(multiFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter1.debugTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter1.globalInfo());
      assertTrue(multiFilter1.isNewBatch());
      assertFalse(multiFilter1.getDebug());
      assertFalse(multiFilter1.isOutputFormatDefined());
      assertFalse(multiFilter1.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter1.filtersTipText());
      assertNotNull(multiFilter1);
      
      Appender appender0 = new Appender();
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
      assertNotNull(appender0);
      
      appender0.setFocusTraversalKeysEnabled(false);
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
      
      filter0.useDefaultVisual();
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      boolean boolean1 = filter0.connectionAllowed("instance");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      boolean boolean2 = filter0.eventGeneratable("@relation");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      filter0.addInstanceListener(substringLabeler0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isBusy());
      
      filter0.removeInstanceListener(substringLabeler0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isBusy());
      
      filter0.addTrainingSetListener(appender0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertEquals("Appender", appender0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertNotNull(filter0);
      
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertNotNull(allFilter0);
      
      filter0.list();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      filter0.setLog(sysErrLog0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup();
      assertNotNull(checkboxGroup0);
      
      Checkbox checkbox0 = checkboxGroup0.getSelectedCheckbox();
      assertNull(checkbox0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      String string0 = mockHijrahDate0.getMockedClassName();
      assertEquals("java.time.chrono.HijrahDate", string0);
      assertNotNull(string0);
      
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      assertNotNull(metalComboBoxEditor0);
      
      TextViewer textViewer0 = new TextViewer();
      assertFalse(textViewer0.isFocusCycleRoot());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertFalse(textViewer0.getIgnoreRepaint());
      assertFalse(textViewer0.isBusy());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertNotNull(textViewer0);
      
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      assertEquals("Reads a source that contains serialized Instances.", serializedInstancesLoader0.globalInfo());
      assertFalse(serializedInstancesLoader0.getUseRelativePath());
      assertEquals("Use relative rather than absolute paths", serializedInstancesLoader0.useRelativePathTipText());
      assertEquals("Binary serialized instances", serializedInstancesLoader0.getFileDescription());
      assertEquals(".bsi", serializedInstancesLoader0.getFileExtension());
      assertNotNull(serializedInstancesLoader0);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader1.equals((Object)textDirectoryLoader0));
      assertFalse(textDirectoryLoader1.getOutputFilename());
      assertFalse(textDirectoryLoader1.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader1.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader1.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader1.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader1.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader1.globalInfo());
      assertEquals("", textDirectoryLoader1.getCharSet());
      assertNotNull(textDirectoryLoader1);
      
      File file0 = textDirectoryLoader1.getDirectory();
      assertFalse(textDirectoryLoader1.equals((Object)textDirectoryLoader0));
      assertFalse(textDirectoryLoader1.getOutputFilename());
      assertFalse(textDirectoryLoader1.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader1.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader1.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader1.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader1.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader1.globalInfo());
      assertEquals("", textDirectoryLoader1.getCharSet());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects", file0.getParent());
      assertEquals("9_weka", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      assertNotSame(textDirectoryLoader1, textDirectoryLoader0);
      
      file0.deleteOnExit();
      assertFalse(textDirectoryLoader1.equals((Object)textDirectoryLoader0));
      assertFalse(textDirectoryLoader1.getOutputFilename());
      assertFalse(textDirectoryLoader1.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader1.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader1.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader1.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader1.debugTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader1.globalInfo());
      assertEquals("", textDirectoryLoader1.getCharSet());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects", file0.getParent());
      assertEquals("9_weka", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotSame(textDirectoryLoader1, textDirectoryLoader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertNotNull(filter0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertNotNull(testInstances0);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      Instances instances0 = testInstances0.generate();
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertNotNull(instances0);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertNotNull(allFilter0);
      
      filter0.list();
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertNotNull(textDirectoryLoader0);
      
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals("How often to report progress to the status bar.", incrementalClassifierEvaluator0.statusFrequencyTipText());
      assertFalse(incrementalClassifierEvaluator0.isFocusCycleRoot());
      assertEquals("Output per-class info retrieval stats. If set to true, predictions get stored so that stats such as AUC can be computed. Note: this consumes some memory.", incrementalClassifierEvaluator0.outputPerClassInfoRetrievalStatsTipText());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertFalse(incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertEquals("For charting only, specify a sliding window size over which to compute performance stats. <= 0 means eval on whole stream", incrementalClassifierEvaluator0.chartingEvalWindowSizeTipText());
      assertEquals("Evaluate the performance of incrementally trained classifiers.", incrementalClassifierEvaluator0.globalInfo());
      assertFalse(incrementalClassifierEvaluator0.getIgnoreRepaint());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicySet());
      assertFalse(incrementalClassifierEvaluator0.isBusy());
      assertTrue(incrementalClassifierEvaluator0.getFocusTraversalKeysEnabled());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicyProvider());
      assertNotNull(incrementalClassifierEvaluator0);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertNotNull(scatterPlotMatrix0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(allFilter0, instances0);
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      filter0.acceptInstance((InstanceEvent) null);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      
      testInstances0.setNumRelationalString((-73));
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals((-73), testInstances0.getNumRelationalString());
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertFalse(modelPerformanceChart0.isBusy());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertNotNull(modelPerformanceChart0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(modelPerformanceChart0, instances0);
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals((-73), testInstances0.getNumRelationalString());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertFalse(modelPerformanceChart0.isBusy());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertFalse(testSetEvent0.isStructureOnly());
      assertNotNull(testSetEvent0);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals((-73), testInstances0.getNumRelationalString());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numClasses());
      assertEquals(20, instances0.size());
      assertEquals(1, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals("Testdata", instances0.relationName());
      assertEquals(20, instances0.numInstances());
      assertTrue(modelPerformanceChart0.getFocusTraversalKeysEnabled());
      assertEquals("", modelPerformanceChart0.getOffscreenXAxis());
      assertEquals("", modelPerformanceChart0.getOffscreenAdditionalOpts());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicyProvider());
      assertEquals("Weka Chart Renderer", modelPerformanceChart0.getOffscreenRendererName());
      assertFalse(modelPerformanceChart0.isFocusCycleRoot());
      assertEquals("Visualize performance charts (such as ROC).", modelPerformanceChart0.globalInfo());
      assertEquals("500", modelPerformanceChart0.getOffscreenWidth());
      assertFalse(modelPerformanceChart0.isBusy());
      assertEquals("ModelPerformanceChart", modelPerformanceChart0.getCustomName());
      assertEquals("400", modelPerformanceChart0.getOffscreenHeight());
      assertEquals("", modelPerformanceChart0.getOffscreenYAxis());
      assertFalse(modelPerformanceChart0.isFocusTraversalPolicySet());
      assertFalse(modelPerformanceChart0.getIgnoreRepaint());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertFalse(testSetEvent0.isStructureOnly());
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      Appender appender0 = new Appender();
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.getIgnoreRepaint());
      assertNotNull(appender0);
      
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertTrue(nominalToBinary0.isNewBatch());
      assertFalse(nominalToBinary0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(nominalToBinary0.isOutputFormatDefined());
      assertFalse(nominalToBinary0.isFirstBatchDone());
      assertFalse(nominalToBinary0.getTransformAllValues());
      assertEquals("Whether all nominal values are turned into new attributes, not only if there are more than 2.", nominalToBinary0.transformAllValuesTipText());
      assertFalse(nominalToBinary0.getBinaryAttributesNominal());
      assertEquals("Whether resulting binary attributes will be nominal.", nominalToBinary0.binaryAttributesNominalTipText());
      assertNotNull(nominalToBinary0);
      
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertNotNull(allFilter0);
      
      filter0.list();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertNotNull(instances0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getExpressionString());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertNotNull(flowByExpression0);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getDebug());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getSilent());
      assertNotNull(checkGOE0);
      
      filter0.addDataSourceListener(flowByExpression0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getExpressionString());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      
      Sorter sorter0 = new Sorter();
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isBusy());
      assertEquals("10000", sorter0.getBufferSize());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNotNull(sorter0);
      
      DebugGraphics debugGraphics0 = new DebugGraphics();
      assertNotNull(debugGraphics0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertNotNull(appender0);
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertNotNull(testInstances0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      instanceEvent0.setStructure(instances0);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      assertEquals("The filter to be used.", filteredClusterer0.filterTipText());
      assertEquals("The base clusterer to be used.", filteredClusterer0.clustererTipText());
      assertEquals("Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter. Like the clusterer, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredClusterer0.globalInfo());
      assertNotNull(filteredClusterer0);
      
      SimpleKMeans simpleKMeans0 = (SimpleKMeans)filteredClusterer0.getClusterer();
      assertFalse(simpleKMeans0.getFastDistanceCalc());
      assertFalse(simpleKMeans0.getInitializeUsingKMeansPlusPlusMethod());
      assertEquals("Replace missing values globally with mean/mode.", simpleKMeans0.dontReplaceMissingValuesTipText());
      assertEquals(2, simpleKMeans0.getNumClusters());
      assertEquals(500, simpleKMeans0.getMaxIterations());
      assertEquals(10, simpleKMeans0.getSeed());
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", simpleKMeans0.initializeUsingKMeansPlusPlusMethodTipText());
      assertEquals("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.", simpleKMeans0.fastDistanceCalcTipText());
      assertEquals("The distance function to use for instances comparison (default: weka.core.EuclideanDistance). ", simpleKMeans0.distanceFunctionTipText());
      assertEquals("Display std deviations of numeric attributes and counts of nominal attributes.", simpleKMeans0.displayStdDevsTipText());
      assertFalse(simpleKMeans0.getDisplayStdDevs());
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
      assertEquals("set number of clusters", simpleKMeans0.numClustersTipText());
      assertFalse(simpleKMeans0.getDontReplaceMissingValues());
      assertEquals(2, simpleKMeans0.numberOfClusters());
      assertEquals("The filter to be used.", filteredClusterer0.filterTipText());
      assertEquals("The base clusterer to be used.", filteredClusterer0.clustererTipText());
      assertEquals("Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter. Like the clusterer, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredClusterer0.globalInfo());
      assertNotNull(simpleKMeans0);
      
      AbstractClusterer.runClusterer(filteredClusterer0, testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals("The filter to be used.", filteredClusterer0.filterTipText());
      assertEquals("The base clusterer to be used.", filteredClusterer0.clustererTipText());
      assertEquals("Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter. Like the clusterer, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredClusterer0.globalInfo());
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Instances instances1 = new Instances(".arff", arrayList0, 0);
      assertTrue(instances1.equals((Object)instances0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances1.numInstances());
      assertEquals(".arff", instances1.relationName());
      assertEquals(0, instances1.numAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertNotNull(instances1);
      
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances1);
      assertTrue(instances1.equals((Object)instances0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances1.numInstances());
      assertEquals(".arff", instances1.relationName());
      assertEquals(0, instances1.numAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", minkowskiDistance0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", minkowskiDistance0.attributeIndicesTipText());
      assertEquals(2.0, minkowskiDistance0.getOrder(), 0.01);
      assertEquals("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", minkowskiDistance0.dontNormalizeTipText());
      assertEquals("The order of the Minkowski distance ('1' is Manhattan distance and '2' the Euclidean distance).", minkowskiDistance0.orderTipText());
      assertFalse(minkowskiDistance0.getDontNormalize());
      assertFalse(minkowskiDistance0.rangesSet());
      assertEquals("", minkowskiDistance0.toString());
      assertNotNull(minkowskiDistance0);
      assertEquals(0, NormalizableDistance.R_MIN);
      assertEquals(2, NormalizableDistance.R_WIDTH);
      assertEquals(1, NormalizableDistance.R_MAX);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(sorter0, instances0);
      assertTrue(instances0.equals((Object)instances1));
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isBusy());
      assertEquals("10000", sorter0.getBufferSize());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertTrue(instances0.equals((Object)instances1));
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isBusy());
      assertEquals("10000", sorter0.getBufferSize());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.isFocusCycleRoot());
      assertNotSame(instances0, instances1);
      
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertNotNull(scatterPlotMatrix0);
      
      Rectangle rectangle0 = scatterPlotMatrix0.getVisibleRect();
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      assertEquals("Replace missing values globally with mean/mode.", simpleKMeans0.dontReplaceMissingValuesTipText());
      assertFalse(simpleKMeans0.getDontReplaceMissingValues());
      assertEquals(2, simpleKMeans0.numberOfClusters());
      assertEquals("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.", simpleKMeans0.fastDistanceCalcTipText());
      assertEquals(500, simpleKMeans0.getMaxIterations());
      assertFalse(simpleKMeans0.getDisplayStdDevs());
      assertEquals(10, simpleKMeans0.getSeed());
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", simpleKMeans0.initializeUsingKMeansPlusPlusMethodTipText());
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
      assertEquals("set number of clusters", simpleKMeans0.numClustersTipText());
      assertFalse(simpleKMeans0.getInitializeUsingKMeansPlusPlusMethod());
      assertEquals("The distance function to use for instances comparison (default: weka.core.EuclideanDistance). ", simpleKMeans0.distanceFunctionTipText());
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
      assertFalse(simpleKMeans0.getFastDistanceCalc());
      assertEquals(2, simpleKMeans0.getNumClusters());
      assertEquals("Display std deviations of numeric attributes and counts of nominal attributes.", simpleKMeans0.displayStdDevsTipText());
      assertNotNull(simpleKMeans0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("", flowByExpression0.getExpressionString());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertNotNull(flowByExpression0);
      
      scatterPlotMatrix0.setOffscreenXAxis("@data");
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("@data", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      
      FlowByExpression flowByExpression1 = new FlowByExpression();
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertFalse(flowByExpression1.isBusy());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("", flowByExpression1.getExpressionString());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertNotNull(flowByExpression1);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(flowByExpression1, instances0, (-77), (-77), 0, 0);
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertFalse(flowByExpression1.isBusy());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("", flowByExpression1.getExpressionString());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertEquals((-77), trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals((-77), trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertNotNull(trainingSetEvent0);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertFalse(flowByExpression1.isBusy());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("", flowByExpression1.getExpressionString());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertEquals((-77), trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals((-77), trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertNotSame(flowByExpression1, flowByExpression0);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getDebug());
      assertNotNull(checkGOE0);
      
      flowByExpression1.scrollRectToVisible(rectangle0);
      assertFalse(flowByExpression1.equals((Object)flowByExpression0));
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("@data", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals("FlowByExpression", flowByExpression1.getCustomName());
      assertFalse(flowByExpression1.isBusy());
      assertEquals("", flowByExpression1.getTrueStepName());
      assertEquals("", flowByExpression1.getExpressionString());
      assertFalse(flowByExpression1.isFocusTraversalPolicySet());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression1.globalInfo());
      assertFalse(flowByExpression1.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression1.isFocusCycleRoot());
      assertEquals("", flowByExpression1.getFalseStepName());
      assertTrue(flowByExpression1.getFocusTraversalKeysEnabled());
      assertFalse(flowByExpression1.getIgnoreRepaint());
      assertNotSame(flowByExpression1, flowByExpression0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      checkGOE0.setDebug(false);
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getDebug());
      
      scatterPlotMatrix0.addHierarchyListener((HierarchyListener) null);
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("@data", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      
      TestSetEvent testSetEvent0 = new TestSetEvent(checkGOE0, instances0, (-1), 0, 7, 478);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getDebug());
      assertEquals(478, testSetEvent0.getMaxSetNumber());
      assertEquals(7, testSetEvent0.getSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals((-1), testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getMaxRunNumber());
      assertNotNull(testSetEvent0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getDebug());
      assertEquals(478, testSetEvent0.getMaxSetNumber());
      assertEquals(7, testSetEvent0.getSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals((-1), testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getMaxRunNumber());
      
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getDebug());
      assertEquals(478, testSetEvent0.getMaxSetNumber());
      assertEquals(7, testSetEvent0.getSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals((-1), testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getMaxRunNumber());
      
      filter0.addDataSourceListener(scatterPlotMatrix0);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("@data", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      
      filter0.performRequest("Stop");
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.isFirstBatchDone());
      assertNotNull(allFilter0);
      
      boolean boolean0 = filter0.eventGeneratable(".arff");
      assertFalse(boolean0);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      InstanceEvent instanceEvent0 = new InstanceEvent(flowByExpression0, (Instance) null, 7);
      assertFalse(flowByExpression0.equals((Object)flowByExpression1));
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("", flowByExpression0.getExpressionString());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertEquals(7, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      filter0.acceptInstance(instanceEvent0);
      assertFalse(flowByExpression0.equals((Object)flowByExpression1));
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isBusy());
      assertEquals("", flowByExpression0.getExpressionString());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertEquals(7, instanceEvent0.getStatus());
      assertNotSame(flowByExpression0, flowByExpression1);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertNotNull(filter0);
      
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      assertFalse(nominalToBinary0.getBinaryAttributesNominal());
      assertFalse(nominalToBinary0.isOutputFormatDefined());
      assertTrue(nominalToBinary0.isNewBatch());
      assertFalse(nominalToBinary0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether all nominal values are turned into new attributes, not only if there are more than 2.", nominalToBinary0.transformAllValuesTipText());
      assertFalse(nominalToBinary0.getTransformAllValues());
      assertEquals("Whether resulting binary attributes will be nominal.", nominalToBinary0.binaryAttributesNominalTipText());
      assertFalse(nominalToBinary0.isFirstBatchDone());
      assertNotNull(nominalToBinary0);
      
      AllFilter allFilter0 = new AllFilter();
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertNotNull(allFilter0);
      
      filter0.list();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertNotNull(textDirectoryLoader0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      filter0.setLog(sysErrLog0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup();
      assertNotNull(checkboxGroup0);
      
      Checkbox checkbox0 = checkboxGroup0.getSelectedCheckbox();
      assertNull(checkbox0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertNotNull(multiFilter0);
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertNotNull(substringLabeler0);
      
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      FocusTraversalPolicy focusTraversalPolicy0 = substringLabeler0.getFocusTraversalPolicy();
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertNull(focusTraversalPolicy0);
      
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      assertNotNull(metalComboBoxEditor_UIResource0);
      
      instanceEvent0.setStatus(2147483645);
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals(2147483645, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      filter0.stop();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertEquals("last", classAssigner0.getClassColumn());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertNotNull(classAssigner0);
      
      FlowLayout flowLayout0 = new FlowLayout(1);
      assertEquals(1, flowLayout0.getAlignment());
      assertEquals(5, flowLayout0.getVgap());
      assertFalse(flowLayout0.getAlignOnBaseline());
      assertEquals(5, flowLayout0.getHgap());
      assertNotNull(flowLayout0);
      
      filter0.setLayout(flowLayout0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals(1, flowLayout0.getAlignment());
      assertEquals(5, flowLayout0.getVgap());
      assertFalse(flowLayout0.getAlignOnBaseline());
      assertEquals(5, flowLayout0.getHgap());
      
      filter0.removeInstanceListener(substringLabeler0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      
      boolean boolean1 = filter0.isBusy();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      filter0.removeTestSetListener(substringLabeler0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      
      boolean boolean2 = filter0.isBusy();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      filter0.addTrainingSetListener(substringLabeler0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      
      filter0.acceptInstance(instanceEvent0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals(2147483645, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotNull(filter0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertNotNull(testInstances0);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      assertNotNull(gridBagLayout0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      filter0.setLog(sysErrLog0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup();
      assertNotNull(checkboxGroup0);
      
      Checkbox checkbox0 = checkboxGroup0.getSelectedCheckbox();
      assertNull(checkbox0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.isFirstBatchDone());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertNotNull(multiFilter0);
      
      filter0.setFilter(multiFilter0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.getDebug());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.isOutputFormatDefined());
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertNotNull(substringLabeler0);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getDebug());
      assertNotNull(checkGOE0);
      
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      assertEquals("The filter to be used.", filteredClusterer0.filterTipText());
      assertEquals("The base clusterer to be used.", filteredClusterer0.clustererTipText());
      assertEquals("Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter. Like the clusterer, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredClusterer0.globalInfo());
      assertNotNull(filteredClusterer0);
      
      SimpleKMeans simpleKMeans0 = (SimpleKMeans)filteredClusterer0.getClusterer();
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
      assertEquals(2, simpleKMeans0.getNumClusters());
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
      assertFalse(simpleKMeans0.getFastDistanceCalc());
      assertEquals("Display std deviations of numeric attributes and counts of nominal attributes.", simpleKMeans0.displayStdDevsTipText());
      assertEquals(500, simpleKMeans0.getMaxIterations());
      assertEquals("Replace missing values globally with mean/mode.", simpleKMeans0.dontReplaceMissingValuesTipText());
      assertEquals("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.", simpleKMeans0.fastDistanceCalcTipText());
      assertFalse(simpleKMeans0.getDisplayStdDevs());
      assertEquals(2, simpleKMeans0.numberOfClusters());
      assertFalse(simpleKMeans0.getInitializeUsingKMeansPlusPlusMethod());
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", simpleKMeans0.initializeUsingKMeansPlusPlusMethodTipText());
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
      assertEquals("The distance function to use for instances comparison (default: weka.core.EuclideanDistance). ", simpleKMeans0.distanceFunctionTipText());
      assertFalse(simpleKMeans0.getDontReplaceMissingValues());
      assertEquals("set number of clusters", simpleKMeans0.numClustersTipText());
      assertEquals(10, simpleKMeans0.getSeed());
      assertEquals("The filter to be used.", filteredClusterer0.filterTipText());
      assertEquals("The base clusterer to be used.", filteredClusterer0.clustererTipText());
      assertEquals("Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter. Like the clusterer, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredClusterer0.globalInfo());
      assertNotNull(simpleKMeans0);
      
      AbstractClusterer.runClusterer(simpleKMeans0, testInstances0.DEFAULT_WORDS);
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
      assertEquals(2, simpleKMeans0.getNumClusters());
      assertEquals("set maximum number of iterations", simpleKMeans0.maxIterationsTipText());
      assertFalse(simpleKMeans0.getFastDistanceCalc());
      assertEquals("Display std deviations of numeric attributes and counts of nominal attributes.", simpleKMeans0.displayStdDevsTipText());
      assertEquals(500, simpleKMeans0.getMaxIterations());
      assertEquals("Replace missing values globally with mean/mode.", simpleKMeans0.dontReplaceMissingValuesTipText());
      assertEquals("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.", simpleKMeans0.fastDistanceCalcTipText());
      assertFalse(simpleKMeans0.getDisplayStdDevs());
      assertEquals(2, simpleKMeans0.numberOfClusters());
      assertFalse(simpleKMeans0.getInitializeUsingKMeansPlusPlusMethod());
      assertEquals("Initialize cluster centers using the probabilistic  farthest first method of the k-means++ algorithm", simpleKMeans0.initializeUsingKMeansPlusPlusMethodTipText());
      assertEquals("Preserve order of instances.", simpleKMeans0.preserveInstancesOrderTipText());
      assertEquals("The distance function to use for instances comparison (default: weka.core.EuclideanDistance). ", simpleKMeans0.distanceFunctionTipText());
      assertFalse(simpleKMeans0.getDontReplaceMissingValues());
      assertEquals("set number of clusters", simpleKMeans0.numClustersTipText());
      assertEquals(10, simpleKMeans0.getSeed());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals("The filter to be used.", filteredClusterer0.filterTipText());
      assertEquals("The base clusterer to be used.", filteredClusterer0.clustererTipText());
      assertEquals("Class for running an arbitrary clusterer on data that has been passed through an arbitrary filter. Like the clusterer, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredClusterer0.globalInfo());
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances(" ", arrayList0, 1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(" ", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertNotNull(instances0);
      
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(" ", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals(2.0, minkowskiDistance0.getOrder(), 0.01);
      assertFalse(minkowskiDistance0.getDontNormalize());
      assertEquals("The order of the Minkowski distance ('1' is Manhattan distance and '2' the Euclidean distance).", minkowskiDistance0.orderTipText());
      assertEquals("", minkowskiDistance0.toString());
      assertFalse(minkowskiDistance0.rangesSet());
      assertEquals("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", minkowskiDistance0.dontNormalizeTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", minkowskiDistance0.attributeIndicesTipText());
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", minkowskiDistance0.invertSelectionTipText());
      assertNotNull(minkowskiDistance0);
      assertEquals(1, NormalizableDistance.R_MAX);
      assertEquals(2, NormalizableDistance.R_WIDTH);
      assertEquals(0, NormalizableDistance.R_MIN);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(minkowskiDistance0, instances0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(" ", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals(2.0, minkowskiDistance0.getOrder(), 0.01);
      assertFalse(minkowskiDistance0.getDontNormalize());
      assertEquals("The order of the Minkowski distance ('1' is Manhattan distance and '2' the Euclidean distance).", minkowskiDistance0.orderTipText());
      assertEquals("", minkowskiDistance0.toString());
      assertFalse(minkowskiDistance0.rangesSet());
      assertEquals("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", minkowskiDistance0.dontNormalizeTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", minkowskiDistance0.attributeIndicesTipText());
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", minkowskiDistance0.invertSelectionTipText());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      assertEquals(1, NormalizableDistance.R_MAX);
      assertEquals(2, NormalizableDistance.R_WIDTH);
      assertEquals(0, NormalizableDistance.R_MIN);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(" ", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numAttributes());
      assertEquals(2.0, minkowskiDistance0.getOrder(), 0.01);
      assertFalse(minkowskiDistance0.getDontNormalize());
      assertEquals("The order of the Minkowski distance ('1' is Manhattan distance and '2' the Euclidean distance).", minkowskiDistance0.orderTipText());
      assertEquals("", minkowskiDistance0.toString());
      assertFalse(minkowskiDistance0.rangesSet());
      assertEquals("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", minkowskiDistance0.dontNormalizeTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", minkowskiDistance0.attributeIndicesTipText());
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", minkowskiDistance0.invertSelectionTipText());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertEquals(1, NormalizableDistance.R_MAX);
      assertEquals(2, NormalizableDistance.R_WIDTH);
      assertEquals(0, NormalizableDistance.R_MIN);
      
      filter0.disconnectionNotification(".arff", instanceEvent0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      String string0 = filter0.getCustomName();
      assertEquals("MultiFilter", string0);
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getSeed());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertNotNull(testInstances0);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      assertNotNull(gridBagLayout0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      sysErrLog0.logMessage("inproceedings");
      filter0.setLog(sysErrLog0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      CheckboxGroup checkboxGroup0 = new CheckboxGroup();
      assertNotNull(checkboxGroup0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qg!~]a}@");
      assertFalse(boolean0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      assertNotNull(hijrahDate0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.getDebug());
      assertNotNull(multiFilter0);
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.getDebug());
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertNotNull(substringLabeler0);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getSilent());
      assertFalse(checkGOE0.getDebug());
      assertFalse(checkGOE0.getSuccess());
      assertNotNull(checkGOE0);
      
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      assertNotNull(metalComboBoxEditor_UIResource0);
      
      instanceEvent0.setStatus((-2));
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals((-2), instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(instances0);
      
      instanceEvent0.setStructure(instances0);
      assertEquals(1, instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertNotNull(appender0);
      
      filter0.acceptInstance(instanceEvent0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      assertEquals("IncrementalClassifierEvaluator", incrementalClassifierEvaluator0.getCustomName());
      assertFalse(incrementalClassifierEvaluator0.getIgnoreRepaint());
      assertEquals("Evaluate the performance of incrementally trained classifiers.", incrementalClassifierEvaluator0.globalInfo());
      assertFalse(incrementalClassifierEvaluator0.isFocusCycleRoot());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicySet());
      assertFalse(incrementalClassifierEvaluator0.isBusy());
      assertEquals("For charting only, specify a sliding window size over which to compute performance stats. <= 0 means eval on whole stream", incrementalClassifierEvaluator0.chartingEvalWindowSizeTipText());
      assertFalse(incrementalClassifierEvaluator0.getOutputPerClassInfoRetrievalStats());
      assertFalse(incrementalClassifierEvaluator0.isFocusTraversalPolicyProvider());
      assertEquals("Output per-class info retrieval stats. If set to true, predictions get stored so that stats such as AUC can be computed. Note: this consumes some memory.", incrementalClassifierEvaluator0.outputPerClassInfoRetrievalStatsTipText());
      assertEquals(0, incrementalClassifierEvaluator0.getChartingEvalWindowSize());
      assertEquals("How often to report progress to the status bar.", incrementalClassifierEvaluator0.statusFrequencyTipText());
      assertEquals(100, incrementalClassifierEvaluator0.getStatusFrequency());
      assertTrue(incrementalClassifierEvaluator0.getFocusTraversalKeysEnabled());
      assertNotNull(incrementalClassifierEvaluator0);
      
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox(".arff", false);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
