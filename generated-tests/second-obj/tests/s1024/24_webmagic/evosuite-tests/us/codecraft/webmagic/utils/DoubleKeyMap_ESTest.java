/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:49:30 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0, class0);
      Integer integer0 = new Integer((-6133));
      doubleKeyMap1.remove((Object) integer0, "`j)62Sp'XHo");
      doubleKeyMap1.get((Object) class0, "");
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap2 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Map<String, Map<Object, Object>> map1 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>(map1, class0);
      Map<Object, Object> map2 = doubleKeyMap3.remove("`j)62Sp'XHo");
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      doubleKeyMap1.newMap();
      Integer integer0 = new Integer((-24));
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) integer0, (Map<Integer, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.put(object0, (Object) integer0, integer1);
      Integer integer2 = new Integer(0);
      doubleKeyMap0.put(object0, (Object) "", integer2);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(class0);
      doubleKeyMap1.remove((Integer) null);
      HashMap<Object, Map<String, Integer>> hashMap1 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(hashMap1, class0);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      Integer integer5 = doubleKeyMap2.put((Object) integer3, "", integer4);
      assertNull(integer5);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>((Map<String, Map<Object, String>>) null);
      doubleKeyMap0.newMap();
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(class1);
      Map<Integer, Object> map0 = doubleKeyMap2.newMap();
      hashMap0.put(class0, map0);
      Integer integer0 = new Integer(4446);
      doubleKeyMap1.remove((Object) class0, integer0);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap3 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer1 = new Integer(4446);
      doubleKeyMap3.put((String) null, (Object) null, integer1);
      Class<HashMap> class2 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap4 = new DoubleKeyMap<Object, Object, Object>(class2);
      doubleKeyMap4.newMap();
      DoubleKeyMap<Integer, String, String> doubleKeyMap5 = new DoubleKeyMap<Integer, String, String>();
      Integer integer2 = new Integer(4446);
      doubleKeyMap5.remove(integer2);
      DoubleKeyMap<String, Integer, Object> doubleKeyMap6 = new DoubleKeyMap<String, Integer, Object>();
      Integer integer3 = new Integer(4446);
      Integer integer4 = new Integer(4446);
      doubleKeyMap6.remove((String) null, integer4);
      doubleKeyMap5.put(integer3, "", (String) null);
      doubleKeyMap6.remove("", integer1);
      Integer integer5 = new Integer(4446);
      doubleKeyMap5.remove(integer5, (String) null);
      doubleKeyMap4.get((Object) "");
      doubleKeyMap5.get(integer0, (String) null);
      HashMap<Object, Map<Object, String>> hashMap1 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap7 = new DoubleKeyMap<Object, Object, String>();
      doubleKeyMap7.remove((Object) null);
      Class<Map> class3 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap8 = null;
      try {
        doubleKeyMap8 = new DoubleKeyMap<String, Object, Object>(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
