/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:59:56 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSource;
import okio.InflaterSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.exit();
      asyncTimeout0.newTimeoutException((IOException) null);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(10000000L, timeUnit0);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout1.enter();
      asyncTimeout0.deadlineNanoTime();
      // Undeclared exception!
      try { 
        asyncTimeout1.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      asyncTimeout0.source(inflaterSource0);
      asyncTimeout0.exit();
      asyncTimeout0.sink(buffer_UnsafeCursor0.buffer);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit();
      asyncTimeout0.exit();
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.deadlineNanoTime();
      asyncTimeout0.enter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "endvEdex > string.le:gth: ");
      asyncTimeout0.exit(false);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.deadlineNanoTime();
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      IOException iOException0 = null;
      asyncTimeout2.exit((IOException) null);
      Source source0 = null;
      AsyncTimeout asyncTimeout3 = new AsyncTimeout();
      asyncTimeout3.source((Source) null);
      try { 
        asyncTimeout1.throwIfReached();
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // deadline reached
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.exit();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(10000000L, timeUnit0);
      asyncTimeout1.exit(false);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout1.enter();
      asyncTimeout0.deadlineNanoTime();
      asyncTimeout0.exit(iOException0);
      asyncTimeout1.enter();
      asyncTimeout1.timedOut();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.deadlineNanoTime();
      asyncTimeout0.enter();
      AsyncTimeout.awaitTimeout();
      asyncTimeout0.timedOut();
      asyncTimeout0.newTimeoutException((IOException) null);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.exit();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(10000000L, timeUnit0);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout1.enter();
      asyncTimeout0.timedOut();
      asyncTimeout1.newTimeoutException((IOException) null);
      asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.timedOut();
      asyncTimeout1.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
