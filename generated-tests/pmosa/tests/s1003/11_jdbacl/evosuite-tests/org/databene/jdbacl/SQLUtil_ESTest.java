/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:54:02 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.net.URI;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("BlockedByteArray cannot be null", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0F);
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("", stringBuilder2);
      SQLUtil.addRequiredCondition("BlockedByteArray cannot be null", stringBuilder3);
      assertEquals("BlockedByteArray cannot be null0.0 or  and BlockedByteArray cannot be null", stringBuilder3.toString());
      assertEquals("BlockedByteArray cannot be null0.0 or  and BlockedByteArray cannot be null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("selectselectgetobject(string,map)", stringBuilder0);
      assertEquals("selectselectgetobject(string,map)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      SQLUtil.innerJoin((String) null, stringArray0, stringArray0[7], "RIGHTS", stringArray0);
      DBSchema dBSchema0 = new DBSchema("XJ6v|xdG$3");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JAVA_CLASS", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(stringArray0[7], defaultDBTable0, 96, stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("call-u|z/se7%");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
      
      String string1 = SQLUtil.innerJoin("call-u|z/se7%", stringArray0, "Bn~<e%v`kGR", "/Teo))IxR5j", stringArray0);
      assertEquals("Bn~<e%v`kGR as /Teo))IxR5j on ", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("<mvt{,URu]=cM!'.");
      assertNull(boolean0);
      
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("<mvt{,URu]=cM!'.", compositeDBObject0);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container <mvt{,URu]=cM!'.", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<mvt{,URu]=cM!'.";
      tableContainer0.getTable(")ZY4))7|NZ^0DIv;");
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(<mvt{,URu]=cM!'.)", string1);
      
      tableContainer0.getSequences(true);
      String string2 = SQLUtil.join("container <mvt{,URu]=cM!'.", "<mvt{,URu]=cM!'.", stringArray0, " NULL", " NULL", stringArray0);
      assertEquals("container <mvt{,URu]=cM!'. join  NULL as  NULL on <mvt{,URu]=cM!'..<mvt{,URu]=cM!'. =  NULL.<mvt{,URu]=cM!'.", string2);
      
      SQLUtil.isDML("<mvt{,URu]=cM!'.");
      String string3 = SQLUtil.renderColumnListWithTableName("j0zd\u0005)u:S*NP.0rxZ", stringArray0);
      assertEquals("j0zd\u0005)u:S*NP.0rxZ.<mvt{,URu]=cM!'.", string3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("Y$!PbM14@NtG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("alter index");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter index");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insertgm");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.isProcedureCall("executexsei { -   * i0e");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("executexsei { -   * i0e", stringBuilder0);
      assertEquals("executexsei { -   * i0e", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-3225.86188);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 3225.86188", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = SQLUtil.normalize("~", false);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "Y&22";
      SQLUtil.isProcedureCall("Y&22");
      SQLUtil.normalize("Y&22", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Y & 22");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("Y & 22");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XTAP`$ +si1916?Y>^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XTAP`$ +si1916?Y>^", dBSchema0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[x=oV5Y", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DBDataType dBDataType0 = null;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = "org.apache.derby.impl.sql.compile.GroupByNode";
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("CONSTRAINT ", defaultDBTable0, (-1799), "org.apache.derby.impl.sql.compile.GroupByNode");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("not yet implemented");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'not yet implemented' not found in table 'XTAP`$ +si1916?Y>^'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "]Sd";
      stringArray0[2] = "]Sd";
      stringArray0[3] = "]Sd";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = "<yR>OrQBeWQ*V!wv2]m";
      SQLUtil.join("", "]Sd", stringArray0, "]Sd", "<yR>OrQBeWQ*V!wv2]m", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBConstraint dBConstraint0 = null;
      String string1 = "o{5ZO";
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("BlockedByteArray cannot be null", stringBuilder0);
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("", stringBuilder1);
      SQLUtil.addRequiredCondition("BlockedByteArray cannot be null", stringBuilder2);
      assertEquals("BlockedByteArray cannot be null", stringBuilder2.toString());
      assertEquals("BlockedByteArray cannot be null", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("+\"", false, "+\"", "exec");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XTAP`$ +si1916?Y>^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XTAP`$ +si1916?Y>^", dBSchema0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = "[x=oV5Y";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[x=oV5Y", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint1, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      UUID uUID0 = null;
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getConstraintTableDescriptor((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("constraint", (DBTable) null, (-2014), "constraint");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("constraint", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~zjaS");
      Locale locale0 = Locale.ITALIAN;
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      Object[] objectArray0 = new Object[7];
      ValueDecimal valueDecimal1 = (ValueDecimal)ValueDecimal.ONE;
      objectArray0[0] = (Object) valueDecimal1;
      objectArray0[1] = (Object) "";
      ValueDecimal valueDecimal2 = (ValueDecimal)ValueDecimal.ONE;
      objectArray0[2] = (Object) valueDecimal2;
      objectArray0[3] = (Object) "*D(4(+MXOs>.l5s";
      objectArray0[4] = (Object) nameSpec0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "*D(4(+MXOs>.l5s", objectArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*D(4(+MXOs>.l5s";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(*D(4(+MXOs>.l5s, , )", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DBDataType dBDataType0 = DBDataType.getInstance(565, "");
      Integer integer0 = new Integer(273);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(*D(4(+MXOs>.l5s, , )", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("(*D(4(+MXOs>.l5s, , ), , ", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("getObject(String,Map)");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.setName("'uk0+U1w%owf(se");
      DBSchema dBSchema0 = new DBSchema("create materialized view", dBCatalog0);
      boolean boolean1 = SQLUtil.isProcedureCall("callxtap`$ +si1916?y>^");
      assertFalse(boolean1 == boolean0);
      
      String string0 = SQLUtil.normalize("getObject(String,Map)", false);
      assertEquals("getObject (String, Map)", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "callxtap`$ +si1916?y>^";
      stringArray0[1] = "'uk0+U1w%owf(se";
      stringArray0[2] = "create materialized view";
      stringArray0[3] = "getObject(String,Map)";
      stringArray0[4] = "getObject(String,Map)";
      stringArray0[5] = "getObject(String,Map)";
      stringArray0[6] = "callxtap`$ +si1916?y>^";
      stringArray0[7] = "'uk0+U1w%owf(se";
      stringArray0[8] = "getObject (String, Map)";
      String string1 = SQLUtil.innerJoin((String) null, stringArray0, "getObject(String,Map)", "alter index", stringArray0);
      assertEquals("getObject(String,Map) as alter index on null.callxtap`$ +si1916?y>^ = alter index.callxtap`$ +si1916?y>^ and null.'uk0+U1w%owf(se = alter index.'uk0+U1w%owf(se and null.create materialized view = alter index.create materialized view and null.getObject(String,Map) = alter index.getObject(String,Map) and null.getObject(String,Map) = alter index.getObject(String,Map) and null.getObject(String,Map) = alter index.getObject(String,Map) and null.callxtap`$ +si1916?y>^ = alter index.callxtap`$ +si1916?y>^ and null.'uk0+U1w%owf(se = alter index.'uk0+U1w%owf(se and null.getObject (String, Map) = alter index.getObject (String, Map)", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XTAP`$ +si1916?Y>^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XTAP`$ +si1916?Y>^", dBSchema0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.isProcedureCall("SELECT * FROM XTAP`$ +si1916?Y>^ WHERE ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(665, "[x=oV5Y");
      Integer integer0 = new Integer(665);
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("selectgetobject(string,map)");
      assertTrue(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("uH%]WX*Y<U,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uH%]WX*Y<U,");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "selectgetobject(string,map)", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT selectgetobject(string,map) PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.isQuery("getObject(String,Map)");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.setName("'uk0+U1w%owf(se");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "getObject(String,Map)";
      stringArray0[1] = "call";
      stringArray0[2] = "'uk0+U1w%owf(se";
      stringArray0[3] = "aq@ZocJ=KeuIb?} @a";
      SQLUtil.leftJoin("aq@ZocJ=KeuIb?} @a", stringArray0, (String) null, "aq@ZocJ=KeuIb?} @a", stringArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String string0 = SQLUtil.substituteMarkers("call", "getObject(String,Map)", mockJapaneseDate0);
      assertEquals("call", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.removeComments("inner");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.isQuery("getObject(String,Map)");
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getObject(String,Map)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execy&22");
      DBDataType dBDataType0 = DBDataType.getInstance((-275), "^S7:_vSSE|g,{");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execy&22", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("execy&22.execy&22", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[x=oV5Y", true, stringArray0);
      String string1 = SQLUtil.normalize("SELECT * FROM null WHERE ", true);
      assertEquals("SELECT * FROM null WHERE", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execy&22");
      DBDataType dBDataType0 = DBDataType.getInstance((-275), "^S7:_vSSE|g,{");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execy&22", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^S7:_vSSE|g,{");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "execy&22";
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      objectArray0[2] = (Object) valueDecimal0;
      objectArray0[3] = (Object) "^S7:_vSSE|g,{";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "execy&22", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop index");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")TTLjT";
      stringArray0[1] = "execy&22";
      String string0 = SQLUtil.innerJoin("select intodependentid", stringArray0, "fMw|-w1", "^S7:_vSSE|g,{", stringArray0);
      assertEquals("fMw|-w1 as ^S7:_vSSE|g,{ on select intodependentid.)TTLjT = ^S7:_vSSE|g,{.)TTLjT and select intodependentid.execy&22 = ^S7:_vSSE|g,{.execy&22", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()TTLjT, execy&22)", string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execy&22");
      DBDataType dBDataType0 = DBDataType.getInstance((-275), "^S7:_vSSE|g,{");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execy&22", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^S7:_vSSE|g,{");
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "execy&22";
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      objectArray0[2] = (Object) valueDecimal0;
      objectArray0[3] = (Object) "^S7:_vSSE|g,{";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "execy&22", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      String string0 = SQLUtil.normalize("MONTH", false);
      assertEquals("MONTH", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "u&t`%llrQ}<>s";
      stringArray0[1] = "u&t`%llrQ}<>s";
      stringArray0[2] = "u&t`%llrQ}<>s";
      stringArray0[3] = "u&t`%llrQ}<>s";
      stringArray0[4] = "u&t`%llrQ}<>s";
      SQLUtil.renderColumnListWithTableName("u&t`%llrQ}<>s", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('X');
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("getObject(String,Map)");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.setName("'uk0+U1w%owf(se");
      DBSchema dBSchema0 = new DBSchema("create materialized view", dBCatalog0);
      String string0 = SQLUtil.normalize("getObject(String,Map)", false);
      assertEquals("getObject (String, Map)", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "callxtap`$ +si1916?y>^";
      stringArray0[1] = "'uk0+U1w%owf(se";
      stringArray0[2] = "create materialized view";
      stringArray0[3] = "getObject(String,Map)";
      stringArray0[4] = "getObject(String,Map)";
      stringArray0[5] = "getObject(String,Map)";
      stringArray0[6] = "callxtap`$ +si1916?y>^";
      String string1 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("'uk0+U1w%owf(se", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XTAP`$ +si1916?Y>^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.isProcedureCall(" = ");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XTAP`$ +si1916?Y>^");
      DBSchema dBSchema1 = new DBSchema("]i[Mn");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema XTAP`$ +si1916?Y>^", string0);
      assertNotNull(string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-2840), "XTAP`$ +si1916?Y>^");
      Integer integer0 = new Integer((-2840));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DEPENDENTFINDER", (DBTable) null, dBDataType0, (Integer) null);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DEPENDENTFINDER XTAP`$ +SI1916?Y>^ NULL", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[x=oV5Y", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      NameSpec nameSpec2 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec2);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.normalize("call-u|zi/s'^e)%", true);
      SQLUtil.removeComments("Initilized native library OK.");
      String string0 = " NOT";
      VersionNumber versionNumber0 = VersionNumber.valueOf("call - u | zi / s '^e)%'");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Initilized native library OK.", "Initilized native library OK.", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("[x=ov5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '[x=ov5'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      assertEquals("", stringBuilder1.toString());
      
      String string1 = SQLUtil.normalize("drop materialized view", true);
      assertEquals("drop materialized view", string1);
      
      String string2 = SQLUtil.substituteMarkers("fm", "fm", nameSpec0);
      assertEquals("ALWAYS", string2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.removeComments("8Dq\"bS`luW^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.normalize("u%]WX*Y<U,", true);
      SQLUtil.normalize("create table]<tfqjs6.wl", true);
      DBTable dBTable0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("+", false, "[i&ORCdV0YbX]~Q8[gy", "execute");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-105);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBDataType.getInstance(2147483645, "create unique index_'5q");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.normalize(",5w3$I~\"ZRP27&l;\"4", false);
      assertEquals(", 5w3 $ I ~ \"ZRP27&l;\" 4", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.normalize("select", false);
      String string0 = SQLUtil.normalize(" on ", false);
      assertEquals("on", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(inputStreamReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 4", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.normalize("u%]WX*Y<U,", true);
      SQLUtil.removeComments("u % ] WX * Y < U,");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[x=oV5Y", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT [x=oV5Y ", string0);
      
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance((-3917), "5&%E0e[");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[x=oV5Y", defaultDBTable0, dBDataType0, integer0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("[x=oV5Y", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "[x=oV5Y";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[x=oV5Y";
      stringArray0[1] = "[x=oV5Y";
      boolean boolean0 = false;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[x=oV5Y", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "[x=oV5Y";
      stringArray0[1] = "[x=oV5Y";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[0], false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      String string0 = SQLUtil.normalize("blobBufferSize", false);
      assertEquals("blobBufferSize", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.normalize("*/", false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter index";
      stringArray0[1] = "truncate";
      stringArray0[2] = "*/";
      stringArray0[3] = "*/";
      stringArray0[4] = "*/";
      stringArray0[5] = "*/";
      stringArray0[6] = "left";
      SQLUtil.renderColumnListWithTableName("*/", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*/");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(602);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create materialized viewukiz}h-ns^*e&(z", false, "create materialized viewukiz}h-ns^*e&(z", "setShort(String,short)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create materialized viewukiz}h-ns^*e&(z\" ", stringBuilder0.toString());
      
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"create materialized viewukiz}h-ns^*e&(z\" ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("setShort(String,short)");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "create materialized viewukiz}h-ns^*e&(z";
      stringArray0[1] = "               ";
      String string1 = SQLUtil.innerJoin("create materialized viewukiz}h-ns^*e&(z", stringArray0, "setShort(String,short)", "               ", stringArray0);
      assertEquals("setShort(String,short) as                 on create materialized viewukiz}h-ns^*e&(z.create materialized viewukiz}h-ns^*e&(z =                .create materialized viewukiz}h-ns^*e&(z and create materialized viewukiz}h-ns^*e&(z.                =                .               ", string1);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      assertEquals("CHECK setShort(String,short)", string2);
  }
}
