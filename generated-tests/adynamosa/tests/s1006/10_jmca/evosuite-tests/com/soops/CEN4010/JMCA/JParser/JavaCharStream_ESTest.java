/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 06:06:10 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = ":ta{;?w<`oCkKwb";
      StringReader stringReader0 = new StringReader(":ta{;?w<`oCkKwb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(':', char0);
      
      javaCharStream0.bufpos = 827;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(827, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals('t', char1);
      assertFalse(char1 == char0);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(827, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotNull(string1);
      assertEquals(":\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      
      stringReader0.reset();
      javaCharStream0.nextCharInd = 289;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      int int0 = javaCharStream0.getEndLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(827, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, int0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(827, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(264);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1597), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 2179, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.Done();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.mark(3510);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((Reader) stringReader0, 3022, 3022, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)ta#\"f.tQ9Djv");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9w/nL)ta#\"f.tQ9Djv");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(3, byteArray0.length);
      assertEquals('\n', char0);
      
      javaCharStream0.adjustBeginLineColumn(1766, 2048);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2048, javaCharStream0.getEndColumn());
      assertEquals(2048, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals(1766, javaCharStream0.getBeginLine());
      assertEquals(1766, javaCharStream0.getLine());
      assertEquals(1766, javaCharStream0.getEndLine());
      assertEquals(3, byteArray0.length);
      
      javaCharStream0.line = (-748);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2048, javaCharStream0.getEndColumn());
      assertEquals(2048, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals(1766, javaCharStream0.getBeginLine());
      assertEquals(1766, javaCharStream0.getLine());
      assertEquals(1766, javaCharStream0.getEndLine());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char char1 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals(1766, javaCharStream0.getBeginLine());
      assertEquals((-747), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-747), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(3, byteArray0.length);
      assertEquals('\uFFFD', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.FillBuff();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals(1766, javaCharStream0.getBeginLine());
      assertEquals((-747), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-747), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn(45, 45);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(2, byteArray0.length);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(2, byteArray0.length);
      assertEquals('\t', char0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(2, byteArray0.length);
      assertEquals(48, int0);
      
      javaCharStream0.adjustBeginLineColumn(13, (-482));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals((-482), javaCharStream0.getEndColumn());
      assertEquals((-482), javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals((-482), javaCharStream0.getColumn());
      assertEquals(2, byteArray0.length);
      
      javaCharStream0.adjustBeginLineColumn(4, 115);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(2, byteArray0.length);
      
      int int1 = javaCharStream0.getEndColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-31)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(2, byteArray0.length);
      assertEquals(115, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2488), (-2488));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals('/', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = stringReader1.ready();
      assertNotSame(stringReader1, stringReader0);
      assertTrue(boolean1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean1 == boolean0);
      
      javaCharStream0.tokenBegin = 364;
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      
      long long0 = stringReader0.skip(3048L);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0L, long0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader1, 79, (-1), 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char3 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals('9', char3);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(char3 == char0);
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getEndLine());
      assertNotNull(string0);
      assertEquals("9", string0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      stringReader1.close();
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader2, 3022, (-1), 79);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('O');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3953, 1481, 1940);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null, (-2660), 0, 102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals('c', char0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-17);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-17)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-17)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char char1 = javaCharStream1.BeginToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-17)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(8, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(8, javaCharStream1.getColumn());
      assertEquals(2, byteArray0.length);
      assertEquals('\t', char1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(char1 == char0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-17)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      // Undeclared exception!
      try { 
        stringReader2.mark((byte) (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.bufpos = javaCharStream0.bufpos;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.available = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(1L);
      assertEquals(1L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 931);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup((-1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.UpdateLineColumn('A');
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      int int1 = JavaCharStream.hexval('A');
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('v', char0);
      
      char[] charArray0 = javaCharStream0.GetSuffix(11);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(11, charArray0.length);
      assertNotNull(charArray0);
      
      int int2 = javaCharStream0.getEndColumn();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = javaCharStream0.getLine();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      String string1 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(string1);
      assertEquals("v", string1);
      assertFalse(string1.equals((Object)string0));
      
      char char1 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('a', char1);
      assertFalse(char1 == char0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int4 = (-2675);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-2675));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)ta#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2979, 2979);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.bufsize = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getBeginLine());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals(2979, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals(2979, javaCharStream0.getColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getBeginLine());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2979);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals(2979, int0);
      
      stringReader0.reset();
      stringReader0.reset();
      javaCharStream0.tokenBegin = (-223);
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2980, javaCharStream0.getColumn());
      
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2980, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals('n', char3);
      assertFalse(char3 == char1);
      assertFalse(char3 == char0);
      assertFalse(char3 == char2);
      
      javaCharStream0.inBuf = 2979;
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2980, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2980, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals((-223), int1);
      assertFalse(int1 == int0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2980, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      
      char char4 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getBeginColumn());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals('w', char4);
      assertTrue(char4 == char1);
      assertFalse(char4 == char3);
      assertFalse(char4 == char2);
      assertFalse(char4 == char0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      assertEquals(11, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(11, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      int[] intArray0 = new int[6];
      javaCharStream0.adjustBeginLineColumn(2979, 90);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getBeginColumn());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals(2980, javaCharStream0.getColumn());
      
      intArray0[0] = 2134;
      char char5 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals('\u0000', char5);
      assertFalse(char5 == char3);
      assertFalse(char5 == char1);
      assertFalse(char5 == char4);
      assertFalse(char5 == char0);
      assertFalse(char5 == char2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2998), 2979);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      String string0 = javaCharStream1.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(string0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      try { 
        javaCharStream1.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)ta#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2979, 2979);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.bufsize = 3;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getBeginLine());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals(2979, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals(2979, javaCharStream0.getColumn());
      assertEquals('9', char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2979);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals(2979, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2979, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals(2979, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2979, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals(2979, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2979, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2979, int0);
      
      stringReader0.reset();
      stringReader0.reset();
      javaCharStream0.tokenBegin = (-223);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      
      char char2 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      javaCharStream0.inBuf = 2979;
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-222), int1);
      assertFalse(int1 == int0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals('\u0000', char3);
      assertFalse(char3 == char0);
      assertFalse(char3 == char1);
      assertFalse(char3 == char2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertEquals(11, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(11, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      char char4 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals('\u0000', char4);
      assertFalse(char4 == char1);
      assertFalse(char4 == char2);
      assertTrue(char4 == char3);
      assertFalse(char4 == char0);
      
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)ta#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2979, 2979);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.bufsize = 3;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getColumn());
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2979, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getBeginLine());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2979, javaCharStream0.getLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals(2979, javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals(2979, javaCharStream0.getEndLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2979);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals('/', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2980, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2980, javaCharStream0.getColumn());
      assertEquals(2979, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2979, int0);
      
      stringReader0.reset();
      stringReader0.reset();
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals('n', char3);
      assertFalse(char3 == char0);
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      
      javaCharStream0.inBuf = 2979;
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), int1);
      assertFalse(int1 == int0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'w';
      intArray0[1] = (int) '9';
      intArray0[2] = (int) '/';
      intArray0[3] = 2979;
      intArray0[4] = 303;
      javaCharStream0.bufcolumn = intArray0;
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals(119, javaCharStream0.getColumn());
      
      char char4 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals('w', char4);
      assertTrue(char4 == char1);
      assertFalse(char4 == char0);
      assertFalse(char4 == char3);
      assertFalse(char4 == char2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int2 = 11;
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      
      javaCharStream0.ExpandBuff(true);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2488), (-2488));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2487), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2487), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2487), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2487), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      long long0 = stringReader0.skip(3048L);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0L, long0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader1, 79, (-1), 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char3 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals('9', char3);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(char3 == char2);
      assertTrue(char3 == char0);
      assertFalse(char3 == char1);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getColumn());
      assertNotNull(string0);
      assertEquals("9", string0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      char char4 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals('w', char4);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(char4 == char1);
      assertFalse(char4 == char0);
      assertFalse(char4 == char3);
      assertFalse(char4 == char2);
      
      int int0 = javaCharStream0.getLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(79, int0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaCharStream0.adjustBeginLineColumn(79, 77);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(77, javaCharStream0.getColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.bufsize = 3;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2983);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      
      char char2 = javaCharStream0.ReadByte();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, int0);
      
      stringReader0.reset();
      stringReader0.reset();
      javaCharStream0.tokenBegin = 13;
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getLine());
      
      char char3 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals('n', char3);
      assertFalse(char3 == char1);
      assertFalse(char3 == char2);
      assertFalse(char3 == char0);
      
      javaCharStream0.inBuf = 2983;
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      
      int int1 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), int1);
      assertFalse(int1 == int0);
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      
      char char4 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals('w', char4);
      assertTrue(char4 == char1);
      assertFalse(char4 == char3);
      assertFalse(char4 == char2);
      assertFalse(char4 == char0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int2 = 11;
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      assertEquals(11, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(11, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      int[] intArray0 = new int[6];
      javaCharStream0.adjustBeginLineColumn(2983, 90);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(4971, javaCharStream0.getBeginLine());
      assertEquals(4971, javaCharStream0.getLine());
      assertEquals(4971, javaCharStream0.getEndLine());
      
      intArray0[0] = 2134;
      javaCharStream0.bufpos = 6;
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(4971, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      char char5 = javaCharStream0.readChar();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(4971, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals('\u0000', char5);
      assertFalse(char5 == char0);
      assertFalse(char5 == char1);
      assertFalse(char5 == char3);
      assertFalse(char5 == char4);
      assertFalse(char5 == char2);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(4971, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(2134);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.bufsize = 3;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2983);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      
      char char2 = javaCharStream0.ReadByte();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertNotNull(string0);
      assertEquals("9w", string0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, int0);
      
      stringReader0.reset();
      javaCharStream0.tokenBegin = 13;
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char3 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals('n', char3);
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      assertFalse(char3 == char0);
      
      javaCharStream0.inBuf = 2983;
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getEndLine());
      
      int int1 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), int1);
      assertFalse(int1 == int0);
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getEndLine());
      
      char char4 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals('w', char4);
      assertFalse(char4 == char2);
      assertTrue(char4 == char1);
      assertFalse(char4 == char0);
      assertFalse(char4 == char3);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(11, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2134;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = (int) '9';
      intArray0[4] = (-223);
      char char5 = javaCharStream0.BeginToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals('\u0000', char5);
      assertFalse(char5 == char2);
      assertFalse(char5 == char1);
      assertFalse(char5 == char3);
      assertFalse(char5 == char4);
      assertFalse(char5 == char0);
      
      int int2 = javaCharStream0.getLine();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getEndLine());
      
      int int3 = javaCharStream0.getEndLine();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2983, (-223), 2);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaCharStream1.GetSuffix(5420);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.bufsize = 3;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertNotNull(string0);
      assertEquals("9w", string0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2983, int0);
      
      stringReader0.reset();
      javaCharStream0.tokenBegin = 13;
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals('n', char3);
      assertFalse(char3 == char0);
      assertFalse(char3 == char1);
      assertFalse(char3 == char2);
      
      javaCharStream0.inBuf = 2983;
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), int1);
      assertFalse(int1 == int0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      
      char char4 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals('w', char4);
      assertFalse(char4 == char3);
      assertTrue(char4 == char1);
      assertFalse(char4 == char0);
      assertFalse(char4 == char2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.limit());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2134;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = (int) '9';
      intArray0[4] = (-223);
      char char5 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals('\u0000', char5);
      assertFalse(char5 == char2);
      assertFalse(char5 == char1);
      assertFalse(char5 == char0);
      assertFalse(char5 == char4);
      assertFalse(char5 == char3);
      
      int int2 = javaCharStream0.getLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaCharStream1.UpdateLineColumn('9');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.bufsize = 3;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertNotNull(string0);
      assertEquals("9w", string0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, int0);
      
      stringReader0.reset();
      stringReader0.reset();
      javaCharStream0.tokenBegin = 13;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals('n', char3);
      assertFalse(char3 == char1);
      assertFalse(char3 == char0);
      assertFalse(char3 == char2);
      
      javaCharStream0.inBuf = 2983;
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-222), int1);
      assertFalse(int1 == int0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      char char4 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals('w', char4);
      assertTrue(char4 == char1);
      assertFalse(char4 == char2);
      assertFalse(char4 == char0);
      assertFalse(char4 == char3);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      assertEquals(11, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(11, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      int[] intArray0 = new int[6];
      javaCharStream0.adjustBeginLineColumn(2983, 90);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(4971, javaCharStream0.getEndLine());
      assertEquals(4971, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(4971, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      
      intArray0[0] = 2134;
      intArray0[1] = 3;
      intArray0[2] = 3;
      char char5 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4972, javaCharStream0.getLine());
      assertEquals(4972, javaCharStream0.getEndLine());
      assertEquals(4972, javaCharStream0.getBeginLine());
      assertEquals('\u0000', char5);
      assertFalse(char5 == char2);
      assertFalse(char5 == char0);
      assertFalse(char5 == char4);
      assertFalse(char5 == char1);
      assertFalse(char5 == char3);
      
      int int2 = javaCharStream0.getLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4972, javaCharStream0.getLine());
      assertEquals(4972, javaCharStream0.getEndLine());
      assertEquals(4972, javaCharStream0.getBeginLine());
      assertEquals(4972, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4972, javaCharStream0.getLine());
      assertEquals(4972, javaCharStream0.getEndLine());
      assertEquals(4972, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(4972);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.bufsize = 3;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2983);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      
      char char2 = javaCharStream0.ReadByte();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals("9w", string0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, int0);
      
      stringReader0.reset();
      javaCharStream0.tokenBegin = 13;
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getLine());
      
      char char3 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals('n', char3);
      assertFalse(char3 == char0);
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      
      javaCharStream0.inBuf = 2983;
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      
      int int1 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), int1);
      assertFalse(int1 == int0);
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-222), javaCharStream0.getBeginLine());
      
      char char4 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals('w', char4);
      assertTrue(char4 == char1);
      assertFalse(char4 == char0);
      assertFalse(char4 == char2);
      assertFalse(char4 == char3);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2134;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = (int) '9';
      intArray0[4] = (-223);
      intArray0[5] = (int) 'w';
      javaCharStream0.bufline = intArray0;
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getBeginColumn());
      
      int int2 = stringReader0.read(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, (-223), (-3754), 748);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(2134, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix((-3754));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      int int0 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2488), (-2488));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      javaCharStream0.adjustBeginLineColumn(0, (-522));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-522), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-521), javaCharStream0.getEndColumn());
      assertEquals((-521), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-521), javaCharStream0.getColumn());
      assertEquals('9', char0);
      
      javaCharStream0.adjustBeginLineColumn((-351), 4096);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-351), javaCharStream0.getBeginLine());
      assertEquals(4096, javaCharStream0.getColumn());
      assertEquals((-351), javaCharStream0.getEndLine());
      assertEquals((-351), javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(4096, javaCharStream0.getEndColumn());
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-351), javaCharStream0.getBeginLine());
      assertEquals(4096, javaCharStream0.getColumn());
      assertEquals((-351), javaCharStream0.getEndLine());
      assertEquals((-351), javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(4096, javaCharStream0.getEndColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-351), javaCharStream0.getBeginLine());
      assertEquals(4096, javaCharStream0.getColumn());
      assertEquals((-351), javaCharStream0.getEndLine());
      assertEquals((-351), javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(4096, javaCharStream0.getEndColumn());
      assertNotNull(string0);
      assertEquals("9", string0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-351), javaCharStream0.getBeginLine());
      assertEquals(4096, javaCharStream0.getColumn());
      assertEquals((-351), javaCharStream0.getEndLine());
      assertEquals((-351), javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(4096, javaCharStream0.getEndColumn());
      assertEquals(4096, int1);
      assertFalse(int1 == int0);
      
      char char2 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-351), javaCharStream0.getBeginLine());
      assertEquals(4097, javaCharStream0.getColumn());
      assertEquals(4097, javaCharStream0.getEndColumn());
      assertEquals((-351), javaCharStream0.getEndLine());
      assertEquals(4097, javaCharStream0.getBeginColumn());
      assertEquals((-351), javaCharStream0.getLine());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      int int2 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-351), javaCharStream0.getBeginLine());
      assertEquals(4097, javaCharStream0.getColumn());
      assertEquals(4097, javaCharStream0.getEndColumn());
      assertEquals((-351), javaCharStream0.getEndLine());
      assertEquals(4097, javaCharStream0.getBeginColumn());
      assertEquals((-351), javaCharStream0.getLine());
      assertEquals((-351), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader0.close();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, (-32), 7, (-232));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      int int0 = (-2488);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2488), (-2488));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2487), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2487), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2487), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)51, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)51, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArrayInputStream1.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      stringReader0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)51, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArrayInputStream1.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      long long0 = byteArrayInputStream1.skip((-1371L));
      assertArrayEquals(new byte[] {(byte) (-3), (byte)51, (byte) (-1)}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream1.available());
      assertEquals(3, byteArray0.length);
      assertEquals(0L, long0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)51, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArrayInputStream1.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(pushbackInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      
      pushbackInputStream0.mark((-1));
      assertArrayEquals(new byte[] {(byte) (-3), (byte)51, (byte) (-1)}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertEquals(3, byteArrayInputStream1.available());
      assertEquals(3, byteArray0.length);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)51, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      char char2 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2487), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2486), javaCharStream0.getColumn());
      assertEquals((-2486), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2487), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2486), javaCharStream0.getColumn());
      assertEquals((-2486), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertNotNull(string0);
      assertEquals("w/", string0);
      
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2485), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2485), javaCharStream0.getBeginColumn());
      assertEquals((-2485), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals('n', char3);
      assertFalse(char3 == char0);
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      
      int int1 = javaCharStream0.getLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2485), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2485), javaCharStream0.getBeginColumn());
      assertEquals((-2485), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2488), int1);
      assertTrue(int1 == int0);
      
      char char4 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2484), javaCharStream0.getColumn());
      assertEquals((-2484), javaCharStream0.getEndColumn());
      assertEquals((-2485), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals('L', char4);
      assertFalse(char4 == char2);
      assertFalse(char4 == char3);
      assertFalse(char4 == char1);
      assertFalse(char4 == char0);
      
      StringReader stringReader1 = new StringReader("9w");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader1, 1061, (int) (byte) (-3), (int) (byte) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2488), (-2488));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char2 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-2487), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2487), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals('/', char2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaCharStream1.ExpandBuff(false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1, byteArray0.length);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char[] charArray0 = javaCharStream0.GetSuffix(4069);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-2487), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2487), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals(4069, charArray0.length);
      assertNotNull(charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      int int0 = javaCharStream0.getColumn();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-2487), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2487), javaCharStream0.getEndColumn());
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2487), int0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1, byteArray0.length);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(1, byteArray0.length);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0, (-2488), 4085, 4058);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream3.bufpos);
      assertEquals(0, javaCharStream3.getBeginLine());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertNotNull(javaCharStream3);
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaCharStream2.AdjustBuffSize();
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertNotSame(javaCharStream2, javaCharStream3);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(1, byteArray0.length);
      assertFalse(javaCharStream2.equals((Object)javaCharStream3));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      int int0 = 2983;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2983);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      
      char char2 = javaCharStream0.ReadByte();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertNotNull(string0);
      assertEquals("9w", string0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, int1);
      assertTrue(int1 == int0);
      
      javaCharStream0.tokenBegin = 13;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      
      String string1 = javaCharStream0.GetImage();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = javaCharStream0.getBeginColumn();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char char3 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals('n', char3);
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      assertFalse(char3 == char0);
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, 0, (-2026), (-2026));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2488), (-2488));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      byte byte0 = (byte)106;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = javaCharStream0.GetSuffix(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-2488), javaCharStream0.getBeginLine());
      assertEquals((-2488), javaCharStream0.getBeginColumn());
      assertEquals((-2488), javaCharStream0.getLine());
      assertEquals((-2488), javaCharStream0.getEndLine());
      assertEquals((-2488), javaCharStream0.getColumn());
      assertEquals((-2488), javaCharStream0.getEndColumn());
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      int int0 = (-479);
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, 1, 141, (-479));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 2983;
      StringReader stringReader1 = new StringReader("ZKyHVfQF7ED!G]D3Z");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2983, 80);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getBeginColumn());
      assertEquals('Z', char0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals('K', char1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn(2983, (-223));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getEndColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getEndColumn());
      assertEquals('y', char2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getEndColumn());
      assertNotNull(string0);
      assertEquals("ZK", string0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals((-223), javaCharStream0.getBeginColumn());
      assertEquals((-222), javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getEndColumn());
      assertEquals((-223), int1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(int1 == int0);
      
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(2984, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndLine());
      assertEquals('H', char3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(char3 == char1);
      assertFalse(char3 == char0);
      assertFalse(char3 == char2);
      
      int int2 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(2984, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getEndLine());
      assertEquals(2984, int2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 2442;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      int int1 = stringReader0.read(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2442, 65, 65);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      long long0 = stringReader0.skip(2442);
      assertEquals(0L, long0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackInputStream0, 70, (-929), 2442);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaCharStream1.backup((-929));
      assertEquals(928, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, byteArray0.length);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char[] charArray0 = javaCharStream1.GetSuffix(0);
      assertEquals(928, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, byteArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      int[] intArray0 = new int[0];
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getLine());
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)9;
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals('9', char0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char1 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals('w', char1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(char1 == char0);
      
      boolean boolean1 = stringReader1.markSupported();
      assertNotSame(stringReader1, stringReader0);
      assertTrue(boolean1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean1 == boolean0);
      
      stringReader1.close();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackInputStream0, 0, 2103, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char[] charArray0 = javaCharStream1.GetSuffix(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      int int0 = javaCharStream0.getColumn();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      int int1 = javaCharStream0.getEndLine();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, int1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1940);
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 1940, '5', '5');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '5';
      int int1 = stringReader0.read(charArray0, 1, 1);
      assertArrayEquals(new char[] {'\u0000', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 4056);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      int int0 = stringReader0.read(charBuffer0);
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2442, 65, 65);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      long long0 = stringReader0.skip(2442);
      assertEquals(0L, long0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      javaCharStream0.maxNextCharInd = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (-341), (-341));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1940);
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '5';
      int int1 = stringReader0.read(charArray0, 1, 1);
      assertArrayEquals(new char[] {'5', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-116);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 5, 5, 4510);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals('o', char0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertNotNull(string0);
      assertEquals("o", string0);
      
      javaCharStream0.UpdateLineColumn('5');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("`&n@<%Pg9UewAd;Xe");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals('`', char0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2984, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-204), 0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char2 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 10, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)73;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-93), (byte)66, (byte)18, (byte)73}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = javaCharStream0.getBeginColumn();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-204), 0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-204), javaCharStream0.getBeginLine());
      
      char char2 = javaCharStream0.ReadByte();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-203), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-203), javaCharStream0.getEndLine());
      assertEquals((-203), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals('n', char3);
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      assertFalse(char3 == char0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-203), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-203), javaCharStream0.getEndLine());
      assertEquals((-203), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-203), int0);
      
      javaCharStream0.adjustBeginLineColumn((-204), (-204));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals((-204), javaCharStream0.getColumn());
      assertEquals((-204), javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals((-204), javaCharStream0.getEndColumn());
      
      javaCharStream0.adjustBeginLineColumn((-204), (-203));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals((-203), javaCharStream0.getEndColumn());
      assertEquals((-203), javaCharStream0.getColumn());
      assertEquals((-203), javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getBeginColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-204), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals((-204), javaCharStream0.getLine());
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals('/', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)57;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2006), (byte) (-55));
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-38), (byte)57, (byte)0, (byte)10, (byte)123, (byte) (-127), (byte)0, (byte)93}, byteArray0);
      assertEquals((-55), byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-38), (byte)57, (byte)0, (byte)10, (byte)123, (byte) (-127), (byte)0, (byte)93}, byteArray0);
      assertEquals((-55), byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(sequenceInputStream0);
      
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, (int) (byte) (-127), 0, (int) (byte)10);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-38), (byte)57, (byte)0, (byte)10, (byte)123, (byte) (-127), (byte)0, (byte)93}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals((-55), byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-223), 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals('/', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals((-223), javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals((-223), javaCharStream0.getLine());
      assertEquals((-223), javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, int0);
      
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals('n', char3);
      assertFalse(char3 == char0);
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-222), javaCharStream0.getBeginLine());
      assertEquals((-222), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-222), javaCharStream0.getLine());
      assertEquals((-222), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2975, 2975);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2975, javaCharStream0.getBeginLine());
      assertEquals(2975, javaCharStream0.getLine());
      assertEquals(2975, javaCharStream0.getBeginColumn());
      assertEquals(2975, javaCharStream0.getEndColumn());
      assertEquals(2975, javaCharStream0.getColumn());
      assertEquals(2975, javaCharStream0.getEndLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2975, javaCharStream0.getBeginLine());
      assertEquals(2975, javaCharStream0.getLine());
      assertEquals(2975, javaCharStream0.getBeginColumn());
      assertEquals(2975, javaCharStream0.getEndColumn());
      assertEquals(2975, javaCharStream0.getColumn());
      assertEquals(2975, javaCharStream0.getEndLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2975, javaCharStream0.getBeginLine());
      assertEquals(2975, javaCharStream0.getLine());
      assertEquals(2975, javaCharStream0.getBeginColumn());
      assertEquals(2975, javaCharStream0.getEndColumn());
      assertEquals(2975, javaCharStream0.getColumn());
      assertEquals(2975, javaCharStream0.getEndLine());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, 1, 4056, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)126;
      byteArray0[8] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 91);
      assertArrayEquals(new byte[] {(byte)9, (byte)89, (byte)10, (byte)1, (byte)5, (byte) (-66), (byte)0, (byte)126, (byte)102}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-66), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)9, (byte)89, (byte)10, (byte)1, (byte)5, (byte) (-66), (byte)0, (byte)126, (byte)102}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)89, (-797), (int) (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)9, (byte)89, (byte)10, (byte)1, (byte)5, (byte) (-66), (byte)0, (byte)126, (byte)102}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JsobXDC;.]o(CR");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals('J', char0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      int[] intArray0 = new int[0];
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals('/', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      javaCharStream0.ReInit((Reader) stringReader0, 4056, 1, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      int int0 = stringReader0.read(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2442, 65, 65);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      long long0 = stringReader0.skip(2442);
      assertEquals(0L, long0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackInputStream0, 70, (-902), 2442);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char[] charArray0 = javaCharStream1.GetSuffix(0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, byteArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char char0 = 'Z';
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 75, 9);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals('c', char0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals(75, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bK");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2864), (-2864));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.available = (-2864);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2864), javaCharStream0.getEndColumn());
      assertEquals((-2864), javaCharStream0.getLine());
      assertEquals((-2864), javaCharStream0.getEndLine());
      assertEquals((-2864), javaCharStream0.getBeginColumn());
      assertEquals((-2864), javaCharStream0.getBeginLine());
      assertEquals((-2864), javaCharStream0.getColumn());
      assertEquals('b', char0);
      
      char[] charArray0 = javaCharStream0.GetSuffix(528);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2864), javaCharStream0.getEndColumn());
      assertEquals((-2864), javaCharStream0.getLine());
      assertEquals((-2864), javaCharStream0.getEndLine());
      assertEquals((-2864), javaCharStream0.getBeginColumn());
      assertEquals((-2864), javaCharStream0.getBeginLine());
      assertEquals((-2864), javaCharStream0.getColumn());
      assertEquals(528, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4f;87?^S{{acw`E;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 75, 75);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals(75, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals('4', char0);
      
      int int0 = javaCharStream0.getEndLine();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals(75, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hl<4=OiLI2");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, int0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      stringReader0.reset();
      javaCharStream0.ReInit((InputStream) mockFileInputStream0, 0, (-1182), (-4567));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(fileDescriptor0.valid());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char char0 = 'I';
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4v;r\b");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) null, 2595, 2595, 92);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 184, 184, 8);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('.', char0);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uhT$>$Xi");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals('9', char0);
      
      javaCharStream0.adjustBeginLineColumn((-204), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, int0);
      
      char char2 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-203), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-203), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-203), javaCharStream0.getBeginLine());
      assertEquals('/', char2);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-203), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-203), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-203), javaCharStream0.getBeginLine());
      assertEquals((-203), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      int int0 = (-1424);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1424), (-1424), 3);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1424), javaCharStream0.getBeginLine());
      assertEquals((-1424), javaCharStream0.getEndColumn());
      assertEquals((-1424), javaCharStream0.getBeginColumn());
      assertEquals((-1424), javaCharStream0.getLine());
      assertEquals((-1424), javaCharStream0.getColumn());
      assertEquals((-1424), javaCharStream0.getEndLine());
      assertEquals('.', char0);
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pim4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-749), (-1435), 92);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader1 = new StringReader("C]c)v;");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader1, 99, 92, 92);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(99, javaCharStream0.getLine());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals('C', char0);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.column = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2047, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = javaCharStream0.GetSuffix(117);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2047, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(117, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3136);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 3136, (-3130), 3136);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1435), (-1485), 93);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
      
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1940);
      assertNotNull(pushbackInputStream0);
      
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3953, 1481, 1940);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('I', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3953, javaCharStream0.getEndLine());
      assertEquals(3953, javaCharStream0.getBeginLine());
      assertEquals(1481, javaCharStream0.getColumn());
      assertEquals(3953, javaCharStream0.getLine());
      assertEquals(1481, javaCharStream0.getEndColumn());
      assertEquals(1481, javaCharStream0.getBeginColumn());
      assertEquals('n', char1);
      assertFalse(char1 == char0);
      
      int int1 = javaCharStream0.getLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3953, javaCharStream0.getEndLine());
      assertEquals(3953, javaCharStream0.getBeginLine());
      assertEquals(1481, javaCharStream0.getColumn());
      assertEquals(3953, javaCharStream0.getLine());
      assertEquals(1481, javaCharStream0.getEndColumn());
      assertEquals(1481, javaCharStream0.getBeginColumn());
      assertEquals(3953, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2983, 2983);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2983, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2983, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals('9', char0);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2984, javaCharStream0.getBeginColumn());
      assertEquals(2983, javaCharStream0.getLine());
      assertEquals(2984, javaCharStream0.getEndColumn());
      assertEquals(2983, javaCharStream0.getEndLine());
      assertEquals(2984, javaCharStream0.getColumn());
      assertEquals(2983, javaCharStream0.getBeginLine());
      assertEquals('w', char1);
      assertFalse(char1 == char0);
      
      javaCharStream0.adjustBeginLineColumn((-204), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals((-204), javaCharStream0.getBeginLine());
      
      char char2 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals('/', char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      
      int int0 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-204), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-204), javaCharStream0.getLine());
      assertEquals((-204), javaCharStream0.getBeginLine());
      assertEquals(0, int0);
      
      char char3 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-203), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-203), javaCharStream0.getBeginLine());
      assertEquals((-203), javaCharStream0.getLine());
      assertEquals('n', char3);
      assertFalse(char3 == char0);
      assertFalse(char3 == char1);
      assertFalse(char3 == char2);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-203), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-203), javaCharStream0.getBeginLine());
      assertEquals((-203), javaCharStream0.getLine());
      assertEquals((-203), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2123), 69);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup((-6099));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6098, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("6i-OEP/6(kh!bhK");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("qzU_(N1\"_cG;l}");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1940);
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 5, 5, 4510);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals('c', char0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
      
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("6");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('6', char0);
      
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = JavaCharStream.hexval('f');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = MockFile.createTempFile("w[]yNId6", "", (File) null);
      assertFalse(file0.isHidden());
      assertEquals("w[]yNId60", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp/w[]yNId60", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(file0.isHidden());
      assertEquals("w[]yNId60", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp/w[]yNId60", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup(86);
      assertEquals(4009, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(file0.isHidden());
      assertEquals("w[]yNId60", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp/w[]yNId60", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("`&n@<%Pg9UewAd]Xe");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("6i-OEP/6(kh!bhK");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1014, 1014);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = '7';
      charArray0[2] = 'q';
      charArray0[3] = 'i';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'D', '7', 'q', 'i'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      javaCharStream0.nextCharInd = 1014;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 1014;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(1014, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
      
      String string1 = javaCharStream0.GetImage();
      assertEquals(1014, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(dataInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaCharStream1.ReInit((Reader) stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaCharStream0.ExpandBuff(false);
      assertEquals(1014, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      String string2 = javaCharStream1.GetImage();
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      try { 
        javaCharStream1.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1293);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 4);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 120, 58, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = javaCharStream0.GetSuffix(1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      javaCharStream0.ReInit((InputStream) pushbackInputStream0, (-1), 58);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 2);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int0);
      
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",`!&g@>b'@:");
      assertFalse(boolean0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-136), 7, 7);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, 63, 7);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      String string0 = javaCharStream1.GetImage();
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(string0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      StringReader stringReader0 = new StringReader(string0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaCharStream0.ReInit((Reader) stringReader0, 7, (-2589), 7);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char char0 = ';';
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!{zqX");
      assertFalse(boolean0);
      
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("6i-OEP/6(kh!bhK");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals('6', char0);
      
      int int0 = javaCharStream0.getEndColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
      
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)88;
      int int1 = sequenceInputStream0.read(byteArray0, (int) (byte) (-59), 15);
      assertArrayEquals(new byte[] {(byte)108, (byte)3, (byte) (-59), (byte)88}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = sequenceInputStream0.read();
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2168, (-1699), (-1532));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = javaCharStream0.GetSuffix(1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, byteArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      javaCharStream0.ReInit((InputStream) dataInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = JavaCharStream.hexval('C');
      assertEquals(12, int0);
      
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 541, 12, 356);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      sequenceInputStream0.mark(2048);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 1, 0, 85);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      long long0 = pipedInputStream0.skip((-5977L));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-1), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.maxNextCharInd = (-1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, 80, 129);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaCharStream1.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      pipedInputStream0.mark((-12));
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream1.ReInit((InputStream) pipedInputStream0, (-12), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      javaCharStream0.adjustBeginLineColumn(65, (-12));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals((-12), javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char char0 = javaCharStream1.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals('9', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(0);
      assertEquals(2047, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = javaCharStream0.getEndColumn();
      assertEquals(2047, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      int int0 = 0;
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix((-2250));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X;OJ)Gf/q;eZ|!. ]v<");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-12), 83);
      assertArrayEquals(new byte[] {(byte)82, (byte)60, (byte) (-2), (byte) (-12), (byte)54}, byteArray0);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte)60, (byte) (-2), (byte) (-12), (byte)54}, byteArray0);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      javaCharStream0.ReInit((InputStream) pushbackInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)82, (byte)60, (byte) (-2), (byte) (-12), (byte)54}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(0);
      assertEquals(6143, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X;OJ)Gf/q;eZ|!. ]v<");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals('X', char0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      PipedInputStream pipedInputStream0 = new PipedInputStream(264);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1595), 0);
      javaCharStream0.ReInit((Reader) stringReader0, 2179, 0);
      javaCharStream0.Done();
      pipedInputStream0.mark(3510);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 62, 1);
      javaCharStream0.adjustBeginLineColumn(3510, 788);
      assertEquals(788, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-5977L));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, 0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iW");
      javaCharStream0.ReInit((Reader) null, 0, 0);
      bufferedInputStream0.available();
      JavaCharStream.hexval('7');
      javaCharStream0.AdjustBuffSize();
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, 613, 10);
      javaCharStream1.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2122), (-3413));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.available();
      try { 
        JavaCharStream.hexval('z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-5977L));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, bufferedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-1), 0);
      javaCharStream0.maxNextCharInd = (-1);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, 80, 129);
      javaCharStream1.Done();
      pipedInputStream0.mark(0);
      javaCharStream1.ReInit((InputStream) pipedInputStream0, 0, 0);
      javaCharStream0.adjustBeginLineColumn(65, 1132);
      assertEquals(66, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 4052);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 711);
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, 4096, 81);
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.prevCharIsLF = false;
      javaCharStream0.backup(0);
      javaCharStream0.getBeginLine();
      assertEquals(2047, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      PipedInputStream pipedInputStream0 = new PipedInputStream(264);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1595), 0);
      int int0 = 2179;
      javaCharStream0.ReInit((Reader) stringReader0, 2179, 0);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.backup(86);
      javaCharStream0.ReInit((Reader) stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(4527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      PipedInputStream pipedInputStream0 = new PipedInputStream(264);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1595), 0);
      javaCharStream0.ReInit((Reader) stringReader0, 2179, 0);
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = ":ta{;?w<`oCkKwb";
      StringReader stringReader0 = new StringReader(":ta{;?w<`oCkKwb");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      javaCharStream0.bufpos = 827;
      javaCharStream0.BeginToken();
      javaCharStream0.GetImage();
      javaCharStream0.nextCharInd = 289;
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JavaCharStream.hexval('e');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      StringReader stringReader0 = new StringReader("[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-119);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1);
      intArray0[4] = 14;
      intArray0[5] = (-5796);
      intArray0[6] = 67;
      javaCharStream0.bufcolumn = intArray0;
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('\"');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      int int0 = 0;
      javaCharStream0.bufpos = 0;
      javaCharStream0.available = 5;
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getColumn();
      javaCharStream0.backup(5);
      javaCharStream0.adjustBeginLineColumn(0, 0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int int1 = 7;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, 0, (byte)0);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 65, (-671), 66);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      javaCharStream0.Done();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = 0;
      stringReader0.skip(264);
      char[] charArray0 = new char[1];
      stringReader0.ready();
      charArray0[0] = 'i';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3853), 264, 0);
      int int1 = (-4171);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.bufpos = 0;
      javaCharStream0.available = 0;
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getColumn();
      javaCharStream0.backup(0);
      javaCharStream0.adjustBeginLineColumn(0, 0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 1104, 4096);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaCharStream0.ReInit((InputStream) dataInputStream0, 752, (-1917), (-5506));
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader(" column ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      javaCharStream0.bufsize = 8;
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(' ', char0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-5977L));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, bufferedInputStream0);
      int int0 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (-1048), 0, (-1));
      javaCharStream0.adjustBeginLineColumn(4096, 4096);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.bufpos = 0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaCharStream0.available = 0;
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getColumn();
      javaCharStream0.backup(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 11, (-1));
      javaCharStream0.ReInit((Reader) null, (-1), 4096);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      bufferedInputStream0.available();
      JavaCharStream.hexval('9');
      javaCharStream1.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      javaCharStream0.ReInit((Reader) stringReader0, 0, (-238));
      javaCharStream0.backup(0);
      assertEquals(4095, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-5977L));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, bufferedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-1), 0);
      javaCharStream0.maxNextCharInd = (-1);
      javaCharStream0.ReInit((Reader) null, 0, 0);
      bufferedInputStream0.available();
      javaCharStream0.nextCharInd = 613;
      javaCharStream0.column = 1;
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)0;
      byte byte0 = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-96), (byte)13);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = (-3853);
      int int1 = 0;
      char[] charArray0 = new char[1];
      stringReader0.ready();
      charArray0[0] = 'i';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3853), 264, 0);
      int int2 = (-4171);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char char0 = '!';
      try { 
        JavaCharStream.hexval('!');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = (-1047);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1047), 0, 0);
      int[] intArray0 = new int[1];
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Le6RnOuC.QoE&?GE");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      StringReader stringReader1 = new StringReader("");
      javaCharStream0.inputStream = (Reader) stringReader1;
      javaCharStream0.ReInit((Reader) stringReader0, 7, 7);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-1), (-1), (-1));
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l,5_LgSG]wAlAN#%Q");
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1);
      javaCharStream0.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9w/nL)a#nf.VtQ9Djv");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      javaCharStream0.backup(0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1858, 2957);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 1858, 752, 2957);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('I');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      int int0 = 0;
      javaCharStream0.bufpos = 0;
      javaCharStream0.available = 0;
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getColumn();
      javaCharStream0.backup(0);
      javaCharStream0.adjustBeginLineColumn(0, 0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int int1 = 7;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1014, 1014);
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = '7';
      charArray0[2] = 'q';
      charArray0[3] = 'i';
      stringReader0.read(charArray0);
      javaCharStream0.nextCharInd = 1014;
      javaCharStream0.available = 1014;
      javaCharStream0.GetImage();
      javaCharStream0.GetImage();
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((Reader) null, 5, 0, (-1890));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1683, (byte)0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-63), (byte) (-63));
      assertEquals((-1), javaCharStream0.bufpos);
  }
}
