/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:50:05 GMT 2019
 */

package org.apache.commons.imaging.common.mylzw;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.ByteOrder;
import org.apache.commons.imaging.common.mylzw.MyLzwCompressor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MyLzwCompressor_ESTest extends MyLzwCompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-1), byteOrder0, true, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      // Undeclared exception!
      try { 
        myLzwCompressor0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1, byteOrder0, false, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)67}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, true, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-28);
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-28);
      byteArray2[1] = (byte) (-28);
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      byteArray2[2] = (byte) (-28);
      byteArray2[3] = (byte) (-28);
      byteArray2[4] = (byte)113;
      byteArray2[5] = (byte) (-28);
      try { 
        myLzwCompressor0.compress(byteArray2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder3);
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder4);
      assertSame(byteOrder4, byteOrder0);
      assertSame(byteOrder4, byteOrder1);
      assertSame(byteOrder4, byteOrder2);
      assertSame(byteOrder4, byteOrder3);
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, true);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5}, byteArray1);
      
      byteArray0[1] = (byte)82;
      byte byte0 = (byte)110;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1153, byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertNotSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, true, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(994, byteOrder0, false, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(498, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = myLzwCompressor0.compress(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(498, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      byte[] byteArray3 = myLzwCompressor0.compress(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(498, byteArray3.length);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder3);
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder4);
      assertSame(byteOrder4, byteOrder3);
      assertSame(byteOrder4, byteOrder2);
      assertSame(byteOrder4, byteOrder0);
      assertSame(byteOrder4, byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1, byteOrder0, false, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-10);
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-1469), byteOrder0, true);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder3);
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder4);
      assertSame(byteOrder4, byteOrder2);
      assertSame(byteOrder4, byteOrder0);
      assertSame(byteOrder4, byteOrder1);
      assertSame(byteOrder4, byteOrder3);
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      
      byte[] byteArray0 = new byte[0];
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1087, byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)0;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertNotSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder3);
      assertFalse(byteOrder3.equals((Object)byteOrder0));
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder2);
      assertNotSame(byteOrder3, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, true);
      assertNotNull(myLzwCompressor0);
      assertFalse(byteOrder0.equals((Object)byteOrder3));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(byteOrder0.equals((Object)byteOrder2));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      // Undeclared exception!
      try { 
        myLzwCompressor0.compress((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(8, byteOrder0, true);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-3);
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertArrayEquals(new byte[] {(byte)45, (byte) (-3)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte) (-12), (byte)11, (byte)8}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertNotSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(0, byteOrder0, true, myLzwCompressor_Listener0);
      assertNotNull(myLzwCompressor0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[0];
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(1153, byteOrder0, false);
      assertNotNull(myLzwCompressor0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-2167), byteOrder0, false, myLzwCompressor_Listener0);
      byte[] byteArray0 = new byte[1];
      ByteOrder.nativeOrder();
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      byte byte0 = (byte)102;
      try { 
        myLzwCompressor0.compress(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyLzwCompressor.Listener myLzwCompressor_Listener0 = mock(MyLzwCompressor.Listener.class, new ViolatedAssumptionAnswer());
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(713, byteOrder0, true, myLzwCompressor_Listener0);
      byte[] byteArray0 = new byte[5];
      ByteOrder.nativeOrder();
      byteArray0[0] = (byte)1;
      ByteOrder.nativeOrder();
      byteArray0[1] = (byte) (-1);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = myLzwCompressor0.compress(byteArray0);
      byteArray0[3] = (byte)1;
      byte byte1 = (byte)0;
      // Undeclared exception!
      myLzwCompressor0.compress(byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor(2, byteOrder0, true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      MyLzwCompressor myLzwCompressor0 = new MyLzwCompressor((-1), byteOrder0, false, (MyLzwCompressor.Listener) null);
      byte[] byteArray0 = new byte[17];
      byteArray0[8] = (byte)1;
      byteArray0[1] = (byte)12;
      try { 
        myLzwCompressor0.compress(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CodeFromString
         //
         verifyException("org.apache.commons.imaging.common.mylzw.MyLzwCompressor", e);
      }
  }
}
