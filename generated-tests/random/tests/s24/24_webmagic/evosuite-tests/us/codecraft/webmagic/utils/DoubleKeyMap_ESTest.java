/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 08:30:41 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Map<Object, HashMap<Integer, Integer>>, Map<String, String>> hashMap0 = new HashMap<Map<Object, HashMap<Integer, Integer>>, Map<String, String>>();
      DoubleKeyMap<Map<Object, HashMap<Integer, Integer>>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<Integer, Integer>>, String, String>(hashMap0);
      Map<String, String> map0 = doubleKeyMap0.remove((Map<Object, HashMap<Integer, Integer>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Object, Object>>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      Object object0 = doubleKeyMap1.remove((String) null, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Map<Object, HashMap<Integer, Integer>>, String, Map<Object, HashMap<Integer, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<Integer, Integer>>, String, Map<Object, HashMap<Integer, Integer>>>();
      Map<Object, HashMap<Integer, Integer>> map0 = doubleKeyMap0.put((Map<Object, HashMap<Integer, Integer>>) null, "", (Map<Object, HashMap<Integer, Integer>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(3225);
      HashMap<Integer, Map<Object, Integer>> hashMap0 = new HashMap<Integer, Map<Object, Integer>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put(integer0, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>(hashMap0, class0);
      Integer integer1 = doubleKeyMap0.put(integer0, (Object) class0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Object, Object>>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      Object object0 = doubleKeyMap1.get((String) null, "");
      assertNull(object0);
  }
}
