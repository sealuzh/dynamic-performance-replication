/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:58:07 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      IOUtils.close(pipedOutputStream0);
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 0, (-3785), iOUtils0.specicalFlags_doubleQuotes);
      char char0 = '&';
      IOUtils.isIdent('&');
      IOUtils.decodeBase64("");
      char char1 = 'L';
      IOUtils.firstIdentifier('L');
      IOUtils.stringSize((-1L));
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = uTF8Decoder0.malformedInputAction();
      uTF8Decoder0.onMalformedInput(codingErrorAction0);
      iOUtils0.UTF8.encode("");
      // Undeclared exception!
      try { 
        iOUtils0.UTF8.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils.firstIdentifier('c');
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(1L);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = 0;
      IOUtils.encodeUTF8(iOUtils0.DIGITS, 0, 0, iOUtils0.specicalFlags_doubleQuotes);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 0, (-2296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2297
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.decodeBase64("v0Q Y");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("v0Q Y", 41, 41);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.isIdent('5');
      StringWriter stringWriter0 = new StringWriter(41);
      IOUtils.close(stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isIdent('-');
      assertFalse(boolean0);
      
      IOUtils.getStringProperty("y#f*,A3}RtX#");
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" nK7fVCW=ufO-", "com.alibaba.fastjson.util.IOUtils");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      IOUtils.close(objectOutputStream0);
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-113);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'N';
      charArray0[2] = 'W';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)74, (byte) (-113), charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", (-2130), (-39));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam(",TY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = IOUtils.stringSize(0);
      assertEquals(1, int0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      byte[] byteArray0 = new byte[0];
      int int0 = IOUtils.encodeUTF8(charArray0, 0, 0, byteArray0);
      assertEquals(0, int0);
      
      byte[] byteArray1 = IOUtils.decodeBase64(charArray0, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.util.IOUtils");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils.close((Closeable) null);
      IOUtils.isIdent('J');
      String string0 = "fu0Zt";
      IOUtils.isValidJsonpQueryParam("fu0Zt");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = ';';
      charArray0[3] = 'J';
      IOUtils.decodeUTF8(byteArray0, 0, (byte)0, charArray0);
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null, (byte)21, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOUtils.stringSize(0L);
      IOUtils.firstIdentifier('0');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '0';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 961, 224, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 961
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars(3196, 3196, iOUtils0.replaceChars);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3195
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils.stringSize(0L);
      int int0 = 8064;
      IOUtils.stringSize(8064);
      char[] charArray0 = new char[1];
      char char0 = 'z';
      charArray0[0] = 'z';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 4, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'R';
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.isIdent('5');
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) (-2296), (-2202), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOUtils.stringSize(0);
      String string0 = IOUtils.getStringProperty("c<Frdq3WA_-E\"jrg4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char char0 = '-';
      IOUtils.isIdent('-');
      IOUtils.getStringProperty("y#f*,A3}RtX#");
      IOUtils.decodeBase64("CHs;P");
      byte byte0 = (byte)0;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)0, (int) (byte)0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      IOUtils.isValidJsonpQueryParam((String) null);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 5, 1, iOUtils0.ASCII_CHARS);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils.firstIdentifier('R');
      IOUtils.isIdent('R');
      IOUtils.firstIdentifier('c');
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(1L);
      IOUtils.decodeBase64("AZ", 1, 1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = ']';
      charArray0[2] = 'R';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.isIdent('r');
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertEquals(0, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = 0;
      IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 2551, 0, iOUtils0.specicalFlags_doubleQuotes);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.DIGITS, 0, 2551);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2550
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.isIdent('');
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 0, 1, iOUtils0.specicalFlags_doubleQuotes);
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.close(pipedWriter0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 1, 52429);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52429
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(3, 3, iOUtils0.replaceChars);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("v0Q Y");
      IOUtils.firstIdentifier('.');
      IOUtils iOUtils0 = new IOUtils();
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 34;
      IOUtils.getChars((-1697), 34, iOUtils0.replaceChars);
      IOUtils.loadPropertiesFromFile();
      IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 45, (-1697), byteArray0);
      IOUtils.close(pipedWriter0);
      int int1 = 80;
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)94;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithFieldName");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = FLUSHED, new state = CODING_END
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IOUtils.stringSize(14L);
      byte[] byteArray0 = IOUtils.decodeBase64("/T[9-Zrh?)", 2, 2);
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 2, 33, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.isIdent('S');
      IOUtils.firstIdentifier('.');
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(2919L);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 4, 52);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils.isIdent('');
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 0, 1, iOUtils0.specicalFlags_doubleQuotes);
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.close(pipedWriter0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 1, 90);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65502
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 10, 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.DIGITS, 5, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getStringProperty("V#");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 45, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65415
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      char[] charArray0 = new char[9];
      int int1 = IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      assertArrayEquals(new char[] {'1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.firstIdentifier('.');
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeUTF8(byteArray0, (byte)0, 47, iOUtils0.CA);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.replaceChars, 56320, 2009, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56320
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      int int0 = 46;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 30, 46, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOUtils.decodeBase64("v0Q Y");
      IOUtils.firstIdentifier('.');
      IOUtils iOUtils0 = new IOUtils();
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.getChars(4, 68, iOUtils0.replaceChars);
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 68, 68, iOUtils0.specicalFlags_singleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 68
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = IOUtils.stringSize(0);
      IOUtils.isIdent('');
      IOUtils iOUtils0 = new IOUtils();
      int int1 = IOUtils.encodeUTF8(iOUtils0.replaceChars, 0, 1, iOUtils0.specicalFlags_doubleQuotes);
      assertTrue(int1 == int0);
      
      IOUtils.getChars((long) 1, 1, iOUtils0.CA);
      IOUtils.getChars(1683L, 46, iOUtils0.replaceChars);
      boolean boolean0 = IOUtils.isIdent('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("J", (int) (byte)0, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(10L);
      IOUtils.decodeBase64(" Wb@l>[Jg\"", 2, 2);
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("e]}-<BgxTcCsP<LJ}5");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte) (-114), 6, iOUtils0.CA);
      byte[] byteArray1 = IOUtils.decodeBase64("kqkJHWAOs9`D9rns");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils.isIdent('\u00BE');
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte)26, (int) (byte)26, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("DZ=");
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOUtils.firstIdentifier('R');
      IOUtils.decodeBase64("5`AdE6Q=");
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-114), (-32), iOUtils0.CA);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -33
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = IOUtils.stringSize(4L);
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      char[] charArray0 = new char[9];
      charArray0[1] = '\u0092';
      int int1 = IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      assertEquals(2, int1);
      
      int int2 = IOUtils.stringSize(2);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils.firstIdentifier('c');
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(1L);
      byte[] byteArray0 = IOUtils.decodeBase64("AZ");
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      charArray0[7] = 'c';
      IOUtils.getChars((byte)6, 1, charArray0);
      byte[] byteArray1 = IOUtils.decodeBase64("kqkJHWAOs9`D9rns");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = IOUtils.decodeBase64("V#");
      byte[] byteArray1 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.stringSize((-2016L));
      IOUtils.decodeBase64("fastjson.compatibleWithFieldName", (int) (byte)0, 3);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 184, 619);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 184
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(10L);
      IOUtils.decodeBase64("K.yCm'cylu]/de\"3fy!", 2, 2);
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64("q");
      IOUtils.decodeBase64("");
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = 's';
      charArray0[2] = '2';
      charArray0[3] = 'e';
      charArray0[4] = 'b';
      charArray0[5] = '4';
      charArray0[6] = ')';
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (-72), 104, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -72
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IOUtils.isIdent('\u0091');
      char[] charArray0 = new char[5];
      charArray0[1] = '\u0091';
      int int0 = IOUtils.stringSize((-1L));
      assertEquals(1, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithFieldName");
      int int1 = IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      assertEquals(2, int1);
      
      byte[] byteArray1 = IOUtils.specicalFlags_doubleQuotes;
      byte[] byteArray2 = IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 26, 5);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-45), (byte)90}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.IOUtils", 4, 4);
      assertArrayEquals(new byte[] {(byte)106, (byte)88, (byte) (-101)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOUtils.getStringProperty("$");
      StringReader stringReader0 = new StringReader("$");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      String string0 = IOUtils.readAll(bufferedReader0);
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0091';
      int int0 = IOUtils.stringSize((-1L));
      assertEquals(1, int0);
      
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      int int1 = IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      assertEquals(2, int1);
      
      byte[] byteArray1 = IOUtils.specicalFlags_doubleQuotes;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      String string0 = IOUtils.readAll(charArrayReader0);
      assertEquals("\u0000\u0091\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(byteArray0, 22, 47, iOUtils0.ASCII_CHARS);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOUtils.stringSize(1L);
      byte[] byteArray0 = IOUtils.decodeBase64("fstson.compatibleWithFieldName");
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0092';
      charArray0[1] = '\u0092';
      int int0 = IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize((long) 1);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-24);
      char[] charArray0 = new char[2];
      int int0 = 61;
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 2, 61, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = IOUtils.stringSize(1L);
      assertEquals(1, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("fstson.compatibleWithFieldName");
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      int int1 = IOUtils.decodeUTF8(byteArray0, 1, 18, charArray0);
      assertEquals((-1), int1);
      
      IOUtils.getStringProperty("yJ~+Z0<yoD2gQ@]d");
      int int2 = IOUtils.decodeUTF8(byteArray0, 11, 1, charArray0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavBean");
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 18, 18, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('\u008B');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      int int0 = IOUtils.decodeUTF8(byteArray0, 18, 18, charArray0);
      assertArrayEquals(new char[] {'j', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      IOUtils.getStringProperty("fastjson.compatibleWithJavaBean");
      char[] charArray1 = new char[6];
      charArray1[0] = '\u008B';
      charArray1[1] = ']';
      charArray1[2] = ']';
      charArray1[3] = ']';
      charArray1[4] = ']';
      charArray1[5] = ']';
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-24);
      char[] charArray0 = new char[4];
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 61, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize((long) 61);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)118;
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = '3';
      charArray0[2] = '%';
      charArray0[3] = '\\';
      charArray0[4] = '{';
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, (byte)50, charArray0);
      assertArrayEquals(new char[] {'B', '\u0012', '%', '\\', '{'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u010C');
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean1 = IOUtils.isIdent('\u010C');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.aNibaba.fastjson.util.IOUtils");
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '~';
      charArray0[2] = '!';
      charArray0[3] = '=';
      IOUtils.decodeUTF8(byteArray0, 4, 4, charArray0);
      boolean boolean0 = IOUtils.firstIdentifier('4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'P';
      charArray0[2] = 'J';
      charArray0[3] = 'd';
      charArray0[4] = 'i';
      charArray0[5] = 'U';
      charArray0[6] = '%';
      int int0 = IOUtils.decodeUTF8(byteArray0, 18, 4, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'j', 'P', 'J', 'd', 'i', 'U', '%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      IOUtils.stringSize((-961L));
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("V=n9N", 1, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
