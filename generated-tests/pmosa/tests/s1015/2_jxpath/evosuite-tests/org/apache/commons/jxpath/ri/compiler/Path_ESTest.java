/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:05:56 GMT 2018
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperation;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Path_ESTest extends Path_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("D)");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(864, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      boolean boolean0 = locationPath0.isSimplePath();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      QName qName0 = new QName("<[bw@");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<[bw@");
      Step step0 = new Step(2, nodeNameTest0, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.searchForPath(rootContext0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, expressionPath0);
      // Undeclared exception!
      try { 
        expressionPath0.getSingleNodePointerForSteps(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      locationPath0.toString();
      locationPath0.computeContextDependent();
      Expression[] expressionArray0 = new Expression[4];
      // Undeclared exception!
      try { 
        locationPath0.areBasicPredicates(expressionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      QName qName0 = new QName("FV9EVnvj{", "FV9EVnvj{");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) locationPath0;
      Step step0 = new Step(5, nodeNameTest0, expressionArray0);
      boolean boolean0 = locationPath0.isSimpleStep(step0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(1118, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(1118, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(1118, nodeNameTest0, (Expression[]) null);
      step2.toString();
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step((-3376), nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-3376), nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, (Expression[]) null, stepArray0);
      step1.isContextDependent();
      step4.toString();
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      boolean boolean0 = locationPath0.computeContextDependent();
      boolean boolean1 = locationPath0.isSimpleStep(step3);
      boolean boolean2 = locationPath0.areBasicPredicates((Expression[]) null);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = locationPath0.isSimpleStep(step5);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = null;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(170, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-3079), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(170, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(170, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-2319), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-3079), nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(descendantContext0);
      // Undeclared exception!
      try { 
        expressionPath0.getSingleNodePointerForSteps(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      QName qName0 = new QName("o%g.apache.commoqs.jxpath.ri.model.dom.DOMNodePointer");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2, nodeNameTest0, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[2];
      Step step1 = new Step(2802, nodeNameTest0, expressionArray0);
      stepArray0[0] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      // Undeclared exception!
      try { 
        expressionPath0.searchForPath(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("{8b'5");
      Expression[] expressionArray0 = new Expression[0];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Step[] stepArray0 = new Step[16];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(33, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      // Undeclared exception!
      try { 
        expressionPath0.evalSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-27));
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 5, nodeTypeTest0);
      // Undeclared exception!
      try { 
        expressionPath0.evalSteps(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = null;
      expressionArray0[1] = null;
      expressionArray0[2] = null;
      expressionArray0[3] = null;
      expressionArray0[4] = null;
      expressionArray0[5] = null;
      expressionArray0[6] = null;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      // Undeclared exception!
      try { 
        expressionPath0.isSimpleExpressionPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Step[] stepArray0 = null;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      locationPath0.computeContextDependent();
      locationPath0.toString();
      Expression expression0 = null;
      locationPath0.computeContextDependent();
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) locationPath0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = null;
      expressionArray1[1] = (Expression) locationPath0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) locationPath0;
      QName qName0 = new QName("1BwoI[nCfAr");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "1BwoI[nCfAr");
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) locationPath0;
      Step step0 = new Step(0, nodeNameTest0, expressionArray2);
      locationPath0.isSimpleStep(step0);
      // Undeclared exception!
      try { 
        locationPath0.areBasicPredicates(expressionArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QName qName0 = new QName("THEjq1m_");
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      expressionArray1[1] = (Expression) locationPath0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationMod0;
      expressionArray1[4] = (Expression) coreOperationLessThan0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(2657, expressionArray1);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[6] = expression0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, expressionArray1[2]);
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray1, (Step[]) null);
      Expression[] expressionArray2 = new Expression[0];
      boolean boolean0 = expressionPath0.areBasicPredicates(expressionArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreOperationUnion0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      constant0.toString();
      coreOperationNotEqual0.toString();
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(459);
      Step step0 = new Step(459, nodeTypeTest0, expressionArray0);
      step0.isContextDependent();
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      expressionPath0.isSimpleExpressionPath();
      expressionPath0.getExpression();
      expressionPath0.isSimplePath();
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.isSimplePath();
      Expression[] expressionArray1 = expressionPath0.getPredicates();
      nodeTypeTest0.toString();
      expressionPath0.getExpression();
      locationPath0.isAbsolute();
      expressionPath0.isSimplePath();
      expressionPath0.areBasicPredicates(expressionArray1);
      Expression[] expressionArray2 = expressionPath0.getPredicates();
      assertSame(expressionArray0, expressionArray2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(1118, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(1118, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Constant constant0 = new Constant("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, (Expression) null);
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) extensionFunction0;
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      expressionArray0[6] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Constant constant1 = new Constant("");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationNotEqual0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[4], expressionArray0[2]);
      Step step2 = new Step(2, nodeNameTest0, (Expression[]) null);
      Step step3 = new Step(6, nodeNameTest0, (Expression[]) null);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.isSimplePath();
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      Object object0 = RootContext.UNKNOWN_VALUE;
      variablePointerFactory0.createNodePointer((NodePointer) null, (QName) null, object0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = null;
      QName qName0 = new QName("", "");
      QName qName1 = new QName("$6^N7cVNcQfE");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      Step step0 = new Step(1189, nodeNameTest0, expressionArray0);
      Step step1 = new Step(1189, nodeNameTest0, expressionArray0);
      Constant constant0 = new Constant("$6^N7cVNcQfE");
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Constant constant1 = new Constant("$6^N7cVNcQfE");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, coreOperationOr0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      Step step2 = new Step(2, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step2;
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.isSimplePath();
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      VariablePointerFactory variablePointerFactory1 = new VariablePointerFactory();
      variablePointerFactory1.createNodePointer((NodePointer) null, qName0, (Object) extensionFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, step2, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        locationPath0.getSingleNodePointerForSteps(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      locationPath0.computeContextDependent();
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "JXPath: found  ");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) locationPath0;
      Step step0 = new Step(170, nodeNameTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-130));
      Step step1 = new Step(1, nodeTypeTest0, expressionArray0);
      Step step2 = new Step(170, nodeNameTest0, expressionArray0);
      Step step3 = new Step((-792), nodeTypeTest0, expressionArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, (Step[]) null);
      LocationPath locationPath1 = new LocationPath(false, (Step[]) null);
      LocationPath locationPath2 = new LocationPath(false, (Step[]) null);
      locationPath0.computeContextDependent();
      locationPath1.isSimpleStep(step2);
      boolean boolean0 = locationPath0.areBasicPredicates(expressionArray0);
      boolean boolean1 = expressionPath0.isSimpleStep(step2);
      assertFalse(boolean1);
      
      boolean boolean2 = locationPath0.isSimpleStep(step1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      Step step0 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      QName qName0 = new QName("normalize-space", "normalize-space");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "normalize-space");
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(4, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(4, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        expressionPath0.evalSteps(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = null;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step0;
      Step step2 = new Step((-3079), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      Step step3 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step3;
      Step step4 = new Step((-2319), nodeTypeTest0, expressionArray0);
      Step step5 = new Step((-3079), nodeTypeTest0, expressionArray0);
      stepArray0[7] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      expressionPath0.isSimpleStep(step0);
      expressionPath0.createContextForStep((EvalContext) null, 5, nodeTypeTest0);
      expressionPath0.getExpression();
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      // Undeclared exception!
      try { 
        expressionPath0.evalSteps(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      locationPath0.computeContextDependent();
      LocationPath locationPath1 = new LocationPath(true, (Step[]) null);
      locationPath1.toString();
      LocationPath locationPath2 = new LocationPath(false, (Step[]) null);
      locationPath2.computeContextDependent();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "hyhBpAkWf?K=zO");
      Step step0 = new Step(0, nodeNameTest0, (Expression[]) null);
      step0.toString();
      locationPath0.isSimpleStep(step0);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath2);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, (String) null);
      locationPath2.createContextForStep(predicateContext0, 12, nodeNameTest1);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath1, (Expression[]) null, (Step[]) null);
      // Undeclared exception!
      try { 
        expressionPath0.isSimpleExpressionPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      locationPath0.computeContextDependent();
      Step[] stepArray0 = new Step[3];
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step((-178), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(6, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1900), (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      locationPath0.toString();
      LocationPath locationPath2 = new LocationPath(false, (Step[]) null);
      locationPath0.computeContextDependent();
      QName qName0 = new QName("`s/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "hyhBpAkWf?K=zO");
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1900));
      locationPath1.createContextForStep((EvalContext) null, 1, nodeTypeTest0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath2, (Expression[]) null, (Step[]) null);
      // Undeclared exception!
      try { 
        expressionPath0.isSimpleExpressionPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      int int0 = (-3079);
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step1;
      Step step2 = new Step((-2319), nodeTypeTest0, expressionArray0);
      Step step3 = new Step((-3079), nodeTypeTest0, expressionArray0);
      stepArray0[7] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      expressionPath0.isSimpleStep(step3);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 8, nodeTypeTest0);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      expressionPath1.getExpression();
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        expressionPath1.evalSteps(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2068);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[1] = null;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expression0, coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreFunction0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      nodeTypeTest0.toString();
      QName qName0 = new QName("UNKNOWN()", "lsg");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.JXPathContext");
      Step step1 = new Step(2068, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      locationPath0.isSimplePath();
      // Undeclared exception!
      locationPath0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      locationPath0.computeContextDependent();
      LocationPath locationPath1 = new LocationPath(true, (Step[]) null);
      locationPath1.toString();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(854, nodeNameTest0, (Expression[]) null);
      Step step1 = new Step(10, nodeNameTest0, (Expression[]) null);
      Step step2 = new Step(1016, nodeNameTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step2;
      stepArray0[1] = step2;
      stepArray0[2] = step1;
      stepArray0[3] = step0;
      stepArray0[4] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, (Expression[]) null, stepArray0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest1);
      expressionPath0.isSimpleStep(step1);
      expressionPath0.createContextForStep(descendantContext0, 1016, nodeNameTest1);
      ExpressionPath expressionPath1 = new ExpressionPath(locationPath1, (Expression[]) null, stepArray0);
      boolean boolean0 = expressionPath0.computeContextDependent();
      expressionPath1.getExpression();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest1);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertNotNull(evalContext0);
      
      ExpressionPath expressionPath2 = new ExpressionPath(expressionPath0, (Expression[]) null, (Step[]) null);
      expressionPath2.toString();
      boolean boolean1 = locationPath0.isSimpleStep(step0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = expressionPath2.areBasicPredicates((Expression[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Step[] stepArray0 = new Step[8];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      boolean boolean1 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) locationPath0;
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      int int0 = 1;
      Step step1 = new Step(1, nodeTypeTest0, expressionArray0);
      Step step2 = new Step(1, nodeTypeTest0, expressionArray0);
      Step step3 = new Step(1, nodeTypeTest0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        expressionPath0.isSimpleStep(step2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      boolean boolean1 = locationPath0.areBasicPredicates(expressionArray0);
      assertTrue(boolean1);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      boolean boolean2 = locationPath0.isAbsolute();
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      locationPath0.areBasicPredicates(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, (String) null);
      locationPath0.createContextForStep((EvalContext) null, 13, (NodeTest) null);
      Step[] stepArray0 = locationPath0.getSteps();
      assertNull(stepArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      int int0 = 5;
      Step step0 = new Step(3, nodeTypeTest0, expressionArray0);
      nodeTypeTest0.toString();
      Step step1 = new Step(36, nodeTypeTest0, expressionArray0);
      Step step2 = new Step(3, nodeTypeTest0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 9, nodeTypeTest0);
      // Undeclared exception!
      try { 
        expressionPath1.buildContextChain((EvalContext) null, (-1137), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath0);
      locationPath0.createContextForStep((EvalContext) null, 12, (NodeTest) null);
      locationPath0.computeContextDependent();
      EvalContext evalContext0 = locationPath0.createContextForStep((EvalContext) null, 4, (NodeTest) null);
      assertTrue(evalContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      expressionPath0.createContextForStep((EvalContext) null, 7, nodeTypeTest0);
      expressionPath0.createContextForStep((EvalContext) null, 7, nodeTypeTest0);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      // Undeclared exception!
      try { 
        locationPath0.searchForPath((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer");
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      int int0 = CoreOperation.MULTIPLY_PRECEDENCE;
      Constant constant0 = new Constant(5);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationLessThanOrEqual0);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      Step step0 = new Step(11, processingInstructionTest0, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ExpressionPath expressionPath1 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      EvalContext evalContext0 = expressionPath1.createContextForStep((EvalContext) null, 11, processingInstructionTest0);
      expressionPath1.createContextForStep(evalContext0, 11, processingInstructionTest0);
      NodeTypeTest.nodeTypeToString(5);
      Constant constant1 = new Constant("org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual((Expression) null, constant1);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertTrue(locationPath0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QName qName0 = new QName("t`6Gp*c;&J_6w");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      expressionArray0[5] = (Expression) variableReference0;
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      expressionArray0[7] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      expressionPath0.getExpression();
      expressionPath0.isSimplePath();
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      Expression[] expressionArray1 = expressionPath0.getPredicates();
      Expression expression0 = expressionPath0.getExpression();
      locationPath0.areBasicPredicates(expressionArray1);
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) nodeTypeTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expression0, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Pointer pointer0 = locationPath0.getSingleNodePointerForSteps(evalContext0);
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      QName qName0 = new QName("");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      VariablePointer variablePointer1 = (VariablePointer)expressionPath0.searchForPath(rootContext0);
      assertFalse(variablePointer1.isAttribute());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("R`tU($X'i!ZAKUm ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(11, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      boolean boolean0 = JXPathContextReferenceImpl.USE_SOFT_CACHE;
      expressionPath0.createContextForStep((EvalContext) null, 6, nodeNameTest0);
      expressionPath0.evalSteps((EvalContext) null);
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      String string0 = locationPath0.toString();
      assertEquals("/following-sibling::R`tU($X'i!ZAKUm ", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      QName qName0 = new QName("R`tU($X'i!ZAKUm ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "R`tU($X'i!ZAKUm ");
      Step step0 = new Step(11, nodeNameTest0, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      Pointer pointer0 = expressionPath0.searchForPath(rootContext0);
      assertNull(pointer0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      QName qName0 = new QName("<[bw@");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<[bw@");
      Step step0 = new Step(2, nodeNameTest0, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      NullPointer nullPointer0 = (NullPointer)expressionPath0.searchForPath(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("R`tU($X'i!ZAKUm ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "R`tU($X'i!ZAKUm ");
      Step step0 = new Step(2, nodeNameTest0, (Expression[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, expressionPath0);
      Step[] stepArray1 = new Step[2];
      stepArray1[0] = step0;
      stepArray1[1] = step0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray1);
      NullPointer nullPointer0 = (NullPointer)expressionPath1.searchForPath(rootContext0);
      assertTrue(nullPointer0.isLeaf());
  }
}
