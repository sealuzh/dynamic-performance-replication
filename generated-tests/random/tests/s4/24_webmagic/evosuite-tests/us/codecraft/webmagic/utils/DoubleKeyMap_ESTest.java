/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 12:36:17 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Map<Object, Map<Map<String, String>, Map<Integer, Map<Object, Object>>>>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Object, Map<Map<String, String>, Map<Integer, Map<Object, Object>>>>>();
      Map<Object, Map<Map<String, String>, Map<Integer, Map<Object, Object>>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<String, String>, Map<Integer, Map<Object, Object>>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, String>, Map<Integer, Map<Object, Object>>>(map0, class0);
      Map<Integer, Map<Object, Object>> map1 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Map<String, String>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(class0);
      Object object0 = doubleKeyMap0.get((Integer) null, (Object) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(class0);
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(map0);
      Integer integer0 = new Integer((-1));
      Object object0 = doubleKeyMap2.get((Object) doubleKeyMap0, (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, Object>, Map<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Object>, Map<Object, Object>>((Map<Object, Map<Map<Object, Object>, Map<Object, Object>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, String, Integer>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, Integer> map0 = doubleKeyMap0.get(hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, Map<String, Object>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, Object> map0 = doubleKeyMap0.remove("", hashMap0);
      doubleKeyMap0.put("", (HashMap<String, String>) null, map0);
      Map<String, Object> map1 = doubleKeyMap0.remove("", hashMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<String, Integer>> hashMap0 = new HashMap<HashMap<Object, String>, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, String, Integer>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put(hashMap1, hashMap2);
      Integer integer1 = doubleKeyMap0.put(hashMap1, "", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Object>((Map<String, Map<HashMap<String, Object>, Object>>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put("", hashMap0, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.get("", hashMap0);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Object, String>>();
      Map<Object, HashMap<Object, String>> map0 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(map0);
  }
}
