/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:40:07 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-15);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (-1308), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "!$eEIY z7%";
      try { 
        Utility.typeOfSignature("!$eEIY z7%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $eEIY z7%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)0;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)0, (byte)28);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref((byte) (-39), (byte)80);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-39), (byte)28);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-39), (-2435));
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    <illegal opcode>\n1:    lastore\n2:    fcmpl\n3:    iload_2\n4:    nop\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    <illegal opcode>
         // 1:    lastore
         // 2:    fcmpl
         // 3:    iload_2
         // 4:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-59);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(2218L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)90, 76, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName(", low = ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-54), (int) (byte)25, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    land
         // 1:    saload
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("INSENSITIVE");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)55);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1126, 1377);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      Constant constant0 = constantFloat1.copy();
      constantArray0[3] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1595), 9963);
      assertEquals("0:    lconst_1\n1:    lconst_1\n2:    lconst_1\n3:    lconst_1\n4:    lconst_1\n5:    lstore\t\t%10\n7:    lconst_1\n8:    lconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";[]Z=\"";
      Utility.methodTypeToSignature("yk@!|_F#%dNf", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("([L;;)Lyk@!|_F#%dNf;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;)Lyk@!|_F#%dNf;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "3.e4nO7LB";
      try { 
        Utility.typeOfSignature("3.e4nO7LB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3.e4nO7LB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("return");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(objectOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) "return";
      objectArray0[2] = (Object) objectOutputStream0;
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.convertString(")\n");
      Utility.compactClassName(")\n", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-67);
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("$3d$v$e3$ff$bd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$3d$v$e3$ff$bd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 157;
      Utility.clearBit(157, 157);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9\"J0,#aY>4et[");
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-124);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.classOrInterface(2);
      Utility.replace("iload_0", "5B}N+&!x,?Aq", "5B}N+&!x,?Aq");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-23);
      byteArray0[8] = (byte)6;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)75, 65);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("impdep1");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, 82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-27);
      byteArray0[8] = (byte) (-100);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-21), (byte)58);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-623), (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload\t\t%58
         // 2:    <illegal opcode>
         // 3:    iload_0
         // 4:    land
         // 5:    istore_0
         // 6:    astore_2
         // 7:    <illegal opcode>
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)120;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$ffg2$H$o$M$H$$x", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "3+P";
      Utility.convertString("3+P");
      Utility.getSignature(";");
      String string1 = "%\\mffRM\\mbX7#hnZV_";
      try { 
        Utility.typeOfSignature("%mffRMmbX7#hnZV_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %mffRMmbX7#hnZV_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "#G15&]7+M1v$c<#";
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("#G15&]7+M1v$c<#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #G15&]7+M1v$c<#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)91;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, 603, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte) (-14);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-49), (-1295), false);
      assertEquals("0:    dload_2\n1:    dup2_x1\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    aload_0\n5:    fstore_3\n6:    l2f\n7:    dup_x1\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-96);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 0, (-2111), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    faload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(36, (-1045), false, '$');
      assertEquals("36", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iflt\t\t#12922", string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.decode("DTC%f\tVL", false);
      Utility.typeOfSignature("DTC%f\tVL");
      Utility.classOrInterface((byte)7);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("iushr", "iushr", false);
      Utility.methodSignatureReturnType("J&AF");
      try { 
        Utility.methodSignatureReturnType("iushr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iushr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("*&Z 2?$6(sk1");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8.printStats();
      constantUtf8_0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.setBit(20, 20);
      String string0 = "20HI:0EU.";
      MockFile mockFile0 = new MockFile("20HI:0EU.");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 0, 100, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2103, (int) (byte) (-53));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.getSignature("2!=Nd[)~>])");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "2!=Nd[)~>])";
      objectArray0[2] = (Object) "[L2!=Nd;";
      objectArray0[3] = (Object) "2!=Nd[)~>])";
      objectArray0[4] = (Object) "2!=Nd[)~>])";
      objectArray0[5] = (Object) "[L2!=Nd;";
      objectArray0[6] = (Object) "2!=Nd[)~>])";
      objectArray0[7] = (Object) "[L2!=Nd;";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteSequence0, byteSequence0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.compactClassName("jsr_w", "jsr_w", true);
      Utility.setBit(80, 80);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(65616, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)17;
      Utility.encode(byteArray0, false);
      Utility.getSignature("v+dj");
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(891.9);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, 79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)89;
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-47));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass((byte)89);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, (int) (byte)89, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "MwTd";
      try { 
        Utility.typeOfSignature("MwTd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MwTd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "Ej/4j4glCtMoY";
      try { 
        Utility.typeOfSignature("Ej/4j4glCtMoY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ej/4j4glCtMoY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "Y ks";
      try { 
        Utility.typeOfSignature("Y ks");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y ks
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "wB>E$C?";
      Utility.searchOpcode("wB>E$C?");
      String string1 = "d2l";
      Utility.getSignature("d2l");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-47);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-1), false);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.compactClassName("lookupswitch");
      Utility.typeOfSignature("*F");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "lookupswitch";
      objectArray0[1] = (Object) "lookupswitch";
      objectArray0[2] = (Object) "lookupswitch";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "*F";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "A";
      try { 
        Utility.typeOfSignature("A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)120;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 4, 56);
      assertEquals("4:    lstore_3\n5:    lconst_1\n6:    dup_x1\n7:    ishl\n", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1103, 70, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.setBit((-915), (-808));
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)100;
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-27);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte)100);
      String string0 = "Kz|eZ^h@/6u*NLs@2";
      try { 
        Utility.typeOfSignature("Kz|eZ^h@/6u*NLs@2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kz|eZ^h@/6u*NLs@2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-113);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, (int) (byte) (-91), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "AO1v!8!/?TA?W$%R4";
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Utility.decode("AO1v!8!/?TA?W$%R4", false);
      String string1 = "org.apache.bcel.classfile.ConstantInvokeDynamic";
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.ConstantInvokeDynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.ConstantInvokeDynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)26;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (-885));
      Utility.searchOpcode("_7m%%=5]9j^FC<~^");
      String[] stringArray0 = Constants.OPCODE_NAMES;
      try { 
        Utility.typeOfSignature(")`#>s7ur]@HB<'y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )`#>s7ur]@HB<'y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "OIDE{";
      try { 
        Utility.typeOfSignature("OIDE{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OIDE{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(125, 125, false, '5');
      try { 
        Utility.typeOfSignature("WPN*UA;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WPN*UA;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("Invalid type: ", "Invalid type: ", true);
      assertEquals("", string0);
      
      short short0 = Utility.searchOpcode("Invalid type: ");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.methodSignatureReturnType("Tej;k#_");
      assertEquals("ej", string1);
      
      int int0 = Utility.setBit((-1934), (short) (-1));
      assertEquals((-1934), int0);
      
      String string2 = Utility.convertString("");
      String string3 = Utility.classOrInterface((short) (-1));
      assertEquals("interface", string3);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "ej";
      objectArray0[3] = (Object) "Tej;k#_";
      objectArray0[4] = (Object) "ej";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "Tej;k#_";
      objectArray0[7] = (Object) "interface";
      String string4 = Utility.printArray(objectArray0, false);
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.searchOpcode("ireturn");
      Utility.isSet((-614), (-614));
      Utility.compactClassName("5E)${d::_;8[h%", true);
      try { 
        Utility.typeOfSignature("5E)${d::_;8[h%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5E)${d::_;8[h%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-90);
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((byte) (-90));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass("$a6");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-90), (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 1912);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.typeOfSignature("SENSITIVE");
      Utility.compactClassName("SENSITIVE");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString(",?_b>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,?_b>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, (-654), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.convertString("cz`~`#-r$?V4");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "cz`~`#-r$?V4";
      objectArray0[1] = (Object) "cz`~`#-r$?V4";
      objectArray0[2] = (Object) "cz`~`#-r$?V4";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-121));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-121));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-680), 127);
      Utility.searchOpcode("+Ef.o$[_6i");
      Utility.equals(byteArray0, byteArray0);
      Utility.signatureToString("L:;V");
      Utility.accessToString(127, false);
      try { 
        Utility.methodSignatureArgumentTypes("Lb60D?;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Lb60D?;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.isJavaIdentifierPart('|');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (-2348), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      Utility.accessToString(110);
      Utility.setBit(161, 110);
      String string0 = "0|ML=chhk9^z2yF9G";
      try { 
        Utility.typeOfSignature("0|ML=chhk9^z2yF9G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0|ML=chhk9^z2yF9G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "t)`1&]3PVh% $Fde";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("t)`1&]3PVh% $Fde", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 899, 899, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byte byte0 = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)125;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 124, (int) (byte)125, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokespecial");
      Utility.methodSignatureReturnType("c\"0k)ZfP Y{RYBH1S");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("boolean", "", "c\"0k)ZfP Y{RYBH1S", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-23);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)83);
      Utility.equals(byteArray0, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2062), 2466);
      try { 
        Utility.methodSignatureArgumentTypes("0:    aastore\n1:    <illegal opcode>\n2:    aaload\n3:    iconst_1\n4:    dstore\t\t%233\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    aastore
         // 1:    <illegal opcode>
         // 2:    aaload
         // 3:    iconst_1
         // 4:    dstore\t\t%233
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.getSignature("txFl=LL7j3X'3o9>");
      Utility.accessToString((-939), false);
      Utility.replace("-o[ {SKA", "void", "txFl=LL7j3X'3o9>");
      Utility.compactClassName("t<G|^", true);
      Utility.accessToString(41);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-28);
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-939), 64);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantClass constantClass0 = new ConstantClass((-4022));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("kxE+x<LG1D}33qK3pf4");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-127), (byte) (-127));
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2390);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 98, 3647, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.convertString(".");
      Utility.accessToString((-1842659833));
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-125);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)41, (byte)64);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(255, (-1629316479));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1226, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.clearBit(172, 172);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray(objectArray0);
      String string0 = "org.apache.bcel.classfile.Utility$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.compactClassName("V\"I20_cGR@Nq,y8", "V\"I20_cGR@Nq,y8", true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "V\"I20_cGR@Nq,y8";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "V\"I20_cGR@Nq,y8";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokevirtual");
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "V\"I20_cGR@Nq,y8";
      objectArray0[5] = (Object) "V\"I20_cGR@Nq,y8";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "V\"I20_cGR@Nq,y8";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1742, (int) (byte)13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)86;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      byteSequence0.readInt();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "[]";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "long";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      Utility.typeOfSignature("[]");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "Xq:0oOoY!g:cKfO!?.L";
      try { 
        Utility.typeOfSignature("Xq:0oOoY!g:cKfO!?.L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xq:0oOoY!g:cKfO!?.L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Llk$7VQgr]");
      String string0 = Utility.classOrInterface(112);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)33;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-785), 2881, false);
      assertEquals("0:    daload\n1:    fstore_0\n2:    i2l\n3:    lload_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)5;
      String string0 = "return";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      byteArray0[6] = (byte)22;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[7] = (byte) (-48);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, (-1824), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.accessToString((-2089));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "public private protected final volatile transient native interface abstract synthetic annotation enum";
      stringArray0[1] = "public private protected final volatile transient native interface abstract synthetic annotation enum";
      stringArray0[2] = "monitorenter";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[3] = "public private protected final volatile transient native interface abstract synthetic annotation enum";
      Utility.methodTypeToSignature("monitorenter", stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("public private protected final volatile transient native interface abstract synthetic annotation enum", "G$lm|T9/]#]xS%5_,(", "Y}|BQT'f+(93,zeXH");
      Utility.compactClassName("(Lpublic;Lpublic;Lmonitorenter;Lpublic;)Lmonitorenter;", false);
      Utility.setBit((-2337), (-2337));
      String string0 = Utility.convertString("Y}|BQT'f+(93,zeXH");
      Utility.decode(",", false);
      Utility.methodSignatureToString("(Lpublic;Lpublic;Lmonitorenter;Lpublic;)Lmonitorenter;", "if_icmpne", "S:D");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "public private protected final volatile transient native interface abstract synthetic annotation enum";
      objectArray0[1] = (Object) "Y}|BQT'f+(93,zeXH";
      objectArray0[2] = (Object) "(Lpublic;Lpublic;Lmonitorenter;Lpublic;)Lmonitorenter;";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "public private protected final volatile transient native interface abstract synthetic annotation enum";
      objectArray0[5] = (Object) ",";
      objectArray0[6] = (Object) "Y}|BQT'f+(93,zeXH";
      Object object0 = new Object();
      objectArray0[7] = object0;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ret\t\t%144", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "6Z3U5)aCrL8~ac6";
      stringArray0[7] = "void";
      stringArray0[8] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.getSignature("return");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lJyy(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lJyy('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, false);
      Utility.format(225, 2, false, '.');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.methodSignatureReturnType("LI*N`&3T|oZjc1a6d;V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-75);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36, (int) (byte)24, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.clearBit(90, 90);
      Utility.convertString("fe)E'\";I");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)75;
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-77));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantClass constantClass0 = new ConstantClass((byte) (-77));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2253));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger0);
      constantArray0[3] = (Constant) constantInteger2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2253), (-2253), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "void";
      Utility.searchOpcode("void");
      String string1 = "&)~Nrt(L^4!j3\\4Da";
      try { 
        Utility.typeOfSignature("&)~Nrt(L^4!j3\u0004Da");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &)~Nrt(L^4!j3\u0004Da
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\t<";
      stringArray0[1] = "java.lang.Object@1da1da53, java.lang.Object@32c2e027, java.lang.Object@34684d6b, java.lang.Object@1f525cc3";
      stringArray0[2] = "java.lang.Object@1da1da53, java.lang.Object@32c2e027, java.lang.Object@34684d6b, java.lang.Object@1f525cc3";
      stringArray0[3] = "java.lang.Object@1da1da53, java.lang.Object@32c2e027, java.lang.Object@34684d6b, java.lang.Object@1f525cc3";
      Utility.methodTypeToSignature("\t<", stringArray0);
      Utility.clearBit(2, 174);
      Utility.printArray(objectArray0, false, false);
      Utility.getSignature("(L<;Ljava/lang/Object@1da1da53,;Ljava/lang/Object@1da1da53,;Ljava/lang/Object@1da1da53,;)L<;");
      Utility.compactClassName("java.lang.Object@1da1da53, java.lang.Object@32c2e027, java.lang.Object@34684d6b, java.lang.Object@1f525cc3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodTypeToSignature("java.lang.Object@1da1da53, java.lang.Object@32c2e027, java.lang.Object@34684d6b, java.lang.Object@1f525cc3", stringArray0);
      Utility.convertString("bD,Yyy!");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "nV)J |\\O\\Y>IoDfG";
      Utility.searchOpcode("nV)J |OY>IoDfG");
      Utility.methodSignatureReturnType("nV)J |OY>IoDfG");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-108);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('D');
      try { 
        Utility.typeOfMethodSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "= :.OS|orE)h(q\".";
      try { 
        Utility.typeOfSignature("= :.OS|orE)h(q\".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: = :.OS|orE)h(q\".
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ireturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Utility.replace("M,DrSU=A77OEZf{j4", "M,DrSU=A77OEZf{j4", "org.apache.bcel.classfile.Utility$JavaWriter");
      Utility.methodTypeToSignature("\n", (String[]) null);
      Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaWriter");
      Utility.methodSignatureArgumentTypes("()L\n;", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)74;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("\"~CHT35");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.Utility$JavaWriter";
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) "org.apache.bcel.classfile.Utility$JavaWriter";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "org.apache.bcel.classfile.Utility$JavaWriter";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-20);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-36), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = "Hx#!-IsAr^HZeC^w";
      try { 
        Utility.typeOfSignature("Hx#!-IsAr^HZeC^w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hx#!-IsAr^HZeC^w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, 2687);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)21;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-115), 32767);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2198, 95, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-95);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 128, (int) (byte) (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49247. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      String string0 = "L4ePw.<puH5";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L4ePw.<puH5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L4ePw.<puH5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)20;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (-2075), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.classOrInterface((-2217));
      Utility.isSet(51, 51);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = false;
      char char0 = 'Z';
      String string0 = Utility.format(1665, 1665, false, 'Z');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-98);
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      Utility.encode(byteArray0, false);
      Utility.typeOfSignature(string0);
      Utility.getSignature(string0);
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("@^x>X>\"\"Xp>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @^x>X>\"\"Xp>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch");
      Utility.setBit((-5934), (-3155));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-86);
      byteArray0[2] = (byte)23;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3707);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, (int) (byte) (-36));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)64;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPool0.setConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = Utility.compactClassName("O!Y#WP2+;dZ)y/(?X>_", true);
      assertEquals("O!Y#WP2+;dZ)y.(?X>_", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte) (-6);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("]'i DF)#");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-6), (int) (byte) (-85));
      assertEquals("0:    i2c\n1:    aload_3\n2:    iaload\n3:    goto\t\t#174\n6:    drem\n7:    aload_2\n8:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "qLj7M:LHI=";
      String[] stringArray0 = new String[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("qLj7M:LHI=", stringArray0);
      String string1 = "n2eE&n3`kw<>V";
      Utility.replace("()LqLj7M:LHI=;", "n2eE&n3`kw<>V", "qLj7M:LHI=");
      Utility.methodSignatureToString("()LqLj7M:LHI=;", "()LqLj7M:LHI=;", "{ON3mEde%g", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("java.lang.");
      Utility.printArray((Object[]) stringArray0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "{}");
      Utility.printArray(printWriter0, (Object[]) stringArray0);
      try { 
        Utility.typeOfSignature("n2eE&n3`kw<>V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n2eE&n3`kw<>V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QmV\"sj<sfNB");
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-99);
      byte byte0 = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "Q5]oY.m?UP:JE_gGLF";
      try { 
        Utility.typeOfSignature("Q5]oY.m?UP:JE_gGLF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q5]oY.m?UP:JE_gGLF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)10;
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)46;
      byte byte0 = (byte)26;
      byteArray0[8] = (byte)26;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, 2286);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.fillup("double", 2247, false, 'e');
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-81);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1, 2247);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-1), (-60));
      assertEquals("0:    dstore\t\t%255\n2:    ladd\n3:    ifeq\t\t#19805\n6:    <illegal opcode>\n7:    dreturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.accessToString(48);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)61;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$e2$D3$f5$w$cd$r$3d");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantFieldref0.copy();
      byteSequence0.available();
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aload_0", "$e2$D3$f5$w$cd$r$3d", "ataj0w[]Ga*O)9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)50;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), 39);
      assertEquals("0:    f2l\n1:    aaload\n", string0);
      
      String string1 = Utility.accessToString(1588);
      assertEquals("protected final synchronized interface abstract", string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.decode("zAs}<l<)FRTQA[$", false);
      MockFile mockFile0 = new MockFile("zAs}<l<)FRTQA[$");
      MockFile mockFile1 = new MockFile(mockFile0, "b1h+y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "b1h+y";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "(baVp~9t8j!GS";
      String string1 = "Warning: Padding byte != 0 in ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(baVp~9t8j!GS", "(baVp~9t8j!GS", "Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `baVp~9t8j!GS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "9a}_OY1icX&|/{";
      try { 
        Utility.typeOfSignature("9a}_OY1icX&|/{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9a}_OY1icX&|/{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)117;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 115, (int) (byte)119, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch");
      Utility.setBit((-5934), (-3155));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)23;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3707);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, (int) (byte) (-36));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.isSet(247, 255);
      int int0 = 85;
      Utility.clearBit(79, 85);
      String string0 = "U`}*YD.fCwX(#W(v";
      try { 
        Utility.typeOfSignature("U`}*YD.fCwX(#W(v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U`}*YD.fCwX(#W(v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(256);
      String string0 = Utility.classOrInterface(14);
      assertEquals("class", string0);
      
      String string1 = Utility.format(67, 14, false, ')');
      assertEquals("))))))))))))67", string1);
      
      String string2 = Utility.compactClassName("0t oHezin%(5J%>B");
      assertEquals("0t oHezin%(5J%>B", string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)50);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString(67);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantInteger constantInteger0 = new ConstantInteger(817);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(63, 63);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-117), 67);
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1684), (byte) (-97));
      constantArray0[5] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("f2i", string3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)10;
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)46;
      byte byte0 = (byte)26;
      byteArray0[8] = (byte)26;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, 2286);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)16;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte)91;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 2422, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)71;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)26;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (-885));
      Utility.searchOpcode("_7m%%=5]9j^FC<~^");
      try { 
        Utility.methodSignatureArgumentTypes(")`#>s7ur]@HB<'y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )`#>s7ur]@HB<'y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "#G15&]7+M1v$c<#";
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.decode("#G15&]7+M1v$c<#", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 174;
      Utility.setBit(174, 1729);
      String string0 = "Emez~Bi$Xy}quhzr";
      Utility.getSignature("Emez~Bi$Xy}quhzr");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Emez~Bi$Xy}quhzr");
      Utility.accessToString(171);
      try { 
        Utility.methodSignatureReturnType("Emez~Bi$Xy}quhzr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Emez~Bi$Xy}quhzr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.fillup("JHb&odzI_", 2265, true, 'L');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.printArray(objectArray0);
      Utility.typeOfSignature("JHb&odzI_");
      Utility.classOrInterface(2265);
      Utility.accessToString(2016);
      try { 
        Utility.methodSignatureReturnType("XvK1b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XvK1b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = false;
      boolean boolean1 = true;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@7a80b08a\", \"java.lang.Object@78cd6943\", \"java.lang.Object@7b4dcd8c\", \"java.lang.Object@51dcd0c0\", \"java.lang.Object@2ea73e91\", \"java.lang.Object@3db3cd77\", \"java.lang.Object@280756e0\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@7a80b08a\", \"java.lang.Object@78cd6943\", \"java.lang.Object@7b4dcd8c\", \"java.lang.Object@51dcd0c0\", \"java.lang.Object@2ea73e91\", \"java.lang.Object@3db3cd77\", \"java.lang.Object@280756e0\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-88);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-69), (int) (byte)76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    fdiv
         // 2:    athrow
         // 3:    athrow
         // 4:    astore_1
         // 5:    iconst_3
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-76);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 128, (int) (byte) (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10079. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("j&rN<bn}wo./?$HEN(");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)6);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteSequence0;
      byteSequence0.mark(8);
      objectArray0[1] = (Object) (byte) (-124);
      objectArray0[2] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0, true, false);
      String string2 = Utility.compactClassName("lstore_1");
      assertTrue(string2.equals((Object)string0));
      
      Utility.printArray(objectArray0);
      String string3 = Utility.printArray(objectArray0);
      assertTrue(string3.equals((Object)string1));
      
      int int0 = Utility.setBit((byte) (-124), 103);
      assertEquals((-124), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.convertString("anewarray");
      Utility.searchOpcode("anewarray");
      Utility.convertString("anewarray");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-68);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)111;
      Utility.encode(byteArray0, true);
      Utility.format(147, 4697, true, 'z');
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(134, (-377));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short)189, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.classOrInterface(213);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), (int) (byte) (-76), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.compactClassName("Y_SCrVbx:X*@", "6&5, Lk|<\"Ew'5W-", true);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-63);
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-26);
      byte byte1 = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      int int0 = 16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (int) (byte) (-63), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)88;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lushr", string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = Utility.clearBit(103, (-99));
      assertEquals(103, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)22;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-43), (int) (byte)22);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    aload_1\n3:    istore_3\n4:    ifne\t\t#-4838\n", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "6^6";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("6^6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6^6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "/:";
      try { 
        Utility.typeOfSignature("/:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.typeOfSignature("Total of ");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat(1946.8F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(2);
      constantArray0[1] = (Constant) constantClass0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)14, (-755));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tableswitch");
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)68;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)68, (int) (byte) (-109), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = (-366);
      int int1 = 1642;
      Utility.setBit((-366), 1642);
      Utility.typeOfSignature("Invalid method signature: ");
      String string0 = "dneg";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dneg", "Invalid method signature: ", "Invalid method signature: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dneg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.signatureToString("Dont call getValueDouble() on a non DOUBLE ElementValue", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&O<|'F2d");
      Utility.classOrInterface(40);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)77;
      byteArray0[0] = (byte)77;
      byte byte1 = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byte byte2 = (byte)68;
      byteArray0[2] = (byte)68;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, (int) (byte)68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)114;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (int) (byte)16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The wildcard must not be null");
      Utility.setBit((-1589), (-1589));
      // Undeclared exception!
      try { 
        Utility.signatureToString("The wildcard must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "/frjKqw d0xe$f";
      try { 
        Utility.decode("/frjKqw d0xe$f", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-17);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 189, 2257, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = Utility.format(256, 256, false, '`');
      assertEquals("`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````256", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.available();
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("iload_2", string1);
      
      int int0 = Utility.clearBit(2369, 1580);
      assertEquals(2369, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "k $;B+TbiLia?:e!.2C";
      Utility.decode("k $;B+TbiLia?:e!.2C", false);
      Utility.printArray((Object[]) null);
      Utility.isJavaIdentifierPart('L');
      Utility.printArray((Object[]) null);
      try { 
        Utility.typeOfSignature("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Utility.signatureToString("Bw", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.classOrInterface(367);
      Utility.typeOfSignature("Bw");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)8, (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "O}pNV!D0OU~+,g";
      try { 
        Utility.methodSignatureReturnType("O}pNV!D0OU~+,g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O}pNV!D0OU~+,g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ConstantPool constantPool0 = null;
      int int0 = 123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-97);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)91;
      byte byte0 = (byte)80;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)80;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3D#B+|KJ$A7_P]Z";
      stringArray0[1] = "$Ar6$5bP";
      stringArray0[2] = "$Ar6$5bP";
      stringArray0[3] = "3D#B+|KJ$A7_P]Z";
      stringArray0[4] = "$Ar6$5bP";
      stringArray0[5] = "3D#B+|KJ$A7_P]Z";
      Utility.methodTypeToSignature("3D#B+|KJ$A7_P]Z", stringArray0);
      Utility.convertString("<illegal opcode>");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1417, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)79;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1467), (-1467));
      Utility.format(57, (-3685), true, '3');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (-1579));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.accessToString(170);
      Utility.format(170, (-3176), true, '\"');
      String string0 = "1h?~S<bvjd\"";
      try { 
        Utility.typeOfSignature("1h?~S<bvjd\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1h?~S<bvjd\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)25;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("<:]i`}|5fs0p!:8vye{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <:]i`}|5fs0p!:8vye{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.compactClassName("8wCy:T-cg^", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-68);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-104);
      objectArray0[1] = (Object) (byte)70;
      objectArray0[2] = (Object) (byte) (-127);
      objectArray0[3] = (Object) (byte) (-127);
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (byte)53;
      objectArray0[6] = (Object) (byte)53;
      objectArray0[7] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("-lrxz?WE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -lrxz?WE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.accessToString((-3));
      byte[] byteArray0 = Utility.decode("public protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", false);
      String string0 = "impdep1";
      Utility.getSignature("impdep1");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool0, (-3), (-3), false);
      Utility.compactClassName(">eO*jDqES1Q-]|9", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      int int0 = (-2136);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-2136));
      String string0 = "RuntimeVisibleParameterAnnotations";
      try { 
        Utility.methodSignatureReturnType("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "newarray");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@*V([K&+ esDm+rq[,";
      stringArray0[1] = "@*V([K&+ esDm+rq[,";
      stringArray0[2] = "@*V([K&+ esDm+rq[,";
      stringArray0[3] = "@*V([K&+ esDm+rq[,";
      stringArray0[4] = "@*V([K&+ esDm+rq[,";
      stringArray0[5] = "@*V([K&+ esDm+rq[,";
      stringArray0[6] = "@*V([K&+ esDm+rq[,";
      stringArray0[7] = "@*V([K&+ esDm+rq[,";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("@*V([K&+ esDm+rq[,", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[K&+ esDm+rq[,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 13;
      Utility.isSet(13, 13);
      String string0 = "anewarray";
      Utility.replace("anewarray", "wPr]`R='a.;", "anewarray");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)53;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1413, (-1539));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.classOrInterface(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-68);
      int int0 = 58;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 58, (-1263), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.clearBit(84, 969);
      int int0 = 60;
      Utility.accessToString(60);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)6;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)6, false);
      Utility.setBit(1205, 44);
      Utility.classOrInterface((byte)0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      try { 
        byteSequence0.readUnsignedByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.compactClassName("'?|");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'?|";
      stringArray0[1] = "'?|";
      stringArray0[2] = "'?|";
      stringArray0[3] = "'?|";
      stringArray0[4] = "'?|";
      stringArray0[5] = "'?|";
      Utility.methodTypeToSignature("'?|", stringArray0);
      Utility.isJavaIdentifierPart('Y');
      try { 
        Utility.typeOfSignature("'?|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '?|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "Hx#!-IsAr^HZeC^w";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hx#!-IsAr^HZeC^w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hx#!-IsAr^HZeC^w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Utility.compactClassName("jsr_w");
      assertEquals("jsr_w", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)91;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)22, 3037);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-45), (int) (byte) (-16));
      assertEquals("0:    fload_0\n1:    lload\t\t%211\n3:    d2f\n4:    <illegal opcode>\n5:    dup_x2\n", string1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      MockFile mockFile0 = new MockFile("if_icmpgt\t\t#4252", "ifnonnull");
      File file0 = MockFile.createTempFile("Xt}", "Xt}", (File) mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "if_icmpgt\t\t#4252");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // if_icmpgt\t\t#4252
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)114;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (int) (byte)14, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)60;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 92, 1955);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)91;
      byte byte0 = (byte)80;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)80;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3D#B+|KJ$A7_P]Z";
      stringArray0[1] = "$9fr6$5bP";
      stringArray0[2] = "$9fr6$5bP";
      stringArray0[3] = "3D#B+|KJ$A7_P]Z";
      stringArray0[4] = "$9fr6$5bP";
      stringArray0[5] = "3D#B+|KJ$A7_P]Z";
      Utility.methodTypeToSignature("3D#B+|KJ$A7_P]Z", stringArray0);
      Utility.convertString("<illegal opcode>");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1401, (int) (byte) (-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-58);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 207, (int) (byte)34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.methodTypeToSignature("Fm*sT%f>F", (String[]) null);
      Utility.signatureToString("Fm*sT%f>F", true);
      Utility.isJavaIdentifierPart('7');
      Utility.compactClassName("if_acmpeq", true);
      Utility.getSignature("float");
      Utility.printArray((Object[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&j");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ireturn", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.setBit(150, 155);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)119;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", stack items={");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , stack items={
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ":";
      stringArray0[1] = ":";
      stringArray0[2] = ":";
      stringArray0[3] = ":";
      stringArray0[4] = ":";
      stringArray0[5] = ":";
      stringArray0[6] = ":";
      Utility.methodTypeToSignature(":", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("astore\t\t%181", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putstatic");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("K`L", "putstatic", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K`L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.clearBit((-2217), (-2217));
      Utility.getSignature("Q#)M+GSnT");
      Utility.fillup("Q#)M+GSnT", 102, false, 'I');
      Utility.typeOfSignature("LQ#)M+GSnT;");
      Utility.decode("LQ#)M+GSnT;", false);
      try { 
        Utility.methodSignatureArgumentTypes("t,,", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: t,,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byte byte0 = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)79;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)84;
      ConstantPool constantPool0 = null;
      int int0 = 71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-32);
      byteArray1[1] = (byte) (-50);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray1[2] = (byte) (-53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.compactClassName("iinc", true);
      Utility.isJavaIdentifierPart('L');
      Utility.typeOfSignature("B{");
      Utility.convertString("J@,? 3>)m61p");
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = ".K.mvB,-MQ~";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".K.mvB,-MQ~");
      try { 
        Utility.typeOfSignature(".K.mvB,-MQ~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .K.mvB,-MQ~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.convertString("\"|hiZz[");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)88;
      byte byte0 = (byte)109;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)77;
      MockFile mockFile0 = new MockFile("wide", "arraylength");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.accessToString((-1763));
      Utility.fillup("public protected static final native strictfp synthetic annotation enum", 198, true, '/');
      Utility.clearBit((-1763), 91);
      Utility.typeOfSignature("[P2");
      String string0 = "long";
      try { 
        Utility.typeOfMethodSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      Utility.toHexString(byteArray0);
      Utility.convertString("4f");
      Utility.accessToString(559);
      Utility.replace("\t\t#", "Ohq|J$'*mc%OH", "iconst_1");
      try { 
        Utility.typeOfSignature("4f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)85;
      ConstantPool constantPool0 = null;
      int int0 = (-1872);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ngf']YIrDSEb]x`3");
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1872), 8192, false);
      try { 
        Utility.methodSignatureReturnType("0:    ior\n1:    <illegal opcode>\n2:    aload_2\n3:    castore\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    ior
         // 1:    <illegal opcode>
         // 2:    aload_2
         // 3:    castore
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.getSignature("Hx#!-IsAr^HZeC^w");
      Utility.methodSignatureReturnType("LHx#!-IsAr^HZeC^w;");
      String string0 = "astore";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("astore", "LARR>;V", "LARR>;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-6);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, 42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte) (-70);
      byte byte0 = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)12;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfMethodSignature("(descriptor_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (descriptor_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Utility.accessToString(971, false);
      assertEquals("public private static volatile transient native interface", string0);
      
      byte byte0 = Utility.typeOfSignature("Vdj~$kE^`V7)");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3, 51, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.clearBit(76, 76);
      String string0 = "Pattern is missing";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Pattern is missing", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pattern is missing'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      int int0 = 101;
      boolean boolean0 = true;
      Utility.accessToString(101, true);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("invokespecial", (String[]) null);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goto_w", "goto_w", "goto_w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.clearBit(2326, 664);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 968, (int) (byte)8, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "SAME_EXTENDED";
      Utility.signatureToString("SAME_EXTENDED");
      int int0 = 1313;
      Utility.format(1313, 1313, true, 'A');
      Utility.convertString("g1?bL;");
      Utility.accessToString(1313, true);
      Utility.isSet(1313, 1313);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName("SAME_EXTENDED", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1.itF";
      stringArray0[1] = "1.itF";
      stringArray0[2] = "1.itF";
      stringArray0[3] = "1.itF";
      stringArray0[4] = "1.itF";
      stringArray0[5] = "\t(wide)";
      stringArray0[6] = "1.itF";
      stringArray0[7] = "1.itF";
      Utility.methodTypeToSignature("1.itF", stringArray0);
      Utility.methodTypeToSignature("_7m%%=5]9j^FC<~^", stringArray0);
      boolean boolean0 = false;
      Utility.printArray((Object[]) stringArray0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("instanceof");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-114);
      Utility.toHexString(byteArray0);
      Utility.getSignature("Linstanceof;");
      Utility.classOrInterface((byte)2);
      Utility.typeOfSignature("C");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -70
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "Rm";
      try { 
        Utility.typeOfSignature("Rm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte)5;
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(dataInputStream0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-63));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantInteger constantInteger0 = new ConstantInteger(1188);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2873), 9);
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 164, 1188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = Utility.clearBit(0, 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)40;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("_$8b$u", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_$8b$u";
      stringArray0[1] = "checkcast";
      stringArray0[2] = "_$8b$u";
      stringArray0[3] = "_$8b$u";
      stringArray0[4] = "_$8b$u";
      stringArray0[5] = "_$8b$u";
      stringArray0[6] = "_$8b$u";
      stringArray0[7] = "_$8b$u";
      String string1 = Utility.methodTypeToSignature("_$8b$u", stringArray0);
      assertEquals("(L_$8b$u;Lcheckcast;L_$8b$u;L_$8b$u;L_$8b$u;L_$8b$u;L_$8b$u;L_$8b$u;)L_$8b$u;", string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cJL}fFG");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "cJL}fFG";
      objectArray0[3] = (Object) "cJL}fFG";
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "null, java.lang.Object@1f87f3e9, cJL}fFG, cJL}fFG, null";
      stringArray0[1] = "cJL}fFG";
      stringArray0[2] = "cJL}fFG";
      stringArray0[3] = "cJL}fFG";
      stringArray0[4] = "cJL}fFG";
      stringArray0[5] = "ifge";
      String string0 = Utility.methodTypeToSignature("null, java.lang.Object@1f87f3e9, cJL}fFG, cJL}fFG, null", stringArray0);
      assertEquals("(Lnull,;LcJL}fFG;LcJL}fFG;LcJL}fFG;LcJL}fFG;Lifge;)Lnull,;", string0);
      
      Utility.format((-1720790892), (-1720790892), true, 'S');
      Utility.format(2, 4, true, 'V');
      Utility.printArray((Object[]) stringArray0, true, true);
      String string1 = Utility.convertString("r^ESm';?'^^n*X");
      assertEquals("r^ESm\\';?\\'^^n*X", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean0);
      
      String string2 = Utility.format(4, 193, true, 'V');
      assertEquals("4VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", string2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.isJavaIdentifierPart('p');
      String string0 = "breakpoint";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("breakpoint");
      try { 
        Utility.methodSignatureArgumentTypes("breakpoint", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: breakpoint
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = false;
      char char0 = 'Y';
      Utility.format(31, 31, false, 'Y');
      String string0 = "if(nXJd5C>";
      Utility.replace("YYYYYYYYYYYYYYYYYYYYYYYYYYYYY31", "if(nXJd5C>", "E#dBr*-dOi4Sv`N");
      Utility.accessToString(31);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("NZta9=K5WV");
      try { 
        Utility.typeOfSignature("NZta9=K5WV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NZta9=K5WV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)49;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte)18;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)18;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.replace("<(QE;`/+7h", "<(QE;`/+7h", "\t\t<");
      assertEquals("\t\t<", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-127);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte) (-72), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-44), (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ladd
         // 1:    lstore_3
         // 2:    f2l
         // 3:    aload_3
         // 4:    iload_1
         // 5:    lload_2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.signatureToString("CONSTANT_InvokeDynamic");
      Utility.compactClassName("tj(+\"BMyn", false);
      Utility.decode("char", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "tj(+\"BMyn";
      stringArray0[1] = "float";
      stringArray0[2] = "invokestatic";
      stringArray0[3] = "CONSTANT_InvokeDynamic";
      stringArray0[4] = "char";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[5] = "CONSTANT_InvokeDynamic";
      stringArray0[6] = "tj(+\"BMyn";
      stringArray0[7] = "CONSTANT_InvokeDynamic";
      Utility.methodTypeToSignature("float", stringArray0);
      int int0 = 140;
      int int1 = 157;
      Utility.setBit(140, 157);
      String string0 = null;
      boolean boolean0 = true;
      int int2 = 1131;
      int int3 = 149;
      int int4 = 150;
      int int5 = 1264;
      CodeException[] codeExceptionArray0 = new CodeException[1];
      File file0 = MockFile.createTempFile("CONSTANT_InvokeDynamic", "float");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "lookupswitch");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"lookupswitch\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("c'QQ-z|_Me0i@c@D Q", false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)76;
      byte byte0 = (byte)65;
      byteArray1[2] = (byte)65;
      boolean boolean0 = false;
      Utility.encode(byteArray1, false);
      try { 
        Utility.decode("c'QQ-z|_Me0i@c@D Q", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)69;
      String string0 = "jsr_w";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jsr_w");
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte) (-75);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("sokpY_8s&nfp}qx9");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1586.74F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("sokpY_8s&nfp}qx9");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21442. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.accessToString(108);
      Utility.compactClassName("if_icmple");
      MockPrintStream mockPrintStream0 = new MockPrintStream("protected static synchronized volatile");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[1] = (Object) "if_icmple";
      objectArray0[2] = (Object) "if_icmple";
      objectArray0[3] = (Object) "if_icmple";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "if_icmple";
      objectArray0[6] = (Object) "protected static synchronized volatile";
      objectArray0[7] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = "lreturn";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lreturn", "? super ", "if_icmple");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?lC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?lC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.convertString("org.apache.commons.io.filefilter.PrefixFileFilter");
      Utility.replace("{VH#Y&a{B", "{VH#Y&a{B", "{VH#Y&a{B");
      Utility.getSignature("char");
      MockFile mockFile0 = new MockFile("{VH#Y&a{B", "C");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"C\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("GJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "putstatic");
      try { 
        Utility.typeOfSignature(">+q1r*i;387");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >+q1r*i;387
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("XMcs10,iMZ", true);
      Utility.getSignature("E#dBr*-dOi4Sv`N");
      try { 
        Utility.methodSignatureReturnType("XMcs10,iMZ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XMcs10,iMZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = 3654;
      Utility.format(3654, 3654, false, 'g');
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SyntheticRepository could not load ");
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.classOrInterface((-491));
      String string0 = "Y0*ZMQ_b,2rM6";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y0*ZMQ_b,2rM6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y0*ZMQ_b,2rM6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.accessToString((-1763));
      Utility.fillup("putfield", 198, true, '/');
      Utility.clearBit((-1763), 91);
      try { 
        Utility.typeOfSignature("P2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariableTable", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.compactClassName("V\"I20_cGR@Nq,y8", "V\"I20_cGR@Nq,y8", true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "V\"I20_cGR@Nq,y8";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "V\"I20_cGR@Nq,y8";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "V\"I20_cGR@Nq,y8";
      objectArray0[5] = (Object) "V\"I20_cGR@Nq,y8";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "V\"I20_cGR@Nq,y8";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = ">";
      Utility.replace(">", "N!f/%|)HIjf:fS/w@", (String) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ">";
      objectArray0[1] = (Object) ">";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      objectArray0[2] = (Object) "N!f/%|)HIjf:fS/w@";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) ">";
      objectArray0[5] = (Object) ">";
      objectArray0[6] = (Object) ">";
      objectArray0[7] = (Object) null;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "f2l4>H";
      Utility.replace("L", "L", "f2l4>H");
      try { 
        Utility.typeOfMethodSignature("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.compactClassName("+^pEp m6p}L5");
      assertEquals("+^pEp m6p}L5", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-11);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("38 5a 09 7a f5", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goto_w", "goto_w", "goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-78);
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-99);
      byte byte1 = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)33;
      byte byte2 = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byte byte3 = (byte)120;
      byteArray0[5] = (byte)120;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, (int) (byte)33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40199. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.convertString("org.apache.commons.io.filefilter.PrefixFileFilter");
      String string0 = "char";
      boolean boolean0 = true;
      try { 
        Utility.decode("char", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.setBit(1452, 1452);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-9);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-91);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("MQk6xQ$9XDU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MQk6xQ$9XDU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-52);
      byte byte0 = (byte) (-10);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-74);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((byte) (-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "char";
      try { 
        Utility.methodSignatureArgumentTypes("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "float";
      try { 
        Utility.methodSignatureArgumentTypes("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.replace("BuS$ZLf5X", "BuS$ZLf5X", "BuS$ZLf5X");
      Utility.replace("return", "BuS$ZLf5X", "BuS$ZLf5X");
      Utility.replace("nx(dzP0/9O$yo@\u0006", "return", "u@lU\"fezP>7/S");
      boolean boolean0 = true;
      String string0 = Utility.format(171, 2549, true, 'J');
      Utility.decode("breakpoint", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.methodSignatureReturnType("V", false);
      Utility.isJavaIdentifierPart('c');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        constantPool0.getConstantString(20, (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = (-81);
      boolean boolean0 = true;
      Utility.accessToString((-81), true);
      Utility.accessToString((-81));
      String string0 = "freturn";
      try { 
        Utility.methodSignatureReturnType("freturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `freturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.format(1693, (-1766), false, 'p');
      assertEquals("1693", string0);
      
      boolean boolean0 = Utility.isSet(1693, 2);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "1693";
      objectArray0[1] = (Object) "1693";
      objectArray0[2] = (Object) "1693";
      objectArray0[3] = (Object) "1693";
      objectArray0[4] = (Object) "1693";
      objectArray0[5] = (Object) "1693";
      objectArray0[6] = (Object) "1693";
      objectArray0[7] = (Object) "1693";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\"}", string1);
      
      short short0 = Utility.searchOpcode("{\"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\"}");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{\"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\"}";
      stringArray0[1] = "1693";
      stringArray0[2] = "1693";
      stringArray0[3] = "1693";
      stringArray0[4] = "{\"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\"}";
      String string2 = Utility.methodTypeToSignature("{\"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\", \"1693\"}", stringArray0);
      assertEquals("(L{\"1693\",;L1693;L1693;L1693;L{\"1693\",;)L{\"1693\",;", string2);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.compactClassName("boolean");
      try { 
        Utility.methodSignatureReturnType("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";X5Q(?)wJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;X5Q(?)wJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      Utility.convertString("{java.lang.Object@430b4092, java.lang.Object@2b8329c3, java.lang.Object@1dab9143, java.lang.Object@1ffba232}");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-20);
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName(":", true);
      try { 
        Utility.typeOfSignature("{java.lang.Object@430b4092, java.lang.Object@2b8329c3, java.lang.Object@1dab9143, java.lang.Object@1ffba232}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@430b4092, java.lang.Object@2b8329c3, java.lang.Object@1dab9143, java.lang.Object@1ffba232}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.isSet(13, 13);
      Utility.replace("anewarray", "wPr]`R='a.;", "anewarray");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1413, (-1539));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.isJavaIdentifierPart('k');
      try { 
        Utility.typeOfSignature("fload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("1c");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1c";
      stringArray0[1] = "KgdQV6fr^y&1'SA";
      stringArray0[2] = "KgdQV6fr^y&1'SA";
      stringArray0[3] = "KgdQV6fr^y&1'SA";
      stringArray0[4] = "1c";
      Utility.methodTypeToSignature("KgdQV6fr^y&1'SA", stringArray0);
      try { 
        Utility.methodSignatureReturnType("KgdQV6fr^y&1'SA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KgdQV6fr^y&1'SA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("java.lang.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = (-3821);
      Utility.setBit((-3821), 88);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-92));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 42
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QLO?kPFEUwD=P:I0j1Q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QLO?kPFEUwD=P:I0j1Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, (byte) (-79));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(0, 0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-78), (-1325));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)103);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("{\"java.lang.Object@5468e144\"}");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("d2i", string1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("N?w230<l~|@A]<}o3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N?w230<l~|@A]<}o3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "\\r";
      boolean boolean0 = false;
      Utility.decode("\r", false);
      String string1 = "1ow >Wt\\)3u4tkQ";
      Utility.replace("\r", "1ow >Wt)3u4tkQ", "1ow >Wt)3u4tkQ");
      String string2 = "Z@ta/";
      Utility.searchOpcode("Z@ta/");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\r");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("qGOz\"8a\"jI9L<f1\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `qGOz\"8a\"jI9L<f1\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.t<G|^");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "anewarray");
      Utility.fillup("SENSITIVE", 66, false, '|');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.compactClassName("8wCy:T-cg^", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-68);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-104);
      objectArray0[1] = (Object) (byte)70;
      objectArray0[2] = (Object) (byte) (-127);
      objectArray0[3] = (Object) (byte) (-127);
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (byte)53;
      objectArray0[6] = (Object) (byte)53;
      objectArray0[7] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("8wCy:T-cg^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8wCy:T-cg^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "UCh4 Gr2za5s4";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UCh4 Gr2za5s4");
      try { 
        Utility.methodSignatureReturnType("UCh4 Gr2za5s4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UCh4 Gr2za5s4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.typeOfSignature("F6MAPhVCh$c_");
      Utility.signatureToString("Invalid type: ", false);
      String string0 = "void";
      try { 
        Utility.methodSignatureReturnType("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = Utility.classOrInterface((-728));
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean0);
      
      String string1 = Utility.accessToString(914, true);
      assertEquals("private final transient native", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-37);
      byteArray0[8] = (byte)70;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-4), (int) (byte)121, false);
      assertEquals("0:    laload\n1:    iconst_1\n2:    lshl\n3:    <illegal opcode>\n4:    ifne\t\t#-972\n7:    <illegal opcode>\n8:    fstore_3\n", string2);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "constant pool\t\t";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "constant pool\t\t");
      int int0 = 999;
      Utility.classOrInterface(999);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("^", false);
      int int1 = 1821;
      Utility.clearBit(1821, 999);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("constant pool\t\t", "^", ",HiW$lDSE~F", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: constant pool\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature(")[V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
