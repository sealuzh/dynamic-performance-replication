/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:17:59 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("fQ1", object0);
      jSONObject1.remove("fQ1");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      hashMap0.put((Long) null, "fx|T,+s");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("toU", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("toU");
      assertNotSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("getputOpt", "7");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("F", (Object) hashMap0);
      boolean boolean0 = jSONObject1.has("F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("7</?L", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("n9_.~J", (Object) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("n9_.~J");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float(2939.0890495419794);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-116), (-116));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-780));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Boolean boolean0 = new Boolean("JSONArray[");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.remove("JSONArray[");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1812L));
      JSONObject jSONObject1 = jSONObject0.put("", (Object) long0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("is", (-1223L));
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 2633L);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("uuTH_CQ", 0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", (-494));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("K#CC*VomXWSSHYIq{3c", 4349L);
      assertEquals(4349L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("java.lang.Float@000000001", (-1223L));
      assertEquals(3, jSONObject0.length());
      assertEquals((-1223L), long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("O3LX", (-6066));
      assertEquals((-6066), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(".", (-107.7281229659524));
      assertEquals((-107.7281229659524), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = JSONObject.doubleToString(329.98826);
      assertEquals("329.98826", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float((-2293.32F));
      try { 
        jSONObject0.append((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1812L));
      JSONObject jSONObject1 = jSONObject0.accumulate("", long0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(482.3857822100643);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getLong("nYAd3DfH{ drEx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nYAd3DfH{ drEx\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("PPmQ0<3V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"PPmQ0<3V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getBoolean("d FUb&'+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d FUb&'+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = JSONObject.quote("NBBm.");
      assertEquals("\"NBBm.\"", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-1374.8916421");
      String string0 = jSONObject0.optString("] is not a JSONObject.", (String) null);
      assertEquals(3, jSONObject0.length());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = Integer.valueOf(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      double double0 = jSONObject0.optDouble(").9si)D:", 2259.41735316);
      assertEquals(2259.41735316, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Object object0 = jSONObject0.opt("}|O-.Ii.9E]:0\"");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Double double0 = new Double(0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("$>'DG{prmOZ G=Yy3", true);
      boolean boolean0 = jSONObject0.getBoolean("$>'DG{prmOZ G=Yy3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong("Y8po9", (long) 0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("{", "{");
      StringWriter stringWriter0 = new StringWriter(2990);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double(482.3857822100643);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Float float0 = new Float(2939.0890495419794);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter(753);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Long@00000000040");
      // Undeclared exception!
      jSONObject0.toString(690, 690);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 1, 13);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      String string0 = JSONObject.valueToString(hashMap0, 61, (-1362));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = JSONObject.valueToString(jSONObject0, 847, (-1));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 14, 34);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1378), (-1378));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("F", (Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter(0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("7 JgT071fIV+#S{}", (Collection) linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-1374.8916421");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("CY1x:-t", object0);
      jSONObject1.toString();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(34, 93);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double double0 = new Double(482.3857822100643);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float((-1.0));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.accumulate("getoptJSONObject", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\u0003lT!)AHjRFJT%3l");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("7</?L", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("7</?L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Short short0 = new Short((short)60);
      JSONObject jSONObject0 = new JSONObject(short0);
      int int0 = jSONObject0.optInt("^tM4U^v=(Ho}}#E", (int) (short)60);
      assertEquals(60, int0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("null", 0L);
      jSONObject0.accumulate("has", "has");
      String string0 = jSONObject1.toString(1106);
      try { 
        jSONObject0.get(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \\\"java.lang.String@0000000002\\\": java.lang.Long@0000000003,\\njava.lang.String@0000000004\\\": \\\"java.lang.String@0000000004\\\"\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getformat", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Short short0 = new Short((short)60);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("@TUGCA", (Collection) linkedList0);
      String string0 = jSONObject1.optString("@TUGCA", "@TUGCA");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("toU", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("toU");
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("", collection0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("");
      jSONObject1.toJSONArray(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = Integer.valueOf(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optJSONArray("AM.YSWQZX3i3G@a/7");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("M)+tM[s![", 0L);
      double double0 = jSONObject1.optDouble("M)+tM[s![", (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-1374.8916421");
      JSONObject jSONObject1 = jSONObject0.put("-1374.8916421", 350L);
      jSONObject1.toString();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float(2939.0890495419794);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject$1", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("wheel.json.JSONObject$1");
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("7</?L", stringArray0);
      jSONObject0.append("n9_.~J", (Object) null);
      try { 
        jSONObject0.getJSONObject("n9_.~J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n9_.~J\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Short short0 = new Short((short)108);
      JSONObject jSONObject0 = new JSONObject(short0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("m", (Collection) linkedList0);
      jSONObject1.getJSONArray("m");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float(2939.0890495419794);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("09g?wJ[;Ohw<", false);
      try { 
        jSONObject1.getJSONArray("09g?wJ[;Ohw<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"09g?wJ[;Ohw<\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getputOpt", 3031L);
      int int0 = jSONObject0.getInt("getputOpt");
      assertEquals(3031, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Object object0 = new Object();
      jSONObject0.append("] is not a Boolean.", object0);
      int int0 = jSONObject0.optInt("] is not a Boolean.");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("bl:xK%p.lo7", 465.5);
      double double0 = jSONObject0.getDouble("bl:xK%p.lo7");
      assertEquals(465.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("fQ1", object0);
      long long0 = jSONObject1.optLong("fQ1");
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("$>'DG{prmOZ G=Yy3", true);
      boolean boolean0 = jSONObject0.optBoolean("$>'DG{prmOZ G=Yy3", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("<%S/cy;>b7(S\"+eKQ_", (Object) "<%S/cy;>b7(S\"+eKQ_");
      boolean boolean0 = jSONObject1.optBoolean("<%S/cy;>b7(S\"+eKQ_", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("qG3Vu=Ibh?w]1S~", stringArray0);
      jSONObject0.put("qG3Vu=Ibh?w]1S~", false);
      boolean boolean0 = jSONObject0.getBoolean("qG3Vu=Ibh?w]1S~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("", collection0);
      boolean boolean0 = jSONObject1.optBoolean("", true);
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1374.8916421));
      assertEquals("-1374.8916421", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", 52);
      Double double0 = new Double(38.46566);
      try { 
        jSONObject1.append("Substring bounds error", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Substring bounds error] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Long long0 = new Long(336L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Double double0 = new Double(336L);
      JSONObject jSONObject1 = jSONObject0.append("}'?e:mbAk>=Uz%ki%Tr", double0);
      Float float0 = new Float((-994.89));
      jSONObject1.append("}'?e:mbAk>=Uz%ki%Tr", float0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("&0N94Y>J*/ykvLh", (Collection) linkedList0);
      jSONObject1.accumulate("&0N94Y>J*/ykvLh", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("2228.6.", jSONArray0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("&0N94Y>J*/ykvLh", 0L);
      jSONObject1.accumulate("&0N94Y>J*/ykvLh", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Map) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("", collection0);
      String string0 = jSONObject1.toString(1783, 50);
      JSONObject jSONObject2 = new JSONObject(string0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{vy_[Q^,8'dE}s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {vy_[Q^,8'dE}s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{oJ.g=(OzZYM@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {oJ.g=(OzZYM@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = Integer.valueOf(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optBoolean("'", false);
      jSONObject0.putOpt("iscompare", float0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optString("java.lang.Float@000000001");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("@TUGCA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.toString(1783, 50);
      JSONObject jSONObject1 = new JSONObject(string0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("'", (double) (-1223.7F));
      long long0 = jSONObject0.getLong("'");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1223L), long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.remove("");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("7</?L", stringArray0);
      try { 
        jSONObject0.getString("*%E6SP}Oe1mt@6t{QUa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*%E6SP}Oe1mt@6t{QUa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("@TUGCA", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.isNull("@TUGCA");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("@TUGCA");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("F");
      assertFalse(boolean0);
  }
}
