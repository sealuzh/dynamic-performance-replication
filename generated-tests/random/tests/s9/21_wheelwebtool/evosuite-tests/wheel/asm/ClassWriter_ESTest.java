/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:02:56 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2894));
      classWriter0.visitSource("", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-767));
      classWriter0.visitOuterClass("", "", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-1563), "", "", "java/lang/String", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1271));
      classWriter0.visitInnerClass("java/lang/Object", "java/lang/Object", "", (-1271));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(22);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classWriter0.visit(1871, 21, (String) null, (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      int int0 = classWriter0.newUTF8("org.apache.commons.io.filefilter.AgeFileFilter");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-767));
      int int0 = classWriter0.newUTF8("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2894));
      Item item0 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(22);
      int int0 = classWriter0.newMethod("|<~|", "", ".class", false);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.newMethod("<@<", "<@<", "?t&}}pfN", true);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1339);
      Item item0 = classWriter0.newLong(1991L);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-767));
      Item item0 = classWriter0.newInteger(4);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1271));
      Item item0 = classWriter0.newInteger((-1271));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1173));
      Item item0 = classWriter0.newFloat(5);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1173));
      Item item0 = classWriter0.newFloat((-557.54645F));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      int int0 = classWriter0.newField("", "", "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1560));
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1212);
      Item item0 = classWriter0.newClassItem("");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      int int0 = classWriter0.newClass("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(57);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((byte)8, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("t(n,['e", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: t(n,['e
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2323);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "[OJsi9GO_D,!o";
      stringArray0[2] = "[OJsi9GO_D,!o";
      stringArray0[3] = "[OJsi9GO_D,!o";
      stringArray0[4] = "[OJsi9GO_D,!o";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(3170, "", "[OJsi9GO_D,!o", "", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2092));
      // Undeclared exception!
      try { 
        classWriter0.newNameType((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-473));
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("", "", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@10ef7018
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3985);
      classWriter0.addType("");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-889275714), (byte)75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -889275714
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1339);
      classWriter0.newMethod("", "", "", true);
      Item item0 = classWriter0.newDouble(6);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1271));
      int int0 = classWriter0.newNameType("java/lang/Object", "java/lang/Object");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1330));
      classWriter0.newClassItem("[Igu)Ai!;9ZBRgc>T7)");
      String[] stringArray0 = new String[2];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 5, "ax,('*FXpVgCl;#", "[Igu)Ai!;9ZBRgc>T7)", "R$UC:b#=DQv=NU", stringArray0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1173));
      int int0 = classWriter0.newClass("#FZeKm?vbFj");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1195);
      classWriter0.newFieldItem("", "#(fR`IfTy[PSc>uVuX", "m=XcCp>@5U");
      classWriter0.threshold = (-2014);
      classWriter0.visitOuterClass("Vn:n#%V($b", "z'cCi4EgTT|Lrs.h", "<5%@PgN6Wj/fWQ");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(55);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Jj=<&h8[-]=Oi]";
      stringArray0[1] = "Jj=<&h8[-]=Oi]";
      stringArray0[2] = "Jj=<&h8[-]=Oi]";
      int int0 = classWriter0.newField("EnclosingMethod", "RuntimeVisibleAnnotations", "Jj=<&h8[-]=Oi]");
      assertEquals(6, int0);
      
      stringArray0[3] = "Jj=<&h8[-]=Oi]";
      stringArray0[4] = "Jj=<&h8[-]=Oi]";
      classWriter0.visit((-421), (-421), "Jj=<&h8[-]=Oi]", "Jj=<&h8[-]=Oi]", "Jj=<&h8[-]=Oi]", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(152, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2424);
      int int0 = classWriter0.addUninitializedType("wheel.asm.Type", 2424);
      assertEquals(1, int0);
      
      int int1 = classWriter0.getMergedType(1, 1);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(90);
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.AbstractFileFilter", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1560));
      int int0 = classWriter0.addType(":QPv#]tPThK+2");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("", Integer.MAX_VALUE);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(45);
      classWriter0.addUninitializedType("org.apache.commons.io.filefilter.DelegateFileFilter", 45);
      int int0 = classWriter0.addUninitializedType("org.apache.commons.io.filefilter.DelegateFileFilter", 45);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(247);
      int int0 = classWriter0.addType("Deprecated");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("Deprecated");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1339);
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
      
      int int1 = classWriter0.newNameType("", "");
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      classWriter0.newConst("InnerClasses");
      Item item0 = classWriter0.newConstItem("InnerClasses");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2092));
      Item item0 = classWriter0.newDouble((-2092));
      Item item1 = classWriter0.newDouble((-2092));
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      Item item0 = classWriter0.newLong(0L);
      Item item1 = classWriter0.newLong(0L);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(414);
      Item item0 = classWriter0.newFloat(0.0F);
      Float float0 = new Float(0.0F);
      Item item1 = classWriter0.newConstItem(float0);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1339);
      classWriter0.newMethod("", "", "", true);
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1173));
      Item item0 = classWriter0.newMethodItem("l6ZI?Ah:&7\";@SJ5gn~", "#FZeKm?vbFj", "v?D*[$$5ELtnnYNd^g", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1271));
      classWriter0.newFieldItem("java/lang/Object", "", "");
      int int0 = classWriter0.newField("java/lang/Object", "", "");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      Type type0 = Type.FLOAT_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1173));
      Class<Long> class0 = Long.class;
      Type type0 = Type.getType(class0);
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2041);
      Double double0 = new Double(0.0);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(2041, "8OT>02@2qQp]evtY", "_zAB UNK1xgK<n}&Ai|", "8OT>02@2qQp]evtY", double0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1271));
      Float float0 = new Float((double) 2);
      Item item0 = classWriter0.newConstItem(float0);
      // Undeclared exception!
      try { 
        classWriter0.newConst(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      Boolean boolean0 = Boolean.TRUE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      Boolean boolean0 = Boolean.valueOf("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5, "v('}r", "Deprecated", "_6Z67", boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1212);
      Short short0 = new Short((short)192);
      int int0 = classWriter0.newConst(short0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(46);
      Character character0 = Character.valueOf('~');
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3985);
      Byte byte0 = new Byte((byte)75);
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2894));
      classWriter0.newConst(classWriter0.COMPUTE_MAXS);
      Item item0 = classWriter0.newConstItem(classWriter0.COMPUTE_MAXS);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(325);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(38);
      Attribute attribute0 = new Attribute("lo7-/-?w SQq^^0BW");
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      classWriter0.visitAnnotation("RuntimeInvisibleAnnotations", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(66, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1330));
      classWriter0.visitInnerClass("[Igu)Ai!;9ZBRgc>T7)", "[Igu)Ai!;9ZBRgc>T7)", "[Igu)Ai!;9ZBRgc>T7)", 2);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(80, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1560));
      classWriter0.visitOuterClass("6d;&)8x", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(73, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(325);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "325";
      stringArray0[1] = "";
      stringArray0[2] = "^V;Bf\"'<(g ItS";
      stringArray0[3] = "The FilenameFilter must not be null";
      stringArray0[4] = "The FilenameFilter must not be null";
      stringArray0[5] = "The FilenameFilter must not be null";
      stringArray0[6] = "";
      classWriter0.visitMethod(572, "The FilenameFilter must not be null", "x`bA):Ju7@)h", "325", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(178, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2323);
      classWriter0.visitField(16, "", "[OJsi9GO_D,!o", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(98, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      classWriter0.visitInnerClass("HS~i9r!VcB9=q}", (String) null, "HS~i9r!VcB9=q}", 14);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1212);
      classWriter0.visitInnerClass((String) null, "RuntimeVisibleAnnotations", (String) null, 1212);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      classWriter0.visitInnerClass("", "", "", 26);
      classWriter0.visitInnerClass("Deprecated", "nUj:4!!]D&*C5No", "X]7&0\"B72/Z6", 770);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1560));
      classWriter0.visitAnnotation("$Phi+#pI\u0006Kt", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-767));
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(76);
      classWriter0.visitOuterClass("&Uj-z@!XU]2[4", "&Uj-z@!XU]2[4", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1560));
      classWriter0.visitOuterClass("nT`/zE%4OSzfz", (String) null, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-473));
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1330));
      classWriter0.visitSource("[Igu)Ai!;9ZBRgc>T7)", "[Igu)Ai!;9ZBRgc>T7)");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(115, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3985);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.io.filefilter.HiddenFileFilter";
      stringArray0[1] = "org.apache.commons.io.filefilter.HiddenFileFilter";
      stringArray0[2] = "org.apache.commons.io.filefilter.HiddenFileFilter";
      stringArray0[3] = "org.apache.commons.io.filefilter.HiddenFileFilter";
      stringArray0[4] = "org.apache.commons.io.filefilter.HiddenFileFilter";
      classWriter0.visit(3, (byte) (-12), "org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(146, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1488);
      String[] stringArray0 = new String[0];
      classWriter0.visit(1488, 1672, "$[IG,`y", "java/lang/Class", "Deprecated", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-767));
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        classWriter0.visit(49, (-767), "", "", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      classWriter0.visit(4, (-1263), "cn..b'#`?8u8{E5nu", "InnerClasses", "X]7&0\"B72/Z6", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(425);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        classWriter0.visit(425, (-924), "Ub$8", (String) null, "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4017);
      // Undeclared exception!
      try { 
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4017);
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, 192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1560));
      Long long0 = new Long(1);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1, ":QPv#]tPThK+2", "zzvf?4Bm`}(bNHf", (String) null, long0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2111));
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
