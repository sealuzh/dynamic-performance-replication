/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:51:59 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, true);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-953), (byte)32, (byte)32);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(32, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      StringReader stringReader0 = new StringReader("\\");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 11);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-133), (-1237));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals("\\", token0.toString());
      assertEquals((-1237), token0.endColumn);
      assertEquals((-1237), token0.beginColumn);
      assertEquals((-133), token0.beginLine);
      assertEquals((-133), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 48, 48, (byte)3);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(48, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yk_+}w^r!O#");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1707), (-1707));
      simpleCharStream0.maxNextCharInd = 4;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      jVCParserTokenManager0.getNextToken();
      boolean boolean0 = simpleCharStream0.prevCharIsCR;
      Locale.forLanguageTag("Yk_+}w^r!O#");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Yk_+}w^r!O#", "Yk_+}w^r!O#");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Yk_+}w^r!O#
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-15), 39, 39);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jVCParserTokenManager0.curLexState = 39;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.jjFillToken();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byteArrayInputStream0.close();
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 255, (-185), (-185));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_[\"\"IpC18Y?JS");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2147450880, (byte) (-2));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      boolean boolean0 = simpleCharStream0.prevCharIsCR;
      Locale.forLanguageTag(" (");
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals((-1), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      StringReader stringReader0 = new StringReader("[[=");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)0, (byte)0);
      stringReader0.mark((byte)0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol");
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      jVCParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)10;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 39, 12, (byte)3);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 39, 1431655765, (byte) (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)92;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)2, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 39, 39, (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)2, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)2, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)2, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(39, token0.endColumn);
      assertEquals(39, token0.beginColumn);
      assertEquals(39, token0.beginLine);
      assertEquals(39, token0.endLine);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 39, (byte)0, 6);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)2, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotNull(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)2, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, simpleCharStream0.getEndColumn());
      assertEquals(42, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(42, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(39, token1.beginLine);
      assertEquals(42, token1.endColumn);
      assertEquals(42, token1.beginColumn);
      assertEquals(39, token1.endLine);
      assertEquals(16, token1.kind);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)2, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, simpleCharStream0.getEndColumn());
      assertEquals(42, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(42, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals("\u0000", token2.toString());
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(42, token2.beginColumn);
      assertEquals(39, token2.beginLine);
      assertEquals(42, token2.endColumn);
      assertEquals(39, token2.endLine);
      assertEquals(16, token2.kind);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      int int0 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)2, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)2, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, simpleCharStream0.getEndColumn());
      assertEquals(42, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(42, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(39, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(42, token3.endColumn);
      assertEquals(39, token3.beginLine);
      assertEquals(42, token3.beginColumn);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yk_+}w^r!O#");
      assertNotNull(stringReader0);
      
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1707), (-1707));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1707), simpleCharStream0.getLine());
      assertEquals((-1707), simpleCharStream0.getEndColumn());
      assertEquals((-1707), simpleCharStream0.getBeginLine());
      assertEquals((-1707), simpleCharStream0.getEndLine());
      assertEquals((-1707), simpleCharStream0.getColumn());
      assertEquals((-1707), simpleCharStream0.getBeginColumn());
      assertEquals("Y", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1707), token0.endLine);
      assertEquals((-1707), token0.beginColumn);
      assertEquals((-1707), token0.beginLine);
      assertEquals((-1707), token0.endColumn);
      assertEquals(16, token0.kind);
      
      boolean boolean1 = simpleCharStream0.prevCharIsCR;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertEquals((-1707), simpleCharStream0.getLine());
      assertEquals((-1707), simpleCharStream0.getEndColumn());
      assertEquals((-1707), simpleCharStream0.getBeginLine());
      assertEquals((-1707), simpleCharStream0.getEndLine());
      assertEquals((-1707), simpleCharStream0.getColumn());
      assertEquals((-1707), simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals((-1706), simpleCharStream0.getBeginColumn());
      assertEquals((-1707), simpleCharStream0.getLine());
      assertEquals((-1706), simpleCharStream0.getEndColumn());
      assertEquals((-1707), simpleCharStream0.getBeginLine());
      assertEquals((-1707), simpleCharStream0.getEndLine());
      assertEquals((-1706), simpleCharStream0.getColumn());
      assertEquals("k", token1.toString());
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1706), token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals((-1707), token1.endLine);
      assertEquals((-1706), token1.beginColumn);
      assertEquals((-1707), token1.beginLine);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(39);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 39. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_[\"\"IpC18Y?JS");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals('_', char0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("[", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("\"", token1.toString());
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("\"", token2.toString());
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yk_+}w^r!O#");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1707), (-1707));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1707), simpleCharStream0.getBeginLine());
      assertEquals((-1707), simpleCharStream0.getEndColumn());
      assertEquals((-1707), simpleCharStream0.getColumn());
      assertEquals((-1707), simpleCharStream0.getBeginColumn());
      assertEquals((-1707), simpleCharStream0.getEndLine());
      assertEquals((-1707), simpleCharStream0.getLine());
      assertEquals("Y", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1707), token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals((-1707), token0.beginColumn);
      assertEquals((-1707), token0.beginLine);
      assertEquals((-1707), token0.endLine);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals((-1707), simpleCharStream0.getBeginLine());
      assertEquals((-1706), simpleCharStream0.getEndColumn());
      assertEquals((-1706), simpleCharStream0.getColumn());
      assertEquals((-1706), simpleCharStream0.getBeginColumn());
      assertEquals((-1707), simpleCharStream0.getEndLine());
      assertEquals((-1707), simpleCharStream0.getLine());
      assertEquals("k", token1.toString());
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-1707), token1.endLine);
      assertEquals((-1707), token1.beginLine);
      assertEquals((-1706), token1.beginColumn);
      assertEquals((-1706), token1.endColumn);
      assertEquals(16, token1.kind);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      Locale locale0 = Locale.forLanguageTag("Yk_+}w^r!O#");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals((-1705), simpleCharStream0.getBeginColumn());
      assertEquals((-1707), simpleCharStream0.getBeginLine());
      assertEquals((-1705), simpleCharStream0.getEndColumn());
      assertEquals((-1705), simpleCharStream0.getColumn());
      assertEquals((-1707), simpleCharStream0.getEndLine());
      assertEquals((-1707), simpleCharStream0.getLine());
      assertEquals("_", token2.toString());
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(16, token2.kind);
      assertEquals((-1705), token2.endColumn);
      assertEquals((-1707), token2.beginLine);
      assertEquals((-1705), token2.beginColumn);
      assertEquals((-1707), token2.endLine);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_[\"\"IpC18Y?JS");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('_', char0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[!\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)32, (-1707));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1707), simpleCharStream0.getBeginColumn());
      assertEquals((-1707), simpleCharStream0.getEndColumn());
      assertEquals(32, simpleCharStream0.getLine());
      assertEquals(32, simpleCharStream0.getEndLine());
      assertEquals(32, simpleCharStream0.getBeginLine());
      assertEquals((-1707), simpleCharStream0.getColumn());
      assertEquals("\"", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(32, token0.endLine);
      assertEquals((-1707), token0.beginColumn);
      assertEquals((-1707), token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(32, token0.beginLine);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1706), simpleCharStream0.getBeginColumn());
      assertEquals(32, simpleCharStream0.getLine());
      assertEquals(32, simpleCharStream0.getEndLine());
      assertEquals((-1704), simpleCharStream0.getColumn());
      assertEquals(32, simpleCharStream0.getBeginLine());
      assertEquals((-1704), simpleCharStream0.getEndColumn());
      assertEquals("[[!", token1.toString());
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals((-1706), token1.beginColumn);
      assertEquals(32, token1.endLine);
      assertEquals(32, token1.beginLine);
      assertEquals((-1704), token1.endColumn);
      assertEquals(5, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1703), simpleCharStream0.getBeginColumn());
      assertEquals(32, simpleCharStream0.getLine());
      assertEquals(32, simpleCharStream0.getEndLine());
      assertEquals((-1703), simpleCharStream0.getColumn());
      assertEquals(32, simpleCharStream0.getBeginLine());
      assertEquals((-1703), simpleCharStream0.getEndColumn());
      assertEquals("\"", token2.toString());
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(16, token2.kind);
      assertEquals(32, token2.beginLine);
      assertEquals(32, token2.endLine);
      assertEquals((-1703), token2.endColumn);
      assertEquals((-1703), token2.beginColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1703), simpleCharStream0.getBeginColumn());
      assertEquals(32, simpleCharStream0.getLine());
      assertEquals(32, simpleCharStream0.getEndLine());
      assertEquals((-1703), simpleCharStream0.getColumn());
      assertEquals(32, simpleCharStream0.getBeginLine());
      assertEquals((-1703), simpleCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals((-1703), token3.endColumn);
      assertEquals((-1703), token3.beginColumn);
      assertEquals(32, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(32, token3.beginLine);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1703), simpleCharStream0.getBeginColumn());
      assertEquals(32, simpleCharStream0.getLine());
      assertEquals(32, simpleCharStream0.getEndLine());
      assertEquals((-1703), simpleCharStream0.getColumn());
      assertEquals(32, simpleCharStream0.getBeginLine());
      assertEquals((-1703), simpleCharStream0.getEndColumn());
      assertEquals("", token4.toString());
      assertNotNull(token4);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(32, token4.endLine);
      assertEquals((-1703), token4.beginColumn);
      assertEquals((-1703), token4.endColumn);
      assertEquals(0, token4.kind);
      assertEquals(32, token4.beginLine);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      
      try { 
        stringReader0.mark(32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yk_+}w^r!O#");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1707), (-1707));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1707), simpleCharStream0.getLine());
      assertEquals((-1707), simpleCharStream0.getBeginLine());
      assertEquals((-1707), simpleCharStream0.getEndColumn());
      assertEquals((-1707), simpleCharStream0.getColumn());
      assertEquals((-1707), simpleCharStream0.getEndLine());
      assertEquals((-1707), simpleCharStream0.getBeginColumn());
      assertEquals("Y", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1707), token0.endLine);
      assertEquals((-1707), token0.beginLine);
      assertEquals((-1707), token0.beginColumn);
      assertEquals((-1707), token0.endColumn);
      assertEquals(16, token0.kind);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      
      long long0 = stringReader0.skip((-1707));
      assertEquals(0L, long0);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 0);
      assertEquals((-1707), simpleCharStream0.getLine());
      assertEquals((-1707), simpleCharStream0.getBeginLine());
      assertEquals((-1707), simpleCharStream0.getEndColumn());
      assertEquals((-1707), simpleCharStream0.getColumn());
      assertEquals((-1707), simpleCharStream0.getEndLine());
      assertEquals((-1707), simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager2);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertEquals((-1707), simpleCharStream0.getLine());
      assertEquals((-1707), simpleCharStream0.getBeginLine());
      assertEquals((-1706), simpleCharStream0.getEndColumn());
      assertEquals((-1707), simpleCharStream0.getEndLine());
      assertEquals((-1706), simpleCharStream0.getColumn());
      assertEquals((-1706), simpleCharStream0.getBeginColumn());
      assertEquals("k", token1.toString());
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token1.kind);
      assertEquals((-1706), token1.endColumn);
      assertEquals((-1707), token1.beginLine);
      assertEquals((-1706), token1.beginColumn);
      assertEquals((-1707), token1.endLine);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      boolean boolean0 = simpleCharStream0.prevCharIsCR;
      assertFalse(boolean0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Y", "0000");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0000
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte byte0 = (byte)92;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)3;
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 53, 53, (byte)3);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)3);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(55, simpleCharStream0.getColumn());
      assertEquals(55, simpleCharStream0.getBeginColumn());
      assertEquals(55, simpleCharStream0.getEndColumn());
      assertEquals(53, simpleCharStream0.getLine());
      assertEquals(53, simpleCharStream0.getEndLine());
      assertEquals(53, simpleCharStream0.getBeginLine());
      assertEquals("\u0003", token0.toString());
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(55, token0.beginColumn);
      assertEquals(55, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(53, token0.endLine);
      assertEquals(53, token0.beginLine);
      
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (-1009), (byte)0, (-503));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_EXPR2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4, 4);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(4, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals("I", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(4, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(4, token0.beginLine);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager2);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(4, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals("N", token1.toString());
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token1.endLine);
      assertEquals(5, token1.endColumn);
      assertEquals(4, token1.beginLine);
      assertEquals(16, token1.kind);
      assertEquals(5, token1.beginColumn);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(token1, token0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      
      JVCParserTokenManager jVCParserTokenManager3 = null;
      try {
        jVCParserTokenManager3 = new JVCParserTokenManager(simpleCharStream0, 1167);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1167. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)10;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)3;
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)10, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-25), (byte) (-25), (byte)3);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)10, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)3);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)10, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-25), (byte)10, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-25), simpleCharStream0.getEndLine());
      assertEquals((-25), simpleCharStream0.getLine());
      assertEquals((-25), simpleCharStream0.getEndColumn());
      assertEquals((-25), simpleCharStream0.getBeginLine());
      assertEquals((-25), simpleCharStream0.getColumn());
      assertEquals((-25), simpleCharStream0.getBeginColumn());
      assertEquals("\uFFFD", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-25), token0.beginLine);
      assertEquals((-25), token0.beginColumn);
      assertEquals((-25), token0.endColumn);
      assertEquals((-25), token0.endLine);
      assertEquals(16, token0.kind);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (-1009), (byte)0, 6);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)10, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotNull(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-25), (byte)10, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-25), simpleCharStream0.getEndLine());
      assertEquals((-24), simpleCharStream0.getBeginColumn());
      assertEquals((-25), simpleCharStream0.getLine());
      assertEquals((-24), simpleCharStream0.getEndColumn());
      assertEquals((-25), simpleCharStream0.getBeginLine());
      assertEquals((-24), simpleCharStream0.getColumn());
      assertEquals("\n", token1.toString());
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-25), token1.endLine);
      assertEquals(6, token1.kind);
      assertEquals((-25), token1.beginLine);
      assertEquals((-24), token1.beginColumn);
      assertEquals((-24), token1.endColumn);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      
      Locale locale0 = Locale.forLanguageTag("\n");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\n", "YE^})7@?");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // YE^})7@?
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "\\\\";
      StringReader stringReader0 = new StringReader("\\");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1094, (-5152));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-5152), simpleCharStream0.getColumn());
      assertEquals(1094, simpleCharStream0.getBeginLine());
      assertEquals(1094, simpleCharStream0.getEndLine());
      assertEquals(1094, simpleCharStream0.getLine());
      assertEquals((-5152), simpleCharStream0.getEndColumn());
      assertEquals((-5152), simpleCharStream0.getBeginColumn());
      assertEquals("\\", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1094, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals((-5152), token0.beginColumn);
      assertEquals((-5152), token0.endColumn);
      assertEquals(1094, token0.beginLine);
      
      try { 
        stringReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)92;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 39, 39, (byte)3);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)3);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(39, simpleCharStream0.getColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(39, token0.beginColumn);
      assertEquals(39, token0.endColumn);
      assertEquals(39, token0.beginLine);
      assertEquals(39, token0.endLine);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 39, (byte)0, 6);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotNull(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, simpleCharStream0.getColumn());
      assertEquals(42, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(42, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(39, token1.endLine);
      assertEquals(42, token1.endColumn);
      assertEquals(39, token1.beginLine);
      assertEquals(42, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, simpleCharStream0.getColumn());
      assertEquals(42, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(42, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals("\u0000", token2.toString());
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token2.kind);
      assertEquals(42, token2.endColumn);
      assertEquals(39, token2.beginLine);
      assertEquals(42, token2.beginColumn);
      assertEquals(39, token2.endLine);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      int int0 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(42, simpleCharStream0.getColumn());
      assertEquals(42, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(42, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(42, token3.endColumn);
      assertEquals(39, token3.beginLine);
      assertEquals(42, token3.beginColumn);
      assertEquals(39, token3.endLine);
      assertEquals(0, token3.kind);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[\"");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 32, 55);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 13, 13);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotNull(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream1.getColumn());
      assertEquals(13, simpleCharStream1.getBeginLine());
      assertEquals(13, simpleCharStream1.getEndLine());
      assertEquals(13, simpleCharStream1.getBeginColumn());
      assertEquals(13, simpleCharStream1.getLine());
      assertEquals(13, simpleCharStream1.getEndColumn());
      assertEquals("\"", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(13, token0.beginColumn);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.endColumn);
      assertEquals(13, token0.beginLine);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(15, simpleCharStream1.getColumn());
      assertEquals(13, simpleCharStream1.getBeginLine());
      assertEquals(13, simpleCharStream1.getEndLine());
      assertEquals(13, simpleCharStream1.getLine());
      assertEquals(14, simpleCharStream1.getBeginColumn());
      assertEquals(15, simpleCharStream1.getEndColumn());
      assertEquals("[[", token1.toString());
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream1.bufpos);
      assertEquals(1, token1.kind);
      assertEquals(14, token1.beginColumn);
      assertEquals(13, token1.beginLine);
      assertEquals(13, token1.endLine);
      assertEquals(15, token1.endColumn);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, simpleCharStream1.getColumn());
      assertEquals(16, simpleCharStream1.getBeginColumn());
      assertEquals(13, simpleCharStream1.getBeginLine());
      assertEquals(13, simpleCharStream1.getEndLine());
      assertEquals(13, simpleCharStream1.getLine());
      assertEquals(16, simpleCharStream1.getEndColumn());
      assertEquals("\"", token2.toString());
      assertNotNull(token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream1.bufpos);
      assertEquals(16, token2.kind);
      assertEquals(16, token2.beginColumn);
      assertEquals(13, token2.beginLine);
      assertEquals(13, token2.endLine);
      assertEquals(16, token2.endColumn);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, simpleCharStream1.getColumn());
      assertEquals(16, simpleCharStream1.getBeginColumn());
      assertEquals(13, simpleCharStream1.getBeginLine());
      assertEquals(13, simpleCharStream1.getEndLine());
      assertEquals(13, simpleCharStream1.getLine());
      assertEquals(16, simpleCharStream1.getEndColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream1.bufpos);
      assertEquals(16, token3.endColumn);
      assertEquals(13, token3.beginLine);
      assertEquals(16, token3.beginColumn);
      assertEquals(13, token3.endLine);
      assertEquals(0, token3.kind);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, simpleCharStream1.getColumn());
      assertEquals(16, simpleCharStream1.getBeginColumn());
      assertEquals(13, simpleCharStream1.getBeginLine());
      assertEquals(13, simpleCharStream1.getEndLine());
      assertEquals(13, simpleCharStream1.getLine());
      assertEquals(16, simpleCharStream1.getEndColumn());
      assertEquals("", token4.toString());
      assertNotNull(token4);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream1.bufpos);
      assertEquals(16, token4.endColumn);
      assertEquals(0, token4.kind);
      assertEquals(13, token4.beginLine);
      assertEquals(16, token4.beginColumn);
      assertEquals(13, token4.endLine);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)92;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 39, 39, (byte)3);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(39, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(39, token0.endColumn);
      assertEquals(39, token0.beginColumn);
      assertEquals(39, token0.beginLine);
      assertEquals(39, token0.endLine);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 39, (byte)0, 6);
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotNull(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(39, simpleCharStream0.getEndColumn());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(39, simpleCharStream0.getBeginColumn());
      assertEquals(39, simpleCharStream0.getColumn());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(39, token1.endColumn);
      assertEquals(39, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(39, token1.beginLine);
      assertEquals(39, token1.beginColumn);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      
      int int0 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)92, (byte)3, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(39, simpleCharStream0.getBeginLine());
      assertEquals(39, simpleCharStream0.getLine());
      assertEquals(39, simpleCharStream0.getEndLine());
      assertEquals(42, simpleCharStream0.getBeginColumn());
      assertEquals(42, simpleCharStream0.getColumn());
      assertEquals(42, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token2.toString());
      assertNotNull(token2);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(39, token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(39, token2.beginLine);
      assertEquals(42, token2.beginColumn);
      assertEquals(42, token2.endColumn);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yk_+}w^r!O#");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1699), (-1699));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("\\");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      String string0 = "\\t";
      StringReader stringReader2 = new StringReader("\t");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader2, 42);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader2, (-1), 20);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      int int0 = 0;
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(24, simpleCharStream1.getColumn());
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals(24, simpleCharStream1.getEndColumn());
      assertEquals(24, simpleCharStream1.getBeginColumn());
      assertEquals("\t", token0.toString());
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals((-1), token0.endLine);
      assertEquals(24, token0.beginColumn);
      assertEquals(24, token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals(16, token0.kind);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      JVCParserTokenManager jVCParserTokenManager2 = null;
      try {
        jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 3941);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3941. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_[\"\"IpC18Y?JS");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-300), (-1707));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1707), simpleCharStream0.getColumn());
      assertEquals((-1707), simpleCharStream0.getEndColumn());
      assertEquals((-300), simpleCharStream0.getBeginLine());
      assertEquals((-1707), simpleCharStream0.getBeginColumn());
      assertEquals((-300), simpleCharStream0.getEndLine());
      assertEquals((-300), simpleCharStream0.getLine());
      assertEquals("_", token0.toString());
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1707), token0.beginColumn);
      assertEquals((-1707), token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals((-300), token0.beginLine);
      assertEquals((-300), token0.endLine);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals((-1707), simpleCharStream0.getColumn());
      assertEquals((-1707), simpleCharStream0.getEndColumn());
      assertEquals((-300), simpleCharStream0.getBeginLine());
      assertEquals((-1707), simpleCharStream0.getBeginColumn());
      assertEquals((-300), simpleCharStream0.getEndLine());
      assertEquals((-300), simpleCharStream0.getLine());
      assertNotNull(jVCParserTokenManager1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals((-1706), simpleCharStream0.getColumn());
      assertEquals((-300), simpleCharStream0.getBeginLine());
      assertEquals((-1706), simpleCharStream0.getEndColumn());
      assertEquals((-300), simpleCharStream0.getEndLine());
      assertEquals((-300), simpleCharStream0.getLine());
      assertEquals((-1706), simpleCharStream0.getBeginColumn());
      assertEquals("[", token1.toString());
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-300), token1.beginLine);
      assertEquals((-1706), token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals((-1706), token1.endColumn);
      assertEquals((-300), token1.endLine);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.SwitchTo(2593);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2593. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }
}
