/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:24:49 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.FileNotFoundException;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils.stringSize((-1324L));
      IOUtils.decodeBase64("com.alibaba.Nastjson.util.UTF8DRcoder", 1, 1);
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
      
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8(iOUtils0.replaceChars, (-2195), (-2195), iOUtils0.specicalFlags_doubleQuotes);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 26, 26, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 6, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(3566, 4, iOUtils0.replaceChars);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.DIGITS, 7, 3566);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("!E1\"$KUg~%X24");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[10];
      int int0 = IOUtils.stringSize(2147483666L);
      assertEquals(10, int0);
      
      boolean boolean0 = IOUtils.firstIdentifier('+');
      assertFalse(boolean0);
      
      IOUtils.getChars(2147483666L, 10, charArray0);
      assertArrayEquals(new char[] {'2', '1', '4', '7', '4', '8', '3', '6', '6', '6'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars(4731, 4731, iOUtils0.CA);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4730
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      IOUtils.close(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      StringReader stringReader0 = new StringReader("fastjson.properties");
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithFieldName");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("-~#\"=");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("Z");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2450L), 3680, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3679
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("", 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = IOUtils.stringSize((-90L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      StringReader stringReader0 = new StringReader("fastjson.properties");
      String string0 = IOUtils.getStringProperty("fastjson.compatibleWithJavaBean");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("n(Jt,H)");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-14), (byte)109, (byte) (-4)}, byteArray0);
      
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      boolean boolean0 = IOUtils.firstIdentifier('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wm,Nb|n}BKLI?c $9");
      String string0 = IOUtils.readAll(stringReader0);
      assertEquals("wm,Nb|n}BKLI?c $9", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils.decodeBase64("7eZ`");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("7eZ`", 0, 244);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IOUtils.getChars((-5592), (-5592), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils.isIdent('0');
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-64), (int) (byte) (-64), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_singleQuotes, 63, 63, iOUtils0.replaceChars);
      assertEquals(63, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.firstIdentifier('P');
      IOUtils.decodeBase64("u\u0006f.cWp%tz1d&");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      ByteBuffer byteBuffer0 = charset0.encode("?@R");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertTrue(charBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils.decodeBase64("@");
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 6, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte)22, (int) (byte)22, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      IOUtils.getChars((byte) (-127), 8, charArray0);
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("mNIf4&X/@MCwu!ql");
      char[] charArray0 = new char[3];
      IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("mNIf4&X/@MCwu!ql");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      int int0 = 4;
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 4, 4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("fastjson.properties");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = 3566;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.CA, 34, 34, iOUtils0.specicalFlags_doubleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'D';
      int int0 = IOUtils.stringSize(2147483647L);
      assertEquals(10, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.getChars((-328L), 4, charArray0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("mNIf4&X/$@MCwu!ql");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[2];
      IOUtils.decodeUTF8(byteArray0, 4, 4, charArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = IOUtils.decodeBase64("$!~Q!K5FODbNGD8b");
      IOUtils.getStringProperty("U@y\f6[z");
      char[] charArray0 = new char[1];
      charArray0[0] = '\u00AF';
      int int0 = IOUtils.decodeUTF8(byteArray0, 7, 7, charArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-14), (byte) (-71), (byte)20, (byte) (-32), (byte) (-37), (byte)52, (byte)96, (byte) (-4)}, byteArray0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize((-1));
      int int2 = IOUtils.stringSize((long) (-1));
      assertTrue(int2 == int1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharsetDecoder charsetDecoder0 = iOUtils0.UTF8.newDecoder();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = iOUtils0.UTF8.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(charsetDecoder0, byteBuffer1, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils iOUtils0 = new IOUtils();
      int int1 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 4, 16);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      uTF8Decoder0.decode(byteBuffer0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = 7;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.DIGITS, 7, 7);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOUtils.close((Closeable) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Qu=::6@d");
      String string0 = IOUtils.getStringProperty("*");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-32);
      char[] charArray0 = new char[3];
      charArray0[1] = 'L';
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)6, charArray0);
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[16];
      charArray0[0] = 'X';
      IOUtils.stringSize(1987L);
      IOUtils.decodeBase64("com.alibaba.fastjson.util.IOUtils", 4, 4);
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2147483646), (-2147483646), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[24];
      charArray0[6] = '\u00E1';
      int int0 = 5;
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 5, 5, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.decodeBase64("6>E~", 1, 1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        Charset.forName("6>E~");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 6>E~
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
      int int0 = IOUtils.stringSize(815);
      assertEquals(3, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 3, 3);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)59}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.getChars((-14), 6, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils.isIdent('7');
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("*<F|", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.stringSize(2116L);
      byte[] byteArray0 = IOUtils.decodeBase64("cm.alibaba.N2stjson.util.UTF8DRcoder", 4, 4);
      char[] charArray0 = new char[16];
      charArray0[0] = 'M';
      charArray0[6] = '\u008B';
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 4, 'M', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[16];
      byte[] byteArray0 = IOUtils.decodeBase64("EYBujf&kxe2KI>4j");
      IOUtils.decodeUTF8(byteArray0, 7, 7, charArray0);
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        Charset.forName("EYBujf&kxe2KI>4j");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // EYBujf&kxe2KI>4j
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)6;
      byteArray0[3] = (byte) (-58);
      char[] charArray0 = new char[3];
      charArray0[1] = 'L';
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)6, charArray0);
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        Charset.forName("IVe8mk<^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // IVe8mk<^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-15);
      char[] charArray0 = new char[3];
      charArray0[1] = '[';
      charArray0[2] = '[';
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)6, charArray0);
      IOUtils.decodeBase64("2BTkn7FvSck_? Acs");
      String string0 = codingErrorAction0.toString();
      assertEquals("IGNORE", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[8] = (byte)0;
      byteArray0[3] = (byte) (-64);
      char[] charArray0 = new char[11];
      charArray0[1] = 'L';
      charArray0[0] = 'L';
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)6, charArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-32);
      char[] charArray0 = new char[13];
      charArray0[1] = '1';
      charArray0[2] = 'D';
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)5, charArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, iOUtils0.specicalFlags_singleQuotes);
      IOUtils.encodeUTF8(iOUtils0.CA, 15, 15, iOUtils0.specicalFlags_doubleQuotes);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 15, 15);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, iOUtils0.specicalFlags_doubleQuotes);
      IOUtils.loadPropertiesFromFile();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 3, (-2086), iOUtils0.specicalFlags_doubleQuotes);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 93);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOUtils.firstIdentifier('\u010A');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOUtils.getStringProperty("com.alibaba.fastjson.JSONException");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u010A';
      charArray0[1] = '\u010A';
      charArray0[2] = '\u010A';
      charArray0[3] = '\u010A';
      charArray0[4] = '\u010A';
      charArray0[5] = '\u010A';
      // Undeclared exception!
      try { 
        IOUtils.getChars(57, 57, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
