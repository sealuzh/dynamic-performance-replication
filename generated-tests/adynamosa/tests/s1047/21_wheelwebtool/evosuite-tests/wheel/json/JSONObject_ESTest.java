/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 05:27:13 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[4] = "r";
      stringArray0[3] = stringArray0[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = "uta`sUU#70";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optDouble(stringArray0[1]);
      JSONObject jSONObject2 = jSONObject0.accumulate("uta`sUU#70", jSONObject1);
      JSONObject jSONObject3 = jSONObject2.put("va", false);
      jSONObject3.optJSONObject("uta`sUU#70");
      jSONObject0.length();
      Boolean boolean0 = Boolean.TRUE;
      JSONTokener jSONTokener0 = new JSONTokener("uta`sUU#70");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = JSONObject.NULL;
      linkedList0.add("&_:=");
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put(" at character ", (Collection) linkedList0);
      jSONObject0.optBoolean(" at character ");
      JSONObject.getNames((Object) jSONObject0);
      jSONObject1.optJSONArray(" at character ");
      Double.sum((-1631.6024), 1283.4346845101218);
      Object object1 = JSONObject.NULL;
      int int0 = 53;
      JSONObject.valueToString(object1, 60, 53);
      jSONObject1.keys();
      try { 
        jSONObject1.getJSONObject("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      Boolean boolean0 = new Boolean("");
      jSONObject1.optJSONArray("");
      JSONObject jSONObject3 = jSONObject1.optJSONObject("");
      assertNull(jSONObject3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Short short0 = new Short((short)2);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Collection) linkedList0);
      jSONObject1.toString((-2717));
      jSONObject1.optJSONObject((String) null);
      jSONObject1.getJSONArray("0");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("EBf#E", "EBf#E");
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject0.optBoolean("EBf#E");
      Byte byte0 = new Byte((byte)26);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.optBoolean("EBf#E");
      Long long0 = new Long((byte)26);
      JSONObject.valueToString("EBf#E");
      Long.remainderUnsigned(0L, (-2725L));
      JSONTokener jSONTokener0 = new JSONTokener("SL\"wP'iG");
      JSONObject.numberToString(long0);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject2.toJSONArray(jSONArray0);
      Integer integer0 = new Integer(116);
      Short short0 = new Short((byte)26);
      jSONObject2.toString((-2110), 116);
      JSONObject.testValidity((Object) null);
      jSONObject2.put("EBf#E", 0L);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = new JSONObject();
      JSONObject.getNames(jSONObject2);
      JSONObject jSONObject5 = jSONObject1.put("{}", (-2110));
      jSONObject5.isNull("7MuMPy1'Q% iJ");
      try { 
        jSONObject5.getBoolean("EBf#E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"EBf#E\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      Object object0 = JSONObject.NULL;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = ",Sn\n";
      Boolean boolean0 = new Boolean("{}");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optBoolean(",Sn\n");
      JSONObject.valueToString("{}", 16, 57);
      JSONObject.quote("get");
      JSONObject.quote("6y9T:=/G\"9L_");
      JSONObject.valueToString(jSONObject0);
      String string0 = "qiv3F$^";
      JSONTokener jSONTokener0 = new JSONTokener("qiv3F$^");
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean1 = new Boolean((boolean) boolean0);
      jSONObject1.optDouble("n.:DUA.2yLm1ovu \"D$", (-2263.387660483524));
      jSONObject0.names();
      jSONObject0.optJSONArray("\"get\"");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.put("] is not a JSONObject.", 57);
      try { 
        jSONObject1.getJSONArray("</@y/Eu%sH\"x0h5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/@y/Eu%sH\\\"x0h5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{L2T<y)=8e6Y/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 12 of {L2T<y)=8e6Y/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0);
      Long long0 = new Long((-59L));
      Long.sum((-59L), (-59L));
      Long.compare((-59L), 910L);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Object) long0);
      jSONObject1.optInt("wheel.json.JSONObject@0000000001");
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optDouble("wheel.json.JSONObject@0000000001");
      jSONObject0.optJSONObject("*B7)wM9xn.=14Q3");
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.valueToString("yN&<,qx+u'B[~$NY");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("yN&<,qx+u'B[~$NY", 0L);
      jSONObject0.optDouble("is", (double) 0L);
      JSONObject jSONObject1 = jSONObject0.put("U3i", false);
      jSONObject1.optDouble("U3i", 0.0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject0.optDouble("\"java.lang.String@0000000001\"", 851.8082);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject1.optLong("s&'si!R");
      JSONObject.doubleToString(0L);
      JSONObject jSONObject2 = jSONObject1.put(",\n", 0L);
      jSONObject2.optDouble("Dps,oH][LGy");
      jSONObject2.put("yN&<,qx+u'B[~$NY", (double) 0L);
      jSONObject2.optDouble("yN&<,qx+u'B[~$NY", Double.NaN);
      JSONObject jSONObject3 = jSONObject0.put("yN&<,qx+u'B[~$NY", 0L);
      jSONObject3.put("yN&<,qx+u'B[~$NY", (Map) hashMap0);
      jSONObject0.toString(295, 295);
      jSONObject3.toString(121, 2077);
      jSONObject1.getJSONObject("yN&<,qx+u'B[~$NY");
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[4] = "";
      stringArray0[3] = stringArray0[2];
      stringArray0[6] = stringArray0[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject();
      double double0 = jSONObject1.optDouble(stringArray0[1]);
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONObject jSONObject2 = jSONObject0.accumulate("uta`sUU#70", jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject3 = new JSONObject();
      Writer writer0 = jSONObject2.write(stringWriter0);
      char[] charArray0 = new char[18];
      writer0.write(charArray0);
      stringWriter0.close();
      Writer writer1 = jSONObject2.write(stringWriter0);
      jSONObject1.write(writer1);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject4 = jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject4.names();
      assertNotNull(jSONArray0);
      
      jSONObject0.toString((-1134), (-835));
      JSONObject.valueToString(jSONObject2);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      jSONObject4.remove("toH");
      JSONObject jSONObject5 = jSONObject3.put("", (long) (-835));
      Float float0 = new Float((float) (-835));
      JSONObject.getNames((Object) float0);
      JSONObject.getNames((Object) float0);
      int int0 = jSONObject5.getInt("");
      assertEquals((-835), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.valueToString("yN&<,qx+u'B[~$NY");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 0L);
      JSONObject jSONObject1 = jSONObject0.put("U3i", false);
      int int0 = jSONObject1.optInt("\"java.lang.String@0000000001\"", 805);
      jSONObject1.optDouble("U3i", 0.0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject0.optDouble("", 851.8082);
      jSONObject1.optLong("s&'si!R");
      JSONObject.doubleToString(0L);
      jSONObject0.put("yN&<,qx+u'B[~$NY", 0L);
      int int1 = jSONObject0.getInt("yN&<,qx+u'B[~$NY");
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = new JSONObject();
      Byte byte0 = new Byte((byte)69);
      jSONObject1.optLong("D6.", 0L);
      JSONObject jSONObject2 = jSONObject0.put("D6.", true);
      String string0 = JSONObject.quote("cl");
      assertEquals("\"cl\"", string0);
      
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject3.put("\"cl\"", 5741);
      jSONObject0.put("cl", (-1630));
      JSONObject jSONObject4 = jSONObject3.put("cl", true);
      JSONObject jSONObject5 = jSONObject0.put("cl", (double) 0L);
      jSONObject5.keys();
      JSONObject jSONObject6 = jSONObject3.put("kl.7S>m%!E/]?S~wI-", 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = jSONObject4.isNull("cl");
      boolean boolean1 = jSONObject5.getBoolean("D6.");
      assertFalse(boolean1 == boolean0);
      
      double double0 = jSONObject5.optDouble("cl");
      assertEquals(0.0, double0, 0.01);
      
      double double1 = jSONObject6.optDouble("\"cl\"");
      assertEquals(5741.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = new JSONObject();
      Byte byte0 = new Byte((byte)69);
      jSONObject1.optLong("D6.", 0L);
      JSONObject jSONObject2 = jSONObject0.put("D6.", false);
      JSONObject.valueToString(jSONObject0);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject4 = jSONObject3.put("cl", true);
      JSONObject jSONObject5 = jSONObject0.put("cl", (double) 0L);
      jSONObject3.put("kl.7S>m%!E/]?S~wI-", 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = jSONObject4.isNull("cl");
      boolean boolean1 = jSONObject5.getBoolean("D6.");
      assertTrue(boolean1 == boolean0);
      
      double double0 = jSONObject5.optDouble("cl");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = new JSONObject();
      Byte byte0 = new Byte((byte)69);
      jSONObject1.optLong("D6.", 0L);
      JSONObject jSONObject2 = jSONObject0.put("D6.", true);
      String string0 = JSONObject.quote("cl");
      assertEquals("\"cl\"", string0);
      
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject4 = jSONObject3.put("cl", true);
      JSONObject jSONObject5 = jSONObject0.put("cl", (double) 0L);
      jSONObject3.put("kl.7S>m%!E/]?S~wI-", 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = jSONObject4.isNull("cl");
      boolean boolean1 = jSONObject5.getBoolean("D6.");
      assertFalse(boolean1 == boolean0);
      
      double double0 = jSONObject5.optDouble("cl");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      int int0 = 9;
      int int1 = 58;
      JSONObject.valueToString("", 9, 58);
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.String@0000000001\"");
      jSONObject0.optInt("", 47);
      jSONObject0.optJSONObject("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.addLast("vS|0^t!_}g7Ts`k|P'");
      Object object0 = new Object();
      Float float0 = new Float((float) 3);
      JSONObject.getNames((Object) "vS|0^t!_}g7Ts`k|P'");
      linkedList1.offerLast("] not found.");
      Boolean boolean0 = new Boolean("\"java.lang.String@0000000001\"");
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of int
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0.0", 92);
      jSONObject1.getDouble("0.0");
      try { 
        jSONObject0.getInt("YDlR5? 7,#CBc,{>/g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"YDlR5? 7,#CBc,{>/g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "{z&7!?mTqf`>UX9C$";
      JSONTokener jSONTokener0 = new JSONTokener("{z&7!?mTqf`>UX9C$");
      jSONTokener0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 17 of {z&7!?mTqf`>UX9C$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
      
      Float float0 = new Float(819.2459F);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{9=qyC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 6 of {9=qyC
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      jSONObject0.optBoolean("");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      JSONObject.doubleToString(2824.92146);
      JSONObject.quote("getwait");
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, (-2235));
      JSONObject jSONObject1 = jSONObject0.append("*4Bt\"Uk}l>@j", "*4Bt\"Uk}l>@j");
      JSONObject jSONObject2 = jSONObject1.accumulate("*4Bt\"Uk}l>@j", "*4Bt\"Uk}l>@j");
      jSONObject2.optInt("JSON does not allow non-finite numbers.");
      JSONObject.getNames(jSONObject0);
      JSONObject.doubleToString(4929.16675302);
      Float float0 = new Float((-347.0851415752716));
      JSONObject jSONObject3 = jSONObject2.accumulate("JSON does not allow non-finite numbers.", float0);
      jSONObject3.toString();
      jSONObject0.optJSONArray("JSON does not allow non-finite numbers.");
      JSONObject jSONObject4 = jSONObject0.put("E", true);
      assertSame(jSONObject0, jSONObject4);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      stringArray0[6] = "A JSONObject text must begin with '{'";
      stringArray0[7] = "0";
      JSONObject jSONObject0 = new JSONObject("0", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("A JSONObject text must begin with '{'");
      JSONObject jSONObject2 = jSONObject0.put("u", 0);
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.optInt((String) null, 0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      
      String string1 = JSONObject.valueToString(hashMap0, 123, 1187);
      assertTrue(string1.equals((Object)string0));
      
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string2 = jSONObject0.toString(69, 44);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{$`thqm");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {$`thqm
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
      
      String string1 = jSONObject0.optString("getlongBitsToDouble", "{}");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Integer integer0 = new Integer((-582));
      Integer integer1 = new Integer((-582));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Integer> hashMap1 = new HashMap<JSONArray, Integer>();
      Collection<Integer> collection0 = hashMap1.values();
      jSONObject0.put("Unclosed comment", collection0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(64);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      Short short0 = new Short((short)1602);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject4 = new JSONObject("{}");
      Short.toUnsignedLong((short)1602);
      jSONObject3.optBoolean(">B=Ix/");
      Short.toUnsignedLong((short) (-2647));
      Short.toUnsignedInt((short)0);
      JSONObject jSONObject5 = jSONObject0.put("{}", false);
      JSONObject.quote(">B=Ix/");
      jSONObject0.put(",", true);
      jSONObject4.toJSONArray((JSONArray) null);
      jSONObject2.put("MPg8d", (-694.0865474476695));
      jSONObject5.toString(64, 0);
      jSONObject0.put("GX7?9xROXMYBU^$_E", 0L);
      JSONObject.getNames(jSONObject2);
      jSONObject5.isNull("AA:BmlPj-wS|x~t");
      try { 
        jSONObject0.getJSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(64);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      Short short0 = new Short((short)1602);
      HashMap<Byte, Object> hashMap1 = new HashMap<Byte, Object>(64, (short)1602);
      jSONObject2.putOpt("getintValue", jSONTokener0);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject1.optLong("\f", 3396L);
      jSONObject1.put(">B=Ix/", (Object) hashMap0);
      Short.toUnsignedLong((short)1602);
      Short.toUnsignedLong((short) (-2607));
      Short.toUnsignedInt((short)0);
      JSONObject.numberToString(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject2.toJSONArray(jSONArray0);
      JSONObject.doubleToString(0.0);
      jSONObject2.toString();
      JSONObject.getNames((Object) "0");
      jSONObject0.put("0", false);
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a Boolean.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte)102);
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.toString(2936, (int) (byte)102);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      linkedList1.add("0F/4 c]qT|r<");
      Short short0 = new Short((byte)102);
      JSONObject jSONObject1 = new JSONObject(short0);
      String string0 = ";JoV>Lr";
      JSONObject jSONObject2 = jSONObject0.put(";JoV>Lr", (Collection) linkedList1);
      jSONObject2.optBoolean(";JoV>Lr");
      jSONObject1.optJSONObject((String) null);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList1.set((byte)102, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iV]x5j<#hXqaL'J", (Object) null);
      Integer.sum((-2467), 321);
      JSONObject.valueToString(jSONObject0, 321, 959);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("getdoubleToRawLongBits", false);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("R{1R$OMY|)9l):", (-2547));
      JSONObject.quote("&)AgAo K");
      jSONObject0.optInt("&)AgAo K");
      Integer integer0 = new Integer((-817));
      Integer.sum((-2547), 24);
      Integer.remainderUnsigned((-2547), (-1474));
      hashMap0.remove((Object) integer0);
      Integer integer1 = Integer.valueOf(160);
      Integer.getInteger("\"&)AgAo K\"", integer1);
      Float float0 = new Float((float) (-817));
      hashMap0.put(integer0, float0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("Pgf$M$y$\"*mIRF)", (Collection) linkedList0);
      jSONObject0.getLong("R{1R$OMY|)9l):");
      jSONObject0.put("{AjuFg", (-2547));
      jSONObject0.accumulate("is", "&)AgAo K");
      JSONObject jSONObject3 = jSONObject2.put("R{1R$OMY|)9l):", (Collection) linkedList0);
      try { 
        jSONObject3.getJSONArray(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf(true);
      Boolean.valueOf(false);
      Boolean.logicalXor(false, true);
      Float float0 = new Float((-866.170586));
      JSONObject jSONObject1 = jSONObject0.putOpt("q|VBaE3\"", float0);
      JSONObject.valueToString(jSONObject0);
      Boolean boolean0 = new Boolean(true);
      try { 
        jSONObject1.getBoolean("q|VBaE3\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q|VBaE3\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0);
      Byte byte0 = new Byte((byte) (-77));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte) (-77));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000001", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Long@0000000001", 221);
      JSONObject.valueToString(linkedList0, (-1361), 46);
      JSONObject jSONObject3 = new JSONObject();
      String[] stringArray0 = new String[0];
      jSONObject2.keys();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      jSONObject2.put("", (Collection) linkedList1);
      jSONObject1.put("JSONArray[", 14);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of in
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer.sum(57, 0);
      Float float0 = new Float((double) (-626));
      String string0 = JSONObject.numberToString(float0);
      Byte byte0 = Byte.valueOf((byte)65);
      Byte.toUnsignedLong((byte)12);
      String string1 = JSONObject.valueToString(byte0, 0, (-626));
      assertFalse(string1.equals((Object)string0));
      
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Byte@0000000002";
      stringArray0[1] = "AFnB]fJ2D>?l";
      stringArray0[2] = "java.lang.Byte@0000000002";
      stringArray0[3] = "java.lang.Byte@0000000002";
      stringArray0[4] = "java.lang.Byte@0000000002";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.keys();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("z", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Byte@0000000002", 14);
      jSONObject2.getInt("java.lang.Byte@0000000002");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.lang.Byte@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of java.lang.Byte@0000000002
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.putOpt("q|VBaE3\"", boolean0);
      String string0 = JSONObject.valueToString(jSONObject1);
      JSONObject.doubleToString((-1851.477));
      Boolean boolean1 = new Boolean(true);
      jSONObject1.getBoolean("q|VBaE3\"");
      String string1 = jSONObject0.toString(85, 85);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.min(1580.09056418, 1580.09056418);
      JSONObject.doubleToString(1368.3964260043026);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "V(a!GZKi>\"*";
      String string1 = null;
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "7,";
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      linkedList0.removeIf(predicate2);
      linkedList0.add("7,");
      JSONObject jSONObject1 = jSONObject0.put("7,", (Collection) linkedList0);
      jSONObject1.optLong("|ixEd[eebQHJP=BZsSu");
      jSONObject1.optBoolean("7,");
      Object object1 = new Object();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject1.get("7,");
      jSONObject1.remove("sF5\"");
      try { 
        jSONObject0.getJSONObject("7,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7,\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0);
      Byte byte0 = new Byte((byte) (-77));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte) (-77));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000001", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Long@0000000001", 5559);
      String string0 = "";
      jSONObject1.optDouble("", (double) 179L);
      int int0 = new Byte((byte)4);
      JSONObject jSONObject3 = jSONObject2.put("djuuf\"F", true);
      JSONObject.quote("java.lang.Long@0000000001");
      jSONObject3.toJSONArray((JSONArray) null);
      JSONObject jSONObject4 = jSONObject2.put("", (double) 5559);
      jSONObject4.getLong("java.lang.Long@0000000001");
      Byte.toUnsignedLong((byte)4);
      jSONObject1.toString((int) (byte) (-77), (int) (byte)4);
      jSONObject1.put("java.lang.Long@0000000001", 0L);
      linkedList0.clear();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject2.isNull("");
      try { 
        jSONObject0.getString("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("D6.", false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("eG/Wt*_Q:&AFLp/9");
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      jSONObject1.optBoolean("D6.");
      JSONObject.doubleToString(0.0);
      JSONObject.getNames(jSONObject0);
      jSONObject2.put("", 1L);
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Boolean boolean0 = new Boolean("ybgWzgZqfoDnB");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("ybgWzgZqfoDnB", (Collection) linkedList0);
      Boolean boolean1 = new Boolean(true);
      linkedList0.add(boolean1);
      jSONObject1.optBoolean(" h#R%~Fy~%");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("ybgWzgZqfoDnB");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hFWCdl*^9)Vc7nEZ";
      stringArray0[1] = "";
      stringArray0[2] = "hFWCdl*^9)Vc7nEZ";
      stringArray0[3] = "Th^.?terU=Y";
      stringArray0[4] = "w3uXiK+LjQ!3io^[|";
      stringArray0[5] = "1";
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("1", object1);
      jSONObject1.remove("");
      try { 
        jSONObject0.getLong("Th^.?terU=Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Th^.?terU=Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("D6.", true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject1.length());
      
      boolean boolean0 = jSONObject0.optBoolean("D6.");
      assertTrue(boolean0);
      
      String string0 = JSONObject.doubleToString((-1551.7405891168112));
      assertEquals("-1551.7405891168112", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      String string0 = "{LG2:o<=|86YM";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{LG2:o<=|86YM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 8 of {LG2:o<=|86YM
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("D6.", true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("eG/Wt*_Q:&AFLp/9");
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject1.length());
      
      boolean boolean0 = jSONObject0.optBoolean("3{ohOP");
      assertFalse(boolean0);
      
      String string0 = JSONObject.doubleToString((-1551.7405891168112));
      assertEquals("-1551.7405891168112", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("7,");
      JSONObject jSONObject1 = jSONObject0.put("7,", (Collection) linkedList0);
      jSONObject1.optLong("|ixEd[eebQHJP=BZsSu");
      jSONObject1.optBoolean("7,");
      Object object0 = new Object();
      JSONObject.getNames((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.accumulate("|ixEd[eebQHJP=BZsSu", jSONArray0);
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject1.put("' and instead saw '", (-3797));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = jSONObject1.putOpt("va", jSONObject3);
      jSONObject4.optString((String) null, "gettoUnsignedInt");
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long.getLong("wheel.json.JSONArray");
      Long.compareUnsigned(0L, 0L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\r");
      Object object0 = new Object();
      String string0 = JSONObject.valueToString("\r", (-769), 0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "";
      int int0 = 384;
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) "");
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("", 94);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1115L);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.doubleToString(1499L);
      assertEquals("1499", string0);
      
      long long0 = jSONObject1.optLong("");
      assertEquals(1115L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", (-2841L));
      jSONObject1.optLong("{");
      long long0 = jSONObject1.optLong("{");
      assertEquals((-2841L), long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long((-2865L));
      JSONObject.valueToString(long0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Long@0000000001");
      jSONObject0.toString(488, (-4435));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Short short0 = new Short((short)9);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("getnotifyAll", (Collection) null);
      JSONObject jSONObject2 = jSONObject1.put("getnotifyAll", true);
      jSONObject2.put("(YV;6fYeq(`4c", 2822);
      Short.toUnsignedInt((short)9);
      jSONObject0.optString("Unterminated string", "");
      jSONObject1.optString("");
      jSONObject0.keys();
      jSONObject2.has("getnotifyAll");
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, 983);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("-)j c:n+W:/f0t,B[", (Collection) linkedList0);
      jSONObject0.opt("-)j c:n+W:/f0t,B[");
      try { 
        jSONObject1.put((String) null, 61L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("ES9", 2053L);
      JSONObject.doubleToString(32.41427074989031);
      jSONObject0.remove("32.41427074989031");
      jSONObject0.has((String) null);
      jSONObject0.toJSONArray(jSONArray0);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst((String) null);
      JSONObject.valueToString(linkedList0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 1499L);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.doubleToString(32.41427074989031);
      assertEquals("32.41427074989031", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      String string0 = JSONObject.doubleToString(0.0F);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("?VMp?<t9`&RJ", 1.0);
      jSONObject0.toString();
      int int0 = jSONObject1.optInt("?VMp?<t9`&RJ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 0.0F);
      Float.sum(2549.6F, 2549.6F);
      Float.isFinite(2549.6F);
      String[] stringArray0 = JSONObject.getNames((Object) float1);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "gettoHexString";
      stringArray1[1] = "";
      stringArray1[2] = "/Yh&y9|%e\"yx>s1w/x";
      stringArray1[3] = "^-jh92<=9!";
      stringArray1[4] = "%DMq~/UPC>a`W,";
      stringArray1[5] = ",\n";
      stringArray1[6] = "gettoUnsignedLong";
      stringArray1[7] = "-gm%fNeh:&A}9e,d5o";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray1);
      String string0 = jSONObject1.optString("gettoUnsignedLong");
      assertEquals("", string0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      jSONObject1.put("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", false);
      try { 
        jSONObject0.getInt("sum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sum\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)67);
      Short.toUnsignedInt((short)67);
      JSONObject.getNames((Object) short0);
      String string0 = "\"Iuesn\\]d5Oq!\\";
      Byte byte0 = new Byte((byte) (-60));
      JSONObject jSONObject1 = jSONObject0.putOpt("\"Iuesn]d5Oq!", byte0);
      jSONObject1.put("\"Iuesn]d5Oq!", (Object) "\"Iuesn]d5Oq!");
      try { 
        jSONObject0.getDouble("\"Iuesn]d5Oq!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"Iuesn]d5Oq!\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-2814.0F));
      Double double0 = new Double((-56.232178071936));
      Double.isFinite((-561.073748593292));
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = JSONObject.quote("{}");
      assertEquals("\"{}\"", string1);
      
      jSONObject0.put("{}", (-193));
      int int0 = jSONObject0.optInt("{}", (-193));
      assertEquals((-193), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject.quote("1");
      Long long0 = Long.valueOf(565L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"1\"";
      Long.sum((-3231L), (-3231L));
      stringArray0[1] = "1";
      stringArray0[2] = "\"1\"";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.toString(576);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("[7@?-\"./^", (Object) null);
      String[] stringArray0 = JSONObject.getNames((Object) "[7@?-\"./^");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("-)j c:n+W:/f0t,B[", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("-)j c:n+W:/f0t,B[");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)67);
      JSONObject.getNames((Object) short0);
      Byte byte0 = new Byte((byte) (-60));
      jSONObject0.putOpt("\"Iuesn]d5Oq!", byte0);
      double double0 = jSONObject0.getDouble("\"Iuesn]d5Oq!");
      assertEquals((-60.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(57);
      StringWriter stringWriter0 = new StringWriter(123);
      short short0 = (short)106;
      Short short1 = new Short((short)106);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>(57, 232.0F);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{}", (Object) jSONObject1);
      Short.toUnsignedLong((short)106);
      Short.toUnsignedInt((short)19);
      JSONObject.numberToString(short1);
      stringWriter0.append((CharSequence) "java.lang.Short@0000000004");
      stringWriter0.close();
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject2 = jSONObject0.put("{}", (long) 123);
      JSONObject jSONObject3 = new JSONObject(short1);
      jSONObject2.accumulate("{}", jSONObject3);
      try { 
        jSONObject2.get("java.lang.Short@0000000004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000004\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("~&a\"9C4D}", (-2087L));
      JSONObject.valueToString("~&a\"9C4D}");
      jSONObject0.length();
      Byte byte0 = new Byte((byte) (-112));
      try { 
        jSONObject0.getBoolean("1.0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1.0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.putOpt("q|VBaE3\"", boolean0);
      JSONObject.doubleToString((-1851.477));
      Object object0 = jSONObject1.get("q|VBaE3\"");
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-45));
      Byte.toUnsignedLong((byte)0);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.toString();
      Byte.compare((byte) (-45), (byte) (-45));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      String string0 = "1667.89758208.";
      Long.getLong("1667.89758208.");
      Long.toUnsignedString((long) (byte) (-45));
      linkedList0.add(long0);
      JSONObject jSONObject1 = jSONObject0.put("/&P{m", (Collection) linkedList0);
      linkedList0.add((Long) null);
      Byte.toUnsignedInt((byte) (-113));
      linkedList0.spliterator();
      Byte.toUnsignedLong((byte) (-45));
      Byte.toUnsignedLong((byte) (-45));
      String string1 = "y<$i}oOSc`n>4t";
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "_Vro^O";
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",$$bn3Z>TQO0_5M164";
      stringArray0[2] = "m|<[UK<<s#";
      stringArray0[3] = "get";
      stringArray0[4] = "-594.659.";
      stringArray0[5] = "false";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.optBoolean("get", false);
      jSONObject1.optDouble("");
      Byte byte0 = new Byte((byte)70);
      JSONObject jSONObject2 = jSONObject1.putOpt("-2643.5431295478860", byte0);
      JSONObject.getNames(jSONObject1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject2.put("VL2Pr\"A5YhR3lr@>", (Collection) linkedList0);
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.quote("");
      Integer integer0 = new Integer(8);
      JSONObject.valueToString(integer0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.quote("");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Long.getLong("1601.654027870009.");
      Long.compareUnsigned(1986L, 1986L);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 70, (-4300));
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.doubleToString((-875.9363730009441));
      assertEquals("-875.9363730009441", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject.quote("/I7eT(d?ZD3");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"/I7eT(d?ZD3\"";
      JSONObject jSONObject0 = new JSONObject("\n", stringArray0);
      try { 
        jSONObject0.getJSONObject("co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"co\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer((-666));
      JSONObject.valueToString(integer0);
      Float float0 = new Float((double) (-666));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Integer@0000000001", (-666));
      jSONObject1.toString(2200);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.accumulate("qyA<WZ!#o&F)a#KRqO/", object0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      linkedList1.add("(T1");
      JSONObject jSONObject1 = jSONObject0.put("0.00", (Collection) linkedList0);
      jSONObject1.optBoolean("(T1");
      jSONObject1.names();
      String string0 = JSONObject.valueToString(linkedList1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("true", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("]", "]");
      Byte byte0 = new Byte((byte) (-47));
      jSONObject1.append("]", byte0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("]");
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("GHQVla$5m", 0.0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("o)Aof4eQg'Fz\"2>`'s");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("Cow8&a7b_H\"rL{MjrXN", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      JSONObject jSONObject1 = jSONObject0.append("+", "+");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("get", 109.44771864063);
      Float float0 = new Float(238.96744F);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("", (Object) float0);
      jSONObject0.put("iZyWO-#d@}8qpk", true);
      String string0 = jSONObject1.optString("", "iZyWO-#d@}8qpk");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{}");
      try { 
        jSONObject1.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject.doubleToString((-6.541213398464601));
      Integer integer0 = Integer.valueOf("0");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "R)[sIo";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "-6.541213398464601";
      stringArray0[4] = "0";
      stringArray0[5] = "-6.541213398464601";
      stringArray0[6] = "0";
      stringArray0[7] = "] is not a Boolean.";
      stringArray0[8] = "0";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      try { 
        jSONObject2.accumulate((String) null, "0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null);
      jSONObject0.names();
      try { 
        jSONObject0.get("isnumberToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnumberToString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.doubleToString(7.335885908125485);
      assertEquals("7.335885908125485", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "7.335885908125485");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "7.335885908125485";
      stringArray0[1] = "7.335885908125485";
      stringArray0[2] = "7.335885908125485";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, jSONObject1);
      assertEquals(3, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      linkedList1.add("(T1");
      JSONObject jSONObject1 = jSONObject0.put("0.00", (Collection) linkedList0);
      jSONObject1.optBoolean("(T1");
      jSONObject1.names();
      String string0 = jSONObject1.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONArray0.toString();
      int int0 = 62;
      jSONObject0.toString(62, 62);
      JSONObject jSONObject1 = jSONObject0.put("true", 5518);
      jSONObject1.remove("{}");
      jSONObject1.optLong("d6fVMsu", (long) 5518);
      boolean boolean0 = false;
      JSONObject jSONObject2 = jSONObject1.put("),|~:wMmOb9s", false);
      jSONObject2.remove("),|~:wMmOb9s");
      try { 
        jSONArray0.getDouble((-1606));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1606] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.toString(102);
      JSONObject jSONObject1 = jSONObject0.put("s)RX&(NEd#Z6", (long) 44);
      jSONObject0.optDouble("s)RX&(NEd#Z6", (double) 44);
      Object object0 = jSONObject1.opt("0.0");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toString(1559);
      double double0 = jSONObject1.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject1.put("{}", (-1L));
      String string0 = JSONObject.doubleToString((-1L));
      assertEquals("-1", string0);
      
      String string1 = jSONObject0.toString(1559, 1559);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("6'JMIm,G3p>8'/z", (Collection) null);
      try { 
        jSONObject1.getLong("6'JMIm,G3p>8'/z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6'JMIm,G3p>8'/z\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(59);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float((float) (-2821));
      JSONObject.valueToString(float0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.remove((String) null);
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(224.83354F);
      JSONObject.valueToString(float0);
      jSONObject0.optBoolean("java.lang.Float@0000000002.", false);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000002", (double) 224.83354F);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-1.0));
      hashMap0.put("Null pointer", double0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt("Unterminated string", object0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("CLU04~nmRKJ;uHDTx#}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of CLU04~nmRKJ;uHDTx#}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray((String) null);
      jSONObject0.toJSONArray((JSONArray) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("FnRAF/k X%c}Y0P=");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put(false);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("e=[]V\u0006qb");
      jSONObject0.isNull((String) null);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optDouble((String) null, (-326.589787575));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double((short)8192);
      JSONObject.numberToString(double0);
      JSONObject jSONObject0 = new JSONObject((Object) ",:]}/\"[{;=#");
      // Undeclared exception!
      jSONObject0.toString((int) (short)8192, (int) (short)8192);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double((short)8192);
      String string0 = JSONObject.doubleToString((short)8192);
      assertEquals("8192", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.sum((-985.832702), 0.0);
      JSONObject.valueToString(double0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Double@0000000001");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put(".", false);
      jSONObject0.put("2", (-2110));
      jSONObject0.optInt(".", (-234));
      JSONObject.doubleToString(Double.NaN);
      String string0 = jSONObject1.optString("2");
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.getBoolean("getvalueOf");
      JSONObject.testValidity(boolean0);
      Integer integer0 = new Integer(13);
      String string1 = JSONObject.valueToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-3267.0));
      JSONObject.valueToString(double0, 127, 10);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0);
      Byte byte0 = new Byte((byte) (-77));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte) (-77));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000001", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Long@0000000001", 5559);
      jSONObject1.optDouble("", (double) 179L);
      Byte.toUnsignedInt((byte)4);
      JSONObject jSONObject3 = jSONObject2.put("djuuf\"F", true);
      JSONObject.quote("java.lang.Long@0000000001");
      jSONObject3.toJSONArray((JSONArray) null);
      jSONObject2.put("", (double) 5559);
      jSONObject1.toString((int) (byte) (-77), 73);
      JSONObject jSONObject4 = jSONObject1.put("java.lang.Long@0000000001", 0L);
      linkedList0.clear();
      jSONObject3.toJSONArray((JSONArray) null);
      jSONObject2.optBoolean("fn~:4");
      JSONObject.getNames(jSONObject4);
      jSONObject2.isNull("");
      try { 
        jSONObject0.getString("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("L~p");
      jSONObject0.put("", false);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONTokener", (Object) "");
      JSONObject.getNames(jSONObject1);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "'";
      jSONObject0.put("'", (Collection) linkedList0);
      try { 
        jSONObject0.put((String) null, 1403);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("_Bm[-l");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      String string0 = jSONObject1.toString(127, 127);
      Byte byte0 = new Byte((byte)47);
      String string1 = JSONObject.valueToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("get");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("cavE", (Collection) linkedList1);
      jSONObject0.keys();
      Long long0 = new Long(0L);
      linkedList1.add(long0);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONTokener", 108);
      linkedList0.offerLast(long0);
      JSONObject jSONObject3 = jSONObject0.putOpt("get", "wheel.json.JSONTokener");
      jSONObject1.append("PF;gC1TN", jSONObject3);
      Short short0 = new Short((short)64);
      JSONObject.valueToString(short0, 32, (-743));
      jSONObject2.names();
      assertEquals(4, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("(T1", (Collection) linkedList0);
      jSONObject1.remove("(T1");
      boolean boolean0 = new Boolean("(T1");
      jSONObject0.names();
      try { 
        jSONObject0.getInt("(T1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(T1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(49.78693053);
      JSONObject.valueToString(float0);
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      try { 
        jSONObject0.getLong("getoptJSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getoptJSONObject\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("_Bm[-l");
      String string0 = jSONObject0.toString(127, 127);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject.getNames((Object) null);
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("getparseByte");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(",\n");
      assertFalse(boolean0);
      
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("O9G8)wDALv|2", (Collection) null);
      jSONObject0.optBoolean("");
      jSONObject1.names();
      try { 
        jSONObject0.getString("2T`nv9|v?m~&BN:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2T`nv9|v?m~&BN:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      Float float0 = new Float(49.78693053);
      JSONObject.valueToString(float0);
      String string0 = jSONObject0.optString("0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(",\n");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer.sum(0, 0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames((Object) integer0);
      jSONObject0.optBoolean("eq", true);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isputOpt", (-1773));
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      boolean boolean0 = jSONObject0.optBoolean("^t^Z-3#53M2", false);
      assertFalse(boolean0);
      
      long long0 = jSONObject0.optLong("quo");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(")!*Q,", 1417);
      assertEquals(1417, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      byte byte1 = (byte) (-79);
      Byte.compare((byte)72, (byte) (-79));
      Byte.compare((byte)49, (byte) (-78));
      Byte.compare((byte) (-78), (byte) (-78));
      JSONObject.testValidity(byte0);
      Short short0 = new Short((byte) (-78));
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "";
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float((-1066.011123892));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@<{";
      stringArray0[1] = "";
      stringArray0[2] = "'";
      String string0 = "O]2,a*(z_Q8yk`A/";
      Float.sum((-1.0F), (-1.0F));
      stringArray0[3] = "O]2,a*(z_Q8yk`A/";
      stringArray0[4] = "";
      stringArray0[5] = "E5MKPo";
      stringArray0[6] = "\f";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.getNames(jSONObject0);
      String string1 = "";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("GMqJ\"6b", (Collection) linkedList0);
      try { 
        jSONObject1.put((String) null, (Object) "'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Unclosed comment";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optString("", "");
      JSONObject jSONObject1 = jSONObject0.put("", (-1.0));
      jSONObject0.names();
      JSONObject.quote("");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject1.append("", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "isnumberToString";
      try { 
        jSONObject0.get("isnumberToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnumberToString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("=:GSj+pp-*%/(Z{3");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull(" R(}C4dP+gglQ/kyfb");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.names();
      jSONObject0.has(" R(}C4dP+gglQ/kyfb");
      Object object0 = jSONObject1.remove("*+F");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("(T1", (Collection) linkedList0);
      jSONObject0.optBoolean("(T1");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull((String) null);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optDouble((String) null, (-326.589787575));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("");
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.names();
      jSONObject0.keys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.isNull("wheel.json.JSONObject@0000000001");
      jSONObject0.isNull("wheel.json.JSONObject@0000000001");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("bK*Kp#^V!\"tWp'N[8U", object0);
      jSONObject1.optInt("$bB4'N");
      JSONObject.valueToString(jSONObject0);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.isNull("wheel.json.JSONObject@0000000001");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = new JSONObject();
      JSONArray jSONArray0 = jSONObject3.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Collection) linkedList0);
      jSONObject1.getString("wheel.json.JSONObject@0000000001");
      jSONObject0.toString();
      String string1 = jSONObject1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(123, 123);
      JSONObject.quote("3tkx[\"vk)PK%Y");
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.append("*%}I2Llu\u0004\"wlq.m", "*%}I2Llu\u0004\"wlq.m");
      jSONObject0.opt("2GF!K6%GBo[");
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.keys();
      jSONObject0.isNull((String) null);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("=Cs'.|( ;HSa=Q, :");
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      jSONObject0.put("g.\"S)zR  t]$x2\"3pa", (Object) double0);
      JSONObject.valueToString(jSONObject0);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.isNull("wheel.json.JSONObject@0000000001");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      int int0 = 10;
      try { 
        jSONObject0.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hFWCdl*^9)Vc7nEZ";
      stringArray0[1] = "";
      stringArray0[2] = "JSONArray[";
      String string0 = "Th^.?terU=Y";
      stringArray0[3] = "Th^.?terU=Y";
      stringArray0[4] = "w3uXiK+LjQ!3io^[|";
      stringArray0[5] = "1";
      stringArray0[6] = "'g.]jVe";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "w3uXiK+LjQ!3io^[|");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.accumulate("", jSONObject2);
      Object object1 = new Object();
      JSONObject.valueToString(object1);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject3 = jSONObject1.put("JSONArray[", (Collection) linkedList0);
      Short short0 = new Short((short)120);
      JSONObject jSONObject4 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject5 = new JSONObject(jSONObject3, stringArray0);
      jSONObject5.getJSONArray("");
      try { 
        jSONObject1.append((String) null, "'g.]jVe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("");
      JSONObject.valueToString((Object) null, 92, 101);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("issum", (Map) null);
      boolean boolean0 = jSONObject0.optBoolean("true", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = new Integer(321);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "true";
      stringArray0[1] = "true";
      stringArray0[2] = "true";
      stringArray0[3] = "true";
      stringArray0[4] = "true";
      stringArray0[5] = "true";
      stringArray0[6] = "0";
      stringArray0[7] = "] is not a number.";
      stringArray0[8] = "true";
      JSONObject jSONObject0 = new JSONObject("true", stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("Expected a ':' after a key", (Collection) linkedList0);
      jSONObject0.toString(14);
      Integer.sum(14, 47);
      try { 
        Short.valueOf("{\"java.lang.String@0000000003\": []}", 91);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 91 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte)69);
      JSONObject.numberToString(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Null key.", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "Expected '";
      JSONObject.quote("Expected '");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("\"Expected '\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"Expected '\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optString("", "");
      jSONObject0.put("", (-1.0));
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("o+7NI#U9H<F*(");
      assertEquals("\"o+7NI#U9H<F*(\"", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = new Integer((-626));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject.valueToString("yN&<,qx+u'B[~$NY");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.optDouble("TxSxSQV1/oDC", 677.52793798);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Object object0 = JSONObject.NULL;
      jSONObject1.append("co", object0);
      jSONObject2.opt("co");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject.doubleToString((-82.63609221472));
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 13;
      try { 
        jSONArray0.getJSONObject(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[13] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(10);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
      
      String string1 = jSONObject0.optString("getlongBitsToDouble", "{}");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("mH4");
      jSONTokener0.nextClean();
      Integer.sum(34, (-1110));
      Byte byte0 = new Byte((byte)62);
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("6{Y/;7Ria$");
      jSONObject0.optLong((String) null, 0L);
      Float float0 = new Float((double) 0L);
      jSONObject0.remove("tztY3C$");
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(14);
      jSONObject0.names();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 10;
      String string0 = null;
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject.quote("R+:gjE[9a+M'Ze$\"?Y");
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-42));
      JSONObject.valueToString(byte0, (byte) (-42), (byte) (-42));
      jSONObject0.toString(10);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer.sum((-2467), 321);
      JSONObject.valueToString(jSONObject0, 321, 959);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[59] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Expected '");
      JSONObject.quote("su");
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 10;
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      jSONObject0.put("\"su\"", (Map) hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Expected '
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = JSONObject.quote("R+:gjE[9a+M'Ze$\"?Y");
      assertEquals("\"R+:gjE[9a+M'Ze$\\\"?Y\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(10);
      assertEquals("{}", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      Double double0 = new Double(10);
      JSONObject jSONObject1 = new JSONObject(double0);
      boolean boolean0 = jSONObject1.isNull("{}");
      assertEquals(3, jSONObject1.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "6{Y/;7Ria$";
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6{Y/;7Ria$";
      JSONObject jSONObject2 = new JSONObject("", stringArray0);
      jSONObject2.optLong("wheel.json.JSONException", (-1L));
      jSONObject2.put("4a8FW|+H[H<y[jGm5", true);
      jSONObject1.optDouble("64_Uy_3x", 0.0);
      jSONObject1.optLong("wheel.json.JSONException");
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject3 = jSONObject0.put("d=.HU $I=:X$<.DG{2", (-1L));
      jSONObject3.keys();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "'kD)lLPA83>r3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "R+:gjE[9a+M'Ze$\"?Y";
      JSONObject.quote("R+:gjE[9a+M'Ze$\"?Y");
      Byte.compare((byte)50, (byte)83);
      Byte.compare((byte) (-33), (byte)50);
      Short short0 = new Short((short)11);
      JSONObject.testValidity(short0);
      Short short1 = new Short((short)2115);
      JSONObject jSONObject0 = new JSONObject((Object) "R+:gjE[9a+M'Ze$\"?Y");
      String string1 = "";
      String string2 = "(;k~d\"Xlg";
      try { 
        jSONObject0.getBoolean("(;k~d\"Xlg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(;k~d\\\"Xlg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "r, 5qwsQ-7PbRks@";
      stringArray0[1] = "";
      stringArray0[2] = "bVgQwyVwK[(qxO";
      stringArray0[3] = "JSONArray[";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Double double0 = new Double(2435);
      Double.min(534.0605241876, 0.0);
      Double.isFinite(Double.NaN);
      JSONObject.valueToString(double0, 96, 46);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", true);
      boolean boolean0 = jSONObject1.optBoolean("isshortValue", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer.sum(0, 321);
      JSONObject.valueToString(integer0, (-1085), 2435);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(321);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[321] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0);
      Byte byte0 = new Byte((byte) (-77));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte) (-77));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000001", (Collection) linkedList0);
      JSONObject.quote("java.lang.Long@0000000001");
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Long@0000000001", 5559);
      jSONObject1.optDouble("", (double) 179L);
      Byte.toUnsignedInt((byte)4);
      jSONObject2.put("djuuf\"F", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "\"java.lang.Long@0000000001\"";
      stringArray0[2] = "java.lang.Long@0000000001";
      stringArray0[3] = "zRAHaiN(M`m";
      stringArray0[4] = "djuuf\"F";
      stringArray0[5] = "";
      stringArray0[6] = "JSONArray[";
      JSONObject jSONObject3 = new JSONObject("java.lang.Long@0000000001", stringArray0);
      try { 
        jSONObject0.getJSONArray("djuuf\"F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"djuuf\\\"F\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "r, 5qwsQ-7PbRks@";
      stringArray0[1] = "";
      stringArray0[2] = "bVgQwyVwK[(qxO";
      stringArray0[3] = "JSONArray[";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.accumulate("B$y3-U|_v", "JSONArray[");
      try { 
        jSONObject0.getJSONArray("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Object object0 = JSONObject.NULL;
          String[] stringArray0 = new String[7];
          stringArray0[0] = "hFWCdl*^9)Vc7nEZ";
          stringArray0[1] = "";
          stringArray0[2] = "JSONArray[";
          stringArray0[3] = "Th^.?terU=Y";
          stringArray0[4] = "w3uXiK+LjQ!3io^[|";
          stringArray0[5] = "1";
          stringArray0[6] = "'g.]jVe";
          JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
          JSONObject jSONObject1 = jSONObject0.putOpt("", "w3uXiK+LjQ!3io^[|");
          JSONObject jSONObject2 = new JSONObject();
          JSONObject jSONObject3 = jSONObject1.accumulate("", jSONObject2);
          StringWriter stringWriter0 = new StringWriter(43);
          jSONObject3.write(stringWriter0);
          LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
          JSONObject jSONObject4 = jSONObject1.put("JSONArray[", (Collection) linkedList0);
          jSONObject0.toString((-835), (-835));
          JSONObject.testValidity("'g.]jVe");
          jSONObject2.optLong("hFWCdl*^9)Vc7nEZ", (long) (-835));
          jSONObject4.optLong("c %nS 8:+EzK,");
          Iterator iterator0 = jSONObject2.keys();
          assertNotNull(iterator0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject.quote("R+:gjE[9a+M'Ze$\"?Y");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(10);
      jSONObject0.optLong("Ti5RsSX", 1577L);
      jSONObject0.toString(10);
      try { 
        jSONObject0.getLong("Ti5RsSX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ti5RsSX\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("5~kSHvcHg;nV95M-9");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toString((-2491));
      jSONObject0.isNull((String) null);
      try { 
        jSONObject0.getDouble("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Float float0 = new Float((-267.454897));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "}`IU$jyS)MW\\<IH\"";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("getsum");
      stringWriter0.append((CharSequence) "}`IU$jyS)MW<IH\"");
      stringWriter0.write("}`IU$jyS)MW<IH\"");
      stringWriter0.append((CharSequence) "}`IU$jyS)MW<IH\"");
      StringWriter stringWriter1 = stringWriter0.append('i');
      stringWriter1.append((CharSequence) "}`IU$jyS)MW<IH\"");
      jSONObject0.write(stringWriter1);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("}`IU$jyS)MW<IH\"", 2710L);
      jSONObject0.put("}`IU$jyS)MW<IH\"", (Collection) linkedList0);
      try { 
        jSONObject0.getInt("}`IU$jyS)MW<IH\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}`IU$jyS)MW<IH\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Double double0 = new Double(2186.25363);
      String[] stringArray0 = new String[8];
      stringArray0[2] = "JSON does not allow non-finite numbers.";
      stringArray0[3] = "[";
      stringArray0[4] = "JSONObject[";
      stringArray0[5] = "QGj;E@JVW)O6";
      stringArray0[6] = "Unterminated string";
      stringArray0[7] = "tH1:aDIby}da20}x}_";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.append("JSON does not allow non-finite numbers.", "tH1:aDIby}da20}x}_");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hFWCdl*^9)Vc7nEZ";
      stringArray0[1] = "";
      stringArray0[2] = "JSONArray[";
      stringArray0[3] = "Th^.?terU=Y";
      stringArray0[4] = "w3uXiK+LjQ!3io^[|";
      stringArray0[5] = "1";
      stringArray0[6] = "'g.]jVe";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "w3uXiK+LjQ!3io^[|");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.accumulate("", jSONObject2);
      StringWriter stringWriter0 = new StringWriter(43);
      Integer.sum(13, 43);
      Float float0 = new Float((float) 56);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hFWCdl*^9)Vc7nEZ";
      stringArray0[1] = "";
      stringArray0[2] = "JSONArray[";
      String string0 = "Th^.?terU=Y";
      stringArray0[3] = "Th^.?terU=Y";
      stringArray0[4] = "w3uXiK+LjQ!3io^[|";
      stringArray0[5] = "1";
      stringArray0[6] = "'g.]jVe";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "w3uXiK+LjQ!3io^[|");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject1.accumulate("", jSONObject2);
      Object object1 = new Object();
      JSONObject.valueToString(object1);
      StringWriter stringWriter0 = new StringWriter(43);
      jSONObject3.write(stringWriter0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject4 = jSONObject1.put("JSONArray[", (Collection) linkedList0);
      Short short0 = new Short((short)120);
      JSONObject jSONObject5 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject6 = new JSONObject(jSONObject4, stringArray0);
      try { 
        jSONObject1.append((String) null, "'g.]jVe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject.valueToString("yN&<,qx+u'B[~$NY");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Object object0 = JSONObject.NULL;
      jSONObject1.append("co", object0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Double double0 = new Double(2186.25363);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 0L);
      JSONObject jSONObject1 = jSONObject0.put("'kD)lLPA83>r3", true);
      jSONObject1.optDouble("d=.HU $I=:X$<.DG{2", 0.0);
      jSONObject0.optLong("");
      JSONObject.doubleToString(0.0);
      jSONObject0.put("'kD)lLPA83>r3", 0L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Double double0 = new Double(2186.25363);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "!LGBwU}";
      stringArray0[2] = "JSON does not allow non-finite numbers.";
      stringArray0[3] = "[";
      stringArray0[4] = "JSONObject[";
      stringArray0[5] = "QGj;E@JVW)O6";
      stringArray0[6] = "Unterminated string";
      stringArray0[7] = "tH1:aDIby}da20}x}_";
      Double.min(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.append("JSON does not allow non-finite numbers.", "tH1:aDIby}da20}x}_");
      jSONObject0.optBoolean("getdecode");
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Double double0 = new Double(2186.25363);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "!LGBwU}";
      stringArray0[2] = "JSON does not allow non-finite numbers.";
      stringArray0[3] = "[";
      stringArray0[4] = "JSONObject[";
      stringArray0[5] = "QGj;E@JVW)O6";
      stringArray0[6] = "Unterminated string";
      stringArray0[7] = "tH1:aDIby}da20}x}_";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.append("JSON does not allow non-finite numbers.", "tH1:aDIby}da20}x}_");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("6{Y/;7Ria$", false);
      String string0 = null;
      jSONObject0.optLong((String) null, 0L);
      Float float0 = new Float((double) 0L);
      jSONObject0.optInt("b;Tz!0vi+:o<&xiO", (-400));
      Float.max(1565.77F, 0L);
      JSONObject.getNames((Object) float0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hFWCdl*^9)Vc7nEZ";
      stringArray0[1] = "";
      stringArray0[2] = "JSONArray[";
      stringArray0[3] = "Th^.?terU=Y";
      stringArray0[4] = "w3uXiK+LjQ!3io^[|";
      stringArray0[5] = "1";
      stringArray0[6] = "'g.]jVe";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "w3uXiK+LjQ!3io^[|");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject1.accumulate("", jSONObject2);
      StringWriter stringWriter0 = new StringWriter(43);
      jSONObject3.write(stringWriter0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject4 = jSONObject1.put("JSONArray[", (Collection) linkedList0);
      jSONObject0.toString((-835), (-835));
      JSONObject.testValidity("'g.]jVe");
      jSONObject2.put("1", true);
      jSONObject4.optJSONObject("#,[");
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getDouble("GodP!Fa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GodP!Fa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = JSONObject.quote("R+:gjE[9a+M'Ze$\"?Y");
      assertEquals("\"R+:gjE[9a+M'Ze$\\\"?Y\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(10);
      assertEquals("{}", string1);
      
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject.valueToString("yN&<,qx+u'B[~$NY");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 0L);
      JSONObject jSONObject1 = jSONObject0.put("U3i", false);
      jSONObject0.optDouble("}8g~", 851.8082);
      jSONObject1.optLong("s&'si!R");
      JSONObject.doubleToString(0L);
      jSONObject0.put("yN&<,qx+u'B[~$NY", 0L);
      try { 
        jSONObject1.getJSONObject("yN&<,qx+u'B[~$NY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"yN&<,qx+u'B[~$NY\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Float float0 = new Float((-267.454897));
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "}`IU$jyS)MW<IH\"");
      stringWriter0.write("}`IU$jyS)MW<IH\"");
      stringWriter0.append((CharSequence) "}`IU$jyS)MW<IH\"");
      StringWriter stringWriter1 = stringWriter0.append('i');
      stringWriter1.append((CharSequence) "}`IU$jyS)MW<IH\"");
      jSONObject0.write(stringWriter1);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("}`IU$jyS)MW<IH\"", (Collection) linkedList0);
      try { 
        jSONObject0.getInt("}`IU$jyS)MW<IH\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}`IU$jyS)MW<IH\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "r, 5qwsQ-7PbRks@";
      stringArray0[1] = "";
      stringArray0[2] = "bVgQwyVwK[(qxO";
      stringArray0[3] = "JSONArray[";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getJSONArray("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer.sum(0, 8);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String string0 = "";
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0);
      Byte byte0 = new Byte((byte) (-77));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte) (-77));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000001", (Collection) linkedList0);
      JSONObject.quote("java.lang.Long@0000000001");
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Long@0000000001", 5559);
      String string0 = "";
      jSONObject1.optDouble("", (double) 179L);
      Byte.toUnsignedInt((byte)4);
      JSONObject jSONObject3 = jSONObject2.put("djuuf\"F", true);
      jSONObject3.toJSONArray((JSONArray) null);
      jSONObject2.put("", (double) 5559);
      jSONObject1.toString((int) (byte) (-77), 73);
      jSONObject1.put("java.lang.Long@0000000001", 0L);
      String string1 = "fn~:4";
      try { 
        jSONObject2.getDouble("fn~:4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fn~:4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("Expected a ',' or ']'", 1636L);
      assertEquals(1636L, long0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "wheel.json.JSONArray";
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONArray");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONArray
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 97;
      jSONObject0.toString(0, 97);
      Float float0 = new Float((float) 97);
      hashMap0.put(jSONObject0, float0);
      jSONObject0.optString("s]d", (String) null);
      JSONObject.getNames(jSONObject0);
      String string0 = "+?'kS`][!p}}Q";
      try { 
        jSONObject0.getJSONObject("+?'kS`][!p}}Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+?'kS`][!p}}Q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "@R^QPJhN\"c#z&";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("@R^QPJhN\"c#z&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of @R^QPJhN\"c#z&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("true", false);
      assertFalse(boolean0);
  }
}
