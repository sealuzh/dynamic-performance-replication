/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:57:51 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.sql.Time;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.util.CSSConstants;
import org.apache.batik.util.SVGConstants;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getGraphicsConfiguration();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1872), true);
      String string0 = CSSConstants.CSS_BUTTONTEXT_VALUE;
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(1858);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters((-17));
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertNotNull(jPanel0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      Insets insets0 = jDayChooser0.getInsets();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.right);
      assertEquals(0, insets0.bottom);
      assertNotNull(insets0);
      
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNull(jButton0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      String string0 = SVGConstants.SVG_ENABLE_BACKGROUND_ATTRIBUTE;
      assertEquals("enable-background", string0);
      assertNotNull(string0);
      
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Dimension dimension0 = jDayChooser0.getSize((Dimension) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertNotNull(dimension0);
      
      jDayChooser0.setYear((-4126));
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertNotNull(defaultTreeCellRenderer0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(90, color0.getGreen());
      assertEquals(164, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      SystemColor systemColor0 = SystemColor.text;
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertNotNull(systemColor0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertNotNull(date1);
      
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 49, (String) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, actionEvent0.getModifiers());
      assertNull(actionEvent0.getActionCommand());
      assertEquals(49, actionEvent0.getID());
      assertEquals(0L, actionEvent0.getWhen());
      assertNotNull(actionEvent0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      int int0 = jDayChooser0.getX();
      assertEquals(0, int0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Rectangle rectangle0 = jDayChooser0.getVisibleRect();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jDayChooser0.setDay(0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      boolean boolean1 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean1);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(boolean1 == boolean0);
      
      Date date0 = jDayChooser0.maxSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Color color0 = Color.cyan;
      assertEquals((-16711681), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      try {
        pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D((PDFDocumentGraphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      int int0 = jDayChooser0.getX();
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      SystemColor systemColor0 = SystemColor.textText;
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertNotNull(systemColor0);
      
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 38, true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(38, focusEvent0.getID());
      assertTrue(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(38, focusEvent0.getID());
      assertTrue(focusEvent0.isTemporary());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 42, 42, 7, 2138, '>');
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(7, keyEvent0.getModifiers());
      assertEquals(42, keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('>', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(2138, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(42L, keyEvent0.getWhen());
      assertEquals(448, keyEvent0.getModifiersEx());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(7, keyEvent0.getModifiers());
      assertEquals(42, keyEvent0.getID());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('>', keyEvent0.getKeyChar());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(2138, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(42L, keyEvent0.getWhen());
      assertEquals(448, keyEvent0.getModifiersEx());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(228, color0.getGreen());
      assertEquals(210, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      Color color1 = jDayChooser0.sundayForeground;
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-6029312), color1.getRGB());
      assertEquals(0, color1.getGreen());
      assertEquals(164, color1.getRed());
      assertNotSame(color1, color0);
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      
      PropertyChangeListener[] propertyChangeListenerArray0 = jDayChooser0.getPropertyChangeListeners((String) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(propertyChangeListenerArray0);
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(228, color0.getGreen());
      assertEquals(210, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotSame(color0, color1);
      assertFalse(color0.equals((Object)color1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setMonth(1980);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters(4);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      int int0 = jDayChooser0.getX();
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      SystemColor systemColor0 = SystemColor.textText;
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      
      jDayChooser0.setMaxDayCharacters(3);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(238, color0.getBlue());
      assertEquals(228, color0.getGreen());
      assertEquals(210, color0.getRed());
      assertEquals((-2956050), color0.getRGB());
      assertNotNull(color0);
      
      Color color1 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals((-6029312), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(164, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertNotSame(color1, color0);
      assertNotNull(color1);
      assertFalse(color1.equals((Object)color0));
      
      Locale locale0 = jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.text;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertNotNull(systemColor0);
      
      ColorSpace colorSpace0 = systemColor0.getColorSpace();
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertTrue(colorSpace0.isCS_sRGB());
      assertEquals(5, colorSpace0.getType());
      assertEquals(3, colorSpace0.getNumComponents());
      assertNotNull(colorSpace0);
      
      ColorSpace colorSpace1 = systemColor0.getColorSpace();
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(5, colorSpace1.getType());
      assertTrue(colorSpace1.isCS_sRGB());
      assertEquals(3, colorSpace1.getNumComponents());
      assertSame(colorSpace1, colorSpace0);
      assertNotNull(colorSpace1);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 953L, 0, 0, '2', 0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('2', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getID());
      assertEquals(953L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('2', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getModifiers());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(0, keyEvent0.getID());
      assertEquals(953L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(focusEvent0.isTemporary());
      assertEquals(0, focusEvent0.getID());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(focusEvent0.isTemporary());
      assertEquals(0, focusEvent0.getID());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Color color0 = jDayChooser0.getBackground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jMonthChooser0);
      
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertNotNull(date1);
      
      jDayChooser0.setDay(403);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":y'3f");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.setAlwaysFireDayProperty(false);
      System.setCurrentTimeMillis(14);
      jDayChooser0.setWeekOfYearVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1198), 1L, 9674, 969, 'M');
      jDayChooser0.keyTyped(keyEvent0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputEvent.getModifiersExText(2306);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(2306);
      jDayChooser0.getMinSelectableDate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.monthChooser = jMonthChooser0;
      jDayChooser0.setMaxDayCharacters((-4313));
      jDayChooser0.isWeekOfYearVisible();
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("month");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getMaxDayCharacters();
      Time time0 = new Time(0);
      jDayChooser0.setSelectableDateRange(time0, time0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Color color0 = DebugGraphics.flashColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        color0.getComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate.UTC(102, 102, 755, 102, 102, 240);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getGraphics();
      MockDate.UTC(102, 102, 744, 102, 102, 279);
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setDay(10);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setForeground(color0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " and clones ");
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.getName();
      jDayChooser0.setFocusCycleRoot(false);
      jDayChooser0.getRootPane();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getToolTipText();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.dayBordersVisible = false;
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMaxSelectableDate((Date) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      jDayChooser0.setWeekdayForeground(systemColor0);
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.setMaxDayCharacters(3);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10, 3, 13, 34, '%');
      System.setCurrentTimeMillis((-2660));
      boolean boolean1 = new Boolean(false);
      Color color0 = new Color(13, (boolean) boolean0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      jDayChooser0.updateUI();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-17), 2203L, (-1889), 559, '&');
      System.setCurrentTimeMillis((-1511L));
      keyEvent0.consume();
      Color color0 = Color.CYAN;
      String string0 = SVGConstants.SVG_INITIAL_VALUE;
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      menuSelectionManager0.processKeyEvent(keyEvent0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 39, (-1511L), 993, 39, '&', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.createImage(315, 2072);
      jDayChooser_DecoratorButton0.getHorizontalTextPosition();
      ImageIcon imageIcon0 = null;
      try {
        imageIcon0 = new ImageIcon((Image) null, "initial");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.ImageIcon", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setVerifyInputWhenFocusTarget(false);
      jDayChooser0.setSize(13, 470);
      SystemColor systemColor0 = SystemColor.desktop;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Color.RGBtoHSB(1, 1, 1, (float[]) null);
      jDayChooser0.setWeekdayForeground(systemColor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3;
      jDayChooser0.setMaxDayCharacters(3);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 3, 13, 34, '%');
      System.setCurrentTimeMillis((-2660));
      keyEvent0.getExtendedKeyCode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 1, (-1504L), 0, 33, '%');
      keyEvent1.getExtendedKeyCode();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.desktop;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1);
      Date date0 = Date.from(instant0);
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      Locale locale0 = Locale.FRENCH;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenu jMenu0 = new JMenu();
      jMenu0.setHideActionText(true);
      structuredMenuHolder0.addMenu(jMenu0, "day");
      JDayChooser jDayChooser1 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      KeyEvent keyEvent0 = new KeyEvent(jMonthChooser0, (-1825), 8589934588L, 2376, 49, '\u0013');
      jDayChooser1.keyPressed(keyEvent0);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      Date date1 = jDayChooser1.maxSelectableDate;
      // Undeclared exception!
      try { 
        unmarshallingContext0.attributeDate("day", "5", date0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, (-816L), 34, 34, '%');
      System.setCurrentTimeMillis(0L);
      keyEvent0.getExtendedKeyCode();
      keyEvent0.consume();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 34, 0L, 0, 49, '%');
      System.setCurrentTimeMillis(0L);
      KeyEvent keyEvent2 = new KeyEvent(jDayChooser0, (-2228), 1752L, 0, 40, '%');
      keyEvent2.consume();
      jDayChooser0.drawWeeks();
      jDayChooser0.keyPressed(keyEvent2);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.hasFocus();
      jDayChooser0.setDay(25);
      SystemColor systemColor0 = SystemColor.menu;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getLocale();
      jDayChooser0.getMaxSelectableDate();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JDayChooser jDayChooser0 = new JDayChooser();
          SystemColor systemColor0 = SystemColor.windowBorder;
          FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          jDayChooser0.setWeekdayForeground(systemColor0);
          Boolean boolean0 = new Boolean(true);
          jDayChooser0.setMaxDayCharacters(3);
          Boolean boolean1 = new Boolean("day");
          Locale locale0 = Locale.UK;
          Locale.setDefault(locale0);
          FileSystemHandling.shouldAllThrowIOExceptions();
          jDayChooser0.setLocale(locale0);
          System.setCurrentTimeMillis(26438400000L);
          UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
          JDayChooser jDayChooser1 = new JDayChooser();
          jDayChooser1.getBaseline(4, 160);
          jDayChooser0.setInheritsPopupMenu(false);
          jDayChooser1.drawWeeks();
          Locale locale1 = Locale.GERMANY;
          SystemColor systemColor1 = SystemColor.menu;
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      System.setCurrentTimeMillis(18489600000L);
      Color color0 = Color.CYAN;
      String string0 = SVGConstants.SVG_INITIAL_VALUE;
      Boolean boolean0 = Boolean.TRUE;
      MenuSelectionManager.defaultManager();
      jDayChooser0.setMaxDayCharacters(210);
      SystemColor systemColor0 = SystemColor.textInactiveText;
      systemColor0.getColorSpace();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1799, 1572L, 2393, 35, 'h');
      System.setCurrentTimeMillis(1572L);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent.getKeyText(48);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser2.getMaxDayCharacters();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser3 = jYearChooser0.dayChooser;
      JDayChooser jDayChooser4 = new JDayChooser(false);
      jDayChooser4.keyPressed(keyEvent0);
  }
}
