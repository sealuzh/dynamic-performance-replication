/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:09:30 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 499.852022059386;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      CompressedVector.fromArray(doubleArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector.fromCollection(linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList1);
      compressedVector0.sum();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      int int0 = (-658);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -658
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.min();
      // Undeclared exception!
      try { 
        compressedVector0.set(6202, 6202);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '6202' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>(2);
      Vector.fromMap(hashMap0, 72);
      org.evosuite.runtime.Random.setNextRandom(44);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 0;
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector1.manhattanNorm();
      compressedVector1.transform(vectorFunction0);
      compressedVector1.isZeroAt(3688);
      compressedVector1.subtract((Vector) compressedVector0);
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        CompressedVector.random(0, (-900.37067143), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      compressedVector0.toCSV((NumberFormat) decimalFormat0);
      compressedVector0.eachNonZero((VectorProcedure) null);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      org.evosuite.runtime.Random.setNextRandom(6216);
      boolean boolean0 = compressedVector0.nonZeroAt(6216);
      assertFalse(boolean0);
      
      compressedVector0.setAll(6216);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      compressedVector0.iterator();
      compressedVector0.copyOfLength(0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-1001));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.swapElements(4, 4);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(2870);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll(1556.0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2929);
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3481, 0);
      compressedVector0.getOrElse(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector1 = CompressedVector.random(0, 0.0, (Random) mockRandom0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      compressedVector0.toSparseVector();
      compressedVector0.toCSV();
      compressedVector0.toBinary();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1159.2037116812;
      doubleArray0[1] = (-1540.0346418);
      Long long0 = new Long((-1111L));
      int int0 = 0;
      try { 
        Long.parseUnsignedLong("org.la4j.matrix.sparse.CCSMatrix", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2925;
      CompressedVector compressedVector0 = new CompressedVector(2925);
      compressedVector0.copyOfLength(9);
      compressedVector0.setAll(2925);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      int int1 = 1714;
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      // Undeclared exception!
      try { 
        linkedList0.addAll(1714, (Collection<? extends Float>) linkedList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1714, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2836);
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) 48;
      doubleArray0[3] = (double) 48;
      doubleArray0[4] = (double) 48;
      doubleArray0[5] = (double) 48;
      doubleArray0[6] = (double) 48;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 48;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = (-2836);
      CompressedVector compressedVector0 = new CompressedVector(48, (-2836), doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2887, 2887);
      Vector.constant(2887, 2887);
      compressedVector0.setAll(2887);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-221));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -221
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(5156);
      Float float0 = new Float((double) 5156);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer1 = new Integer(1225);
      Float float1 = new Float((-1.0F));
      hashMap0.put(integer1, float1);
      CompressedVector.fromMap(hashMap0, 5156);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("PtSIw/gd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.zero(1750, 1750);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1750);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector1.cardinality());
      
      compressedVector0.getOrElse(1594, 1750);
      assertEquals(1750, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      compressedVector0.toSparseVector();
      compressedVector0.toCSV();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer((-1382));
      Float float0 = new Float((float) (-1382));
      hashMap0.put(integer0, float0);
      long long0 = 0L;
      Long long1 = new Long(0L);
      hashMap0.remove((Object) compressedVector0);
      int int0 = (-2146715077);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-2146715077));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(3);
      assertEquals(3, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2882, vectorFunction0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(2882, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 8);
      double[] doubleArray0 = new double[0];
      Vector.fromArray(doubleArray0);
      compressedVector0.toRowMatrix();
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector1 = new CompressedVector(8);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.each(vectorProcedure0);
      compressedVector1.iterator();
      assertTrue(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2793.1270827);
      doubleArray1[1] = (-2793.1270827);
      doubleArray1[2] = (-2425.63368083);
      doubleArray1[3] = (-2793.1270827);
      doubleArray1[4] = (-2793.1270827);
      doubleArray1[5] = (-2793.1270827);
      doubleArray1[6] = (-2793.1270827);
      doubleArray1[7] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-595), vectorFunction0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 2882;
      intArray0[1] = 2882;
      intArray0[2] = 2882;
      intArray0[3] = 2882;
      intArray0[4] = 2882;
      intArray0[5] = 2882;
      intArray0[6] = 2882;
      CompressedVector compressedVector0 = new CompressedVector(2882, 2882, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2586.35106033;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      boolean boolean0 = compressedVector0.nonZeroAt(2639);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-32.0);
      doubleArray0[1] = 2587.99593274888;
      doubleArray0[2] = 17.800078038;
      doubleArray0[3] = (-226.48258021155);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 855.24544705;
      doubleArray0[6] = (-4803.7627);
      doubleArray0[7] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Vector.fromCSV("");
      compressedVector0.each(vectorProcedure0);
      compressedVector0.swapElements(2882, 2882);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure1);
      assertEquals(0.75, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 2882;
      intArray0[1] = 2882;
      intArray0[2] = 2882;
      intArray0[3] = 2882;
      intArray0[4] = 2882;
      intArray0[5] = 2882;
      intArray0[6] = 2882;
      CompressedVector compressedVector0 = new CompressedVector(2882, 2882, doubleArray0, intArray0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(3);
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      compressedVector0.divide(3);
      compressedVector0.copyOfLength(3);
      compressedVector1.swapElements((-1613), (-220));
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(3, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2793.1270827);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.isZeroAt(9);
      DecimalFormat decimalFormat0 = new DecimalFormat("_D8#ec|!(Ku|37LYT");
      String string0 = compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals("%%MatrixMarket vector coordinate real\n1 1\n1 -_D82793ec|!(Ku|37LYT\n", string0);
      
      compressedVector0.set(0, 0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4);
      compressedVector0.setAll((-1861.837131307604));
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.zero(1789, 1789);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1789);
      assertEquals(0, compressedVector1.cardinality());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector1.foldNonZero(vectorAccumulator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector2 = CompressedVector.fromCollection(linkedList0);
      DecimalFormat decimalFormat0 = new DecimalFormat("MEW9eFDb<");
      compressedVector2.toMatrixMarket((NumberFormat) decimalFormat0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1789;
      doubleArray0[2] = (double) 0;
      CompressedVector compressedVector3 = CompressedVector.fromArray(doubleArray0);
      compressedVector3.blankOfLength(3);
      compressedVector3.set(0, 1789);
      assertEquals(2, compressedVector3.cardinality());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 399.1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toCSV();
      Vector vector0 = compressedVector0.copy();
      compressedVector0.innerProduct(vector0);
      SparseVector.zero(5, 5);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      compressedVector0.copyOfLength(1414);
      CompressedVector compressedVector1 = CompressedVector.zero(1414);
      compressedVector1.subtract(183.4640015631);
      CompressedVector.zero(1414, 5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)13;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      compressedVector0.swapElements(4, 8);
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(4, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2936;
      doubleArray0[2] = (double) 3481;
      doubleArray0[3] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(0, (-2059));
      assertEquals(0.75, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4);
      compressedVector0.setAll((-1207.117711));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, 1047);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1);
      compressedVector0.setAll((-1267.85));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-3558), 131);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1);
      compressedVector0.toSparseVector();
      compressedVector0.setAll((-1810));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1810), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(6, 6);
      compressedVector0.setAll((-1801));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      compressedVector0.swapElements((-1801), 3);
      compressedVector0.toBinary();
      assertEquals(5, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2);
      compressedVector0.setAll(4);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1, (-1776));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2936;
      doubleArray0[2] = (double) 3481;
      doubleArray0[3] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-1), 827);
      assertEquals(0.75, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2936;
      doubleArray0[2] = (double) 3481;
      doubleArray0[3] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroAt((-1));
      compressedVector0.toSparseVector();
      compressedVector0.nonZeroIterator();
      compressedVector0.setAll((-1.0));
      assertEquals(4, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4);
      compressedVector0.setAll((-1801));
      boolean boolean0 = compressedVector0.nonZeroAt(2);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)9);
      linkedList0.add(byte0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 232;
      doubleArray0[1] = (double) 190;
      doubleArray0[2] = (double) 201;
      doubleArray0[3] = (double) 232;
      doubleArray0[4] = (double) 232;
      doubleArray0[5] = (double) 232;
      doubleArray0[6] = 1741.96864;
      doubleArray0[7] = (-188.43942735293732);
      int[] intArray0 = new int[3];
      intArray0[0] = 190;
      intArray0[1] = 190;
      intArray0[2] = 2;
      CompressedVector compressedVector0 = new CompressedVector(32, 2, doubleArray0, intArray0);
      double double0 = compressedVector0.getOrElse(2, 1577.0);
      assertEquals(1577.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(272, 272);
      compressedVector0.swapElements((-1066), (-1066));
      compressedVector0.setAll(1253.7129143459929);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Vector vector0 = compressedVector0.transform(vectorFunction0);
      compressedVector0.equals(vector0, 1253.7129143459929);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1066), (double)272, (double)(-1066), (double)(-1066), (-1.0)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3458);
      int int0 = 653;
      compressedVector0.swapElements(653, (-1758));
      compressedVector0.setAll(2936);
      int int1 = (-255);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-255), 470);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(272, 272);
      compressedVector0.swapElements(272, 272);
      compressedVector0.setAll(1253.7129143459929);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1253.7129143459929, (-1.0), (double)272, 0.0, (double)272).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Vector vector0 = compressedVector0.transform(vectorFunction0);
      compressedVector0.equals(vector0, 1253.7129143459929);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction1);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(239);
      compressedVector0.setAll((-1810));
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(3456);
      assertEquals(0.06915509259259259, compressedVector1.density(), 0.01);
      
      compressedVector1.swapElements(3456, 8);
      assertEquals(239, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3466, 1000);
      compressedVector0.isZeroAt(81);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.foldNonZero(vectorAccumulator0);
      compressedVector0.setAll(1240.8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3445, vectorFunction0);
      compressedVector0.swapElements(3441, 3445);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
