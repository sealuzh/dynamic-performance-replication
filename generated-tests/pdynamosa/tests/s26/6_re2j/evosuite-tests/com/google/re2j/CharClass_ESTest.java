/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 13:24:57 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1381), 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(66639, 66639);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendRange(66639, 1453);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendLiteral(1453, (-576));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 267;
      intArray0[0] = 267;
      intArray0[1] = 32;
      int int1 = 0;
      intArray0[2] = 0;
      int int2 = 4;
      intArray0[3] = 4;
      int int3 = 8524;
      intArray0[4] = 8524;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {267, 32, 0, 4, 8524}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(8524, 4);
      assertArrayEquals(new int[] {267, 32, 0, 4, 8524}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = 2;
      intArray0[2] = 982128;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 2, 982128, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      charClass0.appendFoldedRange(4254, 1114111);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertSame(intArray1, intArray0);
      
      int[][] intArray2 = new int[5][1];
      intArray2[0] = intArray1;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendLiteral(3545, 3545);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(intArray0, intArray1);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass1.appendNegatedClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(intArray0, intArray1);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.appendClass(intArray1);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass4.appendLiteral((-4619), 3545);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass2));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(intArray0, intArray1);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      
      CharClass charClass7 = charClass6.appendClassWithSign(intArray0, (-4619));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass2));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(intArray0, intArray1);
      assertSame(charClass1, charClass7);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int int0 = (-1381);
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 3545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 91;
      intArray0[0] = 91;
      int int1 = 1280;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {91, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1114111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = (-894);
      intArray0[1] = (-894);
      intArray0[2] = 919;
      intArray0[3] = (-4534);
      int int1 = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 2035;
      String string0 = CharClass.charClassToString(intArray0, (-4534));
      assertArrayEquals(new int[] {0, (-894), 919, (-4534), 0, (-1), 2035}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[] intArray1 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-445);
      intArray0[1] = 2;
      intArray0[2] = 982128;
      intArray0[3] = 969;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-445), 2, 982128, 969}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendFoldedRange(851170, 851170);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {(-445), 2, 982128, 969}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass2.appendRange(1567, 2);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-445), 2, 982128, 969}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      
      int[] intArray1 = charClass0.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-445), 1114111}, intArray1);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = charClass0.toArray();
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-445), 1114111}, intArray2);
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      int[] intArray3 = charClass0.toArray();
      assertFalse(intArray3.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-445), 1114111}, intArray3);
      assertEquals(2, intArray3.length);
      assertNotNull(intArray3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(intArray3, intArray1);
      assertSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      
      CharClass charClass6 = charClass1.negateClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertArrayEquals(new int[] {(-445), 2, 982128, 969}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      
      CharClass charClass7 = charClass0.appendNegatedClass(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-445), 1114111}, intArray1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray1, intArray3);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      
      CharClass charClass8 = charClass7.appendLiteral(2, 92);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2}, intArray1);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass8);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray1, intArray3);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 1114111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1315);
      intArray0[1] = 0;
      intArray0[2] = 4886;
      intArray0[3] = 1441;
      intArray0[4] = (-1473);
      intArray0[5] = (-2026);
      intArray0[6] = (-3082);
      intArray0[7] = 2;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-1315), 0, 4886, 1441, (-1473), (-2026), (-3082), 2}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {1, 4885, 3, 1114111, (-1473), (-2026), (-3082), 2}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-2026));
      assertArrayEquals(new int[] {0, 4885, 3, 1114111, (-1473), (-2026), (-3082), 2}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[4][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertArrayEquals(new int[] {0, 4885, 3, 1114111, (-1473), (-2026), (-3082), 2}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      CharClass charClass4 = charClass3.appendLiteral(0, (-1315));
      assertArrayEquals(new int[] {0, 4885, 3, 1114111, (-1473), (-2026), (-3082), 2}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      CharClass charClass5 = charClass4.appendRange(4885, 0);
      assertArrayEquals(new int[] {0, 4885, 3, 1114111, (-1473), (-2026), (-3082), 2}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      CharClass charClass6 = charClass5.appendRange((-71), 241);
      assertArrayEquals(new int[] {0, 4885, (-71), 1114111, (-1473), (-2026), (-3082), 2}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      int int0 = 247;
      intArray0[0] = 247;
      intArray0[1] = (-1458);
      intArray0[2] = 0;
      int int1 = 93;
      intArray0[3] = 93;
      int int2 = (-1038);
      intArray0[4] = (-1038);
      int int3 = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int4 = 1846;
      intArray0[8] = 1846;
      int int5 = 3655;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 3655);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-17);
      int[][] intArrayArray0 = null;
      int int1 = 2;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendFoldedRange(2730, 2730);
      assertArrayEquals(new int[] {0, 0, 2730, 2730, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      
      int[][] intArray1 = new int[0][9];
      CharClass charClass5 = charClass3.appendTableWithSign(intArray1, 2730);
      assertArrayEquals(new int[] {0, 0, 2730, 2730, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass5.appendTable(intArray1);
      assertArrayEquals(new int[] {0, 0, 2730, 2730, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      
      CharClass charClass7 = new CharClass(intArray0);
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass5));
      assertArrayEquals(new int[] {0, 0, 2730, 2730, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass5.appendClassWithSign(intArray0, 366);
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass1.equals((Object)charClass7));
      assertFalse(charClass3.equals((Object)charClass7));
      assertFalse(charClass5.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass7));
      assertArrayEquals(new int[] {0, 0, 2730, 2730, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass7);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1785;
      int int1 = 1;
      CharClass charClass1 = charClass0.appendRange(1785, 1);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      int int2 = (-1912);
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign((int[]) null, (-1912));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(3095, 3095);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[3][1];
      int[] intArray1 = new int[7];
      intArray1[0] = 3095;
      intArray1[1] = 3095;
      intArray1[2] = 3095;
      intArray1[3] = 3095;
      intArray1[4] = 3095;
      intArray1[5] = 3095;
      intArray1[6] = 3095;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 3095;
      intArray2[1] = 3095;
      intArray2[2] = 3095;
      intArray2[3] = 3095;
      intArray2[4] = 3095;
      intArray2[5] = 3095;
      intArray2[6] = 3095;
      intArray2[7] = 3095;
      intArray2[8] = 3095;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 3095;
      intArray3[1] = 104747;
      intArray3[2] = 3095;
      intArray3[3] = 3095;
      intArray0[2] = intArray3;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1563;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 2426;
      intArray0[4] = 177984;
      intArray0[5] = 91;
      intArray0[6] = 2954;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1563, 0, 2, 2426, 177984, 91, 2954, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(91, 0);
      assertArrayEquals(new int[] {1563, 0, 2, 2426, 177984, 91, 2954, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {1563, 0, 2, 2426, 177984, 91, 2954, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertArrayEquals(new int[] {1563, 0, 2, 2426, 177984, 91, 2954, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendLiteral(0, 2426);
      assertArrayEquals(new int[] {1563, 0, 2, 2426, 177984, 91, 2954, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(6232, 2167);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 91;
      intArray0[0] = 91;
      intArray0[1] = 91;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(91, 91);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 548;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 548}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(0, 442);
      assertArrayEquals(new int[] {0, 548}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 548}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[][] intArray1 = new int[7][4];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 442;
      intArray2[1] = (-2582);
      intArray2[2] = 442;
      intArray2[3] = 0;
      intArray1[1] = intArray2;
      CharClass charClass4 = charClass3.appendFoldedClass(intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 548}, intArray0);
      assertArrayEquals(new int[] {442, (-2582), 442, 0}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray2.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.negateClass();
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 548}, intArray0);
      assertArrayEquals(new int[] {442, (-2582), 442, 0}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray2.length);
      assertNotNull(charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      
      CharClass charClass6 = charClass3.appendFoldedClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {0, 548}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {0, 548}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertNotSame(intArray0, intArray2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-57);
      intArray0[1] = 2516;
      intArray0[2] = 65479;
      intArray0[3] = (-55);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-57), 2516, 65479, (-55)}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange((-57), (-57));
      assertArrayEquals(new int[] {(-57), 2516, 65479, (-55)}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {(-57), 2516, 65479, (-55)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-57), 65478, (-54), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 332);
      assertArrayEquals(new int[] {(-57), 65478, (-57), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass2.appendLiteral(0, 0);
      assertArrayEquals(new int[] {(-57), 65478, (-57), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      
      int[][] intArray2 = new int[0][4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass6 = charClass5.appendTable(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-57), 65478, (-57), 1114111}, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass6);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      
      CharClass charClass7 = charClass1.appendFoldedRange(1114111, 1114111);
      assertArrayEquals(new int[] {(-57), 65478, (-57), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      
      CharClass charClass8 = charClass5.appendFoldedRange((-55), 0);
      assertFalse(intArray1.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-57), 65478, (-57), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass8);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      
      // Undeclared exception!
      charClass5.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = 3545;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 3545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass2.negateClass();
      assertArrayEquals(new int[] {1, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals("[]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-353), (-353));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[2];
      intArray1[0] = (-353);
      intArray1[1] = (-353);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-353);
      intArray2[1] = (-353);
      intArray2[2] = (-353);
      intArray2[3] = (-353);
      intArray2[4] = (-353);
      intArray2[5] = (-353);
      intArray2[6] = 65;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-353);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = (-353);
      intArray4[1] = 65;
      intArray4[2] = (-353);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 65;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      
      intArray6[0] = (-467);
      intArray6[1] = (-353);
      intArray6[2] = (-353);
      intArray6[3] = 65;
      intArray6[4] = 65;
      intArray6[5] = 65;
      intArray6[6] = 119145;
      intArray6[7] = 65;
      intArray6[8] = 65;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      
      intArray7[0] = (-652);
      intArray7[1] = 65;
      intArray7[2] = 65;
      intArray7[3] = (-691);
      intArray7[4] = (-353);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[0];
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray6));
      
      intArray0[7] = intArray8;
      int[] intArray9 = new int[4];
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray6));
      
      intArray9[0] = (-467);
      intArray9[1] = (-691);
      intArray9[2] = (-353);
      intArray9[3] = 1204;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, (-2202));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral((-744), 776);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      String string1 = CharClass.charClassToString((int[]) null, (-744));
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 91;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 91);
      assertArrayEquals(new int[] {91, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendFoldedRange((-14686370), (-2057));
      assertArrayEquals(new int[] {91, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {91, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {91, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      
      String string0 = charClass5.toString();
      assertArrayEquals(new int[] {91, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("[0x5b-0x0 0xff1fe75e-0xfffff7f7 0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {91, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      
      CharClass charClass7 = charClass1.negateClass();
      assertNotNull(charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      
      int[] intArray1 = charClass6.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {91, 0}, intArray0);
      assertArrayEquals(new int[] {0, 90, (-2056), (-1)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass8 = charClass7.appendNegatedClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {91, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass8);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 5;
      intArray1[1] = 119885;
      intArray1[2] = 1;
      intArray1[3] = 66640;
      intArray1[4] = 2839;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2839;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 119885;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1;
      intArray3[1] = 2839;
      intArray3[2] = 119885;
      intArray3[3] = 66640;
      intArray3[4] = 5;
      intArray3[5] = (-424);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-424);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 4630;
      intArray5[1] = 119885;
      intArray5[2] = 2839;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = 4;
      intArray6[1] = (-424);
      intArray6[2] = (-424);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[6];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 119885;
      intArray7[1] = (-424);
      intArray7[2] = 1;
      intArray7[3] = 66640;
      intArray7[4] = 119885;
      intArray7[5] = 2839;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray2));
      
      intArray8[0] = 66640;
      intArray8[1] = (-1398);
      intArray8[2] = 66640;
      intArray8[3] = 66640;
      intArray8[4] = 5;
      intArray8[5] = 4630;
      intArray8[6] = 4630;
      intArray8[7] = 2839;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[3];
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray2));
      
      intArray9[0] = (-1398);
      intArray9[1] = (-1398);
      intArray9[2] = 66640;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = (-302);
      intArray0[1] = (-302);
      intArray0[2] = (-4147);
      int int1 = 2;
      intArray0[3] = 2;
      int int2 = (-3960);
      intArray0[4] = (-3960);
      intArray0[5] = 119973;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-302), (-4147), 2, (-3960), 119973, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 77);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[9][4];
      int[] intArray1 = new int[2];
      intArray1[0] = 77;
      intArray1[1] = (-2353);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 33;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = (-2353);
      intArray2[4] = 0;
      intArray2[5] = (-2353);
      intArray2[6] = 77;
      intArray2[7] = (-2353);
      intArray2[8] = 77;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 77;
      intArray3[1] = 77;
      int int0 = 43444;
      intArray3[2] = 43444;
      intArray3[3] = 33;
      intArray3[4] = (-2353);
      intArray3[5] = 77;
      intArray3[6] = 33;
      intArray3[7] = 77;
      intArray3[8] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 77;
      intArray4[1] = 43444;
      intArray4[2] = (-2353);
      intArray4[3] = 0;
      intArray4[4] = 43444;
      intArray4[5] = 162;
      intArray4[6] = 33;
      intArray4[7] = (-2353);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 43444;
      intArray5[1] = 77;
      intArray5[2] = 0;
      int int1 = (-1111);
      intArray5[3] = (-1111);
      intArray5[4] = (-2353);
      intArray5[5] = 162;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 162;
      intArray6[1] = 77;
      intArray6[2] = 77;
      intArray6[3] = 162;
      int int2 = 0;
      intArray6[4] = 0;
      intArray6[5] = 77;
      intArray6[6] = (-1111);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray4));
      
      intArray7[0] = 33;
      intArray7[1] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray7));
      
      intArray8[0] = (-2353);
      intArray8[1] = 0;
      intArray8[2] = 33;
      intArray8[3] = 33;
      intArray8[4] = (-2353);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[3];
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray8));
      
      intArray9[0] = 33;
      intArray9[1] = 77;
      intArray9[2] = 33;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-34);
      intArray0[1] = 1114111;
      intArray0[2] = 65479;
      intArray0[3] = (-55);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-34), 1114111, 65479, (-55)}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange((-34), (-34));
      assertArrayEquals(new int[] {(-34), 1114111, 65479, (-55)}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {(-34), 1114111, 65479, (-55)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = new CharClass();
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendTable(intArray1);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertArrayEquals(new int[] {(-34), 1114111, 65479, (-55)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      
      // Undeclared exception!
      charClass2.appendFoldedRange(1831, 65479);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(64, 2196);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 102379;
      intArray0[1] = (-4730);
      intArray0[2] = (-32);
      intArray0[3] = 101672;
      intArray0[4] = (-215);
      intArray0[5] = 1282;
      intArray0[6] = 99555;
      intArray0[7] = 98850;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2150);
      intArray0[1] = 32;
      intArray0[2] = 93;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass4 = charClass1.appendTableWithSign(intArray1, (-2150));
      assertEquals(7, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, (-1331));
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      
      CharClass charClass6 = charClass1.appendLiteral((-1), 93);
      assertNotNull(charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      
      CharClass charClass7 = charClass2.cleanClass();
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      
      CharClass charClass8 = charClass7.appendFoldedRange((-1), 32);
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      
      CharClass charClass9 = charClass2.appendClassWithSign(intArray0, 93);
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      
      CharClass charClass10 = charClass9.appendRange(504, (-435));
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass9);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1301;
      intArray0[2] = 0;
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 1301, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(3086, 0);
      assertArrayEquals(new int[] {0, 1301, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendRange(0, 0);
      assertArrayEquals(new int[] {0, 1301, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1301, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      String string0 = charClass2.toString();
      assertArrayEquals(new int[] {0, 1301, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("[0x0-0x515 0x0 0x1-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 3086;
      intArray3[1] = 1301;
      intArray3[2] = 1114111;
      intArray3[3] = 0;
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2150);
      intArray0[1] = 32;
      intArray0[2] = 93;
      intArray0[3] = 0;
      intArray0[4] = 450;
      intArray0[5] = 350;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 450, 350}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 450, 350}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 450, 350}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendLiteral((-2075), (-2075));
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 450, 350}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      // Undeclared exception!
      try { 
        charClass3.appendClassWithSign((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = 7204;
      intArray0[1] = 7204;
      intArray0[2] = 596;
      int int1 = 12704;
      intArray0[3] = 12704;
      intArray0[4] = (-578);
      intArray0[5] = (-942);
      intArray0[6] = 1874;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 7204, 596, 12704, (-578), (-942), 1874}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(3095, 3095);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[0][1];
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray1 = charClass2.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[][] intArray2 = new int[9][2];
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 490;
      intArray3[1] = (-463);
      intArray3[2] = 1888;
      intArray3[3] = 1504;
      intArray2[0] = intArray3;
      intArray2[1] = intArray1;
      intArray2[2] = intArray0;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      
      intArray4[0] = (-463);
      intArray2[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 490;
      intArray5[1] = (-463);
      intArray5[2] = 846;
      intArray5[3] = 490;
      intArray5[4] = 0;
      intArray5[5] = 490;
      intArray5[6] = 1888;
      intArray5[7] = 1888;
      intArray2[4] = intArray5;
      intArray2[5] = intArray0;
      intArray2[6] = intArray0;
      intArray2[7] = intArray0;
      int[] intArray6 = new int[2];
      assertFalse(intArray6.equals((Object)intArray0));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 846;
      intArray6[1] = 1888;
      intArray2[8] = intArray6;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray2, 490);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1371;
      CharClass charClass1 = charClass0.appendLiteral(1371, 1371);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int1 = 0;
      CharClass charClass2 = charClass1.appendLiteral(0, 0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      String string0 = charClass2.toString();
      assertEquals("[0x55b 0x0]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      intArray0[1] = 1371;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, (-1132));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 32);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange(32, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendRange(65140, 32);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      int[][] intArray1 = new int[7][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1132);
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 32;
      intArray2[4] = 32;
      intArray2[5] = 0;
      intArray1[6] = intArray2;
      // Undeclared exception!
      try { 
        charClass5.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 55238;
      intArray0[1] = 0;
      String string0 = charClass0.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      
      intArray0[2] = (-1351);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2150);
      intArray0[1] = 32;
      intArray0[2] = 93;
      intArray0[3] = 0;
      intArray0[4] = 450;
      intArray0[5] = 350;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-2150), 32, 93, 0, 450, 350}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 548;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      int int1 = 442;
      CharClass charClass2 = charClass1.appendFoldedRange(0, 442);
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[7][4];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[4];
      intArray2[0] = 442;
      int int2 = (-2582);
      charClass2.cleanClass();
      intArray2[1] = (-2582);
      intArray2[2] = 442;
      intArray2[3] = 0;
      // Undeclared exception!
      try { 
        charClass3.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[8][6];
      int[] intArray2 = new int[2];
      intArray2[0] = 0;
      intArray2[1] = 0;
      CharClass charClass1 = charClass0.cleanClass();
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-825);
      intArray0[1] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[5][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1563;
      intArray0[1] = 0;
      int int0 = 2;
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[3][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      CharClass charClass4 = charClass3.negateClass();
      charClass1.appendNegatedTable(intArray1);
      charClass1.negateClass();
      charClass1.appendTable(intArray1);
      charClass4.appendLiteral((-809), 0);
      int int1 = 443;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 443);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 93;
      intArray0[1] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = (-2);
      intArray0[1] = (-2);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 492);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 700;
      intArray0[1] = (-1042);
      intArray0[2] = 9083;
      intArray0[3] = (-100);
      intArray0[4] = (-3427);
      int int0 = 1844;
      intArray0[5] = 1844;
      intArray0[6] = (-816);
      intArray0[7] = 134;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      charClass1.appendRange(1844, (-1042));
      charClass1.appendTable(intArray1);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 91;
      intArray0[0] = 91;
      int int1 = 1280;
      intArray0[1] = 1280;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1114111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = (-544);
      CharClass charClass1 = charClass0.appendLiteral((-544), (-544));
      int[] intArray0 = new int[8];
      intArray0[0] = (-544);
      intArray0[1] = (-544);
      intArray0[2] = (-544);
      intArray0[3] = (-544);
      intArray0[4] = (-544);
      intArray0[5] = (-544);
      intArray0[6] = (-544);
      intArray0[7] = (-544);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[] intArray0 = new int[3];
      intArray0[0] = 55238;
      CharClass charClass2 = charClass1.appendLiteral(55238, (-441));
      charClass1.negateClass();
      charClass2.appendLiteral(55238, 2257);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 55238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 3570;
      intArray0[1] = 190;
      intArray0[2] = 32;
      intArray0[3] = (-1);
      intArray0[4] = 713;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = (-2811);
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      int int0 = 2167;
      int int1 = 2858;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 65;
      intArray0[1] = 1059;
      intArray0[2] = 1947;
      intArray0[3] = (-169);
      intArray0[4] = (-286);
      CharClass.charClassToString(intArray0, (-4826));
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[8][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-4826));
      // Undeclared exception!
      charClass1.appendFoldedRange(1947, 2966);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 655;
      int[][] intArray0 = new int[7][9];
      int[] intArray1 = new int[9];
      intArray1[0] = 655;
      intArray1[1] = 655;
      intArray1[2] = 655;
      intArray1[3] = 655;
      intArray1[4] = 655;
      intArray1[5] = 655;
      intArray1[6] = 655;
      intArray1[7] = 655;
      intArray1[8] = 655;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 655;
      intArray2[1] = 655;
      intArray2[2] = 655;
      intArray2[3] = 655;
      intArray2[4] = 655;
      intArray2[5] = 655;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 655;
      intArray3[1] = 655;
      intArray3[2] = 655;
      intArray3[3] = 655;
      intArray3[4] = 655;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 655;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = 655;
      intArray5[1] = 655;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 655;
      intArray6[1] = 655;
      intArray6[2] = 655;
      intArray6[3] = (-1022933);
      intArray6[4] = 4102;
      intArray6[5] = 655;
      intArray6[6] = 655;
      intArray6[7] = 655;
      intArray6[8] = 655;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[1];
      intArray7[0] = 655;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 2271);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      charClass0.negateClass();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[7];
      intArray0[0] = 199;
      intArray0[1] = 4704;
      intArray0[2] = 1069;
      intArray0[3] = 64;
      intArray0[4] = 0;
      intArray0[5] = (-1692);
      intArray0[6] = 2568;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 4704);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][0];
      int[] intArray1 = new int[1];
      int int0 = 91;
      intArray1[0] = 91;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
