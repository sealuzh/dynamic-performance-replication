/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:40:49 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.Panel;
import java.awt.SystemColor;
import java.awt.dnd.DropTarget;
import java.awt.event.ComponentListener;
import java.awt.event.KeyListener;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.beans.PropertyChangeListener;
import java.beans.beancontext.BeanContextServicesSupport;
import java.io.IOException;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Locale;
import javax.accessibility.AccessibleAction;
import javax.swing.JApplet;
import javax.swing.JLayeredPane;
import javax.swing.JToolTip;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.ScrollPaneConstants;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.plaf.synth.SynthProgressBarUI;
import javax.swing.plaf.synth.SynthToggleButtonUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyleConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.associations.Apriori;
import weka.associations.FilteredAssociator;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.functions.SMO;
import weka.classifiers.lazy.IBk;
import weka.clusterers.EM;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckGOE;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.SelectedTag;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.StripChart;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      AllFilter allFilter0 = new AllFilter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      DataSetEvent dataSetEvent0 = new DataSetEvent(allFilter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.getStructure("string");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      SystemInUtil.addInputLine("i3,?Q3?c+X]+AKuP{");
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke('r');
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(keyStroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class javax.swing.KeyStroke : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.filters.Filter filter1 = filter0.getFilter();
      filter0.setWrappedAlgorithm(filter1);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("", "");
      filter0.setCustomName("");
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      filter0.removeDataSourceListener(appender0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeTestSetListener(scatterPlotMatrix0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMouseWheelListeners();
      filter0.setFocusCycleRoot(false);
      filter0.eventGeneratable("configuration");
      filter0.globalInfo();
      filter0.setCustomName("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      filter0.connectionNotification("globalInfo", "<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      Saver saver0 = new Saver();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Sorter.InstanceHolder sorter_InstanceHolder0 = new Sorter.InstanceHolder();
      filter0.getVisual();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = AccessibleAction.CLICK;
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove((java.awt.event.TextListener) aWTEventMulticaster0, (java.awt.event.TextListener) aWTEventMulticaster0);
      Locale locale0 = new Locale(" instances.");
      filter0.connectionNotification("click", trainTestSplitMaker0);
      boolean boolean0 = filter0.eventGeneratable("click");
      assertFalse(boolean0);
      
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      Appender appender0 = new Appender();
      filter0.repaint(1035, (-555), (-1), 23);
      Appender appender1 = new Appender();
      filter0.repaint(1035, 1035, 1282, 1302);
      Appender appender2 = new Appender();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      filter0.removeTrainingSetListener(associator0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getColorModel();
      Enumeration enumeration0 = filter0.enumerateRequests();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(enumeration0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      Classifier classifier0 = new Classifier();
      GraphViewer graphViewer0 = new GraphViewer();
      classifier0.removeGraphListener(graphViewer0);
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      filter0.getMaximumSize();
      SysErrLog sysErrLog0 = new SysErrLog();
      TextViewer textViewer0 = new TextViewer();
      boolean boolean0 = filter0.eventGeneratable("7b");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      Dimension dimension0 = filter0.getMinimumSize();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      dimension0.setSize((double) (-1810L), (double) (-1810L));
      dimension0.width = (-1000000);
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      dimension0.setSize((double) (-1810L), 922.8983380745135);
      AllFilter allFilter0 = new AllFilter();
      filter0.repaint((-1810), 1593, (-1810), (-1810));
      filter0.connectionNotification("trainingSet", dimension0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      globalInfoJavadoc0.generate();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.useDefaultVisual();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker1 = new InstanceStreamToBatchMaker();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      instanceStreamToBatchMaker1.addMouseMotionListener(defaultCaret1);
      filter0.removeInstanceListener(instanceStreamToBatchMaker1);
      System.setCurrentTimeMillis(3000L);
      Random.setNextRandom(2);
      filter0.setLog((Logger) null);
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMouseWheelListeners();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      SysErrLog sysErrLog0 = new SysErrLog();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemColor systemColor0 = SystemColor.controlShadow;
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.setLog(sysErrLog0);
      filter0.setCustomName("ERROR (See log for details.");
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      filter0.setLog(sysErrLog0);
      assertEquals("ERROR (See log for details.", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(42L);
      ListOptions listOptions0 = new ListOptions();
      Filter filter0 = new Filter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gp,nKf[", arrayList0, 46);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ClassAssigner classAssigner0 = new ClassAssigner();
      byte[] byteArray0 = new byte[4];
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((int) (byte) (-3), (int) (byte) (-25));
      filter0.getConditionForKeyStroke(keyStroke0);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getColorModel();
      filter0.enumerateRequests();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Classifier classifier0 = new Classifier();
      GraphViewer graphViewer0 = new GraphViewer();
      classifier0.removeGraphListener(graphViewer0);
      BeanVisual beanVisual0 = classifier0.m_visual;
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Discretize discretize0 = new Discretize();
      classifierPerformanceEvaluator0.m_listenee = (Object) discretize0;
      classifier0.addBatchClassifierListener(classifierPerformanceEvaluator0);
      filter0.addDataSourceListener(filter0);
      filter0.addTrainingSetListener(classifier0);
      filter0.setCustomName("N");
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.isBusy();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(instanceStreamToBatchMaker0, instances0, 2, 59);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.getCustomName();
      filter0.disconnectionNotification("6DkRc\"zr)p;E", trainingSetEvent0);
      filter0.getFilter();
      assertEquals("N", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      filter0.connectionNotification("8u]!&:?drG4m", clustererPerformanceEvaluator0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      filter0.connectionNotification("8u]!&:?drG4m", integer0);
      filter0.getFilter();
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainingSetMaker0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      filter0.connectionNotification("z^MzL/+O)8q[R", manhattanDistance0);
      filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setFocusCycleRoot(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.globalInfo();
      filter0.setCustomName("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      Saver saver0 = new Saver();
      Locale locale0 = Locale.JAPANESE;
      locale0.toLanguageTag();
      AllFilter allFilter0 = new AllFilter();
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.LESSTHAN;
      filter0.connectionNotification("instance", flowByExpression_ExpressionClause_ExpressionType0);
      // Undeclared exception!
      try { 
        filter0.performRequest("ja");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ja not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      Filter filter2 = new Filter();
      filter1.firePropertyChange("5J;Rh9w[cLr", 0.25F, 0.0F);
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      Filter filter3 = new Filter();
      filter0.performRequest("Stop");
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      assertNotNull(styleConstants0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.useDefaultVisual();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.acceptInstance(instanceEvent0);
      filter0.setWrappedAlgorithm(add0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMouseWheelListeners();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      SysErrLog sysErrLog0 = new SysErrLog();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.spliterator();
      SystemColor systemColor0 = SystemColor.controlShadow;
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Logger logger0 = predictionAppender0.m_logger;
      filter0.setLog(sysErrLog0);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.setFilter(nominalToBinary0);
      filter0.useDefaultVisual();
      filter0.setCustomName("ERROR (See log for details.");
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      add0.setInputFormat(instances0);
      Add add1 = new Add();
      filter0.setFilter(add0);
      AllFilter allFilter0 = new AllFilter();
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "ERROR (See log for details.");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.setLocation(2, 1);
      Saver saver0 = new Saver();
      filter0.addDataSourceListener(saver0);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      filter0.getFocusTraversalPolicy();
      filter0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      filter0.enumerateRequests();
      filter0.isBusy();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      TestSetEvent testSetEvent0 = new TestSetEvent(spreadSubsample0, instances1);
      filter0.acceptTestSet(testSetEvent0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DataSetEvent dataSetEvent0 = new DataSetEvent(mockThaiBuddhistDate0, instances1);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getMouseWheelListeners();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      SysErrLog sysErrLog0 = new SysErrLog();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Logger logger0 = predictionAppender0.m_logger;
      filter0.setLog(sysErrLog0);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setFilter(attributeSelection0);
      filter0.setCustomName((String) null);
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      IBk iBk0 = new IBk();
      MetaBean metaBean0 = new MetaBean();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      Associator associator0 = new Associator();
      filter0.enumerateRequests();
      NominalToBinary nominalToBinary1 = new NominalToBinary();
      filter0.setFilter(nominalToBinary1);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      InstanceListener instanceListener0 = null;
      filter0.connectionNotification("trainingSet", add0);
      Classifier classifier0 = new Classifier();
      // Undeclared exception!
      try { 
        filter0.connectionNotification("model", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      String string0 = "[f!;LE 4M@O8&?MzV[9";
      Class<AttributeSummarizer> class1 = AttributeSummarizer.class;
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "[f!;LE 4M@O8&?MzV[9", class1, " : incorrect ");
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found:  : incorrect  on class weka.gui.beans.AttributeSummarizer
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.addInstanceListener(filter0);
      filter0.eventGeneratable(" not supported (Filter)");
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.FRENCH;
      locale1.toLanguageTag();
      AllFilter allFilter0 = new AllFilter();
      filter0.connectionNotification("instance", " not supported (Filter)");
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      filter0.connectionNotification("can't process streamed instances; can't continue", "can't process streamed instances; can't continue");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      predictionAppender0.setIgnoreRepaint(false);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      Capabilities capabilities0 = nominalToBinary0.getCapabilities();
      nominalToBinary0.globalInfo();
      filter0.setFilter(nominalToBinary0);
      filter0.getFilter();
      filter0.connectionNotification("weka/core/Capabilities.props", capabilities0);
      filter0.eventGeneratable("weka/core/Capabilities.props");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.connectionNotification("trainingSet", add0);
      Classifier classifier0 = new Classifier();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      Locale locale0 = Locale.GERMANY;
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.connectionNotification("instance", locale0);
      Classifier classifier1 = new Classifier();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      filter0.connectionNotification("adrzVh 2U!G", serializedModelSaver0);
      Filter filter1 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker1 = new TrainTestSplitMaker();
      filter0.addDataSourceListener(trainTestSplitMaker0);
      filter0.createToolTip();
      filter0.addTestSetListener(scatterPlotMatrix0);
      CheckGOE checkGOE0 = new CheckGOE();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      SysErrLog sysErrLog0 = new SysErrLog();
      TextViewer textViewer0 = new TextViewer();
      filter1.eventGeneratable("R8LB~DF@");
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Logger logger0 = trainingSetMaker0.m_logger;
      filter0.setLog((Logger) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      filter0.addInstanceListener(classifier0);
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      filter0.removePropertyChangeListener((PropertyChangeListener) synthProgressBarUI0);
      classifier0.getComponents();
      long long0 = (-612L);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      filter0.addInstanceListener((InstanceListener) null);
      filter0.eventGeneratable("instance");
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.FRENCH;
      locale0.toLanguageTag();
      AllFilter allFilter0 = new AllFilter();
      filter0.connectionNotification("dataSet", "instance");
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      filter0.connectionNotification("instance", ".arff");
      filter0.isBusy();
      StripChart stripChart0 = null;
      try {
        stripChart0 = new StripChart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.StripChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      filter0.addInstanceListener((InstanceListener) null);
      filter0.eventGeneratable("instance");
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.FRENCH;
      locale0.toLanguageTag();
      AllFilter allFilter0 = new AllFilter();
      filter0.connectionNotification("dataSet", "instance");
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      locale0.getDisplayName();
      Character character0 = Character.valueOf('v');
      AWTKeyStroke.getAWTKeyStroke(character0, (-1));
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.GREATERTHAN;
      filter0.connectionNotification("de-DE", locale0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      String[] stringArray0 = new String[2];
      Add.main(stringArray0);
      filter0.setFilter(add0);
      Locale locale0 = Locale.TAIWAN;
      filter0.connectionNotification("instance", " not supported(Filter)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, stringArray0[0]);
      filter0.eventGeneratable("instance");
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      instanceStreamToBatchMaker0.isFocusOwner();
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      instanceStreamToBatchMaker0.getClientProperty(costBenefitAnalysis0);
      AllFilter allFilter0 = new AllFilter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      filter0.connectionNotification("trainingSet", "trainingSet");
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      // Undeclared exception!
      try { 
        filter0.connectionNotification("ERROR (See log for details.", stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.addInstanceListener((InstanceListener) null);
      Locale locale0 = Locale.GERMANY;
      locale0.toLanguageTag();
      AllFilter allFilter0 = new AllFilter();
      filter0.connectionNotification("instance", " no supported (Filter)");
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      locale0.stripExtensions();
      JViewport jViewport0 = new JViewport();
      Insets insets0 = jViewport0.getInsets();
      jViewport0.getInsets(insets0);
      filter0.connectionNotification("cs2@onfiguration", synthTreeUI0);
      Saver saver0 = new Saver();
      ListOptions listOptions0 = new ListOptions();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.connectionNotification("testSet", classAssigner0);
      filter0.isBusy();
      StripChart stripChart0 = null;
      try {
        stripChart0 = new StripChart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.StripChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      String string0 = C45Loader.FILE_EXTENSION;
      filter0.setFilter(add0);
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      instanceEvent0.setStatus(1);
      filter0.acceptInstance(instanceEvent0);
      filter0.getFocusTraversalKeys(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.dataset();
      instanceEvent0.setInstance(binarySparseInstance0);
      Classifier classifier0 = new Classifier();
      System.setCurrentTimeMillis(1);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.getCustomName();
      filter0.repaint(26, 43, 114, (-1135));
      Appender appender0 = new Appender();
      filter0.acceptInstance(instanceEvent0);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.eventGeneratable("configuration");
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesNoClass();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(apriori0, (Instances) null, (-2068), (-2068), 1916, (-2068));
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.getUIClassID();
      filter0.disconnectionNotification("@relation", "d");
      filter0.list();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.requestFocusInWindow();
      Color color0 = Color.PINK;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2068);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Appender appender0 = new Appender();
      TrainingSetEvent trainingSetEvent1 = new TrainingSetEvent(floatArray0, (Instances) null, 1916, 91, (-2068), (-2068));
      filter0.connectionNotification("@relation", trainingSetEvent1);
      filter0.getFilter();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      weka.gui.LogPanel logPanel1 = new weka.gui.LogPanel();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      System.setCurrentTimeMillis((-2068));
      ConfigurationListener configurationListener1 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener1);
      filter0.enumerateRequests();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      SynthToggleButtonUI synthToggleButtonUI0 = new SynthToggleButtonUI();
      filter0.removePropertyChangeListener((PropertyChangeListener) synthToggleButtonUI0);
      Add add0 = new Add();
      weka.filters.Filter.makeCopy(add0);
      filter0.setFilter(add0);
      filter0.eventGeneratable(" not supported(Filter)");
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.FRENCH;
      AllFilter allFilter0 = new AllFilter();
      filter0.connectionNotification("instance", " not supported(Filter)");
      filter0.eventGeneratable("instance");
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      costBenefitAnalysis0.getVisual();
      DefaultTableModel defaultTableModel0 = null;
      try {
        defaultTableModel0 = new DefaultTableModel((-8), (-791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -791
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      String string0 = DefaultEditorKit.selectionForwardAction;
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      AWTEventMulticaster.remove((KeyListener) null, (KeyListener) null);
      substringReplacer0.removeKeyListener((KeyListener) null);
      filter0.addInstanceListener(substringReplacer0);
      Classifier classifier0 = new Classifier();
      Filter filter1 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.addDataSourceListener(filter1);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      JToolTip jToolTip0 = filter0.createToolTip();
      filter1.addTestSetListener(classifier0);
      ImageSaver imageSaver0 = new ImageSaver();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(serializedModelSaver0, instances1, (-1765), 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      filter0.disconnectionNotification(".bsi", jToolTip0);
      PredictionAppender predictionAppender1 = new PredictionAppender();
      PredictionAppender predictionAppender2 = new PredictionAppender();
      filter1.setVisual((BeanVisual) null);
      filter1.enumerateRequests();
      TestSetEvent testSetEvent0 = new TestSetEvent(jToolTip0, instances0);
      filter1.acceptTestSet(testSetEvent0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      String string0 = ScrollPaneConstants.UPPER_RIGHT_CORNER;
      filter0.setFilter(add0);
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.dataset();
      MetaBean metaBean0 = new MetaBean();
      instanceEvent0.setInstance(binarySparseInstance0);
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Classifier classifier0 = new Classifier();
      System.setCurrentTimeMillis(1);
      filter0.isBusy();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classifier0, (Instances) null, 6, 1);
      TrainingSetEvent trainingSetEvent1 = new TrainingSetEvent(trainingSetEvent0, (Instances) null, 1, (-3276));
      filter0.getCustomName();
      Appender appender0 = new Appender();
      filter0.repaint((-1955), (-3276), 6, 1);
      Appender appender1 = new Appender();
      appender0.getGraphics();
      filter0.acceptInstance(instanceEvent0);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hH<qn~A#mf+";
      stringArray0[1] = "hH<qn~A#mf+";
      Add.main(stringArray0);
      add0.setDateFormat("hH<qn~A#mf+");
      filter0.setFilter(add0);
      Locale locale0 = Locale.TAIWAN;
      filter0.connectionNotification("instance", " not supported(Filter)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hH<qn~A#mf+");
      filter0.eventGeneratable("instance");
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      filter0.useDefaultVisual();
      SystemInUtil.addInputLine("hH<qn~A#mf+");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Appender appender0 = new Appender();
      TextViewer textViewer0 = new TextViewer();
      InstanceEvent instanceEvent0 = new InstanceEvent("hH<qn~A#mf+", instances0);
      filter0.acceptInstance(instanceEvent0);
      SystemInUtil.addInputLine("regression ");
      Filter filter1 = new Filter();
      Saver saver0 = new Saver();
      filter1.addDataSourceListener(textViewer0);
      filter0.getFocusTraversalPolicy();
      filter0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      filter1.addTestSetListener(appender0);
      System.setCurrentTimeMillis(849L);
      filter1.isBusy();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      weka.filters.Filter.makeCopy(add0);
      filter0.setFilter(add0);
      filter0.addInstanceListener(filter0);
      filter0.eventGeneratable(" not spprted(Flter)");
      AllFilter allFilter0 = new AllFilter();
      filter0.connectionNotification("instance", " not spprted(Flter)");
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.isOpaque();
      ClassAssigner classAssigner0 = new ClassAssigner();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      filter0.useDefaultVisual();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Appender appender0 = new Appender();
      Appender appender1 = new Appender();
      filter0.repaint(50, 50, 50, 50);
      Appender appender2 = new Appender();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus(50);
      filter0.acceptInstance(instanceEvent0);
      filter0.setFilter(allFilter0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      String string0 = DefaultEditorKit.selectParagraphAction;
      filter0.setFilter(add0);
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      instanceEvent0.setStatus(2);
      instanceEvent0.setStatus((-2594));
      filter0.acceptInstance(instanceEvent0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.getDebugGraphicsOptions();
      Locale locale0 = new Locale("~#)KNwh%tMh.r");
      Loader loader0 = new Loader();
      filter0.connectionNotification("", loader0);
      filter0.eventGeneratable("");
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      costBenefitAnalysis0.isPaintingTile();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      // Undeclared exception!
      try { 
        filter0.connectionNotification("b48[.'k", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.setFilter(add0);
      filter0.eventGeneratable(" not spprted(Flter)");
      AllFilter allFilter0 = new AllFilter();
      filter0.connectionNotification("instance", " not spprted(Flter)");
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ClassAssigner classAssigner0 = new ClassAssigner();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      filter0.useDefaultVisual();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Appender appender0 = new Appender();
      filter0.setFilter(allFilter0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      SMO sMO0 = new SMO();
      SelectedTag selectedTag0 = sMO0.getFilterType();
      selectedTag0.getRevision();
      selectedTag0.getRevision();
      add0.setAttributeType(selectedTag0);
      filter0.getVisual();
      filter0.disconnectionNotification("8034", instanceStreamToBatchMaker0);
      filter0.eventGeneratable("instance");
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      Associator associator0 = new Associator();
      associator0.getStructure("y1U,Pb`vt");
      TestSetEvent testSetEvent0 = new TestSetEvent(crossValidationFoldMaker0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
  }
}
