/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 21:47:44 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeShort((-1425));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)79;
      buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readUtf8CodePoint();
      realBufferedSource0.readHexadecimalUnsignedLong();
      realBufferedSource1.readUtf8Line();
      realBufferedSource0.request(100000000000000000L);
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = buffer0.writeShort(57);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)95;
      buffer1.write(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.readHexadecimalUnsignedLong();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.writeShort((byte)70);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)79;
      realBufferedSource0.buffer.write(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readUtf8CodePoint();
      realBufferedSource1.readHexadecimalUnsignedLong();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeShortLe((-1717986917));
      realBufferedSource0.request(100000000000000L);
      buffer1.sha512();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint((-2143755376));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.readByte();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      RealBufferedSource realBufferedSource4 = new RealBufferedSource(realBufferedSource1);
      RealBufferedSource realBufferedSource5 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      try { 
        realBufferedSource5.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = buffer0.writeShort(57);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)95;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSource0.buffer.write(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource1.indexOf((byte) (-1));
      byte byte0 = realBufferedSource1.readByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(1039L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-71);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      pipe0.sourceClosed = false;
      byteArray1[2] = (byte) (-126);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte)57;
      byteArray1[5] = (byte) (-32);
      byteArray1[6] = (byte)125;
      buffer0.write(byteArray1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readIntLe();
      realBufferedSource0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xe0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 252;
      Buffer buffer1 = buffer0.writeIntLe(252);
      realBufferedSource0.readUtf8CodePoint();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eT");
      Pipe pipe0 = new Pipe(4278190080L);
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource0.exhausted();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        ByteString.read(inputStream0, (byte)115);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeIntLe(252);
      realBufferedSource0.readUtf8CodePoint();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-119);
      realBufferedSource0.read(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-475L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -475
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Pipe pipe0 = new Pipe(2795L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eT");
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[0] = (byte)1;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)125;
      Buffer buffer1 = buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readLongLe();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, 1898, 1610612736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=1898 byteCount=1610612736
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Pipe pipe0 = new Pipe(1039L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eT");
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[0] = (byte)1;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)125;
      buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer0, (-631L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -631
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(1039L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eT");
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShort(2145704456);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[0] = (byte)1;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)125;
      buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      pipe0.sinkClosed = false;
      realBufferedSource0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x8
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pipe pipe0 = new Pipe(1039L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eT");
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 3L;
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        ByteString.read(inputStream0, (byte)1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSource0.indexOf((byte)111, (long) (byte)111, (long) (byte)111);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeString("okio.Base64", charset0);
      realBufferedSource0.readUtf8Line();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.readLong();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(hashingSource0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)111;
      byteArray1[1] = (byte)111;
      try { 
        realBufferedSource2.readFully(byteArray1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSource0.indexOf((byte)111, (long) (byte)111, (long) (byte)111);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      Pipe pipe0 = new Pipe(9L);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer1, byteString0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(source0);
      realBufferedSource1.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6f
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("n<U*%.E", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource0.select(options0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString1 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-76);
      try { 
        realBufferedSource1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      buffer0.readByteArray();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeString("KU(=:x#p#QGrEt~R+{", charset0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByte();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource3.readInt();
      long long0 = realBufferedSource0.indexOf((byte) (-63));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeIntLe(252);
      realBufferedSource0.readUtf8CodePoint();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      byte byte0 = (byte)115;
      byte byte1 = (byte)71;
      byte byte2 = (byte) (-51);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-101);
      byteArray0[6] = (byte) (-51);
      byteArray0[3] = (byte) (-101);
      try { 
        realBufferedSource0.skip((byte)71);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("okio.Okio$4", charset0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      ByteString byteString0 = realBufferedSource1.buffer.snapshot();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.rangeEquals((long) (-2362), byteString0, 0, 0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource1);
      realBufferedSource0.readByte();
      realBufferedSource2.readShortLe();
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8((long) (-2362));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2362
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = buffer0.writeIntLe(252);
      realBufferedSource0.readUtf8CodePoint();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("source == null", charset0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(inflaterSource0);
      Charset charset1 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("source == null", charset1);
      realBufferedSource1.indexOf(byteString0);
      realBufferedSource2.rangeEquals((-1L), byteString1);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource3.readFully(buffer1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      realBufferedSource0.readAll(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, 0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("n<U*%.E", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.rangeEquals((-1307L), byteString0, 110, 48);
      realBufferedSource0.readString(charset0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)80;
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, 2613, (-332));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=2613 byteCount=-332
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeIntLe(252);
      realBufferedSource0.readUtf8CodePoint();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-101);
      byteArray0[6] = (byte) (-51);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)115;
      ByteString.of(byteArray0);
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.select(options0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource1.buffer);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      try { 
        realBufferedSource3.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("n<U*%.E", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)121;
      byteArray0[8] = (byte)40;
      inflater0.inflate(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      realBufferedSource0.close();
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString(4L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(192);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.read(buffer0, 2L);
      String string0 = "\\v>=.HRz3";
      long long0 = 60L;
      // Undeclared exception!
      try { 
        buffer1.copyTo(realBufferedSource0.buffer, (-72057594037927936L), 60L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-72057594037927936 byteCount=60
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("v%ibvvD`ms(/SFR3", charset0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)115;
      ByteString.of(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.select(options0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (byte) (-51));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -51
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 229;
      buffer0.writeIntLe(229);
      realBufferedSource0.readInt();
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("n<U*%.E", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.snapshot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-32);
      Buffer buffer2 = buffer1.write(byteArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSource1.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xe0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeShortLe((-2263));
      realBufferedSource0.request(581L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeUtf8CodePoint((byte)45);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource1.readUtf8();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource2.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Pipe pipe0 = new Pipe(942L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      pipe0.sourceClosed = false;
      Buffer buffer1 = buffer0.writeShort(1852);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      long long0 = realBufferedSource0.readAll(buffer1);
      realBufferedSource0.readShort();
      long long1 = realBufferedSource0.indexOf((byte)107, 2L, 2L);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte byte0 = (byte)0;
      try { 
        realBufferedSource0.indexOf((byte)0, (long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("n<U*%.E", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      ByteString byteString0 = buffer1.snapshot();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.rangeEquals((long) 0, byteString0, (-2362), (-2362));
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource2.readByte();
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(realBufferedSource0.buffer);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteString.decodeBase64("c");
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = null;
      ByteString byteString2 = ByteString.encodeString("", charset0);
      byteStringArray0[2] = byteString2;
      byte[] byteArray0 = new byte[0];
      ByteString byteString3 = ByteString.of(byteArray0);
      byteStringArray0[3] = byteString3;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = null;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      realBufferedSource1.readFully(byteArray0);
      realBufferedSource0.readFully(byteArray0);
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeHexadecimalUnsignedLong((-1677L));
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer1, 65536L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(realBufferedSource0.buffer);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteString.decodeBase64("c");
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = null;
      ByteString byteString2 = ByteString.encodeString("", charset0);
      byteStringArray0[2] = byteString2;
      byte[] byteArray0 = new byte[0];
      ByteString byteString3 = ByteString.of(byteArray0);
      byteStringArray0[3] = byteString3;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = null;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource2.readByteString((-3850L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3850
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("n<U*%.E", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-101);
      realBufferedSource0.rangeEquals((long) (byte) (-101), byteString0, 2250, 0);
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(realBufferedSource0.buffer);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.exhausted();
      byte[] byteArray0 = realBufferedSource0.buffer.readByteArray();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Charset.defaultCharset();
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.buffer.writeString("HmacSHA1", charset0);
      realBufferedSource1.readUtf8Line();
      try { 
        realBufferedSource1.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("n<U*%.E", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x3c
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[8];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("%B'", charset0);
      byteString0.utf8();
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      buffer0.writeIntLe((byte)0);
      realBufferedSource0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)0, 1356L, 991L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1356 toIndex=991
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(realBufferedSource0.buffer);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.write(realBufferedSource0.buffer, 0L);
      Charset.defaultCharset();
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.readAll(realBufferedSource0.buffer);
      assertEquals(0L, long0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.rangeEquals(0L, byteString0);
      assertTrue(boolean0);
      
      try { 
        realBufferedSource0.readUtf8LineStrict(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("![Qk*:+", charset0);
      realBufferedSource0.indexOfElement(byteString0, 0L);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("source is closed", charset0);
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource1.indexOf(byteString0, 0L);
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource1.rangeEquals(2147483647L, byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(realBufferedSource0.buffer);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(realBufferedSource0.buffer);
      Charset.defaultCharset();
      try { 
        realBufferedSource0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(realBufferedSource0.buffer);
      int int0 = (-2144977831);
      realBufferedSource0.rangeEquals((long) (-2144977831), (ByteString) null, (-2144977831), 2146006699);
      realBufferedSource0.timeout();
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(2521L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)45;
      ByteString.of(byteArray0);
      realBufferedSource0.exhausted();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (int) (byte)1, (int) (byte) (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=1 byteCount=-15
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.readAll(realBufferedSource0.buffer);
      assertEquals(0L, long0);
      
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(0L, charset0);
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
      
      realBufferedSource0.require(0L);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.rangeEquals(1714L, (ByteString) null, (-2144977831), 1047);
      realBufferedSource0.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((-2200L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2200
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8(0L);
      String string0 = realBufferedSource0.toString();
      assertEquals("buffer([size=0])", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readFully(buffer0, 0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.skip(0L);
      assertNotSame(realBufferedSource1, realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("n<U*%.E", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x6e
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null, 32L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(119);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals(1348L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeIntLe(229);
      realBufferedSource0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)1, 1000000000000000L, (long) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1000000000000000 toIndex=1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.rangeEquals(7L, byteString0);
      try { 
        realBufferedSource0.readString(7L, (Charset) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[3];
      realBufferedSource0.readUtf8();
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.toString();
      assertEquals("buffer([size=0])", string0);
      
      buffer0.writeShort(102);
      try { 
        realBufferedSource0.skip(1261L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.read(buffer0, 0L);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      realBufferedSource0.readAll(buffer0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)110;
      // Undeclared exception!
      try { 
        realBufferedSource1.read(byteArray0, (int) (byte)85, 1908874353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=85 byteCount=1908874353
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSource0.read(buffer1, 98L);
      ByteString[] byteStringArray0 = new ByteString[5];
      ByteString[] byteStringArray1 = new ByteString[5];
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray1[0] = byteString0;
      ByteString byteString1 = ByteString.of(byteArray0);
      byteStringArray1[1] = byteString1;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("okio.Pipe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: okio.Pipe
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      buffer0.inputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.inputStream();
      realBufferedSource0.indexOf((byte)70);
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(71);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = realBufferedSource0.readByte();
      assertEquals((byte)71, byte0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("jQ`M", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      boolean boolean0 = realBufferedSource1.rangeEquals(15L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)0, (long) (byte)0, (-293L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.indexOf((byte)58, 8192L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.readUtf8Line();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)2, 10L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=10 toIndex=0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.rangeEquals((-2233L), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)111, (long) (byte)111, (long) (byte)111);
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (-215), 192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-215 byteCount=192
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = realBufferedSource0.rangeEquals(3150L, byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.close();
      // Undeclared exception!
      try { 
        realBufferedSource1.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = null;
      ByteString[] byteStringArray0 = new ByteString[2];
      String string0 = "*";
      // Undeclared exception!
      try { 
        realBufferedSource0.require((-1271L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1271
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        realBufferedSource1.read(byteArray0, (-491), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-491 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((-1L));
      realBufferedSource0.readAll(bufferedSink0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null, 828, 828);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeShort(13);
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = realBufferedSource0.readByteArray(0L);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeIntLe(257);
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.exhausted();
      long long0 = realBufferedSource0.readAll(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-2634));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readShort();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-3872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3872
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.writeUtf8CodePoint(96);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.exhausted();
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer2, (-595L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -595
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(10000000000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readShort();
      try { 
        realBufferedSource0.readByteString(3790L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(3607L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.md5(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      pipe0.sourceClosed = true;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement((ByteString) null, (-980L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeDecimalLong(5256L);
      realBufferedSource0.timeout();
      realBufferedSource0.readIntLe();
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.request(616L);
      try { 
        realBufferedSource0.readUtf8LineStrict(616L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.EMPTY;
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      realBufferedSource0.rangeEquals(1631L, byteString1, 2146491738, 110);
      realBufferedSource0.readByteArray();
      try { 
        realBufferedSource0.readByteArray(2319L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)38;
      realBufferedSource0.closed = false;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)121;
      ByteString byteString0 = ByteString.of(byteArray0);
      realBufferedSource0.rangeEquals(0L, byteString0, (int) (byte)0, (-1189));
      HashingSource.sha1(buffer0);
      hashingSource0.hash();
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSource0.buffer);
      long long0 = realBufferedSource0.readAll(hashingSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-3872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3872
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[8];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("%B'", charset0);
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)84;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[1] = byteString1;
      HashingSink hashingSink0 = HashingSink.hmacSha1(realBufferedSource0.buffer, byteString0);
      ByteString byteString2 = hashingSink0.hash();
      byteStringArray0[2] = byteString2;
      ByteString byteString3 = new ByteString(byteArray0);
      byteStringArray0[3] = byteString3;
      ByteString byteString4 = ByteString.encodeString("", charset0);
      byteStringArray0[4] = byteString4;
      ByteString byteString5 = ByteString.of(byteArray0);
      byteStringArray0[5] = byteString5;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString6 = realBufferedSource1.readByteString();
      byteStringArray0[6] = byteString6;
      ByteString byteString7 = ByteString.decodeBase64("");
      byteStringArray0[7] = byteString7;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-3872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3872
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.toString();
      try { 
        realBufferedSource0.skip(1261L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = new Buffer();
      long long0 = realBufferedSource0.read(buffer1, 100000L);
      long long1 = realBufferedSource0.indexOf((byte)124);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0);
      String string0 = "size=%s offset=%s byteCount=%s";
      // Undeclared exception!
      try { 
        Charset.forName("size=%s offset=%s byteCount=%s");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // size=%s offset=%s byteCount=%s
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      buffer0.writeIntLe(849);
      realBufferedSource0.request(2257L);
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeShort(63);
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll(realBufferedSource0.buffer);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.request(616L);
      assertFalse(boolean0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.request(0L);
      assertTrue(boolean0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      ByteString byteString0 = ByteString.decodeBase64("");
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = new Buffer();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.close();
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      long long0 = 2147483648L;
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer0, (-3872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3872
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.decodeBase64("already attached to a buffer");
      realBufferedSource0.indexOf(byteString0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-2524L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2524
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.EMPTY;
      Charset charset0 = Charset.defaultCharset();
      try { 
        realBufferedSource0.readString(100000000000000000L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeShort((-1));
      // Undeclared exception!
      try { 
        realBufferedSource0.readString(1L, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)94;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray((-1151L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1151
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 2257L;
      try { 
        realBufferedSource0.readByteArray(2581L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer1, (-3872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3872
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8(0L);
      // Undeclared exception!
      try { 
        realBufferedSource0.read((Buffer) null, 1809L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-9);
      buffer0.read(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      long long0 = (-3872L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.read(buffer0, 5256L);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-3872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3872
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-3874L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.EMPTY;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(source0);
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf(byteString0, (-304L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Pipe pipe0 = new Pipe(1039L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eT");
      pipe0.sinkClosed = false;
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)65;
      buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x47
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffer");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString0 = ByteString.decodeBase64("already attached to a buffer");
      realBufferedSource0.indexOf(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      long long0 = (-3872L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 32L;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, (-362L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha512(pipe_PipeSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      realBufferedSource0.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-86), (long) (byte) (-86));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-86 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-35), (-351L), (-3872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-351 toIndex=-3872
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)111, 1700L, (-2660L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1700 toIndex=-2660
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffer");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.decodeBase64("already attached to a buffer");
      realBufferedSource0.indexOf(byteString0);
      try { 
        realBufferedSource0.readUtf8(805L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString.decodeBase64("5THsR' }Brn;gC");
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.require(1631L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-3872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3872
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a b'ffer");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      ByteString.decodeBase64("already attached to a b'ffer");
      long long0 = 2299L;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null, 2299L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset.defaultCharset();
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      byteString0.indexOf(byteArray0, 39);
      try { 
        realBufferedSource0.readByteString((long) 39);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      try { 
        realBufferedSource0.readFully(buffer0, 2147483648L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)3, (long) (byte)3, 4L);
      realBufferedSource0.skip((-1L));
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset.defaultCharset();
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      byteString0.indexOf(byteArray0, 39);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (-114L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffer");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.decodeBase64("already attached to a buffer");
      long long0 = realBufferedSource0.indexOf(byteString0, 2299L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffer");
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOfElement(byteString0);
      realBufferedSource0.indexOfElement(byteString0, 10000000000000000L);
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      Source source0 = hashingSource0.delegate();
      HashingSource.sha1(source0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(source0);
      try { 
        realBufferedSource2.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = hashingSource0.hash();
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      try { 
        realBufferedSource0.readFully(buffer1, 6017L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffer");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 2163L;
      try { 
        realBufferedSource0.readUtf8LineStrict(2163L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "already attached to a buffer");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte) (-27));
      realBufferedSource0.readByteString();
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(gzipSource0);
      realBufferedSource1.inputStream();
      Timeout timeout0 = realBufferedSource0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Qd8EGTdm;8I");
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(255);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((-2612L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2612
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.close();
      byte byte0 = (byte)3;
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.rangeEquals(8L, byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      buffer0.writeInt(1013);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeShort(255);
      realBufferedSource0.request(9L);
      realBufferedSource0.toString();
      boolean boolean0 = realBufferedSource0.request(9L);
      assertTrue(buffer0.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-114);
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((long) (byte) (-114), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -114
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.close();
      byte byte0 = (byte) (-23);
      pipe0.sourceClosed = true;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-23), 3256L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.close();
      byte byte0 = (byte)3;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)3, (long) (byte)3, 32L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      long long0 = 0L;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(" content=");
      ByteString.of(byteBuffer0);
      byte[] byteArray0 = new byte[0];
      byteBuffer0.put(byteArray0);
      charset0.aliases();
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-114);
      buffer0.read(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.close();
      byte byte0 = (byte)3;
      pipe0.sourceClosed = true;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)3, 3256L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      InflaterSource inflaterSource1 = new InflaterSource(hashingSource0, inflater0);
      // Undeclared exception!
      try { 
        inflaterSource0.read(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
