/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 19:36:32 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Matrix matrix0 = denseVector0.toColumnMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("t1qD?eGKW,#l;]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 229.1068015;
      doubleArray1[2] = 197.00204;
      doubleArray1[3] = (-1487.5511);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 229.1068015;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1487.5511);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 197.00204;
      doubleArray3[5] = (-1487.5511);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-1487.5511);
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 197.00204;
      doubleArray4[4] = 229.1068015;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-1487.5511);
      doubleArray6[2] = 197.00204;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-1487.5511);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray0[6] = doubleArray7;
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      assertEquals(7, matrix1.rows());
      assertEquals(7, matrix1.columns());
      
      matrix0.copyOfColumns(2670);
      matrix0.infinityNorm();
      int int0 = matrix0.rows();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      double double0 = basic1DMatrix0.sum();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1001.0449374336);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 469.799;
      doubleArray2[5] = 1493.469399152394;
      doubleArray2[6] = 2814.0484562;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1001.0449374336);
      doubleArray3[1] = 1233.0953552;
      doubleArray3[2] = 469.799;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 469.799;
      doubleArray4[2] = 1233.0953552;
      doubleArray4[3] = 1233.0953552;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 1493.469399152394;
      doubleArray4[6] = 2814.0484562;
      doubleArray4[7] = (-1001.0449374336);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1233.0953552;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 1493.469399152394;
      doubleArray7[2] = (-1001.0449374336);
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 2814.0484562;
      doubleArray7[5] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 1233.0953552;
      doubleArray8[1] = 469.799;
      doubleArray8[2] = 1.0;
      doubleArray8[3] = 2814.0484562;
      doubleArray8[4] = 469.799;
      doubleArray8[5] = 469.799;
      doubleArray8[6] = 1233.0953552;
      doubleArray0[7] = doubleArray8;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      assertEquals(0, sparseMatrix0.columns());
      
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      DenseVector denseVector0 = DenseVector.zero(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, sparseVector0);
      sparseMatrix0.multiply(vector0);
      assertEquals(8, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-432.0070093661148);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (-167.4);
      doubleArray0[6] = (double) 6;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(6, 6, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(9, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft(3, (-1259132241));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..3][0..-1259132241].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 6;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(6, 6);
      int int1 = (-1793);
      double double0 = (-52.0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.sliceBottomRight((-1793), (-1793));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1793' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 354;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(354, 1, 1);
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow(354);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..353
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(4, 4, 1);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 1, 2.0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = matrix0.toColumnMajorSparseMatrix();
      matrix0.product();
      matrix0.blank();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      sparseVector0.spliterator();
      sparseVector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix1.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 253;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(253, 253, 253);
      // Undeclared exception!
      try { 
        basic1DMatrix0.foldRow(253, (VectorAccumulator) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '253' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double double0 = cCSMatrix0.sum();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = cCSMatrix0.toCSV();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(10, 10, 0);
      sparseMatrix0.removeFirstRow();
      int int0 = 33;
      // Undeclared exception!
      try { 
        sparseMatrix0.copyOfShape((-2263), 2266);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2263x2266
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      Matrix matrix0 = columnMajorSparseMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        matrix0.setColumn(9, (double) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Vector vector0 = basic2DMatrix0.getColumn(7);
      basic2DMatrix0.setRow(7, vector0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = 7.0;
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[8] = (double) 7;
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1062);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.setRow(1062, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1062. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1663.043086412;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-2935.99);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 1663.043086412;
      doubleArray2[3] = 1663.043086412;
      doubleArray2[4] = 1663.043086412;
      doubleArray2[5] = 1663.043086412;
      doubleArray2[6] = (-2935.99);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-2935.99);
      doubleArray3[2] = (-2935.99);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (-1858.155191187);
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = (-569.2122679072);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1663.043086412;
      doubleArray4[1] = (-569.2122679072);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-1858.155191187);
      doubleArray4[4] = 1663.043086412;
      doubleArray4[5] = (-2935.99);
      doubleArray0[3] = doubleArray4;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      double double0 = sparseMatrix0.manhattanNorm();
      assertEquals(14371.3115271432, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 1.0);
      int int0 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 2);
      denseMatrix0.toRowVector();
      int int1 = 1349;
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) sparseMatrix0, 2, 0, 0, 10, 1349, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 10
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 244;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(244, 244, 244);
      // Undeclared exception!
      try { 
        basic1DMatrix0.insert((Matrix) null, 1328, 244);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 30;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(30, (-1.0));
      int int1 = (-606);
      // Undeclared exception!
      try { 
        sparseMatrix0.set((-606), (-606), (-606));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-606' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 502;
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) cCSMatrix0, 502, 502);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 502 rows and 502 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 8;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 1.0);
      int int1 = 2;
      int int2 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 2);
      int int3 = 0;
      denseMatrix0.toRowVector();
      int int4 = 1349;
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) sparseMatrix0, 2, 0, 0, 2, 1349, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1349 rows and 2 cols at 0, 2 in a 8x8 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 1.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1391);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix0.equals((Matrix) columnMajorSparseMatrix0, 1.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldRow(2, vectorAccumulator0);
      columnMajorSparseMatrix0.setRow(1394, (Vector) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(17, 8, (-1935.8083));
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(79);
      boolean boolean0 = denseMatrix0.equals((Matrix) cCSMatrix0, (-1.0));
      assertEquals(17, denseMatrix0.rows());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.manhattanNorm();
      Vector vector0 = basic2DMatrix0.getColumn((-609));
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow((-609), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertRow(1, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1396);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      int int0 = 6;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-541.89)).when(vectorAccumulator0).accumulate();
      matrix0.foldRow(6, vectorAccumulator0);
      Matrix matrix1 = matrix0.insertRow(1000, (Vector) null);
      int int1 = 7;
      Matrix.zero(int0, int1);
      matrix1.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(9, 0, doubleArray0);
      MatrixMatrixOperation<String> matrixMatrixOperation0 = (MatrixMatrixOperation<String>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.toString();
      rowMajorSparseMatrix0.toCSV();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray((-383), (-383), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -383x-383
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4, 4);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      String string0 = denseMatrix0.mkString(numberFormat0);
      assertEquals("0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-27);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-432.0070093661148);
      doubleArray0[3] = (double) (-27);
      doubleArray0[4] = (double) (-27);
      int int0 = 1000;
      Vector vector0 = null;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1000, 1347);
      // Undeclared exception!
      columnMajorSparseMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 1642;
      int int1 = 5;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.longs();
      mockRandom0.setSeed(1642);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(1642, 5, 0.0, (Random) mockRandom0);
      mockRandom0.nextLong();
      Matrix matrix0 = columnMajorSparseMatrix0.blankOfShape(1642, 5);
      columnMajorSparseMatrix0.toMatrixMarket();
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      int int2 = 1381;
      Matrix matrix1 = columnMajorSparseMatrix0.copyOfColumns(1381);
      matrix1.norm();
      Matrix matrix2 = columnMajorSparseMatrix1.blank();
      Matrix matrix3 = Matrix.block(columnMajorSparseMatrix0, matrix0, matrix2, columnMajorSparseMatrix1);
      matrix2.toColumnVector();
      int int3 = 2;
      matrix3.ensureIndexesAreInBounds(int0, int3);
      matrix2.blankOfShape(int0, int1);
      Matrix matrix4 = columnMajorSparseMatrix1.power(int2);
      matrix4.toCSV();
      String string0 = "";
      matrix2.fail(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 922;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4064, 4064);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      // Undeclared exception!
      denseMatrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        Matrix.zero((-1030), (-4868));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1030x-4868
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.diagonalProduct();
      basic2DMatrix0.toBinary();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("L:d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SparseMatrix.identity(0);
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.min();
      matrix0.diagonalProduct();
      int[] intArray0 = new int[0];
      Matrix matrix1 = denseVector0.toDiagonalMatrix();
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = 6.0;
      doubleArray0[6] = (double) 6;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(6, 6, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = 6;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(1797);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3282);
      intArray0[1] = 1797;
      intArray0[2] = 1797;
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Matrix matrix0 = denseVector0.toColumnMatrix();
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 7;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 1.0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 2);
      denseMatrix0.toRowVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      denseMatrix0.transformRow(1, vectorFunction0);
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        sparseMatrix0.copyOfRows(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 6;
      doubleArray0[5] = 6.0;
      doubleArray0[6] = (double) 6;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-2795.307)).when(vectorAccumulator0).accumulate();
      matrix0.foldRow(6, vectorAccumulator0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      Matrix matrix1 = Matrix.zero(2439, 6);
      matrix0.toColumnVector();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator1).accumulate();
      matrix0.foldColumns(vectorAccumulator1);
      matrix0.trace();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix1.is(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(781, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.foldColumn(781, vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '781' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = basic2DMatrix0.foldColumns(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      double double0 = cCSMatrix0.trace();
      assertEquals(6.0, double0, 0.01);
      
      Matrix matrix0 = cCSMatrix0.multiply((double) 6);
      assertEquals(6, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 8);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(8, 2);
      int int0 = 0;
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) sparseMatrix0, 2, 0, 0, 8, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 2 cols at 0, 8 in a 8x8 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = 6.0;
      doubleArray0[6] = (double) 6;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(6, 6, doubleArray0);
      int[] intArray0 = new int[6];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(6, matrix0.rows());
      assertEquals(6, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.from1DArray(3, (-4), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 3x-4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 932;
      DenseVector denseVector0 = DenseVector.zero(932);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.subtract((double) 932);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.slice(932, 932, 932, 932);
      int int1 = (-1216);
      matrix0.toCSV();
      int int2 = (-4);
      basic2DMatrix0.ensureDimensionsAreCorrect((-1216), (-4));
      matrix0.toBinary();
      matrix1.transpose();
      String string0 = ".]";
      Vector.fromMatrixMarket(string0);
      denseVector0.toSparseVector();
      matrix1.diagonalProduct();
      basic2DMatrix0.columnMajorIterator();
      basic2DMatrix0.ensureIndexesAreInBounds(int2, int0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.diagonalProduct();
      basic2DMatrix0.insert(matrix0);
      matrix0.updateRow(int0, vectorFunction0);
      int int3 = 861;
      int int4 = (-1183);
      basic2DMatrix0.swapColumns(int3, int4);
      Matrix matrix2 = matrix0.removeLastColumn();
      int int5 = 221;
      int int6 = 6;
      Matrix matrix3 = matrix1.insert(matrix2, int0, int3, int5, int1, int6, int3);
      int int7 = 1518;
      basic2DMatrix0.getColumn(int7);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix4 = basic2DMatrix0.transformRow(int5, vectorFunction1);
      double double0 = 1.0;
      matrix3.divide(double0);
      Matrix matrix5 = null;
      matrix2.equals(matrix5, (double) int7);
      Matrix matrix6 = matrix4.copy();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      matrix6.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = ".";
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-9.8226042);
      doubleArray1[1] = (-4449.139260439448);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-4449.139260439448);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-4449.139260439448);
      doubleArray3[2] = (-9.8226042);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = (-4449.139260439448);
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (-9.8226042);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-9.8226042);
      doubleArray4[3] = (-4449.139260439448);
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 1.0;
      doubleArray4[7] = 1.0;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceBottomRight(5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [5..4][5..4].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 2635;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2635, 2635);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      matrix0.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      int int1 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInRow(int1, vectorProcedure0);
      denseMatrix0.toCSV();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(denseMatrix0, cCSMatrix0, matrix1, cCSMatrix0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldRow(int0, vectorAccumulator0);
      int int2 = 5;
      int int3 = 5;
      double double0 = 1812.00433;
      cCSMatrix0.set(int2, int3, double0);
      double double1 = (-2440.6);
      DenseVector denseVector0 = DenseVector.constant(int1, double1);
      denseVector0.set(int1, double1);
      Vector vector0 = denseVector0.copyOfLength(int1);
      denseMatrix0.multiply(vector0);
      Matrix matrix2 = cCSMatrix0.kroneckerProduct(matrix1);
      double double2 = 0.0;
      matrix0.divide(double2);
      matrix2.blank();
      matrix1.insert((Matrix) rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(48, 48);
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      matrix0.setAll(1582.075891932);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(6, mockRandom0);
      mockRandom0.nextDouble();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      basic2DMatrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 6;
      doubleArray0[5] = 6.0;
      doubleArray0[6] = (double) 6;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      Matrix.zero(2439, 2);
      Matrix matrix1 = matrix0.copy();
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      matrix1.mkString(numberFormat0, (String) null, "t1qD?eGKW,#l;]");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1396);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-541.89)).when(vectorAccumulator0).accumulate();
      matrix0.foldRow(6, vectorAccumulator0);
      Matrix matrix1 = Matrix.zero(6, (-2));
      int int0 = 8;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix1.updateRow(int0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1145;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 1145;
      doubleArray0[6] = (double) 6;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1145, 1145, 6, doubleArray0, (int[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        cCSMatrix0.determinant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DenseMatrix.constant(16, 16, 1.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1405);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      columnMajorSparseMatrix0.determinant();
      int int0 = (-1291);
      columnMajorSparseMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double double0 = cCSMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      
      Matrix matrix0 = cCSMatrix0.divide(0.0);
      assertTrue(matrix0.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        CCSMatrix.random(17, 2, (-2364.9676955), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 1);
      cCSMatrix0.setColumn(0, (double) 1);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4, 4);
      assertEquals(4, cCSMatrix0.columns());
      
      double double0 = cCSMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DenseMatrix.constant(8, 8, 1.0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      cCSMatrix0.power(1391);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      cCSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(1391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1392
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(1, 17, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.power(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1 does not equal to 17.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2179);
      DenseMatrix.fromCSV("7");
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.setRow(2179, 1.0);
      Matrix matrix0 = cCSMatrix0.shuffle();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix.identity(2179);
      CCSMatrix cCSMatrix1 = (CCSMatrix)matrix0.subtract((Matrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.ensureIndexesAreInBounds(2179, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2179' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2179);
      DenseMatrix.fromCSV("7");
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.setRow(2179, 1.0);
      Matrix matrix0 = cCSMatrix0.shuffle();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix.identity(2179);
      CCSMatrix cCSMatrix1 = (CCSMatrix)matrix0.multiply(Double.NEGATIVE_INFINITY);
      cCSMatrix0.multiply((double) 1384);
      int int0 = 1384;
      columnMajorSparseMatrix0.blankOfColumns(1384);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      BasicVector basicVector0 = (BasicVector)DenseVector.constant(1384, 1.0);
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorByMatrixMultiplication0.apply((DenseVector) basicVector0, (ColumnMajorSparseMatrix) cCSMatrix1);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow(2179, compressedVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      DenseVector denseVector0 = DenseVector.zero(900);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.maxInRow((-1260));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 611;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(2711, 611);
      // Undeclared exception!
      basic2DMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("7");
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      Matrix matrix0 = denseMatrix0.removeFirstColumn();
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      Matrix matrix1 = denseMatrix0.subtract(2038.547065454);
      assertNotNull(matrix1);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, matrix1.columns());
      assertEquals(1, matrix1.rows());
      
      denseMatrix0.hashCode();
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertFalse(denseMatrix0.equals((Object)matrix1));
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.foldColumn((-1870), vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1456, 1456, 1456);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1456, cCSMatrix0.rows());
      assertEquals(1456, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      
      Vector vector0 = Vector.constant(892, 1308.3310357593236);
      assertNotNull(vector0);
      assertEquals(892, vector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Vector vector1 = vector0.transform(vectorFunction0);
      assertNotNull(vector1);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertFalse(vector1.equals((Object)vector0));
      assertEquals(892, vector0.length());
      assertEquals(892, vector1.length());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(1456, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 892. Should be: 1456.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 14;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(14, 14, 14);
      assertNotNull(denseMatrix0);
      assertEquals(14, denseMatrix0.columns());
      assertEquals(14, denseMatrix0.rows());
      
      // Undeclared exception!
      try { 
        denseMatrix0.removeColumn((-3227));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..13
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(909);
      assertNotNull(cCSMatrix0);
      assertEquals(909, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(909, cCSMatrix0.cardinality());
      assertEquals(909, cCSMatrix0.columns());
      assertEquals(0.0011001100110011, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      Matrix matrix0 = cCSMatrix0.removeFirstColumn();
      int int0 = 3203;
      int int1 = 1366;
      matrix0.ensureIndexesAreInBounds(int0, int1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1386, 1386, doubleArray0);
      assertNotNull(denseMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1386, denseMatrix0.columns());
      assertEquals(1386, denseMatrix0.rows());
      
      Matrix matrix0 = Matrix.unit(1386, 1386);
      assertNotNull(matrix0);
      assertEquals(1386, matrix0.columns());
      assertEquals(1386, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1356, 1356);
      assertNotNull(cCSMatrix0);
      assertEquals(1356, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1356, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1356);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1356, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1356, cCSMatrix1.columns());
      assertEquals(7.374631268436578E-4, cCSMatrix1.density(), 0.01);
      assertEquals(1356, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = cCSMatrix1.equals(object0);
      assertFalse(boolean0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1356, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1356, cCSMatrix1.columns());
      assertEquals(7.374631268436578E-4, cCSMatrix1.density(), 0.01);
      assertEquals(1356, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("J.JYNAf8/<E&3Z,w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1356, 1356);
      assertNotNull(cCSMatrix0);
      assertEquals(1356, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1356, cCSMatrix0.columns());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1356);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(1356, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1356, cCSMatrix1.cardinality());
      assertEquals(7.374631268436578E-4, cCSMatrix1.density(), 0.01);
      assertEquals(1356, cCSMatrix1.columns());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = cCSMatrix1.equals(object0);
      assertFalse(boolean0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(1356, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1356, cCSMatrix1.cardinality());
      assertEquals(7.374631268436578E-4, cCSMatrix1.density(), 0.01);
      assertEquals(1356, cCSMatrix1.columns());
      
      // Undeclared exception!
      cCSMatrix1.setColumn(908, (double) 1356);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(30, (-2987.1592));
      assertNotNull(cCSMatrix0);
      assertEquals(0.03333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(30, cCSMatrix0.columns());
      assertEquals(30, cCSMatrix0.cardinality());
      assertEquals((-2987.1592), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(30, cCSMatrix0.rows());
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getColumn(2);
      assertNotNull(compressedVector0);
      assertEquals(0.03333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(30, cCSMatrix0.columns());
      assertEquals(30, cCSMatrix0.cardinality());
      assertEquals((-2987.1592), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(30, cCSMatrix0.rows());
      assertEquals(0.03333333333333333, compressedVector0.density(), 0.01);
      assertEquals(30, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BasicVector basicVector0 = (BasicVector)Vector.fromCollection(linkedList0);
      assertNotNull(basicVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, basicVector0.length());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insertRow(1, compressedVector0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.03333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(30, cCSMatrix0.columns());
      assertEquals(30, cCSMatrix0.cardinality());
      assertEquals((-2987.1592), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(30, cCSMatrix0.rows());
      assertEquals(0.03333333333333333, compressedVector0.density(), 0.01);
      assertEquals(30, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(31, cCSMatrix1.cardinality());
      assertEquals(30, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(31, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals((-2987.1592), cCSMatrix1.min(), 0.01);
      assertEquals(0.03333333333333333, cCSMatrix1.density(), 0.01);
      
      cCSMatrix0.setAll(578.52379459202);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(30, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(578.52379459202, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(900, cCSMatrix0.cardinality());
      assertEquals(30, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 1356;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(549, 1547.677);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1547.677, cCSMatrix0.max(), 0.01);
      assertEquals(549, cCSMatrix0.rows());
      assertEquals(0.0018214936247723133, cCSMatrix0.density(), 0.01);
      assertEquals(549, cCSMatrix0.cardinality());
      assertEquals(549, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getColumn(2);
      assertNotNull(compressedVector0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1547.677, cCSMatrix0.max(), 0.01);
      assertEquals(549, cCSMatrix0.rows());
      assertEquals(0.0018214936247723133, cCSMatrix0.density(), 0.01);
      assertEquals(549, cCSMatrix0.cardinality());
      assertEquals(549, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.0018214936247723133, compressedVector0.density(), 0.01);
      assertEquals(549, compressedVector0.length());
      
      // Undeclared exception!
      cCSMatrix0.insertRow(2, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      Matrix matrix0 = basic2DMatrix0.divide(10);
      assertNotNull(matrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 1356;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1356);
      assertNotNull(denseMatrix0);
      assertEquals(1356, denseMatrix0.rows());
      assertEquals(1356, denseMatrix0.columns());
      
      Vector vector0 = denseMatrix0.toRowVector();
      assertNotNull(vector0);
      assertEquals(1356, denseMatrix0.rows());
      assertEquals(1356, denseMatrix0.columns());
      assertEquals(1356, vector0.length());
      
      int int1 = 0;
      int int2 = 1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 0, (Random) mockRandom0);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      assertNotNull(rowMajorSparseMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      
      int int3 = (-1364);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) rowMajorSparseMatrix0, 1, 1356, (-1364), 1, (-1364), 470);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1364x470
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 2);
      assertNotNull(sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      
      DenseVector denseVector0 = DenseVector.unit(4397);
      assertNotNull(denseVector0);
      assertEquals(4397, denseVector0.length());
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertNotNull(matrix0);
      assertEquals(4397, denseVector0.length());
      assertEquals(1, matrix0.columns());
      assertEquals(4397, matrix0.rows());
      
      boolean boolean0 = sparseMatrix0.equals(matrix0, 372.817);
      assertFalse(boolean0);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(4397, denseVector0.length());
      assertEquals(1, matrix0.columns());
      assertEquals(4397, matrix0.rows());
      
      Matrix matrix1 = sparseMatrix0.add(0.0);
      assertNotNull(matrix1);
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix1.equals((Object)matrix0));
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(2, matrix1.columns());
      assertEquals(2, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(26, 26, 1.0);
      assertNotNull(denseMatrix0);
      assertEquals(26, denseMatrix0.rows());
      assertEquals(26, denseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(26, 1.0);
      assertNotNull(cCSMatrix0);
      assertEquals(26, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.038461538461538464, cCSMatrix0.density(), 0.01);
      assertEquals(26, cCSMatrix0.columns());
      assertEquals(26, cCSMatrix0.cardinality());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 26);
      assertNotNull(sparseMatrix0);
      assertNotSame(sparseMatrix0, cCSMatrix0);
      assertFalse(sparseMatrix0.equals((Object)cCSMatrix0));
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(26, sparseMatrix0.columns());
      
      Vector vector0 = denseMatrix0.toRowVector();
      assertNotNull(vector0);
      assertEquals(26, denseMatrix0.rows());
      assertEquals(26, denseMatrix0.columns());
      assertEquals(26, vector0.length());
      
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) cCSMatrix0, 53, 7, 7, 26, 881, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 53, 7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(1388, 1388);
      assertNotNull(basic1DMatrix0);
      assertEquals(1388, basic1DMatrix0.columns());
      assertEquals(1388, basic1DMatrix0.rows());
      
      // Undeclared exception!
      basic1DMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 8;
      int int1 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 2);
      assertNotNull(sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.insert((Matrix) sparseMatrix0, (-17), 27, 892, 0, 17, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 892, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(317, 317);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0031545741324921135, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(317, cCSMatrix0.rows());
      assertEquals(317, cCSMatrix0.cardinality());
      assertEquals(317.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(317, cCSMatrix0.columns());
      
      // Undeclared exception!
      cCSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 1.0);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      assertNotNull(cCSMatrix0);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(8, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, matrix0.columns());
      assertEquals(8, matrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom(8);
      assertNotNull(mockRandom0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(8, mockRandom0);
      assertNotNull(basic1DMatrix0);
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(8, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = (Basic1DMatrix)ooPlaceMatricesSubtraction0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (DenseMatrix) basic1DMatrix0);
      assertNotNull(basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(8, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix1.rows());
      assertEquals(8, basic1DMatrix1.columns());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(8, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(8, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(8, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      
      boolean boolean0 = cCSMatrix1.equals((Matrix) cCSMatrix0, 1.0);
      assertFalse(boolean0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(8, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(8, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(8, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      
      CCSMatrix cCSMatrix2 = new CCSMatrix(885, 8, 222);
      assertNotNull(cCSMatrix2);
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(885, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.density(), 0.01);
      assertEquals(8, cCSMatrix2.columns());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.removeRow(2905);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(879, (-3020.174282));
      assertNotNull(denseVector0);
      assertEquals(879, denseVector0.length());
      
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertNotNull(matrix0);
      assertEquals(879, denseVector0.length());
      assertEquals(879, matrix0.columns());
      assertEquals(879, matrix0.rows());
      
      Matrix matrix1 = matrix0.blankOfRows(13);
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix1.equals((Object)matrix0));
      assertEquals(879, denseVector0.length());
      assertEquals(879, matrix0.columns());
      assertEquals(879, matrix0.rows());
      assertEquals(879, matrix1.columns());
      assertEquals(13, matrix1.rows());
      
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 1.0);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.cardinality());
      
      byte[] byteArray0 = ((Basic2DMatrix) denseMatrix0).toBinary();
      assertNotNull(byteArray0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(822, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("7");
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom(214L);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(4, 822, mockRandom0);
      assertNotNull(matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.rows());
      assertEquals(822, matrix0.columns());
      
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow(2179);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      cCSMatrix0.swapRows((-2523), (-2523));
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn((-2523));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2523
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix.zero(968, 968);
      basic1DMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = basic2DMatrix0.non(advancedMatrixPredicate0);
      assertTrue(boolean0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 8);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.removeLastColumn();
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(8, cCSMatrix1.rows());
      assertEquals(7, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32, 32);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(32, cCSMatrix0.columns());
      assertEquals(32, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateRow(32, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1456, 1456);
      assertNotNull(cCSMatrix0);
      assertEquals(1456, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6.868131868131869E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1456, cCSMatrix0.rows());
      assertEquals(1456, cCSMatrix0.columns());
      assertEquals(1456.0, cCSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(1456, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1457
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "z6^K`G`?_gjS";
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      
      int int0 = (-1757232363);
      cCSMatrix0.swapColumns((-1021), (-1021));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1356, 1356);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1356, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1356, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1356);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1356, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(1356, cCSMatrix1.cardinality());
      assertEquals(7.374631268436578E-4, cCSMatrix1.density(), 0.01);
      assertEquals(1356, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = cCSMatrix1.equals((Object) cCSMatrix0);
      assertFalse(boolean0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1356, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1356, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1356, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(1356, cCSMatrix1.cardinality());
      assertEquals(7.374631268436578E-4, cCSMatrix1.density(), 0.01);
      assertEquals(1356, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("J.JYNAf8/<E&3Z,w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 8);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(18, 2);
      assertNotNull(sparseMatrix0);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(18, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      
      String string0 = sparseMatrix0.mkString("+(f6'_", "daURH23(V");
      assertNotNull(string0);
      assertEquals("0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_0.000daURH23(V0.000+(f6'_", string0);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(2, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(18, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) sparseMatrix0, 2, 0, 0, 8, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 2 cols at 0, 8 in a 8x8 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateRow(8, vectorFunction0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Vector vector0 = basic2DMatrix0.getColumn(1153);
      assertNotNull(vector0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertNotNull(decimalFormatSymbols0);
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      
      decimalFormatSymbols0.setMinusSign('X');
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('X', decimalFormatSymbols0.getMinusSign());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      
      DecimalFormat decimalFormat0 = new DecimalFormat("Wrong slice range: [", decimalFormatSymbols0);
      assertNotNull(decimalFormat0);
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('X', decimalFormatSymbols0.getMinusSign());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("Wrong slice range: [#", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("Wrong slice range: [", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("XWrong slice range: [", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("Wrong slice range: [#", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      
      String string0 = basic1DMatrix0.mkString((NumberFormat) decimalFormat0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('X', decimalFormatSymbols0.getMinusSign());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("Wrong slice range: [#", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("Wrong slice range: [", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("XWrong slice range: [", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("Wrong slice range: [#", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 2179;
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("7");
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        denseMatrix0.minInColumn(2179);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = basic1DMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(1, 1);
      assertNotNull(cRSMatrix0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.cardinality());
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.toSparseMatrix();
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertSame(cRSMatrix2, cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix2.columns());
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertEquals(1.0, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(1, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(1, cRSMatrix2.rows());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate1).test(anyInt() , anyInt());
      boolean boolean1 = cRSMatrix1.is(matrixPredicate1);
      assertFalse(boolean1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Matrix matrix0 = Matrix.from1DArray(5, 5, (double[]) null);
      assertNotNull(matrix0);
      assertEquals(5, matrix0.columns());
      assertEquals(5, matrix0.rows());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = matrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(5, matrix0.columns());
      assertEquals(5, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.is((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-443.3301155)).when(matrixAccumulator0).accumulate();
      double double0 = basic2DMatrix0.fold(matrixAccumulator0);
      assertEquals((-443.3301155), double0, 0.01);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = basic2DMatrix0.non(advancedMatrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int0 = 590;
      int int1 = 464;
      Matrix matrix0 = Matrix.constant(590, 464, 590);
      assertNotNull(matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(464, matrix0.columns());
      assertEquals(590, matrix0.rows());
      
      basic2DMatrix0.setRow(464, (-225.336999374974));
      assertNotSame(basic2DMatrix0, matrix0);
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("real");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(10, 10);
      assertNotNull(sparseMatrix0);
      assertEquals(10, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(10, sparseMatrix0.cardinality());
      assertEquals(0.1, sparseMatrix0.density(), 0.01);
      assertEquals(10, sparseMatrix0.rows());
      assertEquals(10.0, sparseMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseMatrix0.transpose();
      assertNotNull(cCSMatrix0);
      assertEquals(10, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(10, sparseMatrix0.cardinality());
      assertEquals(0.1, sparseMatrix0.density(), 0.01);
      assertEquals(10, sparseMatrix0.rows());
      assertEquals(10.0, sparseMatrix0.max(), 0.01);
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(10.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(0.1, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.cardinality());
      
      Matrix.identity(120);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      assertNotNull(ooPlaceKroneckerProduct0);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Matrix matrix0 = ooPlaceKroneckerProduct0.applyCommon(basic2DMatrix0, basic2DMatrix0);
      assertNotNull(matrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      double double0 = matrix0.maxInColumn(5);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(basic2DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2173);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("7");
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      cCSMatrix0.setRow(2173, 1.0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.shuffle();
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      
      int int0 = cCSMatrix1.rank();
      assertEquals(0, int0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(1, 1);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      boolean boolean0 = cRSMatrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.toSparseMatrix();
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix0, cRSMatrix2);
      assertSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertEquals(1, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(1.0, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(1, cRSMatrix2.columns());
      assertEquals(1, cRSMatrix2.cardinality());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertNotNull(cCSMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.hadamardProduct(basic1DMatrix0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        cCSMatrix1.iteratorOfColumn(737);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 737
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 1.1660655208119628);
      assertNotNull(cCSMatrix0);
      assertEquals(1.1660655208119628, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(549);
      assertNotNull(cCSMatrix0);
      assertEquals(549, cCSMatrix0.cardinality());
      assertEquals(0.0018214936247723133, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(549, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(549, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction1);
      assertFalse(ooPlaceMatricesSubtraction1.equals((Object)ooPlaceMatricesSubtraction0));
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction2 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction2);
      assertFalse(ooPlaceMatricesSubtraction2.equals((Object)ooPlaceMatricesSubtraction0));
      assertFalse(ooPlaceMatricesSubtraction2.equals((Object)ooPlaceMatricesSubtraction1));
      
      Matrix matrix0 = ooPlaceMatricesSubtraction2.applySimple((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      matrix0.equals((Matrix) cCSMatrix0, 2150.90174874994);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 8);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(18, 18);
      assertNotNull(sparseMatrix0);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(18, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(18, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      try { 
        sparseMatrix0.foldRows(vectorAccumulator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = basic1DMatrix0.foldRows(vectorAccumulator0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2173);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("7");
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2173, 1715.2);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(4.601932811780948E-4, cCSMatrix1.density(), 0.01);
      assertEquals(2173, cCSMatrix1.columns());
      assertEquals(1715.2, cCSMatrix1.max(), 0.01);
      assertEquals(2173, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2173, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      
      int int0 = denseMatrix0.rank();
      assertEquals(1, int0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2173);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("7");
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      cCSMatrix0.setRow(2173, 1715.150814);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.shuffle();
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      
      int int0 = denseMatrix0.rank();
      assertEquals(1, int0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 6;
      doubleArray0[5] = 6.0;
      doubleArray0[6] = (double) 6;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 28);
      assertNotNull(sparseMatrix0);
      assertEquals(28, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(6, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(43, 2, mockRandom0);
      assertNotNull(basic2DMatrix0);
      assertEquals(2, basic2DMatrix0.columns());
      assertEquals(43, basic2DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) sparseMatrix0, 0, 26, (-1086), 2004, 520, 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1086, 2004
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.random(2, 2, mockRandom0);
      assertNotNull(matrix0);
      assertEquals(2, matrix0.rows());
      assertEquals(2, matrix0.columns());
      
      Matrix matrix1 = matrix0.shuffle();
      assertNotNull(matrix1);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(2, matrix0.rows());
      assertEquals(2, matrix0.columns());
      assertEquals(2, matrix1.columns());
      assertEquals(2, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 8);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 8);
      assertNotNull(sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.columns());
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)sparseMatrix0.shuffle();
      assertNotNull(cCSMatrix0);
      assertNotSame(sparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, sparseMatrix0);
      assertTrue(cCSMatrix0.equals((Object)sparseMatrix0));
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(8, sparseMatrix0.columns());
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      
      int int0 = 0;
      denseMatrix0.setRow(0, (double) 0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) sparseMatrix0, 2, 0, 0, 8, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 2 cols at 0, 8 in a 8x8 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = basic2DMatrix0.transform(matrixFunction0);
      assertNotNull(matrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2173);
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      cCSMatrix0.setRow(2173, 1715.150814);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.shuffle();
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.columns());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix1.transpose();
      assertNotNull(cRSMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transform(matrixFunction0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 1.0);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      assertNotNull(cCSMatrix0);
      assertEquals(8, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      boolean boolean0 = cCSMatrix0.equals((Matrix) cCSMatrix0, 1.0);
      assertTrue(boolean0);
      assertEquals(8, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 1, 1);
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert((Matrix) denseMatrix0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(1, cCSMatrix1.cardinality());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMaket");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      Matrix matrix0 = basic2DMatrix0.insert((Matrix) basic2DMatrix0);
      assertNotNull(matrix0);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 8);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      int int0 = 2;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = denseMatrix0.toColumnMajorSparseMatrix();
      assertNotNull(columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, columnMajorSparseMatrix0.columns());
      assertEquals(8.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(64, columnMajorSparseMatrix0.cardinality());
      assertEquals(8, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(4078, 2);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertEquals(2.452182442373713E-4, cCSMatrix1.density(), 0.01);
      assertEquals(2.0, cCSMatrix1.max(), 0.01);
      assertEquals(4078, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(4078, cCSMatrix1.columns());
      assertEquals(4078, cCSMatrix1.cardinality());
      
      int int1 = denseMatrix0.rank();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow(2640);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 2076;
      int int1 = 553;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2076, 2076, 553);
      assertNotNull(rowMajorSparseMatrix0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(2076, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2076, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      int int2 = (-2818);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn((-2818), (double) (-2818));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2818' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("7");
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      MatrixDecompositor matrixDecompositor0 = denseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertNotNull(matrixDecompositor0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      double double0 = denseMatrix0.maxInRow(0);
      assertEquals(7.0, double0, 0.01);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      
      Matrix matrix0 = denseMatrix0.removeFirstColumn();
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      Matrix matrix1 = denseMatrix0.kroneckerProduct(matrix0);
      assertNotNull(matrix1);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, denseMatrix0);
      assertNotSame(matrix1, matrix0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix1.rows());
      assertEquals(0, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(363, 359.548421121555);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(363, cCSMatrix0.rows());
      assertEquals(359.548421121555, cCSMatrix0.max(), 0.01);
      assertEquals(363, cCSMatrix0.cardinality());
      assertEquals(363, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0027548209366391185, cCSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        Matrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '364' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 7, 1.0);
      assertNotNull(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 1.0);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert((Matrix) denseMatrix0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(8, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(8, cCSMatrix1.columns());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.890625, cCSMatrix1.density(), 0.01);
      assertEquals(8, cCSMatrix1.rows());
      assertEquals(57, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 7;
      doubleArray1[2] = (-52.0);
      doubleArray1[3] = (double) 7;
      doubleArray1[4] = (double) 7;
      doubleArray1[5] = 1.1102230246251565E-14;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = (double) 8;
      doubleArray1[8] = (double) 8;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(9, basic2DMatrix0.columns());
      
      boolean boolean0 = denseMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertEquals(8, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      
      BasicVector basicVector0 = (BasicVector)denseMatrix0.toRowVector();
      assertNotNull(basicVector0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertEquals(8, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, basicVector0.length());
      
      double double0 = cCSMatrix0.determinant();
      assertEquals(1.0, double0, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(8, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.removeFirstColumn();
      assertNotNull(basic2DMatrix1);
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(9, basic2DMatrix0.columns());
      assertEquals(8, basic2DMatrix1.columns());
      assertEquals(1, basic2DMatrix1.rows());
      
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) basic2DMatrix0, (-1), 48, 32, 353);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1, 48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1166);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1166, columnMajorSparseMatrix0.rows());
      assertEquals(1166, columnMajorSparseMatrix0.columns());
      assertEquals(8.576329331046312E-4, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1166, columnMajorSparseMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn(1166, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1165
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(7, 7, 1.0);
      assertNotNull(denseMatrix0);
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 7);
      assertNotNull(cCSMatrix0);
      assertEquals(7, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(7.0, cCSMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert((Matrix) denseMatrix0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(7.0, cCSMatrix0.max(), 0.01);
      assertEquals(49, cCSMatrix1.cardinality());
      assertEquals(7, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(7, cCSMatrix1.columns());
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.removeFirstColumn();
      assertNotNull(basic2DMatrix0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(6, basic2DMatrix0.columns());
      assertEquals(7, basic2DMatrix0.rows());
      
      BasicVector basicVector0 = (BasicVector)Vector.unit(173);
      assertNotNull(basicVector0);
      assertEquals(173, basicVector0.length());
      
      BasicVector basicVector1 = (BasicVector)basicVector0.divide(7);
      assertNotNull(basicVector1);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, basicVector0);
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertEquals(173, basicVector0.length());
      assertEquals(173, basicVector1.length());
      
      BasicVector basicVector2 = (BasicVector)DenseVector.constant(173, (-1331.1817));
      assertNotNull(basicVector2);
      assertNotSame(basicVector2, basicVector0);
      assertNotSame(basicVector2, basicVector1);
      assertFalse(basicVector2.equals((Object)basicVector0));
      assertFalse(basicVector2.equals((Object)basicVector1));
      assertEquals(173, basicVector2.length());
      
      BasicVector basicVector3 = (BasicVector)basicVector1.subtract((Vector) basicVector2);
      assertNotNull(basicVector3);
      assertNotSame(basicVector0, basicVector3);
      assertNotSame(basicVector0, basicVector2);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, basicVector0);
      assertNotSame(basicVector1, basicVector2);
      assertNotSame(basicVector1, basicVector3);
      assertNotSame(basicVector2, basicVector0);
      assertNotSame(basicVector2, basicVector3);
      assertNotSame(basicVector2, basicVector1);
      assertNotSame(basicVector3, basicVector0);
      assertNotSame(basicVector3, basicVector2);
      assertNotSame(basicVector3, basicVector1);
      assertFalse(basicVector0.equals((Object)basicVector2));
      assertFalse(basicVector0.equals((Object)basicVector1));
      assertFalse(basicVector1.equals((Object)basicVector0));
      assertFalse(basicVector1.equals((Object)basicVector2));
      assertFalse(basicVector2.equals((Object)basicVector0));
      assertFalse(basicVector2.equals((Object)basicVector1));
      assertFalse(basicVector3.equals((Object)basicVector0));
      assertFalse(basicVector3.equals((Object)basicVector2));
      assertFalse(basicVector3.equals((Object)basicVector1));
      assertEquals(173, basicVector0.length());
      assertEquals(173, basicVector1.length());
      assertEquals(173, basicVector2.length());
      assertEquals(173, basicVector3.length());
      
      // Undeclared exception!
      try { 
        cCSMatrix1.insertColumn(173, basicVector3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(245, 887, 887);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(245, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(887, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector0 = (CompressedVector)Vector.fromMap(hashMap0, 887);
      assertNotNull(compressedVector0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(887, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn((-1214), compressedVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..886
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = basic1DMatrix0.non(matrixPredicate0);
      assertFalse(boolean0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      cRSMatrix0.hashCode();
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.transpose();
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(7, 7, 1.0);
      assertNotNull(denseMatrix0);
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 7);
      assertNotNull(cCSMatrix0);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert((Matrix) denseMatrix0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(7, cCSMatrix1.columns());
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(7, cCSMatrix1.rows());
      assertEquals(49, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      
      double double0 = cCSMatrix0.determinant();
      assertEquals(823543.0, double0, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseMatrix0.transpose();
      assertNotNull(basic2DMatrix0);
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix0));
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, basic2DMatrix0.columns());
      assertEquals(7, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      assertNotNull(ooPlaceVectorHadamardProduct0);
      
      SparseVector sparseVector0 = SparseVector.zero(8);
      assertNotNull(sparseVector0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      
      SparseVector sparseVector1 = sparseVector0.toSparseVector();
      assertNotNull(sparseVector1);
      assertSame(sparseVector0, sparseVector1);
      assertSame(sparseVector1, sparseVector0);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(8, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector1);
      assertNotNull(compressedVector0);
      assertNotSame(sparseVector0, compressedVector0);
      assertSame(sparseVector0, sparseVector1);
      assertSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(compressedVector0, sparseVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertTrue(compressedVector0.equals((Object)sparseVector1));
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(8, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.divide((-2655.5795281381));
      assertNotNull(compressedVector1);
      assertNotSame(sparseVector0, compressedVector1);
      assertNotSame(sparseVector0, compressedVector0);
      assertSame(sparseVector0, sparseVector1);
      assertNotSame(sparseVector1, compressedVector1);
      assertSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(compressedVector0, sparseVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, sparseVector1);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(sparseVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector0.equals((Object)sparseVector1));
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(compressedVector1.equals((Object)sparseVector1));
      assertTrue(compressedVector1.equals((Object)sparseVector0));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(8, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(8, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      BasicVector basicVector0 = (BasicVector)DenseVector.constant(37, (-1253.98));
      assertNotNull(basicVector0);
      assertEquals(37, basicVector0.length());
      
      CompressedVector compressedVector2 = (CompressedVector)sparseVector1.subtract((Vector) compressedVector0);
      assertNotNull(compressedVector2);
      assertNotSame(sparseVector0, compressedVector1);
      assertNotSame(sparseVector0, compressedVector2);
      assertNotSame(sparseVector0, compressedVector0);
      assertSame(sparseVector0, sparseVector1);
      assertNotSame(sparseVector1, compressedVector1);
      assertSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector2);
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(compressedVector0, sparseVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, sparseVector0);
      assertNotSame(compressedVector2, sparseVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(sparseVector0.equals((Object)compressedVector1));
      assertTrue(sparseVector1.equals((Object)compressedVector0));
      assertTrue(sparseVector1.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)sparseVector1));
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)sparseVector0));
      assertTrue(compressedVector2.equals((Object)sparseVector1));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(8, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(8, compressedVector2.length());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 30);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(30, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      CompressedVector compressedVector3 = (CompressedVector)sparseVector1.shuffle();
      assertNotNull(compressedVector3);
      assertNotSame(sparseVector0, compressedVector3);
      assertNotSame(sparseVector0, compressedVector1);
      assertNotSame(sparseVector0, compressedVector2);
      assertNotSame(sparseVector0, compressedVector0);
      assertSame(sparseVector0, sparseVector1);
      assertNotSame(sparseVector1, compressedVector3);
      assertNotSame(sparseVector1, compressedVector1);
      assertSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector2);
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(compressedVector3, sparseVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, sparseVector0);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(sparseVector0.equals((Object)compressedVector1));
      assertTrue(sparseVector0.equals((Object)compressedVector2));
      assertTrue(sparseVector1.equals((Object)compressedVector0));
      assertTrue(sparseVector1.equals((Object)compressedVector1));
      assertTrue(sparseVector1.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)sparseVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)sparseVector1));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(8, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(8, compressedVector3.length());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insertColumn(8, compressedVector3);
      assertNotNull(cCSMatrix1);
      assertNotSame(sparseVector0, compressedVector3);
      assertNotSame(sparseVector0, compressedVector1);
      assertNotSame(sparseVector0, compressedVector2);
      assertNotSame(sparseVector0, compressedVector0);
      assertSame(sparseVector0, sparseVector1);
      assertNotSame(sparseVector1, compressedVector3);
      assertNotSame(sparseVector1, compressedVector1);
      assertSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector2);
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(compressedVector3, sparseVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, sparseVector0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(sparseVector0.equals((Object)compressedVector3));
      assertTrue(sparseVector0.equals((Object)compressedVector1));
      assertTrue(sparseVector0.equals((Object)compressedVector2));
      assertTrue(sparseVector1.equals((Object)compressedVector0));
      assertTrue(sparseVector1.equals((Object)compressedVector3));
      assertTrue(sparseVector1.equals((Object)compressedVector1));
      assertTrue(sparseVector1.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)sparseVector0));
      assertTrue(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertTrue(compressedVector3.equals((Object)sparseVector1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(8, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(30, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, compressedVector3.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(8, compressedVector3.length());
      assertEquals(31, cCSMatrix1.columns());
      assertEquals(8, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("1,800%null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(21);
      assertNotNull(sparseVector0);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(21, sparseVector0.length());
      
      SparseVector sparseVector1 = sparseVector0.toSparseVector();
      assertNotNull(sparseVector1);
      assertSame(sparseVector0, sparseVector1);
      assertSame(sparseVector1, sparseVector0);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(21, sparseVector0.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(21, sparseVector1.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      assertNotNull(ooPlaceVectorHadamardProduct0);
      
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceVectorHadamardProduct0.apply(sparseVector1, sparseVector1);
      assertNotNull(compressedVector0);
      assertNotSame(sparseVector0, compressedVector0);
      assertSame(sparseVector0, sparseVector1);
      assertSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, sparseVector1);
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(compressedVector0.equals((Object)sparseVector1));
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(21, sparseVector0.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(21, sparseVector1.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(21, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)sparseVector1.divide(7.771561172376096E-14);
      assertNotNull(compressedVector1);
      assertNotSame(sparseVector0, compressedVector0);
      assertSame(sparseVector0, sparseVector1);
      assertNotSame(sparseVector0, compressedVector1);
      assertSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector1);
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, sparseVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(sparseVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector1.equals((Object)sparseVector0));
      assertTrue(compressedVector1.equals((Object)sparseVector1));
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(21, sparseVector0.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(21, sparseVector1.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(21, compressedVector1.length());
      
      BasicVector basicVector0 = (BasicVector)DenseVector.constant(21, 21);
      assertNotNull(basicVector0);
      assertEquals(21, basicVector0.length());
      
      BasicVector basicVector1 = (BasicVector)basicVector0.subtract((Vector) sparseVector1);
      assertNotNull(basicVector1);
      assertNotSame(sparseVector0, compressedVector0);
      assertSame(sparseVector0, sparseVector1);
      assertNotSame(sparseVector0, compressedVector1);
      assertSame(sparseVector1, sparseVector0);
      assertNotSame(sparseVector1, compressedVector1);
      assertNotSame(sparseVector1, compressedVector0);
      assertNotSame(basicVector0, basicVector1);
      assertNotSame(basicVector1, basicVector0);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(sparseVector0.equals((Object)compressedVector1));
      assertTrue(sparseVector1.equals((Object)compressedVector0));
      assertTrue(sparseVector1.equals((Object)compressedVector1));
      assertTrue(basicVector1.equals((Object)basicVector0));
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(21, sparseVector0.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(21, sparseVector1.length());
      assertEquals(0.0, sparseVector1.density(), 0.01);
      assertEquals(21, basicVector0.length());
      assertEquals(21, basicVector1.length());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 2277);
      assertNotNull(cCSMatrix0);
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertEquals(2277.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(8, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 21. Should be: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1456, 1456, 1456);
      assertNotNull(cCSMatrix0);
      assertEquals(1456, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1456, cCSMatrix0.columns());
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix cookdinate real general ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown format: cookdinate.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      MatrixDecompositor matrixDecompositor0 = basic1DMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertNotNull(matrixDecompositor0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.rotate();
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(2, 2, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      
      Matrix matrix0 = basic1DMatrix0.rotate();
      assertNotNull(matrix0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(2, matrix0.rows());
      assertEquals(2, matrix0.columns());
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      MatrixInverter matrixInverter0 = matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertNotNull(matrixInverter0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals(2, matrix0.rows());
      assertEquals(2, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(7, 7, 7);
      assertNotNull(denseMatrix0);
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 7);
      assertNotNull(cCSMatrix0);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7.0, cCSMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert((Matrix) denseMatrix0);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7.0, cCSMatrix0.max(), 0.01);
      assertEquals(7, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(7, cCSMatrix1.rows());
      assertEquals(49, cCSMatrix1.cardinality());
      assertEquals(7.0, cCSMatrix1.max(), 0.01);
      
      double double0 = cCSMatrix0.determinant();
      assertEquals(823543.0, double0, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7.0, cCSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        denseMatrix0.minInRow(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("         ");
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic2DMatrix.zero((-2111), (-2111));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(10, 10, 10);
      assertNotNull(cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      int int0 = 1724;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(1724, 1724, 1724);
      assertNotNull(basic2DMatrix0);
      assertEquals(1724, basic2DMatrix0.rows());
      assertEquals(1724, basic2DMatrix0.columns());
      
      basic2DMatrix0.setRow(0, (double) 10);
      assertEquals(1724, basic2DMatrix0.rows());
      assertEquals(1724, basic2DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cCSMatrix0, 10, 0, 30, 0, 30, 1422);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 30 rows and 1422 cols at 10, 0 from a 10x10 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      CCSMatrix cCSMatrix0 = new CCSMatrix(13, 37);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(37, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(13, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateColumn(17, vectorFunction0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, 0);
      assertNotNull(denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformColumn(0, vectorFunction0);
      assertNotNull(matrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      // Undeclared exception!
      try { 
        denseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      CCSMatrix cCSMatrix0 = new CCSMatrix(10, 10);
      assertNotNull(cCSMatrix0);
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.add((Matrix) basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 10x10 does not equal to 0x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(30, 30);
      assertNotNull(denseVector0);
      assertEquals(30, denseVector0.length());
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertNotNull(matrix0);
      assertEquals(30, denseVector0.length());
      assertEquals(30, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateColumn(1, vectorFunction0);
      assertEquals(30, denseVector0.length());
      assertEquals(30, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      matrix0.each(matrixProcedure0);
      assertEquals(30, denseVector0.length());
      assertEquals(30, matrix0.columns());
      assertEquals(1, matrix0.rows());
      
      String string0 = matrix0.toMatrixMarket();
      assertNotNull(string0);
      assertEquals("%%MatrixMarket matrix array real general\n1 30\n30.000\n0.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n30.000\n", string0);
      assertEquals(30, denseVector0.length());
      assertEquals(30, matrix0.columns());
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      Basic2DMatrix basic2DMatrix1 = new Basic2DMatrix();
      assertNotNull(basic2DMatrix1);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = basic2DMatrix1.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
  }
}
