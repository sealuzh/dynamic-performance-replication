/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:19:40 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.StreamTokenizer;
import java.util.HashSet;
import java.util.List;
import java.util.Vector;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.LanguageFactory;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.log.LogFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.access.btree.BTree;
import org.apache.derby.impl.store.raw.RawStore;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.constraint.Constraint;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.table.RangeTable;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7zyM";
      stringArray0[1] = "SYSFILES";
      stringArray0[2] = "alter table";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE 7zyM = '7zyM' AND SYSFILES = 'SYSFILES' AND alter table = 'alter table'", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[10];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.iapi.store.access.Qualifier[]", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      defaultDBTable0.getComponents();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "org.apache.derby.iapi.store.access.Qualifier[]");
      defaultDBTable0.equals("org.apache.derby.iapi.store.access.Qualifier[]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.renderValue(charArrayWriter1);
      assertEquals(160, charArrayWriter1.size());
      
      SQLUtil.mutatesStructure("org.apache.derby.iapi.store.access.Qualifier[]");
      boolean boolean0 = SQLUtil.isQuery("org.apache.derby.iapi.store.access.Qualifier[]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = NoPutResultSet.ABSOLUTE;
      Boolean boolean1 = new Boolean("absolute");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, ")>!rsV", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.isQuery("absolute");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT )>!rsV PRIMARY KEY (, , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-u");
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SQLUtil.leftJoin((String) null, stringArray0, (String) null, "", stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("lefw");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION";
      stringArray0[1] = "SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION";
      String string0 = SQLUtil.innerJoin("SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION", stringArray0, "<r\"OX", "org.firebirdsql.gds.impl.jni.NativeGDSImpl", stringArray0);
      assertEquals("<r\"OX as org.firebirdsql.gds.impl.jni.NativeGDSImpl on SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION.SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION = org.firebirdsql.gds.impl.jni.NativeGDSImpl.SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION and SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION.SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION = org.firebirdsql.gds.impl.jni.NativeGDSImpl.SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "select intom";
      stringArray0[0] = "select intom";
      stringArray0[2] = "select intom";
      SQLUtil.parseColumnTypeAndSize("'3TVy");
      String string0 = SQLUtil.renderColumnListWithTableName("select intom", stringArray0);
      assertEquals("select intom.select intom, select intom.null, select intom.select intom, select intom.null, select intom.null, select intom.null, select intom.null, select intom.null, select intom.null, select intom.null, select intom.null, select intom.null, select intom.null, select intom.null, select intom.null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.removeComments("updateve4%?qf_");
      assertEquals("updateve4%?qf_", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "isNull";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("PRIMARY KEY ", false, "create unique index3yoq", "isNull");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("rename", false, "rename", "rename");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.normalize("e+1Ju x~w^4h$)&Ao", true);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      SQLUtil.isProcedureCall("e+1Ju x~w^4h$)&Ao");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.apache.derby.impl.store.replication.net.ReplicationMessage", false, "e+1Ju x~w^4h$)&Ao", "inner");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.apache.derby.impl.store.replication.net.ReplicationMessage");
      StringBuilder stringBuilder1 = stringBuilder0.append((-9.223372036854776E18));
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.addRequiredCondition("inner", stringBuilder2);
      assertEquals("org.apache.derby.impl.store.replication.net.ReplicationMessage-9.223372036854776E18CONSTRAINT org.apache.derby.impl.store.replication.net.ReplicationMessage  and inner", stringBuilder2.toString());
      assertEquals("org.apache.derby.impl.store.replication.net.ReplicationMessage-9.223372036854776E18CONSTRAINT org.apache.derby.impl.store.replication.net.ReplicationMessage  and inner", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "K<TT[gy%p=LzQ$");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      SQLUtil.addRequiredCondition("K<TT[gy%p=LzQ$", stringBuilder1);
      assertEquals("K<TT[gy%p=LzQ$ and K<TT[gy%p=LzQ$", stringBuilder1.toString());
      assertEquals("K<TT[gy%p=LzQ$ and K<TT[gy%p=LzQ$", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M)jatbF";
      stringArray0[1] = "f.yLx8QHz[@";
      DBDataType dBDataType0 = DBDataType.getInstance((-1235850833), "M)jatbF");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("V0D{*'4@D@\"Rdu]-", (DBTable) null, dBDataType0, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("V0D{*'4@D@\"Rdu]- M)JATBF NULL", string0);
      
      String string1 = SQLUtil.leftJoin("M)jatbF", stringArray0, "V0D{*'4@D@\"Rdu]-", "f.yLx8QHz[@", stringArray0);
      assertEquals("left join V0D{*'4@D@\"Rdu]- as f.yLx8QHz[@ on M)jatbF.M)jatbF = f.yLx8QHz[@.M)jatbF and M)jatbF.f.yLx8QHz[@ = f.yLx8QHz[@.f.yLx8QHz[@ and M)jatbF.null = f.yLx8QHz[@.null and M)jatbF.null = f.yLx8QHz[@.null and M)jatbF.null = f.yLx8QHz[@.null", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT  PRIMARY KEY ()", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBSchema dBSchema0 = new DBSchema("alter sessionyc/rq]8+mdpka");
      DBPackage dBPackage0 = new DBPackage("- 0", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("Z,0H$?M:<E9", dBPackage0);
      dBProcedure0.setObjectId("create materialized view");
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LH89Gqg", dBSchema0);
      defaultDBTable0.isIdentical(compositeDBObject0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "LH89Gqg", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("UNIQUE ()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.store.access.Qualifier[]");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[1] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[2] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[3] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[4] = "org.apache.derby.iapi.store.access.Qualifier[]";
      stringArray0[5] = "org.apache.derby.iapi.store.access.Qualifier[]";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.iapi.store.access.Qualifier[]", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.apache.derby.iapi.store.access.Qualifier[]", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('R');
      charArrayWriter1.writeTo(charArrayWriter0);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "org.apache.derby.iapi.store.access.Qualifier[]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2, true);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.renderValue("org.apache.derby.iapi.store.access.Qualifier[]");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec1, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.removeComments("VE4%?QF_");
      TableContainer tableContainer0 = new TableContainer("drop table");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "VE4%?QF_", tableContainer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.substituteMarkers("&$qRbqu&;|&)7Xy", "&$qRbqu&;|&)7Xy", "&$qRbqu&;|&)7Xy");
      StringBuilder stringBuilder0 = new StringBuilder("&$qRbqu&;|&)7Xy");
      SQLUtil.addOptionalCondition("&$qRbqu&;|&)7Xy", stringBuilder0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("into");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-u");
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      defaultDBTable0.equals((Object) null);
      SQLUtil.leftJoin((String) null, stringArray0, (String) null, "", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      HashSet<DBForeignKeyConstraint> hashSet0 = new HashSet<DBForeignKeyConstraint>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      SQLUtil.isQuery("]A:H^UUf)ZO}bB1s");
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = LanguageFactory.MODULE;
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table  (\n)", charArrayWriter0.toString());
      
      String string1 = FBConnectionProperties.BLOB_BUFFER_SIZE_PROPERTY;
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("d;FF;;tZ|_'^x?[=B3L");
      SQLUtil.normalize("org.apache.derby.iapi.sql.LanguageFactory", true);
      SQLUtil.addRequiredCondition("exec", stringBuilder0);
      assertEquals("d;FF;;tZ|_'^x?[=B3L and exec", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(97, "getSQLXML(String)");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("getSQLXML(String)", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("getSQLXML(String) GETSQLXML(STRING)(3) NULL", string0);
      
      DBDataType dBDataType1 = DBDataType.getInstance(97, "getSQLXML(String) GETSQLXML(STRING)(3) NULL");
      Integer integer1 = new Integer(97);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("getSQLXML(String)", defaultDBTable0, dBDataType1, integer1, integer2);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("GETSQLXML(STRING) GETSQLXML(STRING)(3) NULL(97,2)", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2389), "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-2389), "42XA6");
      String string0 = FBConnectionProperties.SOCKET_BUFFER_SIZE_PROPERTY;
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , , , , ", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = NoPutResultSet.FIRST;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("rename~k5=w`-");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "alter table");
      SQLUtil.substituteMarkers("km.=d{:@r", "km.=d{:@r", "km.=d{:@r");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("km.=d{:@r", stringBuilder0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("into");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      SQLUtil.normalize("renamef.ylx8qhz[@", true);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      SQLUtil.mutatesDataOrStructure("execute");
      String string0 = Constraint.UNIQUE;
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[3];
      SQLUtil.parseColumnTypeAndSize("UNIQUE");
      stringArray0[1] = "FIELD_TYPE";
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",q|N/^XK~EpRvh#\u0001!B");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = RangeTable.NAME;
      String[] stringArray0 = new String[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string1 = SQLUtil.leftJoin((String) null, stringArray0, "SYSTEM_RANGE", "mohpa(S", stringArray0);
      assertEquals("left join SYSTEM_RANGE as mohpa(S on null.null = mohpa(S.null and null.null = mohpa(S.null and null.null = mohpa(S.null and null.null = mohpa(S.null and null.null = mohpa(S.null and null.null = mohpa(S.null and null.null = mohpa(S.null and null.null = mohpa(S.null", string1);
      
      String string2 = BTree.PROPERTY_UNIQUE_WITH_DUPLICATE_NULLS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = " WHERE ";
      // Undeclared exception!
      try { 
        SQLUtil.join("", " WHERE ", (String[]) null, "p])1q0!ok~6DzI$,", " WHERE ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.removeComments("table null");
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("43Y33.U");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBTable0.getCheckConstraints();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("QP$5z!rC]S!g_C(V", defaultDBTable0, (DBDataType) null, integer0);
      String string0 = LogFactory.RUNTIME_ATTRIBUTES;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("x)-!jMedp@qh");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("R.]f2A(.1,XGf\"x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: R.]f2A(.1,XGf\"x
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "hi^k.{iDcL#N";
      stringArray0[1] = "hi^k.{iDcL#N";
      stringArray0[2] = "hi^k.{iDcL#N";
      defaultDBTable0.getIndexes();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "hi^k.{iDcL#N", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("]+%JzMrd*,.");
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("hi^k.{iDcL#N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'hi^k.{iDcL#N' not found in table ']+%JzMrd*,.'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.substituteMarkers("km.=d{:@r", "km.=d{:@r", "km.=d{:@r");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("km.=d{:@r", stringBuilder0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("into");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      defaultDBTable0.getForeignKeyConstraints();
      boolean boolean0 = SQLUtil.isQuery("callleft join drop materialized view}mft^zwv@7k~e&x=rb as }mft on m)jatbf.m)jatbf = }mft.m)jatbf and m)jatbf.f.ylx8qhz[@ = }mft.f.ylx8qhz[@ and m)jatbf.m)jatbf = }mft.m)jatbf and m)jatbf.null = }mft.null and m)jatbf.null = }mft.null");
      assertFalse(boolean0);
      
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance((int) '\\', "/q5]}");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PRIMARY KEY ", defaultDBTable0, dBDataType0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("PRIMARY KEY ", string0);
      
      String string1 = SQLUtil.normalize("gtsII,MR&NK", true);
      assertEquals("gtsII, MR & NK", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "select into";
      stringArray0[7] = "";
      defaultDBTable0.getForeignKeyConstraints();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('M');
      charArrayWriter0.writeTo(charArrayWriter1);
      CharArrayWriter charArrayWriter2 = charArrayWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2, true);
      SQLUtil.join("|V!CAz", "^yIEAX6j*)~m$/E{r", stringArray0, "select into", "alter materi", stringArray0);
      SQLUtil.isQuery("select into");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("yc/RQ]8+mDPKa", true);
      assertEquals("yc / RQ ] 8  + mDPKa", string0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "yc/RQ]8+mDPKa";
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "yc/RQ]8+mDPKa", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable1);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT yc/RQ]8+mDPKa ", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[25];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      HashSet<DBForeignKeyConstraint> hashSet0 = new HashSet<DBForeignKeyConstraint>();
      SQLUtil.normalize("n^=OQ,pHRtqlRoM", true);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      SQLUtil.isDML("drop materialized view");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("update", true);
      assertEquals("update", string0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Integer integer0 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog("update");
      DBCatalog dBCatalog1 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("update", dBCatalog1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update", dBSchema0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[0] = "";
      stringArray0[5] = "select into";
      stringArray0[6] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      defaultDBTable0.getForeignKeyConstraints();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('\\');
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotNull(string0);
      assertEquals("unique constraint ", string0);
      
      String string1 = SchemaDescriptor.SYSFUN_SCHEMA_UUID;
      String string2 = SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      assertEquals("CONSTRAINT  ", string2);
      
      String string3 = "+{S?ML\\ui}#[!c*JlgL";
      SQLUtil.removeComments(string3);
      String string4 = SQLUtil.leftJoin("", stringArray0, "rL$Kjp*e>PR^a8S}LYB", "", stringArray0);
      assertEquals("left join rL$Kjp*e>PR^a8S}LYB as  on . = . and . = . and . = . and .null = .null and .null = .null and .select into = .select into and . = .", string4);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string5 = SQLUtil.constraintName(dBPrimaryKeyConstraint2);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DBPackage dBPackage0 = new DBPackage("U?GL]?,d~vzg", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      dBProcedure0.getOwner();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.isIdentical(dBPackage0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(",:M#");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = new Boolean(false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = DataDictionary.CORE_DATA_DICTIONARY_VERSION;
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeDBObject<DBSequence> compositeDBObject0 = (CompositeDBObject<DBSequence>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("+i)OZc\"x5 -kb@zoV", compositeDBObject0);
      tableContainer0.getTable(")");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("CHECK ");
      SQLUtil.mutatesDataOrStructure("alter session");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)103;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(97, (int) (byte)103);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 97
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getForeignKeyConstraints();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('\\');
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      boolean boolean0 = SQLUtil.isQuery("callleft join drop materialized view}mft^zwv@7k~e&x=rb as }mft on m)jatbf.m)jatbf = }mft.m)jatbf and m)jatbf.f.ylx8qhz[@ = }mft.f.ylx8qhz[@ and m)jatbf.m)jatbf = }mft.m)jatbf and m)jatbf.null = }mft.null and m)jatbf.null = }mft.null");
      assertFalse(boolean0);
      
      DBDataType.getInstance((int) '\\', "/q5]");
      DBCatalog dBCatalog0 = new DBCatalog("");
      DBSchema dBSchema0 = new DBSchema("/q5]", dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("./q5]", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",q|N/^XK~EpRvh#\u0001!B");
      defaultDBTable0.getPrimaryKeyConstraint();
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      SQLUtil.parseColumnTypeAndSize(",q|N/^XK~EpRvh#\u0001!B");
      String string0 = SQLUtil.normalize(",q|N/^XK~EpRvh#\u0001!B", true);
      assertEquals(", q | N / ^ XK ~ EpRvh # \u0001 ! B", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.removeComments("VE4%?QF_");
      String[] stringArray0 = new String[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.join("VE4%?QF_", (String) null, stringArray0, "VE4%?QF_", "alter index^t[[{m@$nr+a)f.^=", stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1098041601), "?[}o\"# 5qS/P<46R@");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer(13);
      Integer integer2 = new Integer(2);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer2, integer3);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "VE4%?QF_", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      Integer.toUnsignedString(13);
      defaultDBColumn0.getNotNullConstraint();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("13", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("VE4%?QF_ join VE4%?QF_ as alter index^t[[{m@$nr+a)f.^= on null.null = alter index^t[[{m@$nr+a)f.^=.null and null.null = alter index^t[[{m@$nr+a)f.^=.null and null.null = alter index^t[[{m@$nr+a)f.^=.null and null.null = alter index^t[[{m@$nr+a)f.^=.null and null.null = alter index^t[[{m@$nr+a)f.^=.null and null.null = alter index^t[[{m@$nr+a)f.^=.null and null.null = alter index^t[[{m@$nr+a)f.^=.null and null.null = alter index^t[[{m@$nr+a)f.^=.null");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      dBForeignKeyConstraint0.setName((String) null);
      StringBuilder stringBuilder0 = new StringBuilder(13);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.normalize("~K5=W`- +", false);
      StringBuilder stringBuilder1 = new StringBuilder("13");
      assertEquals("13", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Boolean boolean1 = new Boolean("READ_CLOB_DB");
      SQLUtil.removeComments("=");
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=", defaultDBTable0, 15, "=");
      DBDataType dBDataType0 = DBDataType.getInstance(2700, "READ_CLOB_DB");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("yr* _Ye.", defaultDBTable0, dBDataType0, integer1);
      String string0 = SchemaDescriptor.SYSCS_UTIL_SCHEMA_UUID;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[0] = "";
      stringArray0[5] = "select into";
      stringArray0[6] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      defaultDBTable0.getForeignKeyConstraints();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('\\');
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-22);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.isQuery("callleft join drop materialized view}mft^zwv@7k~e&x=rb as }mft on m)jatbf.m)jatbf = }mft.m)jatbf and m)jatbf.f.ylx8qhz[@ = }mft.f.ylx8qhz[@ and m)jatbf.m)jatbf = }mft.m)jatbf and m)jatbf.null = }mft.null and m)jatbf.null = }mft.null");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Could not cancel statement", defaultDBTable0, (-795), "Ep{+");
      vector0.add((DBColumn) defaultDBColumn0);
      DBDataType dBDataType0 = DBDataType.getInstance((int) '\\', "/q5]");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      vector0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      SQLUtil.join("Could not cancel statement, ", "", stringArray0, "`a", "", stringArray0);
      SQLUtil.normalize("select into", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("\\create table  (\n\tCould not cancel statement EP{+ NULL,\n\t /Q5](1) NULL,\n\tCONSTRAINT  PRIMARY KEY (, , , , , select into, )\n)", charArrayWriter1.toString());
      assertEquals(124, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("~k5=W`- +", true);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("~ k5 = W ` - +", true, "~k5=W`- +", "~k5=W`- +");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = Dependable.COLUMNS_PERMISSION;
      Boolean boolean1 = new Boolean("CHECK ");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "exec");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      SQLUtil.removeComments("CHECK ");
      JdbcDataSource jdbcDataSource1 = new JdbcDataSource();
      String string1 = TypeId.VARCHAR_NAME;
      SQLUtil.normalize(";ri/rv(Ws&9)*SZAe%", true);
      // Undeclared exception!
      try { 
        DBDataType.getInstance(";ri/rv(Ws&9)*SZAe%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      HashSet<DBForeignKeyConstraint> hashSet0 = new HashSet<DBForeignKeyConstraint>();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      mockPrintWriter0.println("");
      SQLUtil.isQuery("]A:H^UUf)ZO}bB1s");
      DBDataType dBDataType0 = DBDataType.getInstance((int) 'U', "");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.compareUnsigned('U', 'U');
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setTable(defaultDBTable0);
      mockPrintWriter0.println((double) 0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("\n0.0\ncreate table  (\n\t (0) NULL\n)", charArrayWriter0.toString());
      
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      String string1 = SchemaDescriptor.SYSFUN_SCHEMA_UUID;
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.normalize("t'J", true);
      SQLUtil.addRequiredCondition("SYSSEQUENCES", stringBuilder0);
      assertEquals("SYSSEQUENCES", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "drop table~k5=w`- +";
      Character character0 = Character.valueOf('3');
      Character.isAlphabetic((-2036110517));
      Character.isBmpCodePoint((-2036110517));
      SQLUtil.substituteMarkers("drop table~k5=w`- +", "362FJ3Ol*", character0);
      String string1 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(1274);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1274, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = Dependable.ROUTINE_PERMISSION;
      String string1 = TypeId.FLOAT_NAME;
      defaultDBTable0.getPrimaryKeyConstraint();
      String string2 = TypeId.SMALLINT_NAME;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.removeComments("Nn!,L");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "rs##r");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop materialized viewh^guxmt2$52^");
      defaultDBTable0.getUniqueConstraints(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]((sPEFU";
      stringArray0[1] = "Nn!,L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SMALLINT", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("P.", defaultDBTable0, (-1109), "rs##r");
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("43Y33.U");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      
      SQLUtil.removeComments("table null");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+I";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("+I", false, defaultDBTable0, stringArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      JdbcConnectionPool.create("+I", (String) null, "call");
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create materialized viewyc/rq]8+mdpka", true, defaultDBTable0, "- 0");
      dBCheckConstraint0.setOwner(defaultDBTable0);
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK - 0", string2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.normalize("\u0001\u0088\r\uFFFF\u0001\u0087", true);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      SQLUtil.mutatesDataOrStructure("\u0001\u0088\r\uFFFF\u0001\u0087");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = Dependable.VIEW;
      String string1 = FBConnectionProperties.SQL_DIALECT_PROPERTY;
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName(defaultDBTable0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.removeComments("\u0001\u0088\r\uFFFF\u0001\u0087");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "rs##r");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dropmaterialized viewh^guxmt2$52^");
      defaultDBTable0.getUniqueConstraints(false);
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      mockPrintWriter0.write(charArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string2 = TypeId.VARCHAR_NAME;
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.normalize("7yYzbD*_}8\"4F.7WO^]", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("W;j!fNAh2bod\";a,|", defaultDBTable0, (-2399), "sqlDialect");
      defaultDBColumn0.setDefaultValue("W;j!fNAh2bod\";a,|");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("d ^{a ");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.parseColumnTypeAndSize("select into");
      SQLUtil.isQuery("\n/* group sorted */");
      System.setCurrentTimeMillis((-766L));
      VersionNumber versionNumber0 = VersionNumber.valueOf("callyc/rq]8+mdpka");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("x&8#CoLQr", "callyc/rq]8+mdpka", versionNumber0);
      defaultDatabase0.setImportedIndexes(false);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("\u0001\u011C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'x&8#CoLQr'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("k5=W`- ", false);
      SQLUtil.mutatesDataOrStructure("k5=W`- ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = Dependable.ROUTINE_PERMISSION;
      String string1 = FBConnectionProperties.SQL_DIALECT_PROPERTY;
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName(defaultDBTable0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.removeComments("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", length=");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "RoutinePrivilege";
      stringArray0[1] = "insert~k5=w`- +";
      stringArray0[2] = "k5 = W ` -";
      stringArray0[3] = "rename43y33.u";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ", length=", false, stringArray0);
      defaultDBTable1.getColumns();
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.isQuery("insert~k5=w`- +");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }
}
