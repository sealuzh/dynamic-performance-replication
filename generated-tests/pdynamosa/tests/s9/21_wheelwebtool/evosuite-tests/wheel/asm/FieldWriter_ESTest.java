/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:13:44 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1131));
      classWriter0.index = (-1131);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "The prefix mus not be nul", "The prefix mus not be nul", "The prefix mus not be nul", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-930), "A9{+VWM3", "#GMk@", "", "A9{+VWM3");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2327);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "A9Y%%+VWM3", "wheel.asm.AnnotationWriter", "Z!G*'TBi(R.g", "Z!G*'TBi(R.g");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1024);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1024, "?5", "<q%2Is;Dh|x?", "Deprecated", "(B7B:,)/4\"}d `qv");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1024);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-2324), "?5", "A9{+VWM3", (String) null, byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.io.ByteArrayInputStream@191dc5ea
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "A9{+VWM3", "\"VMB", "\"VMB", "\"VMB");
      Attribute attribute0 = new Attribute("r_Q");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2327);
      classWriter0.version = 2327;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131061, "wheel.asm.AnnotationWriter", "A9Y%%+VWM3", (String) null, "wheel.asm.AnnotationWriter");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-930), "A9{+VWM3", "#GMk@", "", "A9{+VWM3");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "A9{+VWM3", "\"VMB", "\"VMB", "\"VMB");
      Attribute attribute0 = new Attribute("r_Q");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1024);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1024, "?5", "<q%2Is;Dh|x?", "Deprecated", "(B7B:,)/4\"}d `qv");
      fieldWriter0.visitAnnotation("Deprecated", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1024);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1024, "?5", "<q%2Is;Dh|x?", "Deprecated", "(B7B:,)/4\"}d `qv");
      fieldWriter0.visitAnnotation("(B7B:,)/4\"}d `qv", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2327);
      classWriter0.version = 2327;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131061, "wheel.asm.AnnotationWriter", "A9Y%%+VWM3", (String) null, "wheel.asm.AnnotationWriter");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-930), "A9{+VWM3", "#GMk@", "", "A9{+VWM3");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "A9{+VWM3", "RuntimeVisibleAnnotations", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The array of names must not be null", "e'Y0R*", "ConstantValue", "org.apache.commons.io.filefilter.TrueFileFilter");
      fieldWriter0.visitAnnotation(",*{FB&9`g", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The array of names must not be null", "e'Y0R*", "ConstantValue", "org.apache.commons.io.filefilter.TrueFileFilter");
      fieldWriter0.visitAnnotation("", false);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "The array of names must not be null", "e'Y0R*", "ConstantValue", "org.apache.commons.io.filefilter.TrueFileFilter");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 3519, "ConstantValue", "org.apache.commons.io.filefilter.TrueFileFilter", "RuntimeInvisibleAnnotations", "The array of names must not be null");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Signature", "", "", "V#");
      fieldWriter0.visitEnd();
  }
}
