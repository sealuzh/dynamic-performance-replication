/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:45:36 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.ObjectSerializer;
import com.alibaba.fastjson.serializer.PrimitiveArraySerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.DateTimeException;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      Integer integer0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      List<MockJapaneseDate> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-1443), (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1443, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(24);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JSON.parseArray("", class0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.setComponentType(class0);
      assertNotSame(jSONArray2, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3320);
      LinkedHashSet<ChronoLocalDate> linkedHashSet0 = new LinkedHashSet<ChronoLocalDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.toArray((MockThaiBuddhistDate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      jSONArray2.removeAll(jSONArray0);
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GT;
      linkedHashSet0.add(jSONPath_Operator0);
      jSONArray1.add((Object) linkedHashSet0);
      jSONArray1.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.containsAll(jSONArray0);
      SerializeConfig.getGlobalInstance();
      jSONArray0.fluentClear();
      jSONArray0.toArray();
      int int0 = Opcodes.GETSTATIC;
      assertEquals(178, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1942);
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONArray0);
      MockDate mockDate0 = new MockDate(3089, 3089, 3089, 3089, 989);
      jSONArray0.lastIndexOf(linkedList0);
      jSONArray0.size();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedList0);
      assertSame(jSONArray2, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(523);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      List<PropertyNamingStrategy> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1312, (Object) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1312, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONPath.Operator> linkedList0 = new LinkedList<JSONPath.Operator>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray2.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(178);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.hashCode();
      int int0 = (-820);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(178);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 178, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.containsAll(jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.clearSerializers();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.getString(0);
      jSONArray0.getIntValue(0);
      jSONArray1.clone();
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      JSONArray jSONArray2 = new JSONArray(1);
      jSONArray2.toArray();
      // Undeclared exception!
      try { 
        jSONArray1.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(0, (Object) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(0);
      jSONArray3.fluentRetainAll(jSONArray0);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      assertFalse(ParserConfig.global.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<PropertyNamingStrategy> linkedList0 = new LinkedList<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      Object object0 = new Object();
      jSONArray1.remove(object0);
      // Undeclared exception!
      try { 
        jSONArray1.addAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(29, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject((-1505), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(3056);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3056, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig.getGlobalInstance();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.toArray();
      int int0 = Opcodes.GETSTATIC;
      // Undeclared exception!
      try { 
        jSONArray1.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      Integer integer0 = new Integer(989);
      ListIterator<Object> listIterator0 = jSONArray1.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.equals(object0);
      // Undeclared exception!
      try { 
        jSONArray2.getFloatValue(1339);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1339, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      MockMinguoDate.now();
      jSONArray0.setRelatedArray("1.2.46");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3048);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3048, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-1);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.containsAll(jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.toArray();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.size();
      // Undeclared exception!
      try { 
        jSONArray1.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(989, 989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      ConcurrentHashMap.newKeySet(989);
      jSONArray1.containsAll(jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
      Integer integer0 = new Integer(3089);
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      jSONArray0.fluentSet(3089, (Object) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.fluentAdd((Object) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray1.fluentAdd(989, (Object) mockHijrahDate0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getIntValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@4b83adc0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.containsAll(jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.clearSerializers();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      PrimitiveArraySerializer primitiveArraySerializer0 = PrimitiveArraySerializer.instance;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      serializeConfig0.put((Type) null, (ObjectSerializer) primitiveArraySerializer0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
      jSONArray0.fluentSet(3089, (Object) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.getString(0);
      jSONArray1.getIntValue(0);
      float float0 = jSONArray1.getFloatValue(3089);
      assertEquals(3090, jSONArray1.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1942);
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.fluentAdd((Object) jSONArray0);
      MockDate mockDate0 = new MockDate(3089, 3089, 3089, 3089, 989);
      jSONArray1.lastIndexOf(linkedList0);
      jSONArray1.removeAll(jSONArray0);
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      ConcurrentHashMap.newKeySet(989);
      jSONArray1.containsAll(jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray2 = jSONArray0.fluentSet(3089, (Object) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray3 = jSONArray1.fluentAdd(989, (Object) mockHijrahDate0);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      JSONArray jSONArray4 = jSONArray2.fluentAdd((Object) jSONArray3);
      jSONArray1.getDoubleValue(3089);
      jSONArray4.getIntValue(3089);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      assertEquals(PropertyNamingStrategy.KebabCase, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap.KeySetView<Object, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(3089);
      jSONArray0.containsAll(concurrentHashMap_KeySetView0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      jSONArray0.defaultLocale.getDisplayScript();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentSet(989, serializerFeature0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(989);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      ConcurrentHashMap.KeySetView<Object, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(989);
      jSONArray1.containsAll(jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
      Integer integer0 = new Integer(3089);
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      jSONArray0.fluentSet(3089, (Object) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.getFloatValue(3089);
      // Undeclared exception!
      try { 
        jSONArray0.removeAll(concurrentHashMap_KeySetView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<PropertyNamingStrategy>[] classArray0 = (Class<PropertyNamingStrategy>[]) Array.newInstance(Class.class, 2);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      classArray0[0] = class0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray(111);
      JSONObject jSONObject0 = new JSONObject(1, false);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONObject0);
      Class<Object> class1 = Object.class;
      List<Object> list0 = jSONArray1.toJavaList(class1);
      JSONArray jSONArray2 = new JSONArray(list0);
      jSONArray2.getRelatedArray();
      assertTrue(jSONArray2.equals((Object)jSONArray1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      serializerFeatureArray0[2] = serializerFeature1;
      JSON.toJSONStringZ(jSONArray0, serializeConfig0, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), serializerFeature0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf((Object) null);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1305), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      ConcurrentHashMap.newKeySet(989);
      jSONArray1.containsAll(jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray2 = jSONArray0.fluentSet(3089, (Object) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray3 = jSONArray1.fluentAdd(989, (Object) mockHijrahDate0);
      JSON.toJSONString((Object) serializeConfig0, true);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      JSONArray jSONArray4 = jSONArray2.fluentAdd((Object) jSONArray3);
      jSONArray1.getDoubleValue(3089);
      jSONArray4.getIntValue(3089);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      System.setCurrentTimeMillis(3089);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.fluentSet(1, 3089);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.getJSONObject(0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      jSONArray0.fluentSet(3074, serializerFeature1);
      jSONArray0.add((Object) serializerFeature1);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) serializerFeature0);
      jSONArray1.getByteValue(989);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      jSONArray0.getObject(989, (Type) null);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.listIterator();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      serializeConfig0.setAsmEnable(true);
      jSONArray0.isEmpty();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(663);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 663, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.containsAll(jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.clearSerializers();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      serializeConfig0.config(class0, serializerFeature0, false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONStringZ(serializerFeature0, serializeConfig0, serializerFeatureArray0);
      jSONArray0.fluentSet(3089, (Object) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.getString(0);
      jSONArray1.getIntValue(0);
      jSONArray1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(16);
      JSON.DEFAULT_TYPE_KEY = "@type";
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializeConfig.getGlobalInstance();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.retainAll(jSONArray0);
      jSONArray1.toArray();
      int int0 = Opcodes.GETSTATIC;
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.defaultLocale.getDisplayVariant();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1328, serializerFeature0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.listIterator(989);
      jSONArray0.getShortValue(989);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONArray0.getObject((int) 0, (Type) class0);
      // Undeclared exception!
      try { 
        jSONArray1.getString(5380);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5380, Size: 1329
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.containsAll(jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      jSONArray0.toArray();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.contains(serializeConfig0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue((-50));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockHijrahDate0);
      jSONArray1.toArray();
      jSONArray1.getRelatedArray();
      jSONArray0.getJSONObject(0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConcurrentHashMap.KeySetView<Object, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(3089);
      jSONArray0.containsAll(concurrentHashMap_KeySetView0);
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.defaultLocale.getDisplayScript();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, serializerFeature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : DisableCircularReferenceDetect
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3074, serializerFeature0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) serializerFeature0);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray1.getShortValue(989);
      // Undeclared exception!
      jSONArray3.toJSONString();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) serializerFeature0);
      jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.indexOf((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.setAsmEnable(false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3084, serializeConfig0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.getRelatedArray();
      jSONArray0.toArray();
      Integer integer0 = new Integer((-2854));
      jSONArray0.hashCode();
      jSONArray1.clear();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3084, serializeConfig0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConcurrentHashMap.newKeySet(3089);
      jSONArray1.getBoolean(989);
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.of(989, 989, 989);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 989
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.setAsmEnable(false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, serializeConfig0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.getRelatedArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConcurrentHashMap.newKeySet(989);
      jSONArray0.containsAll(jSONArray1);
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.serializer.SerializeConfig@6d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConcurrentHashMap.KeySetView<Object, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(3089);
      jSONArray0.containsAll(concurrentHashMap_KeySetView0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteSlashAsSpecial;
      jSONArray0.defaultLocale.getDisplayScript();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)48;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, serializerFeature0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.getBooleanValue((byte)48);
      ParserConfig.getGlobalInstance();
      jSONArray1.getRelatedArray();
      jSONArray1.getJSONObject(604);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.fluentAdd((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((byte) (-46));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      serializeConfig0.setAsmEnable(false);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3084, serializeConfig0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      serializeConfig0.createJavaBeanSerializer(class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.getRelatedArray();
      Class<PropertyNamingStrategy>[] classArray0 = (Class<PropertyNamingStrategy>[]) Array.newInstance(Class.class, 2);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      classArray0[0] = class1;
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      classArray0[1] = class2;
      jSONArray1.parallelStream();
      serializeConfig0.configEnumAsJavaBean(classArray0);
      jSONArray0.toArray();
      jSONArray1.retainAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(989, (Object) mockJapaneseDate0);
      jSONArray1.getBigDecimal(3084);
      jSONArray1.containsAll(jSONArray2);
      SerializeConfig serializeConfig1 = new SerializeConfig(true);
      jSONArray2.getLongValue(3045);
      // Undeclared exception!
      try { 
        jSONArray1.getObject(989, (Type) class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      jSONArray0.toArray();
      jSONArray1.getBoolean(0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.getRelatedArray();
      jSONArray0.getJSONObject(0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      linkedHashSet0.add(propertyNamingStrategy0);
      jSONArray0.containsAll(linkedHashSet0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(17, linkedHashSet0);
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      jSONArray1.toArray();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      linkedHashSet0.remove(propertyNamingStrategy1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray1.getRelatedArray();
      jSONArray0.getJSONObject(0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 18
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
