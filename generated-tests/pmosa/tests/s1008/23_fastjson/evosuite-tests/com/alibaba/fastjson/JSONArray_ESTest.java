/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:18:52 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.io.ObjectStreamConstants;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.Date;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.remove((Object) "com.alibaba.fastjson.JSONArray");
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAddAll(989, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-114), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONArray0.clear();
      List<ChronoLocalDate> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(2315, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2315, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1797);
      jSONArray0.isEmpty();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      int int0 = 2298;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(808);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 808, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1797);
      jSONArray0.isEmpty();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3935, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3935, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1122), class1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(1317);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1317, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.getJSONArray("1.2.46");
      jSONArray0.lastIndexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-209));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2067);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-5974));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2067);
      Integer integer0 = new Integer(2067);
      jSONArray0.add((Object) integer0);
      int int0 = 3244;
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3244);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3244, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray0.fluentRemoveAll(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentAdd(1, (Object) jSONArray1);
      assertFalse(jSONArray3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1797;
      JSONArray jSONArray0 = new JSONArray(1797);
      jSONArray0.isEmpty();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(1797);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1797
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-664);
      JSON.defaultLocale = jSONArray0.defaultLocale;
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-664), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      JSONArray jSONArray0 = new JSONArray(6043);
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        jSONArray0.getString(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(166);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 166, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(121, 3809);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3809
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(14);
      TypeUtils.castToDate("");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.setRelatedArray(mockThaiBuddhistDate0);
      System.setCurrentTimeMillis(14);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3071, (Object) null);
      jSONArray1.getByteValue(1024);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(3072, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-4111));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean1 = jSONArray0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      int int0 = jSONArray0.indexOf(mockJapaneseDate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Method> class0 = Method.class;
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("&Gx,nz", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("@type", class1, class1, class0, (Field) null, 989, 1744, 1744);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      jSONArray0.setRelatedArray((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1744);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1744, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.clone();
      assertNotSame(jSONArray0, object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONPath.Operator[] jSONPath_OperatorArray0 = new JSONPath.Operator[3];
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.GE;
      jSONPath_OperatorArray0[0] = jSONPath_Operator0;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.LIKE;
      jSONPath_OperatorArray0[1] = jSONPath_Operator1;
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.GE;
      jSONPath_OperatorArray0[2] = jSONPath_Operator2;
      JSONPath.Operator[] jSONPath_OperatorArray1 = jSONArray0.toArray(jSONPath_OperatorArray0);
      assertSame(jSONPath_OperatorArray0, jSONPath_OperatorArray1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[5] = serializerFeature5;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, 1130, serializerFeatureArray0);
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2295, mockHijrahDate0);
      jSONArray1.getJSONObject(2275);
      assertEquals(2296, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(2233);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2233, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(4394);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-54);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4394, integer0);
      jSONArray1.getByteValue(989);
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(4395, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1071);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentRemove(object0);
      jSONArray2.fluentSet(4355, object0);
      float float0 = jSONArray1.getFloatValue(4354);
      assertEquals(4356, jSONArray1.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(4359);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      jSONArray0.fluentSet(387, propertyNamingStrategy0);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(387);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(4377);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4377, integer0);
      jSONArray0.getBooleanValue(4362);
      short short0 = jSONArray1.getShortValue(989);
      assertEquals(4378, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1071);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      jSONArray0.fluentRemove((Object) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, (Object) null);
      jSONArray1.getIntValue(0);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1071);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentRemove(object0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray3 = jSONArray2.fluentSet(989, mockThaiBuddhistDate0);
      jSONArray3.fluentRetainAll(jSONArray1);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@5f2a3603
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(387, integer0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>(comparator0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentSkipListMap0);
      javaBeanSerializer0.getAfterFilters();
      Class<?> class1 = javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        jSONArray1.getObject(387, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1071);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONArray1.fluentRemove((Object) jSONObject0);
      Object object0 = new Object();
      jSONArray1.fluentSet(989, object0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.Object@67bde7e6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(387, integer0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>(comparator0);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      Boolean boolean1 = jSONArray1.getBoolean(387);
      assertEquals(388, jSONArray0.size());
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(387, integer0);
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      jSONArray1.getBooleanValue(387);
      assertEquals(388, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1071);
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentRemove(object0);
      jSONArray2.fluentSet(989, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getIntValue(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1461, mockHijrahDate0);
      jSONArray1.getIntValue(855);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      jSONArray1.containsAll(linkedHashSet0);
      jSONArray0.listIterator();
      assertEquals(1462, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(4377);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4377, integer0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>(comparator0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentSkipListMap0);
      javaBeanSerializer0.getAfterFilters();
      Class<?> class1 = javaBeanSerializer0.getType();
      jSONArray1.getObject(387, (Type) class1);
      long long0 = jSONArray1.getLongValue(4377);
      assertEquals(4378, jSONArray0.size());
      assertEquals(4377L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(4377);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4377, integer0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      jSONArray0.getDoubleValue(989);
      jSONArray1.getByte(387);
      jSONArray1.setComponentType(class0);
      jSONArray0.getInteger(4377);
      assertEquals(4378, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(4377);
      jSONArray0.fluentSet(4377, integer0);
      jSONArray0.getBooleanValue(4359);
      byte byte0 = jSONArray0.getByteValue(4377);
      assertEquals(4378, jSONArray0.size());
      assertEquals((byte)25, byte0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 387;
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(4362);
      JSONArray jSONArray1 = jSONArray0.fluentSet(4377, integer0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentSkipListMap0);
      javaBeanSerializer0.getAfterFilters();
      javaBeanSerializer0.getType();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.getObject(989, (Type) null);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(247, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.getBooleanValue(247);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 247, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, integer0);
      jSONArray1.getDoubleValue(989);
      jSONArray0.fluentAdd((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-1398));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(387);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4267, (Object) null);
      jSONArray1.getIntValue(4267);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray2 = new JSONArray(989);
      jSONArray2.containsAll(jSONArray0);
      jSONArray2.listIterator();
      jSONArray2.getRelatedArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      jSONArray0.add(387, (Object) propertyNamingStrategy0);
      assertEquals(4269, jSONArray0.size());
  }
}
