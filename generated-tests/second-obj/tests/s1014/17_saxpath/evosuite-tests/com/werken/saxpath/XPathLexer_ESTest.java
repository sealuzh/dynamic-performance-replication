/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:03:43 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("uK");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.identifier();
      assertEquals("uK", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer1.identifierOrOperatorName();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F~RrSZiXa_jMa");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u m4nO(zy]2%C");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6+Q59zh(X)Z>[");
      xPathLexer0.or();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.isIdentifierStartChar('P');
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer1.at();
      Token token0 = xPathLexer1.leftParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("`_>-fc");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer1.mod();
      xPathLexer1.whitespace();
      Token token1 = xPathLexer1.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("!Cz>");
      Token token3 = xPathLexer2.nextToken();
      assertEquals(23, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals("Cz>", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.relationalOperator();
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5^$J\"m1ziHm@/ib)=e");
      xPathLexer0.div();
      Token token0 = xPathLexer0.number();
      assertEquals("5", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('p');
      assertTrue(boolean0);
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("^", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]9");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      xPathLexer0.div();
      Token token1 = xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.consume((-3695));
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('k');
      boolean boolean1 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean1 == boolean0);
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("~R!");
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('');
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.consume(46);
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.consume((-6033));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.consume((-6006));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("8w");
      Token token3 = xPathLexer2.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("8", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.consume((-3695));
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"F:ej");
      Token token0 = xPathLexer0.dollar();
      String string0 = token0.toString();
      assertEquals("[ (26) (\")", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (\")");
      Token token1 = xPathLexer1.star();
      String string1 = token1.toString();
      assertEquals("[ (20) ([)", string1);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      Token token2 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"F:ej");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ ");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a3)8:@{dlQCgD?");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.hasMoreChars();
      // Undeclared exception!
      try { 
        xPathLexer1.LA(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('U');
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("I", token2.getTokenText());
      
      xPathLexer0.consume('U');
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.consume();
      boolean boolean1 = xPathLexer0.isIdentifierChar('U');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('~');
      xPathLexer0.nextToken();
      xPathLexer0.consume((-3695));
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "D3:Vtm]nN";
      XPathLexer xPathLexer0 = new XPathLexer("D3:Vtm]nN");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.isIdentifierChar('T');
      xPathLexer0.doubleColon();
      xPathLexer0.consume((-36));
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (11) (s)", string0);
      
      xPathLexer0.isIdentifierStartChar('U');
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Ij", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("<", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("s.Ij<2l!j");
      xPathLexer1.consume('U');
      Token token4 = xPathLexer0.number();
      assertEquals("2", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.isIdentifierChar('(');
      char char0 = xPathLexer1.LA(2036);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "OP{mQ(5 6?G=QWlyw%U";
      XPathLexer xPathLexer0 = new XPathLexer("OP{mQ(5 6?G=QWlyw%U");
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.number();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=iWB ~)*HV.m");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("iWB", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("01x2\"$!kW Y");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.number();
      assertEquals("1", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("x2", token2.getTokenText());
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(G.6WA:kifFh(");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (()");
      token0.toString();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(G.6WA:kifFh(");
      Token token0 = xPathLexer0.dollar();
      assertEquals("(", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (20) (G)", string0);
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("6", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.equals();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      token1.toString();
      xPathLexer0.div();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.minus();
      xPathLexer0.plus();
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.plus();
      token3.toString();
      XPathLexer xPathLexer3 = new XPathLexer();
      token2.toString();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y&0II/l#%HMw\"|z@$B");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v4_");
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.star();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@~KxQll\"E_]o 8.7");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.minus();
      Token token1 = xPathLexer0.dollar();
      token1.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.star();
      Token token2 = xPathLexer0.minus();
      xPathLexer1.setPreviousToken(token2);
      XPathLexer xPathLexer3 = new XPathLexer("[ (26) (K)");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer1.consume();
      xPathLexer3.getPreviousToken();
      xPathLexer1.leftBracket();
      Token token3 = xPathLexer4.operatorName();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L%eoexmh");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.leftParen();
      Token token2 = xPathLexer0.colon();
      assertEquals("e", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      token1.toString();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      token0.toString();
      Token token4 = xPathLexer0.dollar();
      String string0 = token0.toString();
      assertEquals("[ (17) (L)", string0);
      
      xPathLexer0.mod();
      String string1 = token1.toString();
      assertEquals("[ (1) (%)", string1);
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      String string2 = token4.toString();
      assertEquals("[ (26) (e)", string2);
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("h", token5.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.or();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L%eoexmh");
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      String string0 = "5KKy'wxEp_";
      XPathLexer xPathLexer1 = new XPathLexer("5KKy'wxEp_");
      xPathLexer1.minus();
      xPathLexer1.nextToken();
      xPathLexer1.rightParen();
      String string1 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.equals();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      token1.toString();
      xPathLexer1.div();
      xPathLexer1.number();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.whitespace();
      xPathLexer0.rightBracket();
      token1.toString();
      Token token3 = xPathLexer1.at();
      xPathLexer0.setPreviousToken(token3);
      String string0 = "V;\\w";
      XPathLexer xPathLexer2 = new XPathLexer("[ (21) (7)");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.rightParen();
      xPathLexer2.doubleColon();
      token2.toString();
      XPathLexer xPathLexer3 = new XPathLexer();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`FE\"@gT QB.\"VW/");
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("`FE\"@gT QB.\"VW/", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("87.07*oc2D@XQoM8$");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      Token token0 = xPathLexer0.equals();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      Token token1 = xPathLexer1.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.I[<2l");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.number();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("z<SiP9~~YbM/@vg");
      Token token1 = xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.rightParen();
      token1.toString();
      xPathLexer1.consume();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(G.6WA:kifFh(");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.star();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.consume(1);
      xPathLexer0.getXPath();
      xPathLexer0.setXPath(") (");
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.LA(1);
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.setXPath("");
      xPathLexer0.hasMoreChars();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":,5Eibh??-Da");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (:)", string0);
      
      Token token1 = xPathLexer0.number();
      String string1 = token1.toString();
      assertEquals("[ (30) ()", string1);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('^');
      assertFalse(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer("4");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.consume(714);
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("4");
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("[ (11) (:)");
      Token token4 = xPathLexer5.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer2.rightParen();
      assertEquals(2, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JBi|49j)jfk0");
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.number();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.minus();
      Token token0 = new Token((-1), "", 24, 122);
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "L%eoexmh";
      XPathLexer xPathLexer0 = new XPathLexer("L%eoexmh");
      XPathLexer xPathLexer1 = new XPathLexer("L%eoexmh");
      xPathLexer1.nextToken();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      String string1 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.equals();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer1.consume((-1731));
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer("[ (17) (E)");
      // Undeclared exception!
      try { 
        xPathLexer1.operatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "87.07*oc2D@XQoM80$";
      XPathLexer xPathLexer0 = new XPathLexer("87.07*oc2D@XQoM80$");
      xPathLexer0.comma();
      Token token0 = xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("MIlT6=");
      xPathLexer2.div();
      xPathLexer2.nextToken();
      Token token1 = xPathLexer1.leftParen();
      xPathLexer2.mod();
      xPathLexer2.dots();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("`_>-fc");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer1.equals();
      xPathLexer1.mod();
      xPathLexer1.whitespace();
      Token token1 = xPathLexer1.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":5Eibh?6r??-Da");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      xPathLexer0.div();
      Token token1 = xPathLexer0.dollar();
      token1.toString();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.minus();
      xPathLexer0.nextToken();
      token1.toString();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer1.equals();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "G.6WA:kifFh(";
      XPathLexer xPathLexer0 = new XPathLexer("G.6WA:kifFh(");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("qQM}k-_~>CwXr");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer1.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s.Ij<2l!j");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.div();
      Token token1 = xPathLexer1.star();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L%eoexmh");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      assertEquals("%eoexmh", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.endPosition();
      xPathLexer1.relationalOperator();
      Token token2 = xPathLexer2.rightBracket();
      assertEquals(4, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.consume();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("TD{DU!4NgKpoRq");
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.not();
      String string0 = xPathLexer0.getXPath();
      assertEquals("TD{DU!4NgKpoRq", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("wH [%;^uwLZ*8T]!^p");
      xPathLexer1.and();
      xPathLexer1.or();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("wH", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L%eoexmh");
      Token token0 = xPathLexer0.at();
      assertEquals("L", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("%", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("o", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.pipe();
      assertEquals("e", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("xmh", token5.getTokenText());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "WaX.*<e+WfK";
      XPathLexer xPathLexer0 = new XPathLexer("WaX.*<e+WfK");
      XPathLexer xPathLexer1 = new XPathLexer("WaX.*<e+WfK");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.slashes();
      xPathLexer2.comma();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.not();
      xPathLexer0.dots();
      xPathLexer1.rightBracket();
      xPathLexer3.leftBracket();
      xPathLexer3.minus();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("{ r1!z");
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer1.nextToken();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      xPathLexer0.pipe();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.comma();
      xPathLexer0.isIdentifierStartChar('f');
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer1.setXPath("CXuo/T");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.or();
      xPathLexer1.number();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.leftBracket();
      xPathLexer1.rightParen();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("#p");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.dots();
      xPathLexer2.pipe();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.setXPath("TD{DU!4NgKpoRq");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.minus();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.getXPath();
      xPathLexer0.and();
      xPathLexer0.star();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.setXPath(")SIA$d%X*L@2$d9uc/`");
      Token token12 = xPathLexer0.whitespace();
      assertEquals((-2), token12.getTokenType());
      assertEquals("", token12.getTokenText());
      
      xPathLexer0.isIdentifierChar('!');
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token13 = xPathLexer0.not();
      assertEquals("S", token13.getTokenText());
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer0.nextToken();
      assertEquals((-1), token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":5Eibh?6r??-Da");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.operatorName();
      Token token0 = xPathLexer1.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "cyl`/v";
      XPathLexer xPathLexer0 = new XPathLexer("cyl`/v");
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.isIdentifierChar('T');
      xPathLexer0.doubleColon();
      xPathLexer0.consume((-36));
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer("jQ!<>/\"B9~&5z&e");
      xPathLexer2.rightBracket();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.rightBracket();
      xPathLexer3.pipe();
      xPathLexer2.nextToken();
      xPathLexer1.div();
      Token token0 = xPathLexer3.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OP{mQ(5 6?G=QWlyw%U");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("O", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("P", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("{", token2.getTokenText());
      
      xPathLexer0.setXPath(";|}''u/2{((M~)fTp[]");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(";|}''u/2{((M~)fTp[]");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.consume((-3040));
      Token token4 = xPathLexer3.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.slashes();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("|", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer2.slashes();
      assertEquals(";", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(";|}''u/2{((M~)fTp[]");
      xPathLexer4.getXPath();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer4.nextToken();
      assertEquals(";|}''u/2{((M~)fTp[]", token8.getTokenText());
      
      Token token9 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      Token token10 = xPathLexer3.not();
      assertEquals(23, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer5.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("[", token11.getTokenText());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*7.07*ocDXQoM/:$");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.star();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.dollar();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L%eoexmh");
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.consume();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("TD{DU!4NgKpoRq");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("Y");
      xPathLexer2.operatorName();
      xPathLexer1.div();
      xPathLexer2.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.identifierOrOperatorName();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.operatorName();
      xPathLexer0.at();
      XPathLexer xPathLexer5 = new XPathLexer();
      assertFalse(xPathLexer5.equals((Object)xPathLexer3));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L%eoexmh");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      xPathLexer0.nextToken();
      Token token1 = new Token((-1431), "cC!'{?Eq=U&/-&*3", 141, 141);
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setXPath("%V7t;JK7LV?O");
      xPathLexer1.operatorName();
      Token token0 = xPathLexer1.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("V7", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      Token token3 = xPathLexer1.slashes();
      assertEquals(";", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer1.pipe();
      assertEquals("J", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer1.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("7", token9.getTokenText());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer1.not();
      assertEquals(23, token10.getTokenType());
      assertEquals("L", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'~Bf8v{1A");
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("=+.O}!y:[mIJt");
      xPathLexer1.nextToken();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer1.operatorName();
      xPathLexer1.pipe();
      xPathLexer0.and();
      xPathLexer3.doubleColon();
      xPathLexer2.setXPath("");
      assertEquals("", xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token0 = xPathLexer0.dollar();
      assertEquals("5", token0.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.isIdentifierStartChar('T');
      Token token1 = xPathLexer0.nextToken();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("J", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("-\"", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals("m", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("1", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("ziHm", token6.getTokenText());
      
      xPathLexer0.isIdentifierStartChar('T');
      Token token7 = xPathLexer0.slashes();
      assertEquals("@/", token7.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("i", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("{ rz");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer3.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer("/4z5$M&=Hh##=f");
      xPathLexer2.slashes();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.leftParen();
      Token token2 = xPathLexer4.nextToken();
      assertEquals(11, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token3 = xPathLexer4.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("4", token3.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token4 = xPathLexer3.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.nextToken();
      Token token5 = xPathLexer5.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer3.getPreviousToken();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertNotNull(token6);
      
      xPathLexer2.operatorName();
      Token token7 = xPathLexer3.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer9.operatorName();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer10.getPreviousToken();
      xPathLexer0.getPreviousToken();
      Token token8 = xPathLexer5.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer3.notEquals();
      Token token9 = xPathLexer5.notEquals();
      assertEquals(22, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("!u2");
      Token token4 = xPathLexer2.nextToken();
      assertEquals("!", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.relationalOperator();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cyl`/v");
      Token token0 = xPathLexer0.not();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("cyl`/v");
      Token token1 = xPathLexer1.rightParen();
      assertEquals("c", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (23) (c)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("cyl`/v");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer1.div();
      Token token2 = xPathLexer3.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer2.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      xPathLexer2.colon();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals("yl", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token7 = xPathLexer4.dots();
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer(") (");
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token8 = xPathLexer8.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer5.operatorName();
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer8.operatorName();
      Token token9 = xPathLexer10.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer8.star();
      assertEquals(20, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*7.07*ocDXQoM/:$");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.colon();
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("%VH0tfuBGB>`%p]~");
      XPathLexer xPathLexer4 = new XPathLexer("p7$%:");
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      Token token3 = xPathLexer2.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer3.pipe();
      assertEquals("%", token4.getTokenText());
      
      Token token5 = xPathLexer4.rightParen();
      assertEquals("$", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(31, token6.getTokenType());
      assertEquals(".07", token6.getTokenText());
      
      xPathLexer5.operatorName();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token7 = xPathLexer7.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer5.operatorName();
      xPathLexer1.identifierOrOperatorName();
      Token token8 = xPathLexer4.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("%", token8.getTokenText());
      
      xPathLexer1.div();
      xPathLexer3.and();
      xPathLexer1.and();
      Token token9 = xPathLexer1.identifier();
      assertEquals(15, token9.getTokenType());
      
      boolean boolean0 = xPathLexer6.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer5.plus();
      xPathLexer6.minus();
      Token token10 = xPathLexer0.minus();
      assertEquals("*", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L%eoexmh");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("%", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("e", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("oexmh", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(G.6WA:kifFh(");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.dollar();
      token1.toString();
      xPathLexer0.operatorName();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      token1.toString();
      xPathLexer0.and();
      token0.toString();
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.colon();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("WaX*<e+WfK");
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      xPathLexer1.at();
      xPathLexer1.comma();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*7.07*ocDXQoM/:$");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer2.div();
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      token1.toString();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer3.whitespace();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.setXPath("TD{DU!4NgKpoRq");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("TD{DU!4NgKpoRq");
      token1.toString();
      xPathLexer1.operatorName();
      xPathLexer0.number();
      token1.toString();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.leftParen();
      boolean boolean0 = xPathLexer1.isIdentifierChar('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OP{mQ(e5 6G=QWlyw9GU");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.setXPath("OP{mQ(e5 6G=QWlyw9GU");
      xPathLexer0.plus();
      Token token2 = xPathLexer0.not();
      xPathLexer0.and();
      token0.toString();
      token2.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftParen();
      xPathLexer0.dots();
      xPathLexer1.rightBracket();
      xPathLexer2.setPreviousToken(token1);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.slashes();
      xPathLexer3.div();
      xPathLexer2.and();
      xPathLexer0.not();
      XPathLexer xPathLexer4 = new XPathLexer("[ (5) (O)");
      xPathLexer1.div();
      xPathLexer0.operatorName();
      xPathLexer2.or();
      xPathLexer4.minus();
      xPathLexer2.identifier();
      Token token3 = xPathLexer1.plus();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("E7[PH*d`G'");
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.equals();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      token1.toString();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      Token token2 = xPathLexer1.pipe();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*7.07*ocDXQoM/:$");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      token1.toString();
      xPathLexer0.equals();
      xPathLexer1.div();
      String string0 = token1.toString();
      assertEquals("[ (21) (7)", string0);
      
      Token token2 = xPathLexer0.nextToken();
      token2.toString();
      xPathLexer0.mod();
      String string1 = token2.toString();
      assertEquals("[ (30) (07)", string1);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("*", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("o", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OP{mQ(e5 6G=QWlywU");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer1.pipe();
      xPathLexer0.nextToken();
      xPathLexer1.leftBracket();
      xPathLexer0.comma();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("5$J-\"m1ziHm@/ib)=e");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("5", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("^8W==m=k<6dN2&*");
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals("^8W==m=k<6dN2&*", token3.getTokenText());
      
      xPathLexer1.operatorName();
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      int int0 = xPathLexer2.endPosition();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":5Eibh?6r??-Da");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer(":5Eibh?6r??-Da");
      xPathLexer1.leftParen();
      xPathLexer1.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer1.dollar();
      xPathLexer1.rightParen();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s..j<<2l!j");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("s", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(31, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(".", token2.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("`%.:b");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("`%.:b");
      xPathLexer2.getXPath();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("`%.:b");
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals("`%.:b", token8.getTokenText());
      
      Token token9 = xPathLexer2.comma();
      assertEquals("`", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifier();
      assertEquals(15, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'~Bf8v{1A");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("'~", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Bf8v", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("87.07*oc2D@XQoM8$");
      XPathLexer xPathLexer1 = new XPathLexer("87.07*oc2D@XQoM8$");
      XPathLexer xPathLexer2 = new XPathLexer("87.07*oc2D@XQoM8$");
      Token token0 = xPathLexer0.comma();
      xPathLexer1.at();
      xPathLexer2.slashes();
      token0.toString();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer("[ (32) (8)");
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer4 = new XPathLexer("[ (32) (8)");
      xPathLexer4.minus();
      XPathLexer xPathLexer5 = new XPathLexer(" ]K&@U1D?^Wq<K");
      xPathLexer1.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer("gMqe|T\"/mPQsf,I)'(");
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer6.minus();
      xPathLexer2.not();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer4.mod();
      xPathLexer3.rightParen();
      XPathLexer xPathLexer9 = new XPathLexer("gMqe|T\"/mPQsf,I)'(");
      xPathLexer6.and();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer9.nextToken();
      xPathLexer9.minus();
      XPathLexer xPathLexer11 = new XPathLexer("");
      xPathLexer8.leftBracket();
      XPathLexer xPathLexer12 = new XPathLexer();
      Token token1 = xPathLexer8.operatorName();
      assertNull(token1);
  }
}
