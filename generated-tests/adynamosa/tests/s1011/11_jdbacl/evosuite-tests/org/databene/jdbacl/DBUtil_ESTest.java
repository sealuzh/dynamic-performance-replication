/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 14:58:48 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.regex.PatternSyntaxException;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainerSupport;
import org.databene.jdbacl.model.TableHolder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.GDS;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBStatement;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.engine.SessionRemote;
import org.h2.expression.ParameterInterface;
import org.h2.jdbc.JdbcConnection;
import org.h2.tools.Csv;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.jdbc.jdbcResultSet;
import org.hsqldb.jdbcDriver;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.Driver;
import org.postgresql.ds.PGPooledConnection;
import org.postgresql.jdbc4.Jdbc4Connection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null.env.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "rt");
      try { 
        DBUtil.getMetaData((String) null, false, true, true, false, (String) null, true, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("----HCh:Ssz<*fZn Oi.env.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "----HCh:Ssz<*fZn Oi");
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("----HCh:Ssz<*fZn Oi", false, true, true, false, "W%wcjc{.(+d#Ucu8", false, false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 5
         // W%wcjc{.(+d#Ucu8
         //      ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBufferImp0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("org.databene.jdbacl.DBUtil", "Database query failed: ", "gV&/mr", ")nT$QW,.Q#,", "gjc", "CO");
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting Database query failed:  failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1256, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Object object0 = DBUtil.queryScalar("=l3", jdbcConnection0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[1] = 1250;
      intArray0[10] = 0;
      intArray0[5] = 1250;
      intArray0[7] = 1250;
      intArray0[8] = 1250;
      Result result0 = new Result(1250, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0;
      objectArray0[2] = (Object) 1250;
      objectArray0[3] = (Object) 1250;
      objectArray0[4] = (Object) "";
      objectArray0[3] = (Object) session0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.queryWithMetadata("", jdbcConnection0);
      InsertNode insertNode0 = new InsertNode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jdbcDriver jdbcDriver0 = new jdbcDriver();
      Integer integer0 = new Integer(1250);
      TableContainerSupport tableContainerSupport0 = new TableContainerSupport();
      insertNode0.disablePrivilegeCollection();
      DBUtil.dependencyOrderedTables(tableContainerSupport0);
      DBUtil.queryAndSimplify("", jdbcConnection0);
      // Undeclared exception!
      try { 
        DBUtil.countRows("*a%845tEI#R9OLXd", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Object[] objectArray0 = DBUtil.parseResultRow(simpleResultSet0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1248, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      ResultSet resultSet0 = DBUtil.executeQuery("OCTET_LENGTH", jdbcConnection0);
      Object[] objectArray1 = DBUtil.nextLine(resultSet0);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Statement statement0 = DBUtil.getStatement(simpleResultSet0);
      assertNull(statement0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1250, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      ResultSet resultSet0 = DBUtil.executeQuery((String) null, jdbcConnection0);
      Statement statement0 = DBUtil.getStatement(resultSet0);
      assertEquals(1, statement0.getResultSetHoldability());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      int int0 = DBUtil.getOpenConnectionCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      String string0 = DBUtil.format(simpleResultSet0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("pZ0-.env.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "or");
      boolean boolean0 = DBUtil.existsEnvironment("pZ0-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1210;
      intArray0[2] = 1210;
      intArray0[0] = 1210;
      intArray0[4] = 1210;
      intArray0[6] = 1210;
      intArray0[8] = 0;
      Result result0 = new Result(1210, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      result0.setStatementType(1210);
      Object object0 = new Object();
      Result result1 = Result.newRollbackToSavepointRequest("Mf#");
      result0.setMaxRows(3);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      Result.write(result1, rowOutputBinary0, rowOutputBinary0);
      result0.clear();
      DBUtil.query("2@Bhf", jdbcConnection0);
      Class<JdbcConnection> class0 = JdbcConnection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("2@Bhf", class0, (Connection) jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1248, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      result0.setStatementType((-944));
      int int0 = DBUtil.executeUpdate("XS", jdbcConnection0);
      assertEquals((-944), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--CaBy%{{yhzbNJY");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "S3#pw1RtqB[kV", false, (String[]) null);
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "S3#pw1RtqB[kV", false, stringArray0);
      boolean boolean0 = DBUtil.equivalent(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1248, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0;
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      long long0 = DBUtil.countRows("", jdbcConnection0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1248, intArray0, 1);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1248;
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      long long0 = DBUtil.countRows("/tiV$b7|", (Connection) proxy0);
      assertEquals(1248L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ErrorHandler errorHandler0 = new ErrorHandler("RyC");
      errorHandler0.setLoggingStackTrace(false);
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      Class<Object> class0 = Object.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("", (Connection) proxy0, false, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.runScript("L.{{c!b", (String) null, (Connection) null, false, (ErrorHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: L.{{c!b
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Level level0 = Level.error;
      ErrorHandler errorHandler0 = new ErrorHandler("No environment definition '", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("----~Z+i_A)w'JC", "l0H[{@Y", (Connection) null, true, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: ----~Z+i_A)w'JC
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.runScript("'3}0&3k!", "----COMMENT", (Connection) proxy0, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: '3}0&3k!
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("q", "l", '7', (Connection) jdbcConnection0, false, (ErrorHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: q
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("Only warnings can be wrapped.", "49kSBm<8", '7', (Connection) null, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: Only warnings can be wrapped.
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      Level level0 = Level.debug;
      ErrorHandler errorHandler0 = new ErrorHandler("[i<5UT&6=df{w", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("r)]8", "r)]8", '!', (Connection) proxy0, false, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: r)]8
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ErrorHandler errorHandler0 = new ErrorHandler("CURRENT TIMSTAMP");
      // Undeclared exception!
      try { 
        DBUtil.runScript("--preparing statement:", "--preparing statement:", 'Z', (Connection) null, true, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: --preparing statement:
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Level level0 = Level.info;
      ErrorHandler errorHandler0 = new ErrorHandler("C?P?0Gw*H3cg5:xf_})", level0);
      errorHandler0.setLoggingStackTrace(false);
      // Undeclared exception!
      try { 
        DBUtil.runScript("1BGe2?", '>', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      Level level0 = Level.fatal;
      ErrorHandler errorHandler0 = new ErrorHandler("CP?0Gw*H3cg5:xf_})", level0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("CP?0Gw*H3cg5:xf_})", '>', (Connection) proxy0, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorHandler errorHandler0 = new ErrorHandler("V!Ge\"");
      // Undeclared exception!
      try { 
        DBUtil.runScript("V!Ge\"", '9', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ErrorHandler errorHandler0 = new ErrorHandler("V!Ge\"");
      // Undeclared exception!
      try { 
        DBUtil.runScript("V!Ge\"", 'A', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Level level0 = Level.error;
      ErrorHandler errorHandler0 = new ErrorHandler("", level0);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("", 'x', (Connection) null, false, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("\"j", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      Class<Driver> class0 = Driver.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("|;g6ZH!`qBahguu", class0, (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<ParameterInterface> class0 = ParameterInterface.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("gD}r; ", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryScalar("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      // Undeclared exception!
      try { 
        DBUtil.queryLong("42", (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryLong("--org.apache.derby.impl.sql.GenericParameterValueSet", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryLong("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler((Statement) null, true);
      Proxy proxy1 = (Proxy)DBUtil.createLoggingResultSet((ResultSet) null, (Statement) proxy0);
      assertNotNull(proxy1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      // Undeclared exception!
      try { 
        DBUtil.query("", (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection0, (String) null, false, (-113881431), (-113881431), (-113881431));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000002
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "", false, (-651), (-651), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "43Y01.U", "locktype", true, false, false, true, (String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "--Only one blob output stream open at a time!", "2@Bhf", true, true, false, false, "", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) null, "org.firebirdsql.jdbc.FBDriver", (String) null, true, true, false, false, " N**", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 3
         //  N**
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "oldDefaultUUID", "", false, false, false, true, "8", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) null, (String) null, ")_1sE>Ar3>pAFzU<}<v", true, true, false, true, ")_1sE>Ar3>pAFzU<}<v", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')'
         // )_1sE>Ar3>pAFzU<}<v
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "", "org.hsqldb.lib.StringUtil", false, false, false, false, "oldDefaultUUID", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("^f^g;~F", true, true, true, true, "KA;B8]&8uLV|AqH", true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '^f^g;~F.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("", false, false, true, false, "", true, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getConnectData((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = DBUtil.existsEnvironment((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = DBUtil.existsEnvironment("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.executeQuery("RC.RDB$RELATION_NAME", (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeQuery("H,EGprf1b`", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeQuery("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = DBUtil.escape("T");
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = DBUtil.escape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--CaBy%{{yhzbNJY");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "S3#pw1RtqB[kV", false, (String[]) null);
      boolean boolean0 = DBUtil.equivalent(dBPrimaryKeyConstraint0, dBPrimaryKeyConstraint0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("fl");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6#hMuz3T", dBSchema0);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Using driver ", true, stringArray0);
      boolean boolean0 = DBUtil.equivalent(dBPrimaryKeyConstraint0, dBPrimaryKeyConstraint0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      Statement statement0 = jdbcConnection0.createStatement();
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler(statement0, false);
      assertNotNull(proxy0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Statement statement0 = jdbcConnection0.createStatement();
      ErrorMessages errorMessages0 = new ErrorMessages();
      Proxy proxy0 = (Proxy)DBUtil.createLoggingResultSet(errorMessages0, statement0);
      assertNotNull(proxy0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.countRows((String) null, jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XH1i");
      String[] stringArray0 = new String[14];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Error getting statement from result set", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBForeignKeyConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'XH1i'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.connect("W9K!q]VE|:ZEA&4I/Ic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'W9K!q]VE|:ZEA&4I/Ic.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        DBUtil.connect("*X~i07 p$L)]P|L]A*", "*X~i07 p$L)]P|L]A*", "yi", "yi", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting *X~i07 p$L)]P|L]A* failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        DBUtil.connect("", "", "", "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting  failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, true);
      DBUtil.close((Connection) proxy0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DBUtil.checkReadOnly((String) null, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = DBUtil.available("RoutinePrivilege", "RoutinePrivilege", "RoutinePrivilege", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = DBUtil.available("Ci9X ?%[!nZ!>0_", "", "", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = DBUtil.available("", "", "", "Ci9X ?%[!nZ!>0_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = DBUtil.available((String) null, (String) null, (String) null, "PKTABLE_CAT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, "0", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Level level0 = Level.trace;
      ErrorHandler errorHandler0 = new ErrorHandler("--.e", level0);
      try { 
        DBUtil.runScript("", "", (Connection) jdbcConnection0, false, errorHandler0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, (String) null, 'v', (Connection) jdbcConnection0, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      try { 
        DBUtil.runScript("", "", '\"', (Connection) null, false, errorHandler0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, 'P', (Connection) null, true, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryString((PreparedStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      FBCallableStatement fBCallableStatement0 = new FBCallableStatement(gDSHelper0, "--SIeXsion", 16384, 16384, 16384, internalTransactionCoordinator_MetaDataTransactionCoordinator0, internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      // Undeclared exception!
      try { 
        DBUtil.queryString(fBCallableStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.GDSHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1248, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1248;
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<Driver> class0 = Driver.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray((String) null, class0, (Connection) jdbcConnection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot convert java.lang.Integer to org.postgresql.Driver
         //
         verifyException("org.databene.commons.converter.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Jdbc4Connection> class0 = Jdbc4Connection.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        DBUtil.queryScalar(stringArray0[1], (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "E}Rs\fvx", false, 0, 1007, 1876);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "wKT A\"|xaVp", true, 813, 0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: wKT A\"|xaVp
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) proxy0, "", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.parseResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.parseResultRow(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.parseResultRow((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.parseAndSimplifyResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.parseAndSimplifyResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.nextLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        DBUtil.getStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) proxy0, "1mW;", "1mW;", false, true, false, true, "1mW;", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("----HCh:Ssz<*fZn Oi.env.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "----HCh:Ssz<*fZn Oi");
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("----HCh:Ssz<*fZn Oi", false, false, true, false, "W%wcjc{.(+d#Ucu8", false, false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 5
         // W%wcjc{.(+d#Ucu8
         //      ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.format(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.format((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.dependencyOrderedTables((TableHolder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.currentLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.connect((JDBCConnectData) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      FBStatement fBStatement0 = new FBStatement(gDSHelper0, 100, 0, 100, internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      Proxy proxy0 = (Proxy)DBUtil.createLoggingResultSet((ResultSet) null, fBStatement0);
      // Undeclared exception!
      try { 
        DBUtil.close((ResultSet) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 2 result set(s), 2 statement(s)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DBUtil.checkReadOnly("", false);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1248, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = DBUtil.executeUpdate("XS", jdbcConnection0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("XSLA5.D", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[2] = 1256;
      intArray0[3] = 1256;
      intArray0[4] = 1256;
      intArray0[5] = 1256;
      intArray0[7] = 1256;
      intArray0[8] = 1256;
      Result result0 = new Result(1256, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0, (Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0;
      objectArray0[2] = (Object) 1256;
      objectArray0[4] = (Object) "";
      objectArray0[3] = (Object) session0;
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.queryWithMetadata("", jdbcConnection0);
      InsertNode insertNode0 = new InsertNode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Result.newRollbackToSavepointRequest("!1");
      Recover recover0 = new Recover();
      ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.query((String) null, jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[9];
      Result result0 = new Result(1248, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.queryScalar("sun.arch.data.model", jdbcConnection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a row.
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.parseResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      List<Object[]> list0 = DBUtil.parseResultSet(simpleResultSet0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DBUtil.close((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DBUtil.close((Statement) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      try { 
        DBUtil.prepareStatement((Connection) proxy0, "SY", false, 1256, 199, 565);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000003
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        DBUtil.connect((String) null, (String) null, (String) null, "F", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("--IL:*z8:r1}I\"g Zme", (String) null, "NF7tc3l&BMN}=L-Z#a", "--IL:*z8:r1}I\"g Zme", "PREPARE TRANSACTION '", "NF7tc3l&BMN}=L-Z#a");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("xF1%<,Si:H8:SW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'xF1%<,Si:H8:SW.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("BIN$.env.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("BIN$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error reading environment data for 'BIN$'
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = DBUtil.getOpenConnectionCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = DBUtil.getOpenPreparedStatementCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      DBUtil.existsEnvironment("org.apache.derby.diag.ContainedRoles");
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      DBUtil.available("", "##aggregate expression", (String) null, "##aggregate expression");
      String string0 = "getCharacterStream(long, long)";
      SessionRemote sessionRemote0 = new SessionRemote();
      JdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new JdbcConnection(sessionRemote0, "getCharacterStream(long, long)", "getCharacterStream(long, long)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.engine.SessionRemote", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = DBUtil.getOpenStatementCount();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/databene/null.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "7iM*1,PL3aJc1\"");
      try { 
        DBUtil.getMetaData((String) null, true, true, false, false, "--setTimestamp(String,Timestamp,Calendar)", false, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/databene/null.env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.firebirdsql.jdbc.FBDriver");
      try { 
        DBUtil.getMetaData((String) null, true, true, true, false, "org.firebirdsql.jdbc.FBDriver", false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--=xx_", (DBSchema) null);
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ik|", true, stringArray0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBUniqueConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table '--=xx_'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sessionSetId", (DBSchema) null);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "{,UKcH7Xx|x@D?xf", true, stringArray0);
      boolean boolean0 = DBUtil.containsMandatoryColumn(dBUniqueConstraint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      DBUtil.assertAllDbResourcesClosed(false);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(false);
      DBUtil.getOpenStatementCount();
      try { 
        DBUtil.connect("IL", "IL", "0/", "--V!Ge\"", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting IL failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Connection connection0 = null;
      DBUtil.close((Connection) null);
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 2 result set(s), 2 statement(s)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DBUtil.checkReadOnly("select count(*) from ", true);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly("--V!Ge\"", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: --V!Ge\"
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("--", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[9];
      Result result0 = new Result(1248, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow(", ", jdbcConnection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Database query did not return a result: , 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1248, intArray0, 1);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection(jdbcConnection0, false);
      Object[] objectArray1 = DBUtil.querySingleRow("", (Connection) proxy0);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify((String) null, jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1248, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<Driver> class0 = Driver.class;
      Driver[] driverArray0 = DBUtil.queryScalarArray((String) null, class0, (Connection) jdbcConnection0);
      assertEquals(1, driverArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = DBUtil.executeUpdate("", (Connection) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = DBUtil.executeUpdate((String) null, (Connection) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Result result0 = new Result((Throwable) null, "CONSTRAINTS");
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<PGPooledConnection> class0 = PGPooledConnection.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("This statement is already closed.", (Connection) jdbcConnection0, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[9];
      Result result0 = new Result(1248, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("b;", 'n', (Connection) jdbcConnection0, false, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("COMMENT", 'n', (Connection) null, true, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<PGPooledConnection> class0 = PGPooledConnection.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("V!", '!', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<jdbcResultSet> class0 = jdbcResultSet.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("\nSession ", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ErrorHandler errorHandler0 = new ErrorHandler("8\nSession ");
      // Undeclared exception!
      try { 
        DBUtil.runScript("8\nSession ", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Level level0 = Level.trace;
      ErrorHandler errorHandler0 = new ErrorHandler("^gvv_l_K@@", level0);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("--fl", (Connection) null, true, errorHandler0);
      assertNotNull(dBExecutionResult0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[15];
      Result result0 = new Result(1250, intArray0, (-944));
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      Object[] objectArray0 = new Object[7];
      result0.setParameterData(objectArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      InsertNode insertNode0 = new InsertNode();
      result0.add(insertNode0.indicesToMaintain);
      // Undeclared exception!
      try { 
        DBUtil.countRows("", jdbcConnection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected exactly one row, found more.
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Result result0 = Result.newRollbackToSavepointRequest("--");
      Object[] objectArray0 = new Object[0];
      result0.add(objectArray0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(result0).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.queryScalar("sun.arch.data.model", jdbcConnection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Database query failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      jdbcClob jdbcClob0 = new jdbcClob(" connection(s)");
      Reader reader0 = jdbcClob0.getCharacterStream();
      String[] stringArray0 = new String[4];
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      String string0 = DBUtil.format(resultSet0);
      assertTrue(resultSet0.wasNull());
      assertEquals("C1, C2, C3, C4\nconnection(s), , , \n", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Object[] objectArray0 = DBUtil.nextLine(simpleResultSet0);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.nextLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("END");
      Reader reader0 = jdbcClob0.getCharacterStream();
      Csv csv0 = Csv.getInstance();
      String[] stringArray0 = new String[1];
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      String string0 = DBUtil.format(resultSet0);
      assertEquals("C1\nEND", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      jdbcClob jdbcClob0 = new jdbcClob("--No JDBC driver class name provided");
      Reader reader0 = jdbcClob0.getCharacterStream();
      String[] stringArray0 = new String[4];
      ResultSet resultSet0 = csv0.read(reader0, stringArray0);
      DBUtil.parseAndSimplifyResultSet(resultSet0);
      assertTrue(resultSet0.wasNull());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Object object0 = DBUtil.parseAndSimplifyResultSet(simpleResultSet0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) proxy0, "_r:mhEo>.6qp{(", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      try { 
        DBUtil.connect("b;", "org.firebirdsql.jdbc.FBDriver", "getHoldability()", (String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting b; failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      try { 
        DBUtil.connect("@`", "org.firebirdsql.jdbc.FBDriver", "@`", "11Ag??^hd;0x=S'V|e", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting @` failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("", "Error closing connection", "", "42602", "42602", "s\"a0$");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      // Undeclared exception!
      try { 
        DBUtil.connect("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = DBUtil.getConnectData("string://");
      assertNotNull(jDBCConnectData0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.runScript("Y0&(", (Connection) null, false, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DBUtil.resetMonitors();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.createLoggingResultSet((ResultSet) null, (Statement) null);
      assertNotNull(proxy0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.connect((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Object[] objectArray0 = DBUtil.currentLine(simpleResultSet0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.countRows("J /+", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryLong((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "----M 3x", "----M 3x", true, true, true, true, "----M 3x", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }
}
