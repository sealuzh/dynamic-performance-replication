/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 09:22:58 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.List;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("4R)");
      buffer1.size = (long) 742;
      buffer0.writeShortLe(2145340450);
      assertEquals(744L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      long long0 = buffer_UnsafeCursor0.buffer.writeAll(realBufferedSink0.buffer);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("4R)");
      buffer1.size = (long) 742;
      buffer0.snapshot(742);
      assertEquals(739L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeLong(1000001L);
      buffer_UnsafeCursor0.buffer.snapshot();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeByte(1233);
      Buffer buffer1 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[24];
      buffer1.write(byteArray0);
      short short0 = buffer1.readShortLe();
      assertEquals(23L, buffer1.size());
      assertEquals((short)209, short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 54, 54);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 54);
      Buffer buffer1 = buffer0.writeShortLe(54);
      buffer1.readFrom((InputStream) bufferedInputStream0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Pipe pipe0 = new Pipe(20L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      long long0 = realBufferedSource0.buffer.read(realBufferedSource0.buffer, 20L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.write(byteString0);
      buffer0.emitCompleteSegments();
      assertEquals(20L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-517L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      
      byte[] byteArray0 = buffer_UnsafeCursor0.buffer.readByteArray();
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeByte(54);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(1135L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      try { 
        buffer0.write((Source) hashingSource0, 1135L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Segment segment0 = buffer0.writableSegment(3785);
      assertNotNull(segment0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8(8L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=8
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeLong(1000001L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFully(buffer_UnsafeCursor0.buffer, 100000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)14, 3123L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.getByte((-3249L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-3249 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Segment segment0 = new Segment((byte[]) null, (-1), 1384, true, true);
      buffer_UnsafeCursor0.buffer.head = segment0;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeShortLe(248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(1000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=999999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1022L);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, (-72057594037927936L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-72057594037927936
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(71776119061217280L);
      Buffer buffer0 = pipe0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        buffer0.readFully(realBufferedSource0.buffer, 71776119061217280L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteArray(958L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=958
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.read(byteArray0, (int) (byte) (-103), (int) (byte) (-103));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=-103 byteCount=-103
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.getByte(1000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1000000 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("4R)");
      buffer1.size = (long) 742;
      // Undeclared exception!
      try { 
        buffer1.clear();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.snapshot();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      long long0 = buffer0.indexOfElement(byteString0, 2346L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)28, (long) (byte)28, 3283L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Pipe pipe0 = new Pipe(28L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeLongLe(24L);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        buffer0.write(realBufferedSource0.buffer, 1787L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1787
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte) (-47), (int) (byte) (-47));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-47 byteCount=-47
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip((-122L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[2];
      try { 
        realBufferedSource0.buffer.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Pipe pipe0 = new Pipe(3005L);
      Buffer buffer0 = pipe0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3029);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) byteArrayOutputStream0, 3L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=3
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo(buffer_UnsafeCursor0.buffer, (-1L), (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("PeE1MJJOP),r\"$9-");
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) mockPrintStream0, (long) (-1), 32L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=32
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Pipe pipe0 = new Pipe(5L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(5L);
      long long0 = buffer_UnsafeCursor0.resizeBuffer(5L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(5L, long0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer(4278190080L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(10L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      buffer_UnsafeCursor1.buffer.writeLong(4L);
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals(8, buffer_UnsafeCursor1.end);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeLong(4L);
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = buffer_UnsafeCursor0.seek((-1L));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), int0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(5L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 280375465082880L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(5L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=280375465082880 > size=5
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.offset = (-677L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-677 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Pipe pipe0 = new Pipe(1101L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(1101L);
      buffer0.toString();
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer.clone();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.buffer.hashCode();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Pipe pipe0 = new Pipe(1101L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(1101L);
      buffer0.hashCode();
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.buffer.equals(buffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      boolean boolean0 = buffer0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Pipe pipe0 = new Pipe(492L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLong(239L);
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.hmacSha256(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      List<Integer> list0 = buffer0.segmentSizes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(82);
      buffer1.segmentSizes();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("HmacSHA512", charset0);
      boolean boolean0 = buffer0.rangeEquals(65280L, byteString0, 121, (-2185));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      boolean boolean0 = buffer0.rangeEquals(195L, byteString0, 48, 7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = buffer0.rangeEquals(100L, byteString0, (-2458), (-2458));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      boolean boolean0 = buffer0.rangeEquals((long) (byte) (-116), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(492L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong(239L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-101);
      ByteString byteString0 = ByteString.of(byteArray0);
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2915);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      buffer0.write(byteString0);
      long long0 = buffer0.indexOfElement(byteString0, 13L);
      assertFalse(buffer0.exhausted());
      assertEquals(13L, long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Pipe pipe0 = new Pipe(20L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.buffer.writeShort(3152);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(57343);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      long long0 = realBufferedSource0.buffer.indexOfElement(byteString0, (long) 57343);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong((-187L));
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (long) (byte) (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.writeLongLe(2L);
      Buffer buffer2 = (Buffer)buffer1.write((Source) buffer0, (-1345L));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      buffer2.indexOf(byteString0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeLongLe(2L);
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      long long0 = buffer1.indexOf(byteString0);
      assertEquals(1L, long0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeByte(1233);
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink0.buffer.indexOf(byteString0, 1594L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(pipe_PipeSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(7, true);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString0, (-922337203685477580L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)79, 2147483647L, 690L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=2147483647 toIndex=690
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Pipe pipe0 = new Pipe(12L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-9), (long) (byte) (-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-9 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2915);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      buffer0.write(byteString0);
      realBufferedSource0.buffer.write((Source) buffer0, 13L);
      assertFalse(buffer0.exhausted());
      assertEquals(2902L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 838L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(20L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 44L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-2398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(6L);
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer1, 6L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)53);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong((byte)113);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      buffer1.sha256();
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer.writeDecimalLong(280375465082880L);
      assertEquals(15L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong((-1L));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(1550L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(1550L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(4L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(4, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(858L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(1174L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, 102, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("7;pQ0|l$oiUI5*i 3", charset0);
      assertEquals(17L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 1073741824, 1073741824, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1073741824 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Pipe pipe0 = new Pipe(2254L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString("X 'Rg", 3806, 438, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 438 < 3806
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (-1), (-1066), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2145340450);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7fdf4c22
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(2591);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(79);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1912);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8("byteCount < 0: ", 40, 2048);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2048 > 15
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("Ffr5BC (\"Q=", 2413, (-458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -458 < 2413
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8("a:v|M7m", (-4826), (-4826));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -4826
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 1717, 1717);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      Buffer buffer2 = buffer1.clone();
      buffer2.writeByte((-1));
      assertEquals(20L, buffer0.size());
      assertEquals(21L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(56);
      assertEquals(2L, buffer0.size());
      
      buffer1.clear();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(28L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[3];
      Buffer buffer1 = realBufferedSink0.buffer.writeLongLe(24L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      int int0 = realBufferedSink0.buffer.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Pipe pipe0 = new Pipe(629L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      try { 
        realBufferedSource0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong((-187L));
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-1688));
      try { 
        buffer1.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=fffff968\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict((long) (byte)11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-1998L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1998
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(12L);
      assertEquals(2L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertEquals("12", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount < 0: ");
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(8L, charset0);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(1660L);
      buffer0.readUtf8();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeShort((-367));
      // Undeclared exception!
      try { 
        buffer1.readAll(realBufferedSource0.buffer);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      long long0 = buffer0.readAll(realBufferedSource0.buffer);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[4];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer_UnsafeCursor0.buffer.selectPrefix(options0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), int0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(5L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(5L);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer_UnsafeCursor0.buffer.select(options0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Pipe pipe0 = new Pipe(2446L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.buffer.writeIntLe(76);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x4c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(54);
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertFalse(buffer0.exhausted());
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(82);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x52
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(720L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(7L);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeUtf8("okio.ForwardingSink");
      long long0 = buffer_UnsafeCursor0.buffer.readLong();
      assertEquals(11L, buffer0.size());
      assertEquals(8028626686956695410L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLong(1000001L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer_UnsafeCursor0.buffer.readLong();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(1000001L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe(1000000L);
      int int0 = buffer1.readInt();
      assertEquals(1078071040, int0);
      
      buffer0.indexOf((byte) (-118), 8L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeIntLe((-5503));
      buffer1.readShort();
      assertFalse(buffer0.exhausted());
      
      short short0 = buffer0.readShort();
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(1660L);
      short short0 = buffer0.readShort();
      assertEquals(6L, buffer0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.size = 912L;
      Buffer buffer1 = buffer0.writeShort(2348);
      try { 
        buffer1.readUtf8Line(10L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(gzipSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-187L));
      byte byte0 = buffer1.readByte();
      assertEquals(7L, buffer0.size());
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)120);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Pipe pipe0 = new Pipe(55L);
      Buffer buffer0 = pipe0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, (-59L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -59
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLong(1660L);
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=8 content=000000000000067c\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Pipe pipe0 = new Pipe(1213L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo((Buffer) null, 1367L, (-790L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, 17L, 4278190080L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request((-3249L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(3308L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.require(1000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-874L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      buffer0.writeIntLe(90);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.request(90);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Pipe pipe0 = new Pipe(62L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 54, 54);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 54);
      Buffer buffer1 = buffer0.readFrom((InputStream) bufferedInputStream0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1811);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer.buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer_UnsafeCursor1.buffer.hmacSha1(byteString0);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Pipe pipe0 = new Pipe(720L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.flush();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte) (-9));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      long long0 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString(".outputStream()", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Pipe pipe0 = new Pipe(1550L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeLongLe((-1L));
      boolean boolean0 = buffer0.equals(realBufferedSink0.buffer);
      assertFalse(boolean0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer_UnsafeCursor1.buffer.hmacSha512(byteString0);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer1 = buffer0.writeTo(outputStream0);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(56);
      int int0 = buffer1.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(56, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Pipe pipe0 = new Pipe(492L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.rangeEquals(3097L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByteString(16711680L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=16711680
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8((-7L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      gzipSink0.close();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("sZ{q@7kR");
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      assertSame(buffer0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      buffer_UnsafeCursor0.resizeBuffer(4278190080L);
  }
}
